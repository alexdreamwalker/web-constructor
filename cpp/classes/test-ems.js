// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module.exports = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math.abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math.min(Math.floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0
}
Module['stringToUTF32'] = stringToUTF32;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i)
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 14384;
var _stdout;
var _stdout = _stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin = _stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } });
var ___fsmu8;
var ___dso_handle;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,208,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,224,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,208,186,208,176,209,128,208,189,208,184,208,183,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,58,32,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,37,112,0,0,0,0,0,0,208,187,208,176,208,188,208,181,208,187,208,184,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,67,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,37,46,48,76,102,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,84,104,117,0,0,0,0,0,37,76,102,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,72,101,108,108,111,32,87,111,114,108,100,33,0,0,0,0,32,61,62,32,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,232,32,0,0,70,0,0,0,62,1,0,0,136,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,32,0,0,16,2,0,0,164,1,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33,0,0,190,0,0,0,240,2,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,33,0,0,252,0,0,0,18,0,0,0,86,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,33,0,0,252,0,0,0,40,0,0,0,86,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,33,0,0,172,1,0,0,222,0,0,0,124,0,0,0,214,1,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,33,0,0,226,2,0,0,224,1,0,0,124,0,0,0,190,2,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,33,0,0,162,1,0,0,228,1,0,0,124,0,0,0,216,1,0,0,212,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,33,0,0,232,2,0,0,112,1,0,0,124,0,0,0,200,1,0,0,28,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,34,0,0,220,2,0,0,248,0,0,0,124,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,34,0,0,160,1,0,0,46,1,0,0,124,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,34,0,0,92,0,0,0,138,1,0,0,124,0,0,0,134,2,0,0,22,0,0,0,230,1,0,0,30,0,0,0,202,0,0,0,136,2,0,0,228,0,0,0,248,255,255,255,128,34,0,0,120,0,0,0,50,0,0,0,182,0,0,0,80,0,0,0,10,0,0,0,166,0,0,0,162,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,34,0,0,204,2,0,0,146,2,0,0,124,0,0,0,116,0,0,0,134,0,0,0,164,2,0,0,124,1,0,0,164,0,0,0,16,0,0,0,110,2,0,0,248,255,255,255,168,34,0,0,98,1,0,0,62,2,0,0,112,2,0,0,154,2,0,0,26,2,0,0,242,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,34,0,0,212,0,0,0,236,1,0,0,124,0,0,0,8,1,0,0,226,0,0,0,122,0,0,0,102,1,0,0,184,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,34,0,0,158,0,0,0,176,0,0,0,124,0,0,0,236,0,0,0,222,1,0,0,160,0,0,0,208,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,34,0,0,208,2,0,0,2,0,0,0,124,0,0,0,134,1,0,0,222,2,0,0,44,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,35,0,0,118,0,0,0,106,2,0,0,124,0,0,0,144,2,0,0,210,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,35,0,0,124,2,0,0,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,35,0,0,66,0,0,0,110,1,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,35,0,0,14,0,0,0,178,1,0,0,124,0,0,0,106,0,0,0,90,0,0,0,84,0,0,0,88,0,0,0,82,0,0,0,100,0,0,0,98,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,35,0,0,4,1,0,0,38,0,0,0,124,0,0,0,10,2,0,0,14,2,0,0,2,2,0,0,12,2,0,0,0,2,0,0,6,2,0,0,4,2,0,0,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,35,0,0,94,0,0,0,52,0,0,0,124,0,0,0,72,2,0,0,70,2,0,0,60,2,0,0,64,2,0,0,220,1,0,0,68,2,0,0,58,2,0,0,78,2,0,0,76,2,0,0,74,2,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,35,0,0,138,0,0,0,4,0,0,0,124,0,0,0,200,2,0,0,188,2,0,0,182,2,0,0,184,2,0,0,160,2,0,0,186,2,0,0,180,2,0,0,168,1,0,0,194,2,0,0,192,2,0,0,66,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,35,0,0,200,0,0,0,244,0,0,0,124,0,0,0,82,1,0,0,254,1,0,0,50,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,35,0,0,64,0,0,0,186,1,0,0,124,0,0,0,248,1,0,0,98,2,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,24,0,0,0,218,1,0,0,124,0,0,0,78,0,0,0,210,1,0,0,204,1,0,0,132,2,0,0,48,2,0,0,122,2,0,0,102,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,36,0,0,194,1,0,0,94,1,0,0,124,0,0,0,168,2,0,0,224,2,0,0,20,2,0,0,16,1,0,0,48,0,0,0,24,2,0,0,8,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,36,0,0,194,1,0,0,42,0,0,0,124,0,0,0,250,0,0,0,114,0,0,0,232,0,0,0,42,2,0,0,58,1,0,0,154,1,0,0,198,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,36,0,0,194,1,0,0,24,1,0,0,124,0,0,0,2,1,0,0,180,1,0,0,96,2,0,0,156,0,0,0,126,1,0,0,108,1,0,0,230,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,36,0,0,194,1,0,0,76,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,36,0,0,148,0,0,0,146,1,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,36,0,0,194,1,0,0,216,0,0,0,124,0,0,0,116,1,0,0,188,0,0,0,74,1,0,0,216,2,0,0,192,0,0,0,30,2,0,0,240,1,0,0,60,0,0,0,126,0,0,0,116,2,0,0,34,1,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,36,0,0,238,2,0,0,86,0,0,0,124,0,0,0,152,0,0,0,56,0,0,0,88,1,0,0,108,2,0,0,144,0,0,0,92,1,0,0,166,1,0,0,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,36,0,0,180,0,0,0,138,2,0,0,150,1,0,0,38,2,0,0,66,1,0,0,82,2,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,0,0,194,1,0,0,224,0,0,0,124,0,0,0,2,1,0,0,180,1,0,0,96,2,0,0,156,0,0,0,126,1,0,0,108,1,0,0,230,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,36,0,0,194,1,0,0,196,2,0,0,124,0,0,0,2,1,0,0,180,1,0,0,96,2,0,0,156,0,0,0,126,1,0,0,108,1,0,0,230,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,37,0,0,78,1,0,0,170,2,0,0,196,0,0,0,132,1,0,0,254,0,0,0,36,2,0,0,242,1,0,0,52,2,0,0,100,2,0,0,150,0,0,0,140,0,0,0,132,0,0,0,234,2,0,0,232,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,37,0,0,20,0,0,0,64,1,0,0,238,1,0,0,156,2,0,0,152,2,0,0,250,1,0,0,10,1,0,0,226,1,0,0,84,1,0,0,34,0,0,0,62,0,0,0,172,2,0,0,70,1,0,0,150,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,37,0,0,14,1,0,0,176,2,0,0,234,1,0,0,38,2,0,0,66,1,0,0,82,2,0,0,234,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,64,37,0,0,112,0,0,0,92,2,0,0,252,255,255,255,252,255,255,255,64,37,0,0,120,1,0,0,76,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,88,37,0,0,126,2,0,0,174,2,0,0,252,255,255,255,252,255,255,255,88,37,0,0,44,1,0,0,32,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,112,37,0,0,230,0,0,0,242,2,0,0,248,255,255,255,248,255,255,255,112,37,0,0,196,1,0,0,166,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,136,37,0,0,42,1,0,0,56,2,0,0,248,255,255,255,248,255,255,255,136,37,0,0,104,1,0,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,37,0,0,46,2,0,0,198,1,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,37,0,0,210,2,0,0,202,1,0,0,36,0,0,0,132,1,0,0,254,0,0,0,36,2,0,0,38,1,0,0,52,2,0,0,100,2,0,0,150,0,0,0,140,0,0,0,132,0,0,0,234,2,0,0,178,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,37,0,0,140,1,0,0,192,1,0,0,52,1,0,0,156,2,0,0,152,2,0,0,250,1,0,0,244,1,0,0,226,1,0,0,84,1,0,0,34,0,0,0,62,0,0,0,172,2,0,0,70,1,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,38,0,0,140,2,0,0,118,1,0,0,124,0,0,0,96,1,0,0,118,2,0,0,6,1,0,0,218,2,0,0,58,0,0,0,26,1,0,0,22,1,0,0,214,0,0,0,90,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,38,0,0,40,1,0,0,146,0,0,0,124,0,0,0,94,2,0,0,12,0,0,0,50,2,0,0,142,2,0,0,158,2,0,0,238,0,0,0,104,2,0,0,188,1,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,38,0,0,148,2,0,0,60,1,0,0,124,0,0,0,102,0,0,0,54,1,0,0,72,0,0,0,142,1,0,0,228,2,0,0,190,1,0,0,22,2,0,0,212,1,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,38,0,0,208,0,0,0,176,1,0,0,124,0,0,0,54,2,0,0,80,2,0,0,18,1,0,0,114,2,0,0,246,0,0,0,198,0,0,0,152,1,0,0,90,2,0,0,84,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,38,0,0,234,0,0,0,184,0,0,0,34,2,0,0,132,1,0,0,254,0,0,0,36,2,0,0,242,1,0,0,52,2,0,0,100,2,0,0,106,1,0,0,206,1,0,0,170,0,0,0,234,2,0,0,232,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,38,0,0,28,0,0,0,128,2,0,0,252,1,0,0,156,2,0,0,152,2,0,0,250,1,0,0,10,1,0,0,226,1,0,0,84,1,0,0,36,1,0,0,130,0,0,0,32,0,0,0,70,1,0,0,150,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,38,0,0,214,2,0,0,18,2,0,0,162,0,0,0,130,1,0,0,204,0,0,0,68,0,0,0,120,2,0,0,28,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,39,0,0,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,39,0,0,48,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,39,0,0,234,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,39,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,39,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,39,0,0,234,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,39,0,0,234,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,56,83,117,110,98,108,105,110,100,0,0,0,0,0,0,0,55,76,97,109,101,108,108,97,0,0,0,0,0,0,0,0,55,67,111,114,110,105,99,101,0,0,0,0,0,0,0,0,53,76,97,121,101,114,0,0,49,54,86,101,114,116,105,99,97,108,83,117,110,98,108,105,110,100,0,0,0,0,0,0,49,51,86,101,114,116,105,99,97,108,76,97,121,101,114,0,49,51,67,111,109,112,108,101,99,116,97,116,105,111,110,0,49,50,67,111,110,115,116,114,117,99,116,105,111,110,0,0,0,0,0,0,176,20,0,0,0,0,0,0,192,20,0,0,0,0,0,0,208,20,0,0,224,32,0,0,0,0,0,0,0,0,0,0,224,20,0,0,224,32,0,0,0,0,0,0,0,0,0,0,240,20,0,0,224,32,0,0,0,0,0,0,0,0,0,0,8,21,0,0,40,33,0,0,0,0,0,0,0,0,0,0,32,21,0,0,224,32,0,0,0,0,0,0,0,0,0,0,48,21,0,0,200,19,0,0,72,21,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,232,37,0,0,0,0,0,0,200,19,0,0,144,21,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,240,37,0,0,0,0,0,0,200,19,0,0,216,21,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,248,37,0,0,0,0,0,0,200,19,0,0,32,22,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,104,22,0,0,48,35,0,0,0,0,0,0,0,0,0,0,152,22,0,0,48,35,0,0,0,0,0,0,200,19,0,0,200,22,0,0,0,0,0,0,1,0,0,0,40,37,0,0,0,0,0,0,200,19,0,0,224,22,0,0,0,0,0,0,1,0,0,0,40,37,0,0,0,0,0,0,200,19,0,0,248,22,0,0,0,0,0,0,1,0,0,0,48,37,0,0,0,0,0,0,200,19,0,0,16,23,0,0,0,0,0,0,1,0,0,0,48,37,0,0,0,0,0,0,200,19,0,0,40,23,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,152,38,0,0,0,8,0,0,200,19,0,0,112,23,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,152,38,0,0,0,8,0,0,200,19,0,0,184,23,0,0,0,0,0,0,3,0,0,0,104,36,0,0,2,0,0,0,56,33,0,0,2,0,0,0,200,36,0,0,0,8,0,0,200,19,0,0,0,24,0,0,0,0,0,0,3,0,0,0,104,36,0,0,2,0,0,0,56,33,0,0,2,0,0,0,208,36,0,0,0,8,0,0,0,0,0,0,72,24,0,0,104,36,0,0,0,0,0,0,0,0,0,0,96,24,0,0,104,36,0,0,0,0,0,0,200,19,0,0,120,24,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,56,37,0,0,2,0,0,0,200,19,0,0,144,24,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,56,37,0,0,2,0,0,0,0,0,0,0,168,24,0,0,0,0,0,0,192,24,0,0,160,37,0,0,0,0,0,0,200,19,0,0,224,24,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,224,33,0,0,0,0,0,0,200,19,0,0,40,25,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,248,33,0,0,0,0,0,0,200,19,0,0,112,25,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,16,34,0,0,0,0,0,0,200,19,0,0,184,25,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,40,34,0,0,0,0,0,0,0,0,0,0,0,26,0,0,104,36,0,0,0,0,0,0,0,0,0,0,24,26,0,0,104,36,0,0,0,0,0,0,200,19,0,0,48,26,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,176,37,0,0,2,0,0,0,200,19,0,0,88,26,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,176,37,0,0,2,0,0,0,200,19,0,0,128,26,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,176,37,0,0,2,0,0,0,200,19,0,0,168,26,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,176,37,0,0,2,0,0,0,0,0,0,0,208,26,0,0,32,37,0,0,0,0,0,0,0,0,0,0,232,26,0,0,104,36,0,0,0,0,0,0,200,19,0,0,0,27,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,144,38,0,0,2,0,0,0,200,19,0,0,24,27,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,144,38,0,0,2,0,0,0,0,0,0,0,48,27,0,0,0,0,0,0,88,27,0,0,0,0,0,0,128,27,0,0,184,37,0,0,0,0,0,0,0,0,0,0,160,27,0,0,72,36,0,0,0,0,0,0,0,0,0,0,200,27,0,0,72,36,0,0,0,0,0,0,0,0,0,0,240,27,0,0,0,0,0,0,40,28,0,0,0,0,0,0,96,28,0,0,0,0,0,0,128,28,0,0,0,0,0,0,160,28,0,0,0,0,0,0,192,28,0,0,0,0,0,0,224,28,0,0,200,19,0,0,248,28,0,0,0,0,0,0,1,0,0,0,192,33,0,0,3,244,255,255,200,19,0,0,40,29,0,0,0,0,0,0,1,0,0,0,208,33,0,0,3,244,255,255,200,19,0,0,88,29,0,0,0,0,0,0,1,0,0,0,192,33,0,0,3,244,255,255,200,19,0,0,136,29,0,0,0,0,0,0,1,0,0,0,208,33,0,0,3,244,255,255,0,0,0,0,184,29,0,0,8,33,0,0,0,0,0,0,0,0,0,0,208,29,0,0,0,0,0,0,232,29,0,0,24,37,0,0,0,0,0,0,0,0,0,0,0,30,0,0,8,37,0,0,0,0,0,0,0,0,0,0,32,30,0,0,16,37,0,0,0,0,0,0,0,0,0,0,64,30,0,0,0,0,0,0,96,30,0,0,0,0,0,0,128,30,0,0,0,0,0,0,160,30,0,0,200,19,0,0,192,30,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,136,38,0,0,2,0,0,0,200,19,0,0,224,30,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,136,38,0,0,2,0,0,0,200,19,0,0,0,31,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,136,38,0,0,2,0,0,0,200,19,0,0,32,31,0,0,0,0,0,0,2,0,0,0,104,36,0,0,2,0,0,0,136,38,0,0,2,0,0,0,0,0,0,0,64,31,0,0,0,0,0,0,88,31,0,0,0,0,0,0,112,31,0,0,0,0,0,0,136,31,0,0,8,37,0,0,0,0,0,0,0,0,0,0,160,31,0,0,16,37,0,0,0,0,0,0,0,0,0,0,184,31,0,0,224,38,0,0,0,0,0,0,0,0,0,0,224,31,0,0,224,38,0,0,0,0,0,0,0,0,0,0,8,32,0,0,240,38,0,0,0,0,0,0,0,0,0,0,48,32,0,0,216,32,0,0,0,0,0,0,0,0,0,0,88,32,0,0,96,39,0,0,0,0,0,0,0,0,0,0,104,32,0,0,88,39,0,0,0,0,0,0,0,0,0,0,120,32,0,0,88,39,0,0,0,0,0,0,0,0,0,0,136,32,0,0,0,0,0,0,144,32,0,0,0,39,0,0,0,0,0,0,0,0,0,0,168,32,0,0,48,39,0,0,0,0,0,0,0,0,0,0,184,32,0,0,0,0,0,0,200,32,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(726);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(336);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(162);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(386);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(204);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(108);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(240);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(276);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(726);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(718);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(162);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(386);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(204);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(552);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(268);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(404);
HEAP32[((8408)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8416)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8424)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8440)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8456)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8472)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8488)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8504)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8640)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8656)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8912)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8928)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9008)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9016)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9160)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9176)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9320)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9336)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9416)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9424)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9432)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9448)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9464)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9480)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9488)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9496)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9504)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9512)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9520)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9528)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9632)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9648)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9656)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9672)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9688)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9704)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9712)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9720)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9728)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9864)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9872)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9880)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9888)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9904)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9920)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9936)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9952)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9968)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9984)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10000)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10016)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10032)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10040)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10056)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10072)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10080)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function ___gxx_personality_v0() {
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module.print('exit(' + status + ') called');
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_release() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i64=_memset;
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var VFS=undefined;
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path, ext) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var f = PATH.splitPath(path)[2];
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.filter(function(p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }
          return p;
        }).join('/'));
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },mount:function (mount) {
        return MEMFS.create_node(null, '/', 16384 | 0777, 0);
      },create_node:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek
          };
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap
          };
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          };
          node.stream_ops = {};
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = FS.chrdev_stream_ops;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.create_node(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.create_node(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && buffer.buffer === HEAP8.buffer && offset === 0) {
              node.contents = buffer; // this is a subarray of the heap, and we can own it
              node.contentMode = MEMFS.CONTENT_OWNING;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        },handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + new Error().stack;
        return ___setErrNo(e.errno);
      },cwd:function () {
        return FS.currentPath;
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.currentPath, path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            return path ? PATH.join(node.mount.mountpoint, path) : node.mount.mountpoint;
          }
          path = path ? PATH.join(node.name, path) : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          if (node.parent.id === parent.id && node.name === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        var node = {
          id: FS.nextInode++,
          name: name,
          mode: mode,
          node_ops: {},
          stream_ops: {},
          rdev: rdev,
          parent: null,
          mount: null
        };
        if (!parent) {
          parent = node;  // root node sets parent to itself
        }
        node.parent = parent;
        node.mount = parent.mount;
        // compatibility
        var readMode = 292 | 73;
        var writeMode = 146;
        // NOTE we must use Object.defineProperties instead of individual calls to
        // Object.defineProperty in order to make closure compiler happy
        Object.defineProperties(node, {
          read: {
            get: function() { return (node.mode & readMode) === readMode; },
            set: function(val) { val ? node.mode |= readMode : node.mode &= ~readMode; }
          },
          write: {
            get: function() { return (node.mode & writeMode) === writeMode; },
            set: function(val) { val ? node.mode |= writeMode : node.mode &= ~writeMode; }
          },
          isFolder: {
            get: function() { return FS.isDir(node.mode); },
          },
          isDevice: {
            get: function() { return FS.isChrdev(node.mode); },
          },
        });
        FS.hashAddNode(node);
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.currentPath) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        // compatibility
        Object.defineProperties(stream, {
          object: {
            get: function() { return stream.node; },
            set: function(val) { stream.node = val; }
          },
          isRead: {
            get: function() { return (stream.flags & 2097155) !== 1; }
          },
          isWrite: {
            get: function() { return (stream.flags & 2097155) !== 0; }
          },
          isAppend: {
            get: function() { return (stream.flags & 1024); }
          }
        });
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },mount:function (type, opts, mountpoint) {
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
        }
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        path = PATH.normalize(path);
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072)
          });
          node = lookup.node;
          path = lookup.path;
        } catch (e) {
          // ignore
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // register the stream with the filesystem
        var stream = FS.createStream({
          path: path,
          node: node,
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },staticInit:function () {
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(path, mode | 146);
          var stream = FS.open(path, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(path, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {} : ['binary'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          var handleMessage = function(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function ___errno_location() {
      return ___errno_state;
    }
  var _llvm_memset_p0i8_i32=_memset;
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function ___cxa_guard_abort() {}
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
        __scanString.whiteSpace['\v'] = 1;
        __scanString.whiteSpace['\f'] = 1;
        __scanString.whiteSpace['\r'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math.abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math.min(Math.floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _catopen() { throw 'TODO: ' + aborter }
  function _catgets() { throw 'TODO: ' + aborter }
  function _catclose() { throw 'TODO: ' + aborter }
  function _newlocale(mask, locale, base) {
      return 0;
    }
  function _freelocale(locale) {}
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[(((tm)+(___tm_struct_layout.tm_sec))>>2)],
        tm_min: HEAP32[(((tm)+(___tm_struct_layout.tm_min))>>2)],
        tm_hour: HEAP32[(((tm)+(___tm_struct_layout.tm_hour))>>2)],
        tm_mday: HEAP32[(((tm)+(___tm_struct_layout.tm_mday))>>2)],
        tm_mon: HEAP32[(((tm)+(___tm_struct_layout.tm_mon))>>2)],
        tm_year: HEAP32[(((tm)+(___tm_struct_layout.tm_year))>>2)],
        tm_wday: HEAP32[(((tm)+(___tm_struct_layout.tm_wday))>>2)],
        tm_yday: HEAP32[(((tm)+(___tm_struct_layout.tm_yday))>>2)],
        tm_isdst: HEAP32[(((tm)+(___tm_struct_layout.tm_isdst))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      var leadingSomething = function(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      var leadingNulls = function(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      var compareByDay = function(date1, date2) {
        var sgn = function(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      var getFirstWeekStartDate = function(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      var getWeekBasedYear = function(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  var _llvm_va_start=undefined;
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv
,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev
,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm
,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev
,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv
,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev
,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl
,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd
,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZN13VerticalLayer9calculateEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE
,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv
,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv
,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv
,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv
,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj
,0,__ZN7Lamella9calculateEv,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev
,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev
,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev
,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free
,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_
,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__114error_categoryD2Ev
,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev
,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc
,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZN7Cornice9calculateEv,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv
,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev
,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_
,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev
,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev
,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm
,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE
,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc
,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j
,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZN8Sunblind9calculateEv,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev
,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81
,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv
,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev
,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_
,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe
,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,___cxa_pure_virtual
,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv
,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_
,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv
,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE
,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi
,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv
,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf
,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi
,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc
,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv
,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev
,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev
,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__114error_categoryD0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl
,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev
,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv
,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv
,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120];
// EMSCRIPTEN_START_FUNCS
function _main() {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $__i1_i_i1=sp;
   var $24;
   var $25=(sp)+(8);
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37=(sp)+(16);
   var $38;
   var $__i1_i_i=(sp)+(24);
   var $39;
   var $40=(sp)+(32);
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48=(sp)+(40);
   var $49;
   var $sunblind=(sp)+(48);
   var $cornice=(sp)+(72);
   var $50;
   var $51;
   var $vlayer=(sp)+(80);
   var $lamellaone=(sp)+(96);
   var $lamellatwo=(sp)+(104);
   var $lamellathree=(sp)+(112);
   var $vlayertwo=(sp)+(120);
   var $price=(sp)+(136);
   var $it=(sp)+(152);
   var $52=(sp)+(160);
   var $53;
   $49=0;
   __ZN16VerticalSunblindC1Ev($sunblind);
   (function() { try { __THREW__ = 0; return __ZN7CorniceC1Ev($cornice) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 26; break; }
  case 2: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerC1Ev($vlayer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 26; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZN7LamellaC1Ev($lamellaone) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 27; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZN7LamellaC1Ev($lamellatwo) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 27; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZN7LamellaC1Ev($lamellathree) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 27; break; }
  case 6: 
   var $59=$vlayer;
   (function() { try { __THREW__ = 0; return __ZN5Layer10addLamellaER7Lamella($59, $lamellaone) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 27; break; }
  case 7: 
   var $61=$vlayer;
   (function() { try { __THREW__ = 0; return __ZN5Layer10addLamellaER7Lamella($61, $lamellatwo) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 27; break; }
  case 8: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerC1Ev($vlayertwo) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 27; break; }
  case 9: 
   var $64=$vlayertwo;
   (function() { try { __THREW__ = 0; return __ZN5Layer10addLamellaER7Lamella($64, $lamellathree) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 28; break; }
  case 10: 
   var $66=$sunblind;
   (function() { try { __THREW__ = 0; return __ZN8Sunblind10setCorniceER7Cornice($66, $cornice) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 28; break; }
  case 11: 
   var $68=$sunblind;
   var $69=$vlayer;
   (function() { try { __THREW__ = 0; return __ZN8Sunblind8addLayerER5Layer($68, $69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 28; break; }
  case 12: 
   var $71=$sunblind;
   var $72=$vlayertwo;
   (function() { try { __THREW__ = 0; return __ZN8Sunblind8addLayerER5Layer($71, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 28; break; }
  case 13: 
   var $74=$sunblind;
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$78]($price, $74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 28; break; }
  case 14: 
   $47=$price;
   var $80=$47;
   var $81=(($80)|0);
   $46=$81;
   var $82=$46;
   $45=$82;
   var $83=$45;
   var $84=(($83)|0);
   var $85=HEAP32[(($84)>>2)];
   $43=$48;
   $44=$85;
   var $86=$43;
   var $87=$44;
   $41=$86;
   $42=$87;
   var $88=$41;
   var $89=(($88)|0);
   var $90=$42;
   HEAP32[(($89)>>2)]=$90;
   var $tmp_i=$40;
   var $tmp1_i=$48;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   $39=$it;
   var $91=$39;
   var $tmp_i_i=$__i1_i_i;
   var $tmp2_i_i=$40;
   assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
   $38=$91;
   var $92=$38;
   var $93=(($92)|0);
   var $94=$93;
   var $95=$__i1_i_i;
   assert(4 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];
   label = 15; break;
  case 15: 
   $36=$price;
   var $97=$36;
   var $98=(($97)|0);
   $35=$98;
   var $99=$35;
   $34=$99;
   var $100=$34;
   var $101=(($100+4)|0);
   $33=$101;
   var $102=$33;
   var $103=$102;
   $32=$103;
   var $104=$32;
   var $105=(($104)|0);
   $31=$105;
   var $106=$31;
   $30=$106;
   var $107=$30;
   var $108=$107;
   var $109=$108;
   var $110=$109;
   $28=$37;
   $29=$110;
   var $111=$28;
   var $112=$29;
   $26=$111;
   $27=$112;
   var $113=$26;
   var $114=(($113)|0);
   var $115=$27;
   HEAP32[(($114)>>2)]=$115;
   var $tmp_i2=$25;
   var $tmp1_i3=$37;
   assert(4 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp1_i3)];HEAP8[((($tmp_i2)+(1))|0)]=HEAP8[((($tmp1_i3)+(1))|0)];HEAP8[((($tmp_i2)+(2))|0)]=HEAP8[((($tmp1_i3)+(2))|0)];HEAP8[((($tmp_i2)+(3))|0)]=HEAP8[((($tmp1_i3)+(3))|0)];
   $24=$52;
   var $116=$24;
   var $tmp_i_i4=$__i1_i_i1;
   var $tmp2_i_i5=$25;
   assert(4 % 1 === 0);HEAP8[($tmp_i_i4)]=HEAP8[($tmp2_i_i5)];HEAP8[((($tmp_i_i4)+(1))|0)]=HEAP8[((($tmp2_i_i5)+(1))|0)];HEAP8[((($tmp_i_i4)+(2))|0)]=HEAP8[((($tmp2_i_i5)+(2))|0)];HEAP8[((($tmp_i_i4)+(3))|0)]=HEAP8[((($tmp2_i_i5)+(3))|0)];
   $23=$116;
   var $117=$23;
   var $118=(($117)|0);
   var $119=$118;
   var $120=$__i1_i_i1;
   assert(4 % 1 === 0);HEAP32[(($119)>>2)]=HEAP32[(($120)>>2)];
   $21=$it;
   $22=$52;
   var $121=$21;
   var $122=(($121)|0);
   var $123=$22;
   var $124=(($123)|0);
   $19=$122;
   $20=$124;
   var $125=$19;
   var $126=$20;
   $17=$125;
   $18=$126;
   var $127=$17;
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$18;
   var $131=(($130)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($129)|(0))==(($132)|(0));
   var $134=$133 ^ 1;
   label = 16; break;
  case 16: 
   if ($134) { label = 17; break; } else { label = 30; break; }
  case 17: 
   $16=$it;
   var $137=$16;
   var $138=(($137)|0);
   $15=$138;
   var $139=$15;
   var $140=(($139)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+16)|0);
   $14=$142;
   var $143=$14;
   $13=$143;
   var $144=$13;
   var $145=$144;
   var $146=$145;
   var $147=(($146)|0);
   $12=$147;
   var $148=$12;
   $11=$148;
   var $149=$11;
   var $150=$149;
   var $151=$150;
   label = 18; break;
  case 18: 
   var $153=(($151)|0);
   var $154 = (function() { try { __THREW__ = 0; return __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE(13800, $153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 29; break; }
  case 19: 
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($154, ((2032)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 29; break; }
  case 20: 
   $10=$it;
   var $158=$10;
   var $159=(($158)|0);
   $9=$159;
   var $160=$9;
   var $161=(($160)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=(($162+16)|0);
   $8=$163;
   var $164=$8;
   $7=$164;
   var $165=$7;
   var $166=$165;
   var $167=$166;
   var $168=(($167)|0);
   $6=$168;
   var $169=$6;
   $5=$169;
   var $170=$5;
   var $171=$170;
   var $172=$171;
   label = 21; break;
  case 21: 
   var $174=(($172+12)|0);
   var $175=HEAPF32[(($174)>>2)];
   var $176 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($156, $175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 29; break; }
  case 22: 
   var $178 = (function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c($176, 10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 29; break; }
  case 23: 
   label = 24; break;
  case 24: 
   $4=$it;
   var $181=$4;
   var $182=(($181)|0);
   $3=$182;
   var $183=$3;
   var $184=(($183)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=$185;
   var $187=__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($186);
   var $188=$187;
   var $189=(($183)|0);
   HEAP32[(($189)>>2)]=$188;
   label = 25; break;
  case 25: 
   label = 15; break;
  case 26: 
   var $192$0 = ___cxa_find_matching_catch(-1, -1); $192$1 = tempRet0;
   var $193=$192$0;
   $50=$193;
   var $194=$192$1;
   $51=$194;
   label = 42; break;
  case 27: 
   var $196$0 = ___cxa_find_matching_catch(-1, -1); $196$1 = tempRet0;
   var $197=$196$0;
   $50=$197;
   var $198=$196$1;
   $51=$198;
   label = 40; break;
  case 28: 
   var $200$0 = ___cxa_find_matching_catch(-1, -1); $200$1 = tempRet0;
   var $201=$200$0;
   $50=$201;
   var $202=$200$1;
   $51=$202;
   label = 37; break;
  case 29: 
   var $204$0 = ___cxa_find_matching_catch(-1, -1); $204$1 = tempRet0;
   var $205=$204$0;
   $50=$205;
   var $206=$204$1;
   $51=$206;
   (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($price) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 45; break; }
  case 30: 
   var $208 = (function() { try { __THREW__ = 0; return __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(13800, ((2016)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 29; break; }
  case 31: 
   $1=$208;
   $2=8;
   var $210=$1;
   var $211=$2;
   var $212 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($210) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 29; break; }
  case 32: 
   label = 33; break;
  case 33: 
   $49=0;
   $53=1;
   (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($price) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 28; break; }
  case 34: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerD1Ev($vlayertwo) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 27; break; }
  case 35: 
   label = 37; break;
  case 36: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerD1Ev($vlayer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 26; break; }
  case 37: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerD1Ev($vlayertwo) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 45; break; }
  case 38: 
   label = 40; break;
  case 39: 
   __ZN16VerticalSunblindD1Ev($sunblind);
   var $220=$49;
   STACKTOP = sp;
   return $220;
  case 40: 
   (function() { try { __THREW__ = 0; return __ZN13VerticalLayerD1Ev($vlayer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 45; break; }
  case 41: 
   label = 42; break;
  case 42: 
   (function() { try { __THREW__ = 0; return __ZN16VerticalSunblindD1Ev($sunblind) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 45; break; }
  case 43: 
   label = 44; break;
  case 44: 
   var $226=$50;
   var $227=$51;
   var $228$0=$226;
   var $228$1=0;
   var $229$0=$228$0;
   var $229$1=$227;
   ___resumeException($229$0)
  case 45: 
   var $231$0 = ___cxa_find_matching_catch(-1, -1,0); $231$1 = tempRet0;
   var $232=$231$0;
   ___clang_call_terminate($232);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
Module["_main"] = _main;
function __ZN16VerticalSunblindC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN16VerticalSunblindC2Ev($2);
 return;
}
function __ZN7CorniceC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN7CorniceC2Ev($2);
 return;
}
function __ZN13VerticalLayerC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN13VerticalLayerC2Ev($2);
 return;
}
function __ZN7LamellaC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN7LamellaC2Ev($2);
 return;
}
function __ZN5Layer10addLamellaER7Lamella($this, $lamella) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   $13=$this;
   $14=$lamella;
   var $15=$13;
   var $16=(($15+4)|0);
   var $17=$14;
   $11=$16;
   $12=$17;
   var $18=$11;
   var $19=$18;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$18;
   $10=$22;
   var $23=$10;
   var $24=(($23+8)|0);
   $9=$24;
   var $25=$9;
   var $26=$25;
   $8=$26;
   var $27=$8;
   var $28=(($27)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($21)|(0))!=(($29)|(0));
   if ($30) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $32=$18;
   $7=$32;
   var $33=$7;
   var $34=(($33+8)|0);
   $6=$34;
   var $35=$6;
   var $36=$35;
   $5=$36;
   var $37=$5;
   var $38=$37;
   var $39=$18;
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   $1=$41;
   var $42=$1;
   var $43=$12;
   $2=$38;
   $3=$42;
   $4=$43;
   var $44=$3;
   var $45=$44;
   var $46=(($45)|(0))==0;
   if ($46) { var $50 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $48=$45;
   var $49=$4;
   __ZN7LamellaC1ERKS_($48, $49);
   var $50 = $48;label = 4; break;
  case 4: 
   var $50;
   var $51=$18;
   var $52=(($51+4)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+4)|0);
   HEAP32[(($52)>>2)]=$54;
   label = 6; break;
  case 5: 
   var $56=$12;
   __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($18, $56);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8Sunblind10setCorniceER7Cornice($this, $nCornice) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nCornice;
 var $3=$1;
 var $4=(($3+4)|0);
 var $5=$2;
 var $6=__ZN7CorniceaSERKS_($4, $5);
 return;
}
function __ZN8Sunblind8addLayerER5Layer($this, $layer) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=sp;
   $13=$this;
   $14=$layer;
   var $16=$13;
   var $17=(($16+8)|0);
   var $18=$14;
   HEAP32[(($15)>>2)]=$18;
   $11=$17;
   $12=$15;
   var $19=$11;
   var $20=$19;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$19;
   $10=$23;
   var $24=$10;
   var $25=(($24+8)|0);
   $9=$25;
   var $26=$9;
   var $27=$26;
   $8=$27;
   var $28=$8;
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($22)|(0))!=(($30)|(0));
   if ($31) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $33=$19;
   $7=$33;
   var $34=$7;
   var $35=(($34+8)|0);
   $6=$35;
   var $36=$6;
   var $37=$36;
   $5=$37;
   var $38=$5;
   var $39=$38;
   var $40=$19;
   var $41=(($40+4)|0);
   var $42=HEAP32[(($41)>>2)];
   $1=$42;
   var $43=$1;
   var $44=$12;
   $2=$39;
   $3=$43;
   $4=$44;
   var $45=$3;
   var $46=$45;
   var $47=(($46)|(0))==0;
   if ($47) { var $52 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $49=$46;
   var $50=$4;
   var $51=HEAP32[(($50)>>2)];
   HEAP32[(($49)>>2)]=$51;
   var $52 = $49;label = 4; break;
  case 4: 
   var $52;
   var $53=$19;
   var $54=(($53+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+4)|0);
   HEAP32[(($54)>>2)]=$56;
   label = 6; break;
  case 5: 
   var $58=$12;
   __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($19, $58);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c($__os, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28=(sp)+(8);
   var $__s=(sp)+(16);
   var $29;
   var $30;
   var $31=(sp)+(24);
   var $32=(sp)+(32);
   $27=$__os;
   HEAP8[($28)]=$__c;
   var $33=$27;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s, $33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 23; break; }
  case 2: 
   $26=$__s;
   var $35=$26;
   var $36=(($35)|0);
   var $37=HEAP8[($36)];
   var $38=(($37) & 1);
   label = 3; break;
  case 3: 
   if ($38) { label = 4; break; } else { label = 27; break; }
  case 4: 
   var $41=$27;
   $24=$31;
   $25=$41;
   var $42=$24;
   var $43=$25;
   $20=$42;
   $21=$43;
   var $44=$20;
   var $45=$44;
   var $46=(($44)|0);
   var $47=$21;
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=((($49)-(12))|0);
   var $51=$50;
   var $52=HEAP32[(($51)>>2)];
   var $53=$47;
   var $54=(($53+$52)|0);
   var $55=$54;
   $19=$55;
   var $56=$19;
   var $57=$56;
   $18=$57;
   var $58=$18;
   var $59=(($58+24)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$60;
   HEAP32[(($46)>>2)]=$61;
   var $62=$27;
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(12))|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$62;
   var $69=(($68+$67)|0);
   var $70=$69;
   $13=$70;
   var $71=$13;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   label = 5; break;
  case 5: 
   var $75=$73 & 176;
   var $76=(($75)|(0))==32;
   if ($76) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $78=(($28+1)|0);
   var $81 = $78;label = 8; break;
  case 7: 
   var $81 = $28;label = 8; break;
  case 8: 
   var $81;
   var $82=(($28+1)|0);
   var $83=$27;
   var $84=$83;
   var $85=HEAP32[(($84)>>2)];
   var $86=((($85)-(12))|0);
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $89=$83;
   var $90=(($89+$88)|0);
   var $91=$90;
   var $92=$27;
   var $93=$92;
   var $94=HEAP32[(($93)>>2)];
   var $95=((($94)-(12))|0);
   var $96=$95;
   var $97=HEAP32[(($96)>>2)];
   var $98=$92;
   var $99=(($98+$97)|0);
   var $100=$99;
   $11=$100;
   var $101=$11;
   var $102=(($101+76)|0);
   var $103=HEAP32[(($102)>>2)];
   $1=-1;
   $2=$103;
   var $104=$1;
   var $105=$2;
   var $106=(($104)|(0))==(($105)|(0));
   if ($106) { label = 9; break; } else { label = 17; break; }
  case 9: 
   $6=$101;
   $7=32;
   var $108=$6;
   var $109=$108;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($8, $109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 24; break; }
  case 10: 
   $5=$8;
   var $110=$5;
   var $111 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($110, 13704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $112=$111;
   var $113=$7;
   $3=$112;
   $4=$113;
   var $114=$3;
   var $115=$114;
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+28)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$4;
   var $120 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($114, $119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 12; break; }
  case 12: 
   var $122$0 = ___cxa_find_matching_catch(-1, -1,0,0); $122$1 = tempRet0;
   var $123=$122$0;
   $9=$123;
   var $124=$122$1;
   $10=$124;
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $126=$9;
   var $127=$10;
   var $128$0=$126;
   var $128$1=0;
   var $129$0=$128$0;
   var $129$1=$127;
   var $eh_lpad_body$1 = $129$1;var $eh_lpad_body$0 = $129$0;label = 25; break;
  case 14: 
   var $131$0 = ___cxa_find_matching_catch(-1, -1,0,0,0); $131$1 = tempRet0;
   var $132=$131$0;
   ___clang_call_terminate($132);
   throw "Reached an unreachable!";
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 24; break; }
  case 16: 
   var $133=(($120 << 24) >> 24);
   var $134=(($101+76)|0);
   HEAP32[(($134)>>2)]=$133;
   label = 17; break;
  case 17: 
   var $135=(($101+76)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136) & 255);
   label = 18; break;
  case 18: 
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($32, $31, $28, $81, $82, $91, $137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 24; break; }
  case 19: 
   $12=$32;
   var $140=$12;
   var $141=(($140)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($142)|(0))==0;
   if ($143) { label = 20; break; } else { label = 26; break; }
  case 20: 
   var $145=$27;
   var $146=$145;
   var $147=HEAP32[(($146)>>2)];
   var $148=((($147)-(12))|0);
   var $149=$148;
   var $150=HEAP32[(($149)>>2)];
   var $151=$145;
   var $152=(($151+$150)|0);
   var $153=$152;
   $16=$153;
   $17=5;
   var $154=$16;
   var $155=$154;
   var $156=$17;
   $14=$155;
   $15=$156;
   var $157=$14;
   var $158=(($157+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$15;
   var $161=$159 | $160;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($157, $161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 24; break; }
  case 21: 
   label = 22; break;
  case 22: 
   label = 26; break;
  case 23: 
   var $164$0 = ___cxa_find_matching_catch(-1, -1,0); $164$1 = tempRet0;
   var $165=$164$0;
   $29=$165;
   var $166=$164$1;
   $30=$166;
   label = 30; break;
  case 24: 
   var $168$0 = ___cxa_find_matching_catch(-1, -1,0); $168$1 = tempRet0;
   var $eh_lpad_body$1 = $168$1;var $eh_lpad_body$0 = $168$0;label = 25; break;
  case 25: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $169=$eh_lpad_body$0;
   $29=$169;
   var $170=$eh_lpad_body$1;
   $30=$170;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 36; break; }
  case 26: 
   label = 27; break;
  case 27: 
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 23; break; }
  case 28: 
   label = 32; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $176=$29;
   var $177=___cxa_begin_catch($176);
   var $178=$27;
   var $179=$178;
   var $180=HEAP32[(($179)>>2)];
   var $181=((($180)-(12))|0);
   var $182=$181;
   var $183=HEAP32[(($182)>>2)];
   var $184=$178;
   var $185=(($184+$183)|0);
   var $186=$185;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($186) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 33; break; }
  case 31: 
   ___cxa_end_catch();
   label = 32; break;
  case 32: 
   var $189=$27;
   STACKTOP = sp;
   return $189;
  case 33: 
   var $191$0 = ___cxa_find_matching_catch(-1, -1); $191$1 = tempRet0;
   var $192=$191$0;
   $29=$192;
   var $193=$191$1;
   $30=$193;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 36; break; }
  case 34: 
   label = 35; break;
  case 35: 
   var $196=$29;
   var $197=$30;
   var $198$0=$196;
   var $198$1=0;
   var $199$0=$198$0;
   var $199$1=$197;
   ___resumeException($199$0)
  case 36: 
   var $201$0 = ___cxa_find_matching_catch(-1, -1,0); $201$1 = tempRet0;
   var $202=$201$0;
   ___clang_call_terminate($202);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os, $__str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $__s=(sp)+(8);
   var $30;
   var $31;
   var $__len;
   var $32=(sp)+(16);
   var $33=(sp)+(24);
   $28=$__os;
   $29=$__str;
   var $34=$28;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s, $34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 25; break; }
  case 2: 
   $27=$__s;
   var $36=$27;
   var $37=(($36)|0);
   var $38=HEAP8[($37)];
   var $39=(($38) & 1);
   label = 3; break;
  case 3: 
   if ($39) { label = 4; break; } else { label = 29; break; }
  case 4: 
   var $42=$29;
   $26=$42;
   var $43=$26;
   var $44 = (function() { try { __THREW__ = 0; return _strlen($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   label = 6; break;
  case 6: 
   $__len=$44;
   var $46=$28;
   $24=$32;
   $25=$46;
   var $47=$24;
   var $48=$25;
   $20=$47;
   $21=$48;
   var $49=$20;
   var $50=$49;
   var $51=(($49)|0);
   var $52=$21;
   var $53=$52;
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)-(12))|0);
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=$52;
   var $59=(($58+$57)|0);
   var $60=$59;
   $19=$60;
   var $61=$19;
   var $62=$61;
   $18=$62;
   var $63=$18;
   var $64=(($63+24)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65;
   HEAP32[(($51)>>2)]=$66;
   var $67=$29;
   var $68=$28;
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)-(12))|0);
   var $72=$71;
   var $73=HEAP32[(($72)>>2)];
   var $74=$68;
   var $75=(($74+$73)|0);
   var $76=$75;
   $13=$76;
   var $77=$13;
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   label = 7; break;
  case 7: 
   var $81=$79 & 176;
   var $82=(($81)|(0))==32;
   if ($82) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $84=$29;
   var $85=$__len;
   var $86=(($84+$85)|0);
   var $90 = $86;label = 10; break;
  case 9: 
   var $88=$29;
   var $90 = $88;label = 10; break;
  case 10: 
   var $90;
   var $91=$29;
   var $92=$__len;
   var $93=(($91+$92)|0);
   var $94=$28;
   var $95=$94;
   var $96=HEAP32[(($95)>>2)];
   var $97=((($96)-(12))|0);
   var $98=$97;
   var $99=HEAP32[(($98)>>2)];
   var $100=$94;
   var $101=(($100+$99)|0);
   var $102=$101;
   var $103=$28;
   var $104=$103;
   var $105=HEAP32[(($104)>>2)];
   var $106=((($105)-(12))|0);
   var $107=$106;
   var $108=HEAP32[(($107)>>2)];
   var $109=$103;
   var $110=(($109+$108)|0);
   var $111=$110;
   $11=$111;
   var $112=$11;
   var $113=(($112+76)|0);
   var $114=HEAP32[(($113)>>2)];
   $1=-1;
   $2=$114;
   var $115=$1;
   var $116=$2;
   var $117=(($115)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 19; break; }
  case 11: 
   $6=$112;
   $7=32;
   var $119=$6;
   var $120=$119;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($8, $120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $5=$8;
   var $121=$5;
   var $122 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($121, 13704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $123=$122;
   var $124=$7;
   $3=$123;
   $4=$124;
   var $125=$3;
   var $126=$125;
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127+28)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$4;
   var $131 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($125, $130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 14; break; }
  case 14: 
   var $133$0 = ___cxa_find_matching_catch(-1, -1,0,0); $133$1 = tempRet0;
   var $134=$133$0;
   $9=$134;
   var $135=$133$1;
   $10=$135;
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $137=$9;
   var $138=$10;
   var $139$0=$137;
   var $139$1=0;
   var $140$0=$139$0;
   var $140$1=$138;
   var $eh_lpad_body$1 = $140$1;var $eh_lpad_body$0 = $140$0;label = 27; break;
  case 16: 
   var $142$0 = ___cxa_find_matching_catch(-1, -1,0,0,0); $142$1 = tempRet0;
   var $143=$142$0;
   ___clang_call_terminate($143);
   throw "Reached an unreachable!";
  case 17: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 26; break; }
  case 18: 
   var $144=(($131 << 24) >> 24);
   var $145=(($112+76)|0);
   HEAP32[(($145)>>2)]=$144;
   label = 19; break;
  case 19: 
   var $146=(($112+76)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($147) & 255);
   label = 20; break;
  case 20: 
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($33, $32, $67, $90, $93, $102, $148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 26; break; }
  case 21: 
   $12=$33;
   var $151=$12;
   var $152=(($151)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($153)|(0))==0;
   if ($154) { label = 22; break; } else { label = 28; break; }
  case 22: 
   var $156=$28;
   var $157=$156;
   var $158=HEAP32[(($157)>>2)];
   var $159=((($158)-(12))|0);
   var $160=$159;
   var $161=HEAP32[(($160)>>2)];
   var $162=$156;
   var $163=(($162+$161)|0);
   var $164=$163;
   $16=$164;
   $17=5;
   var $165=$16;
   var $166=$165;
   var $167=$17;
   $14=$166;
   $15=$167;
   var $168=$14;
   var $169=(($168+16)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$15;
   var $172=$170 | $171;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($168, $172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 26; break; }
  case 23: 
   label = 24; break;
  case 24: 
   label = 28; break;
  case 25: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1,0); $175$1 = tempRet0;
   var $176=$175$0;
   $30=$176;
   var $177=$175$1;
   $31=$177;
   label = 32; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1,0); $179$1 = tempRet0;
   var $eh_lpad_body$1 = $179$1;var $eh_lpad_body$0 = $179$0;label = 27; break;
  case 27: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $180=$eh_lpad_body$0;
   $30=$180;
   var $181=$eh_lpad_body$1;
   $31=$181;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 38; break; }
  case 28: 
   label = 29; break;
  case 29: 
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 25; break; }
  case 30: 
   label = 34; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $187=$30;
   var $188=___cxa_begin_catch($187);
   var $189=$28;
   var $190=$189;
   var $191=HEAP32[(($190)>>2)];
   var $192=((($191)-(12))|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=$189;
   var $196=(($195+$194)|0);
   var $197=$196;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 35; break; }
  case 33: 
   ___cxa_end_catch();
   label = 34; break;
  case 34: 
   var $200=$28;
   STACKTOP = sp;
   return $200;
  case 35: 
   var $202$0 = ___cxa_find_matching_catch(-1, -1); $202$1 = tempRet0;
   var $203=$202$0;
   $30=$203;
   var $204=$202$1;
   $31=$204;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 38; break; }
  case 36: 
   label = 37; break;
  case 37: 
   var $207=$30;
   var $208=$31;
   var $209$0=$207;
   var $209$1=0;
   var $210$0=$209$0;
   var $210$1=$208;
   ___resumeException($210$0)
  case 38: 
   var $212$0 = ___cxa_find_matching_catch(-1, -1,0); $212$1 = tempRet0;
   var $213=$212$0;
   ___clang_call_terminate($213);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os, $__str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51=sp;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $__s=(sp)+(8);
   var $95;
   var $96;
   var $__len;
   var $97=(sp)+(16);
   var $98=(sp)+(24);
   $93=$__os;
   $94=$__str;
   var $99=$93;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s, $99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 38; break; }
  case 2: 
   $92=$__s;
   var $101=$92;
   var $102=(($101)|0);
   var $103=HEAP8[($102)];
   var $104=(($103) & 1);
   label = 3; break;
  case 3: 
   if ($104) { label = 4; break; } else { label = 42; break; }
  case 4: 
   var $107=$94;
   $91=$107;
   var $108=$91;
   $90=$108;
   var $109=$90;
   var $110=(($109)|0);
   $89=$110;
   var $111=$89;
   var $112=$111;
   $88=$112;
   var $113=$88;
   var $114=(($113)|0);
   var $115=(($114)|0);
   var $116=$115;
   var $117=(($116)|0);
   var $118=$117;
   var $119=HEAP8[($118)];
   var $120=(($119)&(255));
   var $121=$120 & 1;
   var $122=(($121)|(0))!=0;
   if ($122) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $84=$108;
   var $124=$84;
   var $125=(($124)|0);
   $83=$125;
   var $126=$83;
   var $127=$126;
   $82=$127;
   var $128=$82;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+4)|0);
   var $133=HEAP32[(($132)>>2)];
   var $148 = $133;label = 7; break;
  case 6: 
   $87=$108;
   var $135=$87;
   var $136=(($135)|0);
   $86=$136;
   var $137=$86;
   var $138=$137;
   $85=$138;
   var $139=$85;
   var $140=(($139)|0);
   var $141=(($140)|0);
   var $142=$141;
   var $143=(($142)|0);
   var $144=$143;
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=$146 >> 1;
   var $148 = $147;label = 7; break;
  case 7: 
   var $148;
   $__len=$148;
   var $149=$93;
   $76=$97;
   $77=$149;
   var $150=$76;
   var $151=$77;
   $72=$150;
   $73=$151;
   var $152=$72;
   var $153=$152;
   var $154=(($152)|0);
   var $155=$73;
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $158=((($157)-(12))|0);
   var $159=$158;
   var $160=HEAP32[(($159)>>2)];
   var $161=$155;
   var $162=(($161+$160)|0);
   var $163=$162;
   $71=$163;
   var $164=$71;
   var $165=$164;
   $70=$165;
   var $166=$70;
   var $167=(($166+24)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=$168;
   HEAP32[(($154)>>2)]=$169;
   var $170=$94;
   $68=$170;
   var $171=$68;
   $67=$171;
   var $172=$67;
   $66=$172;
   var $173=$66;
   var $174=(($173)|0);
   $65=$174;
   var $175=$65;
   var $176=$175;
   $64=$176;
   var $177=$64;
   var $178=(($177)|0);
   var $179=(($178)|0);
   var $180=$179;
   var $181=(($180)|0);
   var $182=$181;
   var $183=HEAP8[($182)];
   var $184=(($183)&(255));
   var $185=$184 & 1;
   var $186=(($185)|(0))!=0;
   if ($186) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $58=$172;
   var $188=$58;
   var $189=(($188)|0);
   $57=$189;
   var $190=$57;
   var $191=$190;
   $56=$191;
   var $192=$56;
   var $193=(($192)|0);
   var $194=(($193)|0);
   var $195=$194;
   var $196=(($195+8)|0);
   var $197=HEAP32[(($196)>>2)];
   var $211 = $197;label = 10; break;
  case 9: 
   $63=$172;
   var $199=$63;
   var $200=(($199)|0);
   $62=$200;
   var $201=$62;
   var $202=$201;
   $61=$202;
   var $203=$61;
   var $204=(($203)|0);
   var $205=(($204)|0);
   var $206=$205;
   var $207=(($206+1)|0);
   var $208=(($207)|0);
   $60=$208;
   var $209=$60;
   $59=$209;
   var $210=$59;
   var $211 = $210;label = 10; break;
  case 10: 
   var $211;
   $55=$211;
   var $212=$55;
   var $213=$93;
   var $214=$213;
   var $215=HEAP32[(($214)>>2)];
   var $216=((($215)-(12))|0);
   var $217=$216;
   var $218=HEAP32[(($217)>>2)];
   var $219=$213;
   var $220=(($219+$218)|0);
   var $221=$220;
   $43=$221;
   var $222=$43;
   var $223=(($222+4)|0);
   var $224=HEAP32[(($223)>>2)];
   label = 11; break;
  case 11: 
   var $226=$224 & 176;
   var $227=(($226)|(0))==32;
   if ($227) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $229=$94;
   $42=$229;
   var $230=$42;
   $41=$230;
   var $231=$41;
   $40=$231;
   var $232=$40;
   var $233=(($232)|0);
   $39=$233;
   var $234=$39;
   var $235=$234;
   $38=$235;
   var $236=$38;
   var $237=(($236)|0);
   var $238=(($237)|0);
   var $239=$238;
   var $240=(($239)|0);
   var $241=$240;
   var $242=HEAP8[($241)];
   var $243=(($242)&(255));
   var $244=$243 & 1;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $32=$231;
   var $247=$32;
   var $248=(($247)|0);
   $31=$248;
   var $249=$31;
   var $250=$249;
   $30=$250;
   var $251=$30;
   var $252=(($251)|0);
   var $253=(($252)|0);
   var $254=$253;
   var $255=(($254+8)|0);
   var $256=HEAP32[(($255)>>2)];
   var $270 = $256;label = 15; break;
  case 14: 
   $37=$231;
   var $258=$37;
   var $259=(($258)|0);
   $36=$259;
   var $260=$36;
   var $261=$260;
   $35=$261;
   var $262=$35;
   var $263=(($262)|0);
   var $264=(($263)|0);
   var $265=$264;
   var $266=(($265+1)|0);
   var $267=(($266)|0);
   $34=$267;
   var $268=$34;
   $33=$268;
   var $269=$33;
   var $270 = $269;label = 15; break;
  case 15: 
   var $270;
   $29=$270;
   var $271=$29;
   var $272=$__len;
   var $273=(($271+$272)|0);
   var $319 = $273;label = 20; break;
  case 16: 
   var $275=$94;
   $28=$275;
   var $276=$28;
   $27=$276;
   var $277=$27;
   $26=$277;
   var $278=$26;
   var $279=(($278)|0);
   $25=$279;
   var $280=$25;
   var $281=$280;
   $24=$281;
   var $282=$24;
   var $283=(($282)|0);
   var $284=(($283)|0);
   var $285=$284;
   var $286=(($285)|0);
   var $287=$286;
   var $288=HEAP8[($287)];
   var $289=(($288)&(255));
   var $290=$289 & 1;
   var $291=(($290)|(0))!=0;
   if ($291) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $18=$277;
   var $293=$18;
   var $294=(($293)|0);
   $17=$294;
   var $295=$17;
   var $296=$295;
   $16=$296;
   var $297=$16;
   var $298=(($297)|0);
   var $299=(($298)|0);
   var $300=$299;
   var $301=(($300+8)|0);
   var $302=HEAP32[(($301)>>2)];
   var $316 = $302;label = 19; break;
  case 18: 
   $23=$277;
   var $304=$23;
   var $305=(($304)|0);
   $22=$305;
   var $306=$22;
   var $307=$306;
   $21=$307;
   var $308=$21;
   var $309=(($308)|0);
   var $310=(($309)|0);
   var $311=$310;
   var $312=(($311+1)|0);
   var $313=(($312)|0);
   $20=$313;
   var $314=$20;
   $19=$314;
   var $315=$19;
   var $316 = $315;label = 19; break;
  case 19: 
   var $316;
   $15=$316;
   var $317=$15;
   var $319 = $317;label = 20; break;
  case 20: 
   var $319;
   var $320=$94;
   $14=$320;
   var $321=$14;
   $13=$321;
   var $322=$13;
   $12=$322;
   var $323=$12;
   var $324=(($323)|0);
   $11=$324;
   var $325=$11;
   var $326=$325;
   $10=$326;
   var $327=$10;
   var $328=(($327)|0);
   var $329=(($328)|0);
   var $330=$329;
   var $331=(($330)|0);
   var $332=$331;
   var $333=HEAP8[($332)];
   var $334=(($333)&(255));
   var $335=$334 & 1;
   var $336=(($335)|(0))!=0;
   if ($336) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $4=$322;
   var $338=$4;
   var $339=(($338)|0);
   $3=$339;
   var $340=$3;
   var $341=$340;
   $2=$341;
   var $342=$2;
   var $343=(($342)|0);
   var $344=(($343)|0);
   var $345=$344;
   var $346=(($345+8)|0);
   var $347=HEAP32[(($346)>>2)];
   var $361 = $347;label = 23; break;
  case 22: 
   $9=$322;
   var $349=$9;
   var $350=(($349)|0);
   $8=$350;
   var $351=$8;
   var $352=$351;
   $7=$352;
   var $353=$7;
   var $354=(($353)|0);
   var $355=(($354)|0);
   var $356=$355;
   var $357=(($356+1)|0);
   var $358=(($357)|0);
   $6=$358;
   var $359=$6;
   $5=$359;
   var $360=$5;
   var $361 = $360;label = 23; break;
  case 23: 
   var $361;
   $1=$361;
   var $362=$1;
   var $363=$__len;
   var $364=(($362+$363)|0);
   var $365=$93;
   var $366=$365;
   var $367=HEAP32[(($366)>>2)];
   var $368=((($367)-(12))|0);
   var $369=$368;
   var $370=HEAP32[(($369)>>2)];
   var $371=$365;
   var $372=(($371+$370)|0);
   var $373=$372;
   var $374=$93;
   var $375=$374;
   var $376=HEAP32[(($375)>>2)];
   var $377=((($376)-(12))|0);
   var $378=$377;
   var $379=HEAP32[(($378)>>2)];
   var $380=$374;
   var $381=(($380+$379)|0);
   var $382=$381;
   $54=$382;
   var $383=$54;
   var $384=(($383+76)|0);
   var $385=HEAP32[(($384)>>2)];
   $44=-1;
   $45=$385;
   var $386=$44;
   var $387=$45;
   var $388=(($386)|(0))==(($387)|(0));
   if ($388) { label = 24; break; } else { label = 32; break; }
  case 24: 
   $49=$383;
   $50=32;
   var $390=$49;
   var $391=$390;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($51, $391) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 39; break; }
  case 25: 
   $48=$51;
   var $392=$48;
   var $393 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($392, 13704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $394=$393;
   var $395=$50;
   $46=$394;
   $47=$395;
   var $396=$46;
   var $397=$396;
   var $398=HEAP32[(($397)>>2)];
   var $399=(($398+28)|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=$47;
   var $402 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$400]($396, $401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 27; break; }
  case 27: 
   var $404$0 = ___cxa_find_matching_catch(-1, -1,0,0); $404$1 = tempRet0;
   var $405=$404$0;
   $52=$405;
   var $406=$404$1;
   $53=$406;
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $408=$52;
   var $409=$53;
   var $410$0=$408;
   var $410$1=0;
   var $411$0=$410$0;
   var $411$1=$409;
   var $eh_lpad_body$1 = $411$1;var $eh_lpad_body$0 = $411$0;label = 40; break;
  case 29: 
   var $413$0 = ___cxa_find_matching_catch(-1, -1,0,0,0); $413$1 = tempRet0;
   var $414=$413$0;
   ___clang_call_terminate($414);
   throw "Reached an unreachable!";
  case 30: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 39; break; }
  case 31: 
   var $415=(($402 << 24) >> 24);
   var $416=(($383+76)|0);
   HEAP32[(($416)>>2)]=$415;
   label = 32; break;
  case 32: 
   var $417=(($383+76)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=(($418) & 255);
   label = 33; break;
  case 33: 
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($98, $97, $212, $319, $364, $373, $419) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 39; break; }
  case 34: 
   $69=$98;
   var $422=$69;
   var $423=(($422)|0);
   var $424=HEAP32[(($423)>>2)];
   var $425=(($424)|(0))==0;
   if ($425) { label = 35; break; } else { label = 41; break; }
  case 35: 
   var $427=$93;
   var $428=$427;
   var $429=HEAP32[(($428)>>2)];
   var $430=((($429)-(12))|0);
   var $431=$430;
   var $432=HEAP32[(($431)>>2)];
   var $433=$427;
   var $434=(($433+$432)|0);
   var $435=$434;
   $80=$435;
   $81=5;
   var $436=$80;
   var $437=$436;
   var $438=$81;
   $78=$437;
   $79=$438;
   var $439=$78;
   var $440=(($439+16)|0);
   var $441=HEAP32[(($440)>>2)];
   var $442=$79;
   var $443=$441 | $442;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($439, $443) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 39; break; }
  case 36: 
   label = 37; break;
  case 37: 
   label = 41; break;
  case 38: 
   var $446$0 = ___cxa_find_matching_catch(-1, -1,0); $446$1 = tempRet0;
   var $447=$446$0;
   $95=$447;
   var $448=$446$1;
   $96=$448;
   label = 45; break;
  case 39: 
   var $450$0 = ___cxa_find_matching_catch(-1, -1,0); $450$1 = tempRet0;
   var $eh_lpad_body$1 = $450$1;var $eh_lpad_body$0 = $450$0;label = 40; break;
  case 40: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $451=$eh_lpad_body$0;
   $95=$451;
   var $452=$eh_lpad_body$1;
   $96=$452;
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 51; break; }
  case 41: 
   label = 42; break;
  case 42: 
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 38; break; }
  case 43: 
   label = 47; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $458=$95;
   var $459=___cxa_begin_catch($458);
   var $460=$93;
   var $461=$460;
   var $462=HEAP32[(($461)>>2)];
   var $463=((($462)-(12))|0);
   var $464=$463;
   var $465=HEAP32[(($464)>>2)];
   var $466=$460;
   var $467=(($466+$465)|0);
   var $468=$467;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($468) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 48; break; }
  case 46: 
   ___cxa_end_catch();
   label = 47; break;
  case 47: 
   var $471=$93;
   STACKTOP = sp;
   return $471;
  case 48: 
   var $473$0 = ___cxa_find_matching_catch(-1, -1); $473$1 = tempRet0;
   var $474=$473$0;
   $95=$474;
   var $475=$473$1;
   $96=$475;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 51; break; }
  case 49: 
   label = 50; break;
  case 50: 
   var $478=$95;
   var $479=$96;
   var $480$0=$478;
   var $480$1=0;
   var $481$0=$480$0;
   var $481$1=$479;
   ___resumeException($481$0)
  case 51: 
   var $483$0 = ___cxa_find_matching_catch(-1, -1,0); $483$1 = tempRet0;
   var $484=$483$0;
   ___clang_call_terminate($484);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6=sp;
   var $7;
   var $8;
   var $9;
   $9=$__os;
   var $10=$9;
   var $11=$9;
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(12))|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$11;
   var $18=(($17+$16)|0);
   var $19=$18;
   $4=$19;
   $5=10;
   var $20=$4;
   var $21=$20;
   __ZNKSt3__18ios_base6getlocEv($6, $21);
   $3=$6;
   var $22=$3;
   var $23 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($22, 13704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$23;
   var $25=$5;
   $1=$24;
   $2=$25;
   var $26=$1;
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$2;
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26, $31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   var $35=$34$0;
   $7=$35;
   var $36=$34$1;
   $8=$36;
   (function() { try { __THREW__ = 0; return __ZNSt3__16localeD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $38=$7;
   var $39=$8;
   var $40$0=$38;
   var $40$1=0;
   var $41$0=$40$0;
   var $41$1=$39;
   ___resumeException($41$0)
  case 5: 
   var $43$0 = ___cxa_find_matching_catch(-1, -1,0); $43$1 = tempRet0;
   var $44=$43$0;
   ___clang_call_terminate($44);
   throw "Reached an unreachable!";
  case 6: 
   __ZNSt3__16localeD2Ev($6);
   var $45=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10, $32);
   var $46=$9;
   var $47=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($46);
   var $48=$9;
   STACKTOP = sp;
   return $48;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($2);
 return;
}
function ___clang_call_terminate($0) {
 var label = 0;
 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}
function __ZN13VerticalLayerD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN13VerticalLayerD2Ev($2);
 return;
}
function __ZN16VerticalSunblindD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN16VerticalSunblindD2Ev($2);
 return;
}
// WARNING: content after a branch in a label, line: 2713
// WARNING: content after a branch in a label, line: 2715
// WARNING: content after a branch in a label, line: 2716
// WARNING: content after a branch in a label, line: 2717
// WARNING: content after a branch in a label, line: 2718
// WARNING: content after a branch in a label, line: 2719
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $__r_i;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62=sp;
   var $__sz;
   var $__ns;
   var $__np;
   var $63=(sp)+(8);
   var $__sp=(sp)+(16);
   var $64;
   var $65;
   var $66=(sp)+(32);
   var $67;
   var $68=(sp)+(40);
   $57=$__ob;
   $58=$__op;
   $59=$__oe;
   $60=$__iob;
   $61=$__fl;
   var $69=(($__s)|0);
   var $70=HEAP32[(($69)>>2)];
   $55=$62;
   $56=-1;
   var $71=$55;
   var $72=$56;
   $53=$71;
   $54=$72;
   var $73=$53;
   var $74=(($73)|0);
   HEAP32[(($74)>>2)]=0;
   $52=$62;
   var $75=$52;
   var $76=(($70)|(0))==0;
   if ($76) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $78=$agg_result;
   var $79=$__s;
   assert(4 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
   label = 30; break;
  case 3: 
   var $81=$59;
   var $82=$57;
   var $83=$81;
   var $84=$82;
   var $85=((($83)-($84))|0);
   $__sz=$85;
   var $86=$60;
   $41=$86;
   var $87=$41;
   var $88=(($87+12)|0);
   var $89=HEAP32[(($88)>>2)];
   $__ns=$89;
   var $90=$__ns;
   var $91=$__sz;
   var $92=(($90)|(0)) > (($91)|(0));
   if ($92) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $94=$__sz;
   var $95=$__ns;
   var $96=((($95)-($94))|0);
   $__ns=$96;
   label = 6; break;
  case 5: 
   $__ns=0;
   label = 6; break;
  case 6: 
   var $99=$58;
   var $100=$57;
   var $101=$99;
   var $102=$100;
   var $103=((($101)-($102))|0);
   $__np=$103;
   var $104=$__np;
   var $105=(($104)|(0)) > 0;
   if ($105) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $107=(($__s)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$57;
   var $110=$__np;
   $30=$108;
   $31=$109;
   $32=$110;
   var $111=$30;
   var $112=$111;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+48)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$31;
   var $117=$32;
   var $118=FUNCTION_TABLE[$115]($111, $116, $117);
   var $119=$__np;
   var $120=(($118)|(0))!=(($119)|(0));
   if ($120) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $28=$63;
   $29=-1;
   var $122=$28;
   var $123=$29;
   $26=$122;
   $27=$123;
   var $124=$26;
   var $125=(($124)|0);
   HEAP32[(($125)>>2)]=0;
   $1=$63;
   var $126=$1;
   var $127=(($__s)|0);
   HEAP32[(($127)>>2)]=0;
   var $128=$agg_result;
   var $129=$__s;
   assert(4 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];
   label = 30; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $132=$__ns;
   var $133=(($132)|(0)) > 0;
   if ($133) { label = 11; break; } else { label = 25; break; }
  case 11: 
   var $135=$__ns;
   var $136=$61;
   $9=$__sp;
   $10=$135;
   $11=$136;
   var $137=$9;
   var $138=$10;
   var $139=$11;
   $6=$137;
   $7=$138;
   $8=$139;
   var $140=$6;
   var $141=$140;
   var $142=(($140)|0);
   $5=$142;
   var $143=$5;
   $4=$143;
   var $144=$4;
   var $145=$144;
   $3=$145;
   var $146=$3;
   var $147=$146;
   $2=$147;
   var $148=$2;
   var $149=(($146)|0);
   var $150=$7;
   var $151=$8;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($140, $150, $151);
   var $152=(($__s)|0);
   var $153=HEAP32[(($152)>>2)];
   $25=$__sp;
   var $154=$25;
   $24=$154;
   var $155=$24;
   $23=$155;
   var $156=$23;
   var $157=(($156)|0);
   $22=$157;
   var $158=$22;
   var $159=$158;
   $21=$159;
   var $160=$21;
   var $161=(($160)|0);
   var $162=(($161)|0);
   var $163=$162;
   var $164=(($163)|0);
   var $165=$164;
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=$167 & 1;
   var $169=(($168)|(0))!=0;
   if ($169) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $15=$155;
   var $171=$15;
   var $172=(($171)|0);
   $14=$172;
   var $173=$14;
   var $174=$173;
   $13=$174;
   var $175=$13;
   var $176=(($175)|0);
   var $177=(($176)|0);
   var $178=$177;
   var $179=(($178+8)|0);
   var $180=HEAP32[(($179)>>2)];
   var $194 = $180;label = 14; break;
  case 13: 
   $20=$155;
   var $182=$20;
   var $183=(($182)|0);
   $19=$183;
   var $184=$19;
   var $185=$184;
   $18=$185;
   var $186=$18;
   var $187=(($186)|0);
   var $188=(($187)|0);
   var $189=$188;
   var $190=(($189+1)|0);
   var $191=(($190)|0);
   $17=$191;
   var $192=$17;
   $16=$192;
   var $193=$16;
   var $194 = $193;label = 14; break;
  case 14: 
   var $194;
   $12=$194;
   var $195=$12;
   var $196=$__ns;
   $33=$153;
   $34=$195;
   $35=$196;
   var $197=$33;
   var $198=$197;
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+48)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=$34;
   var $203=$35;
   var $204 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($197, $202, $203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 20; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $206=$__ns;
   var $207=(($204)|(0))!=(($206)|(0));
   if ($207) { label = 17; break; } else { label = 21; break; }
  case 17: 
   $38=$66;
   $39=-1;
   var $209=$38;
   var $210=$39;
   $36=$209;
   $37=$210;
   var $211=$36;
   var $212=(($211)|0);
   HEAP32[(($212)>>2)]=0;
   label = 18; break;
  case 18: 
   $40=$66;
   var $214=$40;
   label = 19; break;
  case 19: 
   var $216=(($__s)|0);
   HEAP32[(($216)>>2)]=0;
   var $217=$agg_result;
   var $218=$__s;
   assert(4 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($218)>>2)];
   $67=1;
   label = 22; break;
  case 20: 
   var $220$0 = ___cxa_find_matching_catch(-1, -1); $220$1 = tempRet0;
   var $221=$220$0;
   $64=$221;
   var $222=$220$1;
   $65=$222;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 32; break; }
  case 21: 
   $67=0;
   label = 22; break;
  case 22: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   var $cleanup_dest=$67;
   if ((($cleanup_dest)|(0))==0) {
    label = 23; break;
   }
   else if ((($cleanup_dest)|(0))==1) {
    label = 30; break;
   }
   else {
   label = 33; break;
   }
  case 23: 
   label = 25; break;
  case 24: 
   label = 31; break;
  case 25: 
   var $228=$59;
   var $229=$58;
   var $230=$228;
   var $231=$229;
   var $232=((($230)-($231))|0);
   $__np=$232;
   var $233=$__np;
   var $234=(($233)|(0)) > 0;
   if ($234) { label = 26; break; } else { label = 29; break; }
  case 26: 
   var $236=(($__s)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$58;
   var $239=$__np;
   $42=$237;
   $43=$238;
   $44=$239;
   var $240=$42;
   var $241=$240;
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+48)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=$43;
   var $246=$44;
   var $247=FUNCTION_TABLE[$244]($240, $245, $246);
   var $248=$__np;
   var $249=(($247)|(0))!=(($248)|(0));
   if ($249) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $47=$68;
   $48=-1;
   var $251=$47;
   var $252=$48;
   $45=$251;
   $46=$252;
   var $253=$45;
   var $254=(($253)|0);
   HEAP32[(($254)>>2)]=0;
   $49=$68;
   var $255=$49;
   var $256=(($__s)|0);
   HEAP32[(($256)>>2)]=0;
   var $257=$agg_result;
   var $258=$__s;
   assert(4 % 1 === 0);HEAP32[(($257)>>2)]=HEAP32[(($258)>>2)];
   label = 30; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $261=$60;
   $50=$261;
   $51=0;
   var $262=$50;
   var $263=(($262+12)|0);
   var $264=HEAP32[(($263)>>2)];
   $__r_i=$264;
   var $265=$51;
   var $266=(($262+12)|0);
   HEAP32[(($266)>>2)]=$265;
   var $267=$__r_i;
   var $268=$agg_result;
   var $269=$__s;
   assert(4 % 1 === 0);HEAP32[(($268)>>2)]=HEAP32[(($269)>>2)];
   label = 30; break;
  case 30: 
   STACKTOP = sp;
   return;
  case 31: 
   var $272=$64;
   var $273=$65;
   var $274$0=$272;
   var $274$1=0;
   var $275$0=$274$0;
   var $275$1=$273;
   ___resumeException($275$0)
  case 32: 
   var $277$0 = ___cxa_find_matching_catch(-1, -1,0); $277$1 = tempRet0;
   var $278=$277$0;
   ___clang_call_terminate($278);
   throw "Reached an unreachable!";
  case 33: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18=(sp)+(8);
   var $19;
   var $20;
   $17=$__x;
   var $21=$17;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   $14=$18;
   $15=-1;
   var $24=$14;
   var $25=$15;
   $12=$24;
   $13=$25;
   var $26=$12;
   var $27=(($26)|0);
   HEAP32[(($27)>>2)]=0;
   label = 2; break;
  case 2: 
   $1=$18;
   var $29=$1;
   label = 3; break;
  case 3: 
   var $31=(($23)|(0))!=0;
   if ($31) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $33=$17;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   $7=$35;
   label = 5; break;
  case 5: 
   var $37=$7;
   var $38=$37;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   $5=$8;
   $6=-1;
   var $41=$5;
   var $42=$6;
   $3=$41;
   $4=$42;
   var $43=$3;
   var $44=(($43)|0);
   HEAP32[(($44)>>2)]=0;
   $2=$8;
   var $45=$2;
   var $46=(($40)|(0))!=0;
   if ($46) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $48=$7;
   var $49=$48;
   var $50=(($49)|0);
   var $51=HEAP32[(($50)>>2)];
   $7=$51;
   label = 5; break;
  case 7: 
   var $52=$7;
   $16=$52;
   label = 13; break;
  case 8: 
   var $58=$19;
   ___cxa_call_unexpected($58);
   throw "Reached an unreachable!";
  case 9: 
   label = 10; break;
  case 10: 
   var $61=$17;
   $11=$61;
   var $62=$11;
   var $63=$11;
   var $64=(($63+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65;
   var $67=(($66)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($62)|(0))==(($68)|(0));
   var $70=$69 ^ 1;
   if ($70) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $72=$17;
   var $73=(($72+8)|0);
   var $74=HEAP32[(($73)>>2)];
   $17=$74;
   label = 10; break;
  case 12: 
   var $76=$17;
   var $77=(($76+8)|0);
   var $78=HEAP32[(($77)>>2)];
   $16=$78;
   label = 13; break;
  case 13: 
   var $80=$16;
   STACKTOP = sp;
   return $80;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN16VerticalSunblindD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN8SunblindD2Ev($3);
 return;
}
function __ZN8SunblindD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((5112)|0);
 var $4=(($2+8)|0);
 __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEED1Ev($4);
 return;
}
function __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEED2Ev($2);
 return;
}
function __ZN8Sunblind9calculateEv($agg_result, $this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $c1_i_i_i=sp;
   var $32;
   var $33=(sp)+(8);
   var $34;
   var $35;
   var $36=(sp)+(16);
   var $37=(sp)+(24);
   var $38;
   var $39;
   var $40;
   var $41;
   var $42=(sp)+(32);
   var $43=(sp)+(40);
   var $44;
   var $45;
   var $i;
   var $46=(sp)+(56);
   var $47=(sp)+(72);
   var $48;
   $40=$this;
   var $49=$40;
   $41=0;
   $38=$agg_result;
   $39=$42;
   var $50=$38;
   var $51=$39;
   $34=$50;
   $35=$51;
   var $52=$34;
   var $53=(($52)|0);
   var $54=$35;
   var $tmp_i_i=$33;
   var $tmp1_i_i=$37;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $32=$36;
   var $55=$32;
   var $tmp_i_i_i=$c1_i_i_i;
   var $tmp2_i_i_i=$33;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp2_i_i_i)];
   $31=$55;
   var $56=$31;
   var $57=$56;
   __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEEC1ERKSH_($53, $36);
   $29=$43;
   $30=((1344)|0);
   var $58=$29;
   var $59=$30;
   $27=$58;
   $28=$59;
   var $60=$27;
   var $61=$60;
   var $62=(($60)|0);
   $26=$62;
   var $63=$26;
   $25=$63;
   var $64=$25;
   var $65=$64;
   $24=$65;
   var $66=$24;
   var $67=$66;
   $23=$67;
   var $68=$23;
   var $69=(($66)|0);
   var $70=$28;
   var $71=$28;
   $22=$71;
   var $72=$22;
   var $73 = (function() { try { __THREW__ = 0; return _strlen($72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 17; break; }
  case 2: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($60, $70, $73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 17; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $75 = (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEixERSA_($agg_result, $43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 18; break; }
  case 5: 
   HEAPF32[(($75)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 17; break; }
  case 6: 
   $i=0;
   label = 7; break;
  case 7: 
   var $79=$i;
   var $80=(($49+8)|0);
   $21=$80;
   var $81=$21;
   var $82=$81;
   var $83=(($82+4)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$81;
   var $86=(($85)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$84;
   var $89=$87;
   var $90=((($88)-($89))|0);
   var $91=((((($90)|(0)))/(4))&-1);
   var $92=(($79)>>>(0)) < (($91)>>>(0));
   if ($92) { label = 8; break; } else { label = 22; break; }
  case 8: 
   var $94=(($49+8)|0);
   var $95=$i;
   $19=$94;
   $20=$95;
   var $96=$19;
   var $97=$20;
   var $98=$96;
   var $99=(($98)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+($97<<2))|0);
   label = 9; break;
  case 9: 
   var $103=HEAP32[(($101)>>2)];
   var $104=$103;
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 17; break; }
  case 10: 
   $17=$46;
   $18=((1344)|0);
   var $110=$17;
   var $111=$18;
   $15=$110;
   $16=$111;
   var $112=$15;
   var $113=$112;
   var $114=(($112)|0);
   $14=$114;
   var $115=$14;
   $13=$115;
   var $116=$13;
   var $117=$116;
   $12=$117;
   var $118=$12;
   var $119=$118;
   $11=$119;
   var $120=$11;
   var $121=(($118)|0);
   var $122=$16;
   var $123=$16;
   $10=$123;
   var $124=$10;
   var $125 = (function() { try { __THREW__ = 0; return _strlen($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 17; break; }
  case 11: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($112, $122, $125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 17; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $127 = (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEixERSA_($agg_result, $46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 20; break; }
  case 14: 
   var $129=HEAPF32[(($127)>>2)];
   var $130=($129)+($108);
   HEAPF32[(($127)>>2)]=$130;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $133=$i;
   var $134=((($133)+(1))|0);
   $i=$134;
   label = 7; break;
  case 17: 
   var $136$0 = ___cxa_find_matching_catch(-1, -1); $136$1 = tempRet0;
   var $137=$136$0;
   $44=$137;
   var $138=$136$1;
   $45=$138;
   label = 33; break;
  case 18: 
   var $140$0 = ___cxa_find_matching_catch(-1, -1); $140$1 = tempRet0;
   var $141=$140$0;
   $44=$141;
   var $142=$140$1;
   $45=$142;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 36; break; }
  case 19: 
   label = 33; break;
  case 20: 
   var $145$0 = ___cxa_find_matching_catch(-1, -1); $145$1 = tempRet0;
   var $146=$145$0;
   $44=$146;
   var $147=$145$1;
   $45=$147;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 36; break; }
  case 21: 
   label = 33; break;
  case 22: 
   var $150=(($49+4)|0);
   var $151 = (function() { try { __THREW__ = 0; return __ZN7Cornice9calculateEv($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 17; break; }
  case 23: 
   $8=$47;
   $9=((1232)|0);
   var $153=$8;
   var $154=$9;
   $6=$153;
   $7=$154;
   var $155=$6;
   var $156=$155;
   var $157=(($155)|0);
   $5=$157;
   var $158=$5;
   $4=$158;
   var $159=$4;
   var $160=$159;
   $3=$160;
   var $161=$3;
   var $162=$161;
   $2=$162;
   var $163=$2;
   var $164=(($161)|0);
   var $165=$7;
   var $166=$7;
   $1=$166;
   var $167=$1;
   var $168 = (function() { try { __THREW__ = 0; return _strlen($167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 17; break; }
  case 24: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($155, $165, $168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 17; break; }
  case 25: 
   label = 26; break;
  case 26: 
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEixERSA_($agg_result, $47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 29; break; }
  case 27: 
   HEAPF32[(($170)>>2)]=$151;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 17; break; }
  case 28: 
   $41=1;
   $48=1;
   var $173=$41;
   if ($173) { label = 32; break; } else { label = 31; break; }
  case 29: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $44=$176;
   var $177=$175$1;
   $45=$177;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 36; break; }
  case 30: 
   label = 33; break;
  case 31: 
   __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($agg_result);
   label = 32; break;
  case 32: 
   STACKTOP = sp;
   return;
  case 33: 
   (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($agg_result) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 36; break; }
  case 34: 
   label = 35; break;
  case 35: 
   var $184=$44;
   var $185=$45;
   var $186$0=$184;
   var $186$1=0;
   var $187$0=$186$0;
   var $187$1=$185;
   ___resumeException($187$0)
  case 36: 
   var $189$0 = ___cxa_find_matching_catch(-1, -1,0); $189$1 = tempRet0;
   var $190=$189$0;
   ___clang_call_terminate($190);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 3810
// WARNING: content after a branch in a label, line: 3812
// WARNING: content after a branch in a label, line: 3813
// WARNING: content after a branch in a label, line: 3814
// WARNING: content after a branch in a label, line: 3815
// WARNING: content after a branch in a label, line: 3816
// WARNING: content after a branch in a label, line: 3817
// WARNING: content after a branch in a label, line: 3818
// WARNING: content after a branch in a label, line: 3819
// WARNING: content after a branch in a label, line: 3820
// WARNING: content after a branch in a label, line: 3821
// WARNING: content after a branch in a label, line: 3822
// WARNING: content after a branch in a label, line: 3823
// WARNING: content after a branch in a label, line: 3824
// WARNING: content after a branch in a label, line: 3825
// WARNING: content after a branch in a label, line: 3826
// WARNING: content after a branch in a label, line: 3827
// WARNING: content after a branch in a label, line: 3828
// WARNING: content after a branch in a label, line: 3829
// WARNING: content after a branch in a label, line: 3830
// WARNING: content after a branch in a label, line: 3831
// WARNING: content after a branch in a label, line: 3832
// WARNING: content after a branch in a label, line: 3833
// WARNING: content after a branch in a label, line: 3834
// WARNING: content after a branch in a label, line: 3835
// WARNING: content after a branch in a label, line: 3836
// WARNING: content after a branch in a label, line: 3837
// WARNING: content after a branch in a label, line: 3838
// WARNING: content after a branch in a label, line: 3839
// WARNING: content after a branch in a label, line: 3840
// WARNING: content after a branch in a label, line: 3841
// WARNING: content after a branch in a label, line: 3842
// WARNING: content after a branch in a label, line: 3843
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEixERSA_($this, $__k) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9;
   var $10;
   var $11=(sp)+(8);
   var $12=(sp)+(16);
   var $13;
   var $14;
   var $15=(sp)+(24);
   var $16;
   var $17;
   var $18=(sp)+(32);
   var $19=(sp)+(40);
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $__tmp_i_i_i18;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44=(sp)+(48);
   var $45;
   var $46;
   var $47=(sp)+(56);
   var $48=(sp)+(64);
   var $49;
   var $50;
   var $51=(sp)+(72);
   var $52;
   var $53;
   var $54=(sp)+(80);
   var $55=(sp)+(88);
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $__tmp_i_i_i10;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $__t_i;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88=(sp)+(96);
   var $89;
   var $90;
   var $91=(sp)+(104);
   var $92=(sp)+(112);
   var $93;
   var $94;
   var $95=(sp)+(120);
   var $96;
   var $97;
   var $98=(sp)+(128);
   var $99=(sp)+(136);
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $__tmp_i_i_i2;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $__t_i_i_i;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131=(sp)+(144);
   var $132=(sp)+(152);
   var $133;
   var $134;
   var $135=(sp)+(160);
   var $136=(sp)+(168);
   var $__t21_i_i_i=(sp)+(176);
   var $137;
   var $138;
   var $139=(sp)+(184);
   var $140;
   var $141;
   var $142=(sp)+(192);
   var $__u1_i=(sp)+(200);
   var $143;
   var $144=(sp)+(208);
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157=(sp)+(216);
   var $158;
   var $159;
   var $160=(sp)+(224);
   var $161=(sp)+(232);
   var $162;
   var $163;
   var $164=(sp)+(240);
   var $165;
   var $166;
   var $167=(sp)+(248);
   var $168=(sp)+(256);
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $__tmp_i_i_i;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $__parent=(sp)+(264);
   var $__child;
   var $__r;
   var $193=(sp)+(272);
   var $__h=(sp)+(280);
   var $194=(sp)+(296);
   var $195=(sp)+(304);
   var $196;
   var $197;
   $191=$this;
   $192=$__k;
   var $198=$191;
   var $199=$192;
   var $200=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($198, $__parent, $199);
   $__child=$200;
   var $201=$__child;
   var $202=HEAP32[(($201)>>2)];
   var $203=$202;
   $__r=$203;
   var $204=$__child;
   var $205=HEAP32[(($204)>>2)];
   $189=$193;
   $190=-1;
   var $206=$189;
   var $207=$190;
   $187=$206;
   $188=$207;
   var $208=$187;
   var $209=(($208)|0);
   HEAP32[(($209)>>2)]=0;
   $186=$193;
   var $210=$186;
   var $211=(($205)|(0))==0;
   if ($211) { label = 2; break; } else { label = 49; break; }
  case 2: 
   var $213=$192;
   __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE25__construct_node_with_keyERSA_($195, $198, $213);
   $149=$195;
   var $214=$149;
   $147=$194;
   $148=$214;
   var $215=$147;
   var $216=$148;
   $145=$215;
   $146=$216;
   var $217=$145;
   var $218=(($217)|0);
   var $219=$146;
   HEAP32[(($218)>>2)]=$219;
   label = 3; break;
  case 3: 
   var $tmp=$144;
   var $tmp1=$194;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   $143=$__h;
   var $221=$143;
   var $tmp_i=$__u1_i;
   var $tmp2_i=$144;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp2_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp2_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp2_i)+(3))|0)];
   $141=$221;
   var $222=$141;
   var $223=(($222)|0);
   $140=$__u1_i;
   var $224=$140;
   var $225=(($224)|0);
   var $226=HEAP32[(($225)>>2)];
   $121=$226;
   var $227=$121;
   var $228=(($227)|0);
   $120=$228;
   var $229=$120;
   var $230=$229;
   $119=$230;
   var $231=$119;
   var $232=(($231)|0);
   var $233=HEAP32[(($232)>>2)];
   $__t_i_i_i=$233;
   var $234=(($227)|0);
   $118=$234;
   var $235=$118;
   var $236=$235;
   $117=$236;
   var $237=$117;
   var $238=(($237)|0);
   HEAP32[(($238)>>2)]=0;
   var $239=$__t_i_i_i;
   $122=$__u1_i;
   var $240=$122;
   var $241=(($240)|0);
   var $242=HEAP32[(($241)>>2)];
   $125=$242;
   var $243=$125;
   var $244=(($243)|0);
   $124=$244;
   var $245=$124;
   var $246=$245;
   $123=$246;
   var $247=$123;
   var $248=(($247+4)|0);
   $126=$248;
   var $249=$126;
   var $250=$142;
   var $251=$249;
   assert(8 % 1 === 0);HEAP32[(($250)>>2)]=HEAP32[(($251)>>2)];HEAP32[((($250)+(4))>>2)]=HEAP32[((($251)+(4))>>2)];
   var $tmp_i_i=$139;
   var $tmp1_i_i=$142;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
   $137=$223;
   $138=$239;
   var $252=$137;
   var $253=$138;
   var $tmp_i_i_i=$__t21_i_i_i;
   var $tmp2_i_i_i=$139;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
   $134=$252;
   HEAP32[(($135)>>2)]=$253;
   var $254=$134;
   var $255=$254;
   $133=$135;
   var $256=$133;
   var $257=HEAP32[(($256)>>2)];
   $127=$__t21_i_i_i;
   var $258=$127;
   var $259=$136;
   var $260=$258;
   assert(8 % 1 === 0);HEAP32[(($259)>>2)]=HEAP32[(($260)>>2)];HEAP32[((($259)+(4))>>2)]=HEAP32[((($260)+(4))>>2)];
   var $tmp_i_i_i_i=$132;
   var $tmp1_i_i_i_i=$136;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
   $130=$255;
   HEAP32[(($131)>>2)]=$257;
   var $261=$130;
   var $262=(($261)|0);
   $129=$131;
   var $263=$129;
   var $264=HEAP32[(($263)>>2)];
   HEAP32[(($262)>>2)]=$264;
   var $265=(($261+4)|0);
   $128=$132;
   var $266=$128;
   var $267=$265;
   var $268=$266;
   assert(8 % 1 === 0);HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[((($267)+(4))>>2)]=HEAP32[((($268)+(4))>>2)];
   label = 4; break;
  case 4: 
   $116=$195;
   var $270=$116;
   $115=$270;
   var $271=$115;
   $113=$271;
   $114=0;
   var $272=$113;
   var $273=(($272)|0);
   $112=$273;
   var $274=$112;
   var $275=$274;
   $111=$275;
   var $276=$111;
   var $277=(($276)|0);
   var $278=HEAP32[(($277)>>2)];
   $__tmp_i_i_i2=$278;
   var $279=$114;
   var $280=(($272)|0);
   $84=$280;
   var $281=$84;
   var $282=$281;
   $83=$282;
   var $283=$83;
   var $284=(($283)|0);
   HEAP32[(($284)>>2)]=$279;
   var $285=$__tmp_i_i_i2;
   var $286=(($285)|(0))!=0;
   if ($286) { label = 5; break; } else { label = 14; break; }
  case 5: 
   var $288=(($272)|0);
   $82=$288;
   var $289=$82;
   var $290=$289;
   $81=$290;
   var $291=$81;
   var $292=(($291+4)|0);
   var $293=$__tmp_i_i_i2;
   $107=$292;
   $108=$293;
   var $294=$107;
   var $295=(($294+5)|0);
   var $296=HEAP8[($295)];
   var $297=(($296) & 1);
   if ($297) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $299=(($294)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=$108;
   var $302=(($301+16)|0);
   var $303=(($302)|0);
   var $304=(($303+12)|0);
   $106=$304;
   var $305=$106;
   var $306=$305;
   var $307=$306;
   $96=$300;
   $97=$307;
   var $308=$99;
   var $309=$96;
   var $310=$97;
   var $tmp_i_i_i_i_i3=$95;
   var $tmp1_i_i_i_i_i4=$98;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
   $93=$309;
   $94=$310;
   var $311=$94;
   label = 8; break;
  case 7: 
   var $313$0 = ___cxa_find_matching_catch(-1, -1); $313$1 = tempRet0;
   var $314=$313$0;
   $109=$314;
   var $315=$313$1;
   $110=$315;
   var $316=$109;
   ___cxa_call_unexpected($316);
   throw "Reached an unreachable!";
  case 8: 
   var $318=(($294+4)|0);
   var $319=HEAP8[($318)];
   var $320=(($319) & 1);
   if ($320) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $322=(($294)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=$108;
   var $325=(($324+16)|0);
   var $326=(($325)|0);
   var $327=(($326)|0);
   $85=$327;
   var $328=$85;
   var $329=$328;
   var $330=$329;
   $89=$323;
   $90=$330;
   var $331=$92;
   var $332=$89;
   var $333=$90;
   var $tmp_i1_i_i_i_i5=$88;
   var $tmp1_i2_i_i_i_i6=$91;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i5)]=HEAP8[($tmp1_i2_i_i_i_i6)];
   $86=$332;
   $87=$333;
   var $334=$87;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($334) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 7; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $336=$108;
   var $337=(($336)|(0))!=0;
   if ($337) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $339=(($294)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=$108;
   $103=$340;
   $104=$341;
   $105=1;
   var $342=$103;
   var $343=$104;
   var $344=$105;
   $100=$342;
   $101=$343;
   $102=$344;
   var $345=$100;
   var $346=$101;
   var $347=$346;
   __ZdlPv($347);
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $348=(($198)|0);
   var $349=HEAP32[(($__parent)>>2)];
   var $350=$__child;
   $80=$__h;
   var $351=$80;
   var $352=(($351)|0);
   $79=$352;
   var $353=$79;
   var $354=$353;
   $78=$354;
   var $355=$78;
   var $356=(($355)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=$357;
   (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSN_SN_($348, $349, $350, $358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 37; break; }
  case 15: 
   $77=$__h;
   var $360=$77;
   var $361=(($360)|0);
   $76=$361;
   var $362=$76;
   var $363=$362;
   $75=$363;
   var $364=$75;
   var $365=(($364)|0);
   var $366=HEAP32[(($365)>>2)];
   $__t_i=$366;
   var $367=(($360)|0);
   $74=$367;
   var $368=$74;
   var $369=$368;
   $73=$369;
   var $370=$73;
   var $371=(($370)|0);
   HEAP32[(($371)>>2)]=0;
   var $372=$__t_i;
   $__r=$372;
   $72=$__h;
   var $373=$72;
   $71=$373;
   var $374=$71;
   $69=$374;
   $70=0;
   var $375=$69;
   var $376=(($375)|0);
   $68=$376;
   var $377=$68;
   var $378=$377;
   $67=$378;
   var $379=$67;
   var $380=(($379)|0);
   var $381=HEAP32[(($380)>>2)];
   $__tmp_i_i_i10=$381;
   var $382=$70;
   var $383=(($375)|0);
   $40=$383;
   var $384=$40;
   var $385=$384;
   $39=$385;
   var $386=$39;
   var $387=(($386)|0);
   HEAP32[(($387)>>2)]=$382;
   var $388=$__tmp_i_i_i10;
   var $389=(($388)|(0))!=0;
   if ($389) { label = 16; break; } else { label = 25; break; }
  case 16: 
   var $391=(($375)|0);
   $38=$391;
   var $392=$38;
   var $393=$392;
   $37=$393;
   var $394=$37;
   var $395=(($394+4)|0);
   var $396=$__tmp_i_i_i10;
   $63=$395;
   $64=$396;
   var $397=$63;
   var $398=(($397+5)|0);
   var $399=HEAP8[($398)];
   var $400=(($399) & 1);
   if ($400) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $402=(($397)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=$64;
   var $405=(($404+16)|0);
   var $406=(($405)|0);
   var $407=(($406+12)|0);
   $62=$407;
   var $408=$62;
   var $409=$408;
   var $410=$409;
   $52=$403;
   $53=$410;
   var $411=$55;
   var $412=$52;
   var $413=$53;
   var $tmp_i_i_i_i_i11=$51;
   var $tmp1_i_i_i_i_i12=$54;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i11)]=HEAP8[($tmp1_i_i_i_i_i12)];
   $49=$412;
   $50=$413;
   var $414=$50;
   label = 19; break;
  case 18: 
   var $416$0 = ___cxa_find_matching_catch(-1, -1); $416$1 = tempRet0;
   var $417=$416$0;
   $65=$417;
   var $418=$416$1;
   $66=$418;
   var $419=$65;
   ___cxa_call_unexpected($419);
   throw "Reached an unreachable!";
  case 19: 
   var $421=(($397+4)|0);
   var $422=HEAP8[($421)];
   var $423=(($422) & 1);
   if ($423) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $425=(($397)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=$64;
   var $428=(($427+16)|0);
   var $429=(($428)|0);
   var $430=(($429)|0);
   $41=$430;
   var $431=$41;
   var $432=$431;
   var $433=$432;
   $45=$426;
   $46=$433;
   var $434=$48;
   var $435=$45;
   var $436=$46;
   var $tmp_i1_i_i_i_i13=$44;
   var $tmp1_i2_i_i_i_i14=$47;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i13)]=HEAP8[($tmp1_i2_i_i_i_i14)];
   $42=$435;
   $43=$436;
   var $437=$43;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 18; break; }
  case 21: 
   label = 22; break;
  case 22: 
   var $439=$64;
   var $440=(($439)|(0))!=0;
   if ($440) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $442=(($397)|0);
   var $443=HEAP32[(($442)>>2)];
   var $444=$64;
   $59=$443;
   $60=$444;
   $61=1;
   var $445=$59;
   var $446=$60;
   var $447=$61;
   $56=$445;
   $57=$446;
   $58=$447;
   var $448=$56;
   var $449=$57;
   var $450=$449;
   __ZdlPv($450);
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 49; break;
  case 26: 
   var $473=(($457)|0);
   $2=$473;
   var $474=$2;
   var $475=$474;
   $1=$475;
   var $476=$1;
   var $477=(($476+4)|0);
   var $478=$__tmp_i_i_i18;
   $27=$477;
   $28=$478;
   var $479=$27;
   var $480=(($479+5)|0);
   var $481=HEAP8[($480)];
   var $482=(($481) & 1);
   if ($482) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $484=(($479)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=$28;
   var $487=(($486+16)|0);
   var $488=(($487)|0);
   var $489=(($488+12)|0);
   $26=$489;
   var $490=$26;
   var $491=$490;
   var $492=$491;
   $16=$485;
   $17=$492;
   var $493=$19;
   var $494=$16;
   var $495=$17;
   var $tmp_i_i_i_i_i19=$15;
   var $tmp1_i_i_i_i_i20=$18;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i19)]=HEAP8[($tmp1_i_i_i_i_i20)];
   $13=$494;
   $14=$495;
   var $496=$14;
   label = 29; break;
  case 28: 
   var $498$0 = ___cxa_find_matching_catch(-1, -1,0); $498$1 = tempRet0;
   var $499=$498$0;
   $29=$499;
   var $500=$498$1;
   $30=$500;
   var $501=$29;
   ___cxa_call_unexpected($501);
   throw "Reached an unreachable!";
  case 29: 
   var $503=(($479+4)|0);
   var $504=HEAP8[($503)];
   var $505=(($504) & 1);
   if ($505) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $507=(($479)|0);
   var $508=HEAP32[(($507)>>2)];
   var $509=$28;
   var $510=(($509+16)|0);
   var $511=(($510)|0);
   var $512=(($511)|0);
   $5=$512;
   var $513=$5;
   var $514=$513;
   var $515=$514;
   $9=$508;
   $10=$515;
   var $516=$12;
   var $517=$9;
   var $518=$10;
   var $tmp_i1_i_i_i_i21=$8;
   var $tmp1_i2_i_i_i_i22=$11;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i21)]=HEAP8[($tmp1_i2_i_i_i_i22)];
   $6=$517;
   $7=$518;
   var $519=$7;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 28; break; }
  case 31: 
   label = 32; break;
  case 32: 
   var $521=$28;
   var $522=(($521)|(0))!=0;
   if ($522) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $524=(($479)|0);
   var $525=HEAP32[(($524)>>2)];
   var $526=$28;
   $23=$525;
   $24=$526;
   $25=1;
   var $527=$23;
   var $528=$24;
   var $529=$25;
   $20=$527;
   $21=$528;
   $22=$529;
   var $530=$20;
   var $531=$21;
   var $532=$531;
   __ZdlPv($532);
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   label = 36; break;
  case 36: 
   label = 50; break;
  case 37: 
   var $535$0 = ___cxa_find_matching_catch(-1, -1); $535$1 = tempRet0;
   var $536=$535$0;
   $196=$536;
   var $537=$535$1;
   $197=$537;
   $185=$__h;
   var $538=$185;
   $184=$538;
   var $539=$184;
   $182=$539;
   $183=0;
   var $540=$182;
   var $541=(($540)|0);
   $181=$541;
   var $542=$181;
   var $543=$542;
   $180=$543;
   var $544=$180;
   var $545=(($544)|0);
   var $546=HEAP32[(($545)>>2)];
   $__tmp_i_i_i=$546;
   var $547=$183;
   var $548=(($540)|0);
   $153=$548;
   var $549=$153;
   var $550=$549;
   $152=$550;
   var $551=$152;
   var $552=(($551)|0);
   HEAP32[(($552)>>2)]=$547;
   var $553=$__tmp_i_i_i;
   var $554=(($553)|(0))!=0;
   if ($554) { label = 38; break; } else { label = 47; break; }
  case 38: 
   var $556=(($540)|0);
   $151=$556;
   var $557=$151;
   var $558=$557;
   $150=$558;
   var $559=$150;
   var $560=(($559+4)|0);
   var $561=$__tmp_i_i_i;
   $176=$560;
   $177=$561;
   var $562=$176;
   var $563=(($562+5)|0);
   var $564=HEAP8[($563)];
   var $565=(($564) & 1);
   if ($565) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $567=(($562)|0);
   var $568=HEAP32[(($567)>>2)];
   var $569=$177;
   var $570=(($569+16)|0);
   var $571=(($570)|0);
   var $572=(($571+12)|0);
   $175=$572;
   var $573=$175;
   var $574=$573;
   var $575=$574;
   $165=$568;
   $166=$575;
   var $576=$168;
   var $577=$165;
   var $578=$166;
   var $tmp_i_i_i_i_i=$164;
   var $tmp1_i_i_i_i_i=$167;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
   $162=$577;
   $163=$578;
   var $579=$163;
   label = 41; break;
  case 40: 
   var $581$0 = ___cxa_find_matching_catch(-1, -1,0); $581$1 = tempRet0;
   var $582=$581$0;
   $178=$582;
   var $583=$581$1;
   $179=$583;
   var $584=$178;
   ___cxa_call_unexpected($584);
   throw "Reached an unreachable!";
  case 41: 
   var $586=(($562+4)|0);
   var $587=HEAP8[($586)];
   var $588=(($587) & 1);
   if ($588) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $590=(($562)|0);
   var $591=HEAP32[(($590)>>2)];
   var $592=$177;
   var $593=(($592+16)|0);
   var $594=(($593)|0);
   var $595=(($594)|0);
   $154=$595;
   var $596=$154;
   var $597=$596;
   var $598=$597;
   $158=$591;
   $159=$598;
   var $599=$161;
   var $600=$158;
   var $601=$159;
   var $tmp_i1_i_i_i_i=$157;
   var $tmp1_i2_i_i_i_i=$160;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
   $155=$600;
   $156=$601;
   var $602=$156;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($602) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 40; break; }
  case 43: 
   label = 44; break;
  case 44: 
   var $604=$177;
   var $605=(($604)|(0))!=0;
   if ($605) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $607=(($562)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=$177;
   $172=$608;
   $173=$609;
   $174=1;
   var $610=$172;
   var $611=$173;
   var $612=$174;
   $169=$610;
   $170=$611;
   $171=$612;
   var $613=$169;
   var $614=$170;
   var $615=$614;
   __ZdlPv($615);
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 50; break;
  case 49: 
   var $618=$__r;
   var $619=(($618+16)|0);
   var $620=(($619)|0);
   var $621=(($620+12)|0);
   STACKTOP = sp;
   return $621;
  case 50: 
   var $623=$196;
   var $624=$197;
   var $625$0=$623;
   var $625$1=0;
   var $626$0=$625$0;
   var $626$1=$624;
   ___resumeException($626$0)
   var $628$0 = ___cxa_find_matching_catch(-1, -1,0); $628$1 = tempRet0;
   var $629=$628$0;
   ___clang_call_terminate($629);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN7Cornice9calculateEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 3;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($this, $__parent, $__k) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38=sp;
   var $39;
   var $40;
   var $41=(sp)+(8);
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $__lhs_sz_i_i_i1=(sp)+(16);
   var $__rhs_sz_i_i_i2=(sp)+(24);
   var $__result_i_i_i3;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122=(sp)+(32);
   var $123;
   var $124;
   var $125=(sp)+(40);
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $__lhs_sz_i_i_i=(sp)+(48);
   var $__rhs_sz_i_i_i=(sp)+(56);
   var $__result_i_i_i;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $__nd;
   var $179=(sp)+(64);
   var $180=(sp)+(72);
   var $181=(sp)+(80);
   $176=$this;
   $177=$__parent;
   $178=$__k;
   var $182=$176;
   var $183=(($182)|0);
   $174=$183;
   var $184=$174;
   $173=$184;
   var $185=$173;
   var $186=(($185+4)|0);
   $172=$186;
   var $187=$172;
   var $188=$187;
   $171=$188;
   var $189=$171;
   var $190=(($189)|0);
   $170=$190;
   var $191=$170;
   $169=$191;
   var $192=$169;
   var $193=$192;
   var $194=$193;
   var $195=$194;
   var $196=$195;
   var $197=(($196)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=$198;
   $__nd=$199;
   var $200=$__nd;
   $87=$179;
   $88=-1;
   var $201=$87;
   var $202=$88;
   $85=$201;
   $86=$202;
   var $203=$85;
   var $204=(($203)|0);
   HEAP32[(($204)>>2)]=0;
   $84=$179;
   var $205=$84;
   var $206=(($200)|(0))!=0;
   if ($206) { label = 2; break; } else { label = 64; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $209=(($182)|0);
   $4=$209;
   var $210=$4;
   var $211=(($210+8)|0);
   $3=$211;
   var $212=$3;
   var $213=$212;
   $2=$213;
   var $214=$2;
   var $215=$214;
   $1=$215;
   var $216=$1;
   var $217=$216;
   var $218=$178;
   var $219=$__nd;
   var $220=(($219+16)|0);
   var $221=(($220)|0);
   var $222=(($221)|0);
   $72=$217;
   $73=$218;
   $74=$222;
   var $223=$72;
   var $224=$73;
   var $225=$74;
   $70=$224;
   $71=$225;
   var $226=$70;
   var $227=$71;
   $66=$226;
   $67=$227;
   var $228=$66;
   $64=$228;
   var $229=$64;
   $63=$229;
   var $230=$63;
   var $231=(($230)|0);
   $62=$231;
   var $232=$62;
   var $233=$232;
   $61=$233;
   var $234=$61;
   var $235=(($234)|0);
   var $236=(($235)|0);
   var $237=$236;
   var $238=(($237)|0);
   var $239=$238;
   var $240=HEAP8[($239)];
   var $241=(($240)&(255));
   var $242=$241 & 1;
   var $243=(($242)|(0))!=0;
   if ($243) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $57=$229;
   var $245=$57;
   var $246=(($245)|0);
   $56=$246;
   var $247=$56;
   var $248=$247;
   $55=$248;
   var $249=$55;
   var $250=(($249)|0);
   var $251=(($250)|0);
   var $252=$251;
   var $253=(($252+4)|0);
   var $254=HEAP32[(($253)>>2)];
   var $269 = $254;label = 6; break;
  case 5: 
   $60=$229;
   var $256=$60;
   var $257=(($256)|0);
   $59=$257;
   var $258=$59;
   var $259=$258;
   $58=$259;
   var $260=$58;
   var $261=(($260)|0);
   var $262=(($261)|0);
   var $263=$262;
   var $264=(($263)|0);
   var $265=$264;
   var $266=HEAP8[($265)];
   var $267=(($266)&(255));
   var $268=$267 >> 1;
   var $269 = $268;label = 6; break;
  case 6: 
   var $269;
   HEAP32[(($__lhs_sz_i_i_i1)>>2)]=$269;
   var $270=$67;
   $51=$270;
   var $271=$51;
   $50=$271;
   var $272=$50;
   var $273=(($272)|0);
   $49=$273;
   var $274=$49;
   var $275=$274;
   $48=$275;
   var $276=$48;
   var $277=(($276)|0);
   var $278=(($277)|0);
   var $279=$278;
   var $280=(($279)|0);
   var $281=$280;
   var $282=HEAP8[($281)];
   var $283=(($282)&(255));
   var $284=$283 & 1;
   var $285=(($284)|(0))!=0;
   if ($285) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $44=$271;
   var $287=$44;
   var $288=(($287)|0);
   $43=$288;
   var $289=$43;
   var $290=$289;
   $42=$290;
   var $291=$42;
   var $292=(($291)|0);
   var $293=(($292)|0);
   var $294=$293;
   var $295=(($294+4)|0);
   var $296=HEAP32[(($295)>>2)];
   var $311 = $296;label = 9; break;
  case 8: 
   $47=$271;
   var $298=$47;
   var $299=(($298)|0);
   $46=$299;
   var $300=$46;
   var $301=$300;
   $45=$301;
   var $302=$45;
   var $303=(($302)|0);
   var $304=(($303)|0);
   var $305=$304;
   var $306=(($305)|0);
   var $307=$306;
   var $308=HEAP8[($307)];
   var $309=(($308)&(255));
   var $310=$309 >> 1;
   var $311 = $310;label = 9; break;
  case 9: 
   var $311;
   HEAP32[(($__rhs_sz_i_i_i2)>>2)]=$311;
   $18=$228;
   var $312=$18;
   $17=$312;
   var $313=$17;
   $16=$313;
   var $314=$16;
   var $315=(($314)|0);
   $15=$315;
   var $316=$15;
   var $317=$316;
   $14=$317;
   var $318=$14;
   var $319=(($318)|0);
   var $320=(($319)|0);
   var $321=$320;
   var $322=(($321)|0);
   var $323=$322;
   var $324=HEAP8[($323)];
   var $325=(($324)&(255));
   var $326=$325 & 1;
   var $327=(($326)|(0))!=0;
   if ($327) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $8=$313;
   var $329=$8;
   var $330=(($329)|0);
   $7=$330;
   var $331=$7;
   var $332=$331;
   $6=$332;
   var $333=$6;
   var $334=(($333)|0);
   var $335=(($334)|0);
   var $336=$335;
   var $337=(($336+8)|0);
   var $338=HEAP32[(($337)>>2)];
   var $352 = $338;label = 12; break;
  case 11: 
   $13=$313;
   var $340=$13;
   var $341=(($340)|0);
   $12=$341;
   var $342=$12;
   var $343=$342;
   $11=$343;
   var $344=$11;
   var $345=(($344)|0);
   var $346=(($345)|0);
   var $347=$346;
   var $348=(($347+1)|0);
   var $349=(($348)|0);
   $10=$349;
   var $350=$10;
   $9=$350;
   var $351=$9;
   var $352 = $351;label = 12; break;
  case 12: 
   var $352;
   $5=$352;
   var $353=$5;
   var $354=$67;
   $32=$354;
   var $355=$32;
   $31=$355;
   var $356=$31;
   $30=$356;
   var $357=$30;
   var $358=(($357)|0);
   $29=$358;
   var $359=$29;
   var $360=$359;
   $28=$360;
   var $361=$28;
   var $362=(($361)|0);
   var $363=(($362)|0);
   var $364=$363;
   var $365=(($364)|0);
   var $366=$365;
   var $367=HEAP8[($366)];
   var $368=(($367)&(255));
   var $369=$368 & 1;
   var $370=(($369)|(0))!=0;
   if ($370) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $22=$356;
   var $372=$22;
   var $373=(($372)|0);
   $21=$373;
   var $374=$21;
   var $375=$374;
   $20=$375;
   var $376=$20;
   var $377=(($376)|0);
   var $378=(($377)|0);
   var $379=$378;
   var $380=(($379+8)|0);
   var $381=HEAP32[(($380)>>2)];
   var $395 = $381;label = 15; break;
  case 14: 
   $27=$356;
   var $383=$27;
   var $384=(($383)|0);
   $26=$384;
   var $385=$26;
   var $386=$385;
   $25=$386;
   var $387=$25;
   var $388=(($387)|0);
   var $389=(($388)|0);
   var $390=$389;
   var $391=(($390+1)|0);
   var $392=(($391)|0);
   $24=$392;
   var $393=$24;
   $23=$393;
   var $394=$23;
   var $395 = $394;label = 15; break;
  case 15: 
   var $395;
   $19=$395;
   var $396=$19;
   $39=$__lhs_sz_i_i_i1;
   $40=$__rhs_sz_i_i_i2;
   var $397=$39;
   var $398=$40;
   var $tmp_i_i_i_i7=$38;
   var $tmp1_i_i_i_i8=$41;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i7)]=HEAP8[($tmp1_i_i_i_i8)];
   $36=$397;
   $37=$398;
   var $399=$37;
   var $400=$36;
   $33=$38;
   $34=$399;
   $35=$400;
   var $401=$33;
   var $402=$34;
   var $403=HEAP32[(($402)>>2)];
   var $404=$35;
   var $405=HEAP32[(($404)>>2)];
   var $406=(($403)>>>(0)) < (($405)>>>(0));
   if ($406) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $408=$37;
   var $411 = $408;label = 18; break;
  case 17: 
   var $410=$36;
   var $411 = $410;label = 18; break;
  case 18: 
   var $411;
   var $412=HEAP32[(($411)>>2)];
   $52=$353;
   $53=$396;
   $54=$412;
   var $413=$52;
   var $414=$53;
   var $415=$54;
   var $416 = (function() { try { __THREW__ = 0; return _memcmp($413, $414, $415) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 21; break; }
  case 19: 
   $__result_i_i_i3=$416;
   var $417=$__result_i_i_i3;
   var $418=(($417)|(0))!=0;
   if ($418) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $420=$__result_i_i_i3;
   $65=$420;
   label = 27; break;
  case 21: 
   var $422$0 = ___cxa_find_matching_catch(-1, -1); $422$1 = tempRet0;
   var $423=$422$0;
   $68=$423;
   var $424=$422$1;
   $69=$424;
   var $425=$68;
   ___cxa_call_unexpected($425);
   throw "Reached an unreachable!";
  case 22: 
   var $427=HEAP32[(($__lhs_sz_i_i_i1)>>2)];
   var $428=HEAP32[(($__rhs_sz_i_i_i2)>>2)];
   var $429=(($427)>>>(0)) < (($428)>>>(0));
   if ($429) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $65=-1;
   label = 27; break;
  case 24: 
   var $432=HEAP32[(($__lhs_sz_i_i_i1)>>2)];
   var $433=HEAP32[(($__rhs_sz_i_i_i2)>>2)];
   var $434=(($432)>>>(0)) > (($433)>>>(0));
   if ($434) { label = 25; break; } else { label = 26; break; }
  case 25: 
   $65=1;
   label = 27; break;
  case 26: 
   $65=0;
   label = 27; break;
  case 27: 
   var $437=$65;
   var $438=(($437)|(0)) < 0;
   if ($438) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $440=$__nd;
   var $441=$440;
   var $442=(($441)|0);
   var $443=HEAP32[(($442)>>2)];
   $77=$180;
   $78=-1;
   var $444=$77;
   var $445=$78;
   $75=$444;
   $76=$445;
   var $446=$75;
   var $447=(($446)|0);
   HEAP32[(($447)>>2)]=0;
   $79=$180;
   var $448=$79;
   var $449=(($443)|(0))!=0;
   if ($449) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $451=$__nd;
   var $452=$451;
   var $453=(($452)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=$454;
   $__nd=$455;
   label = 31; break;
  case 30: 
   var $457=$__nd;
   var $458=$457;
   var $459=$177;
   HEAP32[(($459)>>2)]=$458;
   var $460=$177;
   var $461=HEAP32[(($460)>>2)];
   var $462=$461;
   var $463=(($462)|0);
   $175=$463;
   label = 65; break;
  case 31: 
   label = 63; break;
  case 32: 
   var $466=(($182)|0);
   $82=$466;
   var $467=$82;
   var $468=(($467+8)|0);
   $81=$468;
   var $469=$81;
   var $470=$469;
   $80=$470;
   var $471=$80;
   var $472=$471;
   $83=$472;
   var $473=$83;
   var $474=$473;
   var $475=$__nd;
   var $476=(($475+16)|0);
   var $477=(($476)|0);
   var $478=(($477)|0);
   var $479=$178;
   $156=$474;
   $157=$478;
   $158=$479;
   var $480=$156;
   var $481=$157;
   var $482=$158;
   $154=$481;
   $155=$482;
   var $483=$154;
   var $484=$155;
   $150=$483;
   $151=$484;
   var $485=$150;
   $148=$485;
   var $486=$148;
   $147=$486;
   var $487=$147;
   var $488=(($487)|0);
   $146=$488;
   var $489=$146;
   var $490=$489;
   $145=$490;
   var $491=$145;
   var $492=(($491)|0);
   var $493=(($492)|0);
   var $494=$493;
   var $495=(($494)|0);
   var $496=$495;
   var $497=HEAP8[($496)];
   var $498=(($497)&(255));
   var $499=$498 & 1;
   var $500=(($499)|(0))!=0;
   if ($500) { label = 33; break; } else { label = 34; break; }
  case 33: 
   $141=$486;
   var $502=$141;
   var $503=(($502)|0);
   $140=$503;
   var $504=$140;
   var $505=$504;
   $139=$505;
   var $506=$139;
   var $507=(($506)|0);
   var $508=(($507)|0);
   var $509=$508;
   var $510=(($509+4)|0);
   var $511=HEAP32[(($510)>>2)];
   var $526 = $511;label = 35; break;
  case 34: 
   $144=$486;
   var $513=$144;
   var $514=(($513)|0);
   $143=$514;
   var $515=$143;
   var $516=$515;
   $142=$516;
   var $517=$142;
   var $518=(($517)|0);
   var $519=(($518)|0);
   var $520=$519;
   var $521=(($520)|0);
   var $522=$521;
   var $523=HEAP8[($522)];
   var $524=(($523)&(255));
   var $525=$524 >> 1;
   var $526 = $525;label = 35; break;
  case 35: 
   var $526;
   HEAP32[(($__lhs_sz_i_i_i)>>2)]=$526;
   var $527=$151;
   $135=$527;
   var $528=$135;
   $134=$528;
   var $529=$134;
   var $530=(($529)|0);
   $133=$530;
   var $531=$133;
   var $532=$531;
   $132=$532;
   var $533=$132;
   var $534=(($533)|0);
   var $535=(($534)|0);
   var $536=$535;
   var $537=(($536)|0);
   var $538=$537;
   var $539=HEAP8[($538)];
   var $540=(($539)&(255));
   var $541=$540 & 1;
   var $542=(($541)|(0))!=0;
   if ($542) { label = 36; break; } else { label = 37; break; }
  case 36: 
   $128=$528;
   var $544=$128;
   var $545=(($544)|0);
   $127=$545;
   var $546=$127;
   var $547=$546;
   $126=$547;
   var $548=$126;
   var $549=(($548)|0);
   var $550=(($549)|0);
   var $551=$550;
   var $552=(($551+4)|0);
   var $553=HEAP32[(($552)>>2)];
   var $568 = $553;label = 38; break;
  case 37: 
   $131=$528;
   var $555=$131;
   var $556=(($555)|0);
   $130=$556;
   var $557=$130;
   var $558=$557;
   $129=$558;
   var $559=$129;
   var $560=(($559)|0);
   var $561=(($560)|0);
   var $562=$561;
   var $563=(($562)|0);
   var $564=$563;
   var $565=HEAP8[($564)];
   var $566=(($565)&(255));
   var $567=$566 >> 1;
   var $568 = $567;label = 38; break;
  case 38: 
   var $568;
   HEAP32[(($__rhs_sz_i_i_i)>>2)]=$568;
   $102=$485;
   var $569=$102;
   $101=$569;
   var $570=$101;
   $100=$570;
   var $571=$100;
   var $572=(($571)|0);
   $99=$572;
   var $573=$99;
   var $574=$573;
   $98=$574;
   var $575=$98;
   var $576=(($575)|0);
   var $577=(($576)|0);
   var $578=$577;
   var $579=(($578)|0);
   var $580=$579;
   var $581=HEAP8[($580)];
   var $582=(($581)&(255));
   var $583=$582 & 1;
   var $584=(($583)|(0))!=0;
   if ($584) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $92=$570;
   var $586=$92;
   var $587=(($586)|0);
   $91=$587;
   var $588=$91;
   var $589=$588;
   $90=$589;
   var $590=$90;
   var $591=(($590)|0);
   var $592=(($591)|0);
   var $593=$592;
   var $594=(($593+8)|0);
   var $595=HEAP32[(($594)>>2)];
   var $609 = $595;label = 41; break;
  case 40: 
   $97=$570;
   var $597=$97;
   var $598=(($597)|0);
   $96=$598;
   var $599=$96;
   var $600=$599;
   $95=$600;
   var $601=$95;
   var $602=(($601)|0);
   var $603=(($602)|0);
   var $604=$603;
   var $605=(($604+1)|0);
   var $606=(($605)|0);
   $94=$606;
   var $607=$94;
   $93=$607;
   var $608=$93;
   var $609 = $608;label = 41; break;
  case 41: 
   var $609;
   $89=$609;
   var $610=$89;
   var $611=$151;
   $116=$611;
   var $612=$116;
   $115=$612;
   var $613=$115;
   $114=$613;
   var $614=$114;
   var $615=(($614)|0);
   $113=$615;
   var $616=$113;
   var $617=$616;
   $112=$617;
   var $618=$112;
   var $619=(($618)|0);
   var $620=(($619)|0);
   var $621=$620;
   var $622=(($621)|0);
   var $623=$622;
   var $624=HEAP8[($623)];
   var $625=(($624)&(255));
   var $626=$625 & 1;
   var $627=(($626)|(0))!=0;
   if ($627) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $106=$613;
   var $629=$106;
   var $630=(($629)|0);
   $105=$630;
   var $631=$105;
   var $632=$631;
   $104=$632;
   var $633=$104;
   var $634=(($633)|0);
   var $635=(($634)|0);
   var $636=$635;
   var $637=(($636+8)|0);
   var $638=HEAP32[(($637)>>2)];
   var $652 = $638;label = 44; break;
  case 43: 
   $111=$613;
   var $640=$111;
   var $641=(($640)|0);
   $110=$641;
   var $642=$110;
   var $643=$642;
   $109=$643;
   var $644=$109;
   var $645=(($644)|0);
   var $646=(($645)|0);
   var $647=$646;
   var $648=(($647+1)|0);
   var $649=(($648)|0);
   $108=$649;
   var $650=$108;
   $107=$650;
   var $651=$107;
   var $652 = $651;label = 44; break;
  case 44: 
   var $652;
   $103=$652;
   var $653=$103;
   $123=$__lhs_sz_i_i_i;
   $124=$__rhs_sz_i_i_i;
   var $654=$123;
   var $655=$124;
   var $tmp_i_i_i_i=$122;
   var $tmp1_i_i_i_i=$125;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $120=$654;
   $121=$655;
   var $656=$121;
   var $657=$120;
   $117=$122;
   $118=$656;
   $119=$657;
   var $658=$117;
   var $659=$118;
   var $660=HEAP32[(($659)>>2)];
   var $661=$119;
   var $662=HEAP32[(($661)>>2)];
   var $663=(($660)>>>(0)) < (($662)>>>(0));
   if ($663) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $665=$121;
   var $668 = $665;label = 47; break;
  case 46: 
   var $667=$120;
   var $668 = $667;label = 47; break;
  case 47: 
   var $668;
   var $669=HEAP32[(($668)>>2)];
   $136=$610;
   $137=$653;
   $138=$669;
   var $670=$136;
   var $671=$137;
   var $672=$138;
   var $673 = (function() { try { __THREW__ = 0; return _memcmp($670, $671, $672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 50; break; }
  case 48: 
   $__result_i_i_i=$673;
   var $674=$__result_i_i_i;
   var $675=(($674)|(0))!=0;
   if ($675) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $677=$__result_i_i_i;
   $149=$677;
   label = 56; break;
  case 50: 
   var $679$0 = ___cxa_find_matching_catch(-1, -1); $679$1 = tempRet0;
   var $680=$679$0;
   $152=$680;
   var $681=$679$1;
   $153=$681;
   var $682=$152;
   ___cxa_call_unexpected($682);
   throw "Reached an unreachable!";
  case 51: 
   var $684=HEAP32[(($__lhs_sz_i_i_i)>>2)];
   var $685=HEAP32[(($__rhs_sz_i_i_i)>>2)];
   var $686=(($684)>>>(0)) < (($685)>>>(0));
   if ($686) { label = 52; break; } else { label = 53; break; }
  case 52: 
   $149=-1;
   label = 56; break;
  case 53: 
   var $689=HEAP32[(($__lhs_sz_i_i_i)>>2)];
   var $690=HEAP32[(($__rhs_sz_i_i_i)>>2)];
   var $691=(($689)>>>(0)) > (($690)>>>(0));
   if ($691) { label = 54; break; } else { label = 55; break; }
  case 54: 
   $149=1;
   label = 56; break;
  case 55: 
   $149=0;
   label = 56; break;
  case 56: 
   var $694=$149;
   var $695=(($694)|(0)) < 0;
   if ($695) { label = 57; break; } else { label = 61; break; }
  case 57: 
   var $697=$__nd;
   var $698=$697;
   var $699=(($698+4)|0);
   var $700=HEAP32[(($699)>>2)];
   $161=$181;
   $162=-1;
   var $701=$161;
   var $702=$162;
   $159=$701;
   $160=$702;
   var $703=$159;
   var $704=(($703)|0);
   HEAP32[(($704)>>2)]=0;
   $163=$181;
   var $705=$163;
   var $706=(($700)|(0))!=0;
   if ($706) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $708=$__nd;
   var $709=$708;
   var $710=(($709+4)|0);
   var $711=HEAP32[(($710)>>2)];
   var $712=$711;
   $__nd=$712;
   label = 60; break;
  case 59: 
   var $714=$__nd;
   var $715=$714;
   var $716=$177;
   HEAP32[(($716)>>2)]=$715;
   var $717=$177;
   var $718=HEAP32[(($717)>>2)];
   var $719=(($718+4)|0);
   $175=$719;
   label = 65; break;
  case 60: 
   label = 62; break;
  case 61: 
   var $722=$__nd;
   var $723=$722;
   var $724=$177;
   HEAP32[(($724)>>2)]=$723;
   var $725=$177;
   $175=$725;
   label = 65; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 3; break;
  case 64: 
   var $729=(($182)|0);
   $168=$729;
   var $730=$168;
   var $731=(($730+4)|0);
   $167=$731;
   var $732=$167;
   var $733=$732;
   $166=$733;
   var $734=$166;
   var $735=(($734)|0);
   $165=$735;
   var $736=$165;
   $164=$736;
   var $737=$164;
   var $738=$737;
   var $739=$738;
   var $740=$739;
   var $741=$740;
   var $742=$177;
   HEAP32[(($742)>>2)]=$741;
   var $743=$177;
   var $744=HEAP32[(($743)>>2)];
   var $745=$744;
   var $746=(($745)|0);
   $175=$746;
   label = 65; break;
  case 65: 
   var $748=$175;
   STACKTOP = sp;
   return $748;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 6622
// WARNING: content after a branch in a label, line: 6624
// WARNING: content after a branch in a label, line: 6625
// WARNING: content after a branch in a label, line: 6626
// WARNING: content after a branch in a label, line: 6627
// WARNING: content after a branch in a label, line: 6628
// WARNING: content after a branch in a label, line: 6629
// WARNING: content after a branch in a label, line: 6630
// WARNING: content after a branch in a label, line: 6631
// WARNING: content after a branch in a label, line: 6632
// WARNING: content after a branch in a label, line: 6633
// WARNING: content after a branch in a label, line: 6634
// WARNING: content after a branch in a label, line: 6635
// WARNING: content after a branch in a label, line: 6636
// WARNING: content after a branch in a label, line: 6637
// WARNING: content after a branch in a label, line: 6638
// WARNING: content after a branch in a label, line: 6639
// WARNING: content after a branch in a label, line: 6640
// WARNING: content after a branch in a label, line: 6641
// WARNING: content after a branch in a label, line: 6642
// WARNING: content after a branch in a label, line: 6643
// WARNING: content after a branch in a label, line: 6644
// WARNING: content after a branch in a label, line: 6645
// WARNING: content after a branch in a label, line: 6646
// WARNING: content after a branch in a label, line: 6647
// WARNING: content after a branch in a label, line: 6648
// WARNING: content after a branch in a label, line: 6649
// WARNING: content after a branch in a label, line: 6650
// WARNING: content after a branch in a label, line: 6651
// WARNING: content after a branch in a label, line: 6652
// WARNING: content after a branch in a label, line: 6653
// WARNING: content after a branch in a label, line: 6654
// WARNING: content after a branch in a label, line: 6655
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE25__construct_node_with_keyERSA_($agg_result, $this, $__k) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 664)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9;
   var $10;
   var $11=(sp)+(8);
   var $12=(sp)+(16);
   var $13;
   var $14;
   var $15=(sp)+(24);
   var $16;
   var $17;
   var $18=(sp)+(32);
   var $19=(sp)+(40);
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $__tmp_i_i_i36;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $__t_i_i_i;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51=(sp)+(48);
   var $52=(sp)+(56);
   var $53;
   var $54;
   var $55=(sp)+(64);
   var $56=(sp)+(72);
   var $__t21_i_i_i27=(sp)+(80);
   var $57;
   var $58;
   var $59=(sp)+(88);
   var $60;
   var $61;
   var $62=(sp)+(96);
   var $__u1_i=(sp)+(104);
   var $63;
   var $64=(sp)+(112);
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77=(sp)+(120);
   var $78;
   var $79;
   var $80=(sp)+(128);
   var $81=(sp)+(136);
   var $82;
   var $83;
   var $84=(sp)+(144);
   var $85;
   var $86;
   var $87=(sp)+(152);
   var $88=(sp)+(160);
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $__tmp_i_i_i15_i;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $__t_i_i_i4_i;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120=(sp)+(168);
   var $121=(sp)+(176);
   var $122;
   var $123;
   var $124=(sp)+(184);
   var $125=(sp)+(192);
   var $__t21_i_i_i5_i=(sp)+(200);
   var $126;
   var $127;
   var $128=(sp)+(208);
   var $129;
   var $130;
   var $131=(sp)+(216);
   var $__u1_i6_i=(sp)+(224);
   var $132;
   var $133=(sp)+(232);
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146=(sp)+(240);
   var $147;
   var $148;
   var $149=(sp)+(248);
   var $150=(sp)+(256);
   var $151;
   var $152;
   var $153=(sp)+(264);
   var $154;
   var $155;
   var $156=(sp)+(272);
   var $157=(sp)+(280);
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $__tmp_i_i_i_i;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $__t_i_i_i_i;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189=(sp)+(288);
   var $190=(sp)+(296);
   var $191;
   var $192;
   var $193=(sp)+(304);
   var $194=(sp)+(312);
   var $__t21_i_i_i_i=(sp)+(320);
   var $195;
   var $196;
   var $197=(sp)+(328);
   var $198;
   var $199;
   var $200=(sp)+(336);
   var $__u1_i_i=(sp)+(344);
   var $201;
   var $202=(sp)+(352);
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208=(sp)+(360);
   var $209=(sp)+(368);
   var $210=(sp)+(384);
   var $211;
   var $212;
   var $213;
   var $214;
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225=(sp)+(392);
   var $226;
   var $227;
   var $228=(sp)+(400);
   var $229=(sp)+(408);
   var $230;
   var $231;
   var $232=(sp)+(416);
   var $233;
   var $234;
   var $235=(sp)+(424);
   var $236=(sp)+(432);
   var $237;
   var $238;
   var $239;
   var $240;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $__tmp_i_i_i10;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264;
   var $265;
   var $266;
   var $267;
   var $268;
   var $269;
   var $270;
   var $271=(sp)+(440);
   var $272;
   var $273;
   var $274=(sp)+(448);
   var $275=(sp)+(456);
   var $276;
   var $277;
   var $278=(sp)+(464);
   var $279;
   var $280;
   var $281=(sp)+(472);
   var $282=(sp)+(480);
   var $283;
   var $284;
   var $285;
   var $286;
   var $287;
   var $288;
   var $289;
   var $290;
   var $291;
   var $292;
   var $293;
   var $294;
   var $295;
   var $296;
   var $297;
   var $__tmp_i_i_i2;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309=(sp)+(488);
   var $310=(sp)+(496);
   var $311;
   var $312;
   var $313=(sp)+(504);
   var $314=(sp)+(512);
   var $__t21_i_i_i=(sp)+(520);
   var $315;
   var $316;
   var $317=(sp)+(528);
   var $318;
   var $319;
   var $320=(sp)+(536);
   var $321=(sp)+(544);
   var $__d1_i=(sp)+(552);
   var $322;
   var $323;
   var $324=(sp)+(560);
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332=(sp)+(568);
   var $333;
   var $334;
   var $335=(sp)+(576);
   var $336=(sp)+(584);
   var $337;
   var $338;
   var $339=(sp)+(592);
   var $340;
   var $341;
   var $342=(sp)+(600);
   var $343=(sp)+(608);
   var $344;
   var $345;
   var $346;
   var $347;
   var $348;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $__tmp_i_i_i;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371;
   var $372;
   var $373;
   var $374;
   var $__na;
   var $__h=(sp)+(616);
   var $375=(sp)+(632);
   var $376;
   var $377;
   var $378=(sp)+(640);
   var $379=(sp)+(648);
   var $380;
   $373=$this;
   $374=$__k;
   var $381=$373;
   var $382=(($381)|0);
   $372=$382;
   var $383=$372;
   var $384=(($383+4)|0);
   $371=$384;
   var $385=$371;
   var $386=$385;
   $370=$386;
   var $387=$370;
   var $388=$387;
   $__na=$388;
   var $389=$__na;
   $368=$389;
   $369=1;
   var $390=$368;
   var $391=$369;
   $365=$390;
   $366=$391;
   $367=0;
   var $392=$365;
   var $393=$366;
   var $394=($393<<5);
   var $395=__Znwj($394);
   var $396=$395;
   var $397=$__na;
   $363=$375;
   $364=$397;
   var $398=$363;
   var $399=$364;
   $361=$398;
   $362=$399;
   var $400=$361;
   var $401=(($400)|0);
   var $402=$362;
   HEAP32[(($401)>>2)]=$402;
   var $403=(($400+4)|0);
   HEAP8[($403)]=0;
   var $404=(($400+5)|0);
   HEAP8[($404)]=0;
   var $tmp=$324;
   var $tmp1=$375;
   assert(8 % 1 === 0);(_memcpy($tmp, $tmp1, 8)|0);
   $322=$__h;
   $323=$396;
   var $405=$322;
   var $406=$323;
   var $tmp_i=$__d1_i;
   var $tmp2_i=$324;
   assert(8 % 1 === 0);(_memcpy($tmp_i, $tmp2_i, 8)|0);
   $319=$405;
   HEAP32[(($320)>>2)]=$406;
   var $407=$319;
   var $408=(($407)|0);
   $318=$320;
   var $409=$318;
   var $410=HEAP32[(($409)>>2)];
   $304=$__d1_i;
   var $411=$304;
   var $412=$321;
   var $413=$411;
   assert(8 % 1 === 0);HEAP32[(($412)>>2)]=HEAP32[(($413)>>2)];HEAP32[((($412)+(4))>>2)]=HEAP32[((($413)+(4))>>2)];
   var $tmp_i_i=$317;
   var $tmp1_i_i=$321;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp1_i_i, 8)|0);
   $315=$408;
   $316=$410;
   var $414=$315;
   var $415=$316;
   var $tmp_i_i_i=$__t21_i_i_i;
   var $tmp2_i_i_i=$317;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp2_i_i_i, 8)|0);
   $312=$414;
   HEAP32[(($313)>>2)]=$415;
   var $416=$312;
   var $417=$416;
   $311=$313;
   var $418=$311;
   var $419=HEAP32[(($418)>>2)];
   $305=$__t21_i_i_i;
   var $420=$305;
   var $421=$314;
   var $422=$420;
   assert(8 % 1 === 0);HEAP32[(($421)>>2)]=HEAP32[(($422)>>2)];HEAP32[((($421)+(4))>>2)]=HEAP32[((($422)+(4))>>2)];
   var $tmp_i_i_i_i=$310;
   var $tmp1_i_i_i_i=$314;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp1_i_i_i_i, 8)|0);
   $308=$417;
   HEAP32[(($309)>>2)]=$419;
   var $423=$308;
   var $424=(($423)|0);
   $307=$309;
   var $425=$307;
   var $426=HEAP32[(($425)>>2)];
   HEAP32[(($424)>>2)]=$426;
   var $427=(($423+4)|0);
   $306=$310;
   var $428=$306;
   var $429=$427;
   var $430=$428;
   assert(8 % 1 === 0);HEAP32[(($429)>>2)]=HEAP32[(($430)>>2)];HEAP32[((($429)+(4))>>2)]=HEAP32[((($430)+(4))>>2)];
   var $431=$__na;
   $303=$__h;
   var $432=$303;
   var $433=(($432)|0);
   $302=$433;
   var $434=$302;
   var $435=$434;
   $301=$435;
   var $436=$301;
   var $437=(($436)|0);
   var $438=HEAP32[(($437)>>2)];
   var $439=(($438+16)|0);
   var $440=(($439)|0);
   var $441=(($440)|0);
   $300=$441;
   var $442=$300;
   var $443=$442;
   var $444=$443;
   var $445=$374;
   $261=$431;
   $262=$444;
   $263=$445;
   var $446=$262;
   var $447=$446;
   var $448=(($447)|(0))==0;
   if ($448) { var $452 = 0;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $450=$447;
   var $451=$263;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($450, $451) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 43; break; }
  case 3: 
   var $452 = $450;label = 4; break;
  case 4: 
   var $452;
   label = 5; break;
  case 5: 
   $260=$__h;
   var $454=$260;
   var $455=(($454)|0);
   $259=$455;
   var $456=$259;
   var $457=$456;
   $258=$457;
   var $458=$258;
   var $459=(($458+4)|0);
   var $460=(($459+4)|0);
   HEAP8[($460)]=1;
   var $461=$__na;
   $257=$__h;
   var $462=$257;
   var $463=(($462)|0);
   $256=$463;
   var $464=$256;
   var $465=$464;
   $255=$465;
   var $466=$255;
   var $467=(($466)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=(($468+16)|0);
   var $470=(($469)|0);
   var $471=(($470+12)|0);
   $254=$471;
   var $472=$254;
   var $473=$472;
   var $474=$473;
   $216=$461;
   $217=$474;
   var $475=$217;
   var $476=$475;
   var $477=(($476)|(0))==0;
   if ($477) { var $480 = 0;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $479=$476;
   HEAPF32[(($479)>>2)]=0;
   var $480 = $479;label = 7; break;
  case 7: 
   var $480;
   label = 8; break;
  case 8: 
   $215=$__h;
   var $482=$215;
   var $483=(($482)|0);
   $214=$483;
   var $484=$214;
   var $485=$484;
   $213=$485;
   var $486=$213;
   var $487=(($486+4)|0);
   var $488=(($487+5)|0);
   HEAP8[($488)]=1;
   $207=$__h;
   var $489=$207;
   $205=$210;
   $206=$489;
   var $490=$205;
   var $491=$206;
   $203=$490;
   $204=$491;
   var $492=$203;
   var $493=(($492)|0);
   var $494=$204;
   HEAP32[(($493)>>2)]=$494;
   var $tmp_i18=$202;
   var $tmp1_i=$210;
   assert(4 % 1 === 0);HEAP8[($tmp_i18)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i18)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i18)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i18)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   $201=$209;
   var $495=$201;
   var $tmp_i_i19=$__u1_i_i;
   var $tmp2_i_i=$202;
   assert(4 % 1 === 0);HEAP8[($tmp_i_i19)]=HEAP8[($tmp2_i_i)];HEAP8[((($tmp_i_i19)+(1))|0)]=HEAP8[((($tmp2_i_i)+(1))|0)];HEAP8[((($tmp_i_i19)+(2))|0)]=HEAP8[((($tmp2_i_i)+(2))|0)];HEAP8[((($tmp_i_i19)+(3))|0)]=HEAP8[((($tmp2_i_i)+(3))|0)];
   $199=$495;
   var $496=$199;
   var $497=(($496)|0);
   $198=$__u1_i_i;
   var $498=$198;
   var $499=(($498)|0);
   var $500=HEAP32[(($499)>>2)];
   $179=$500;
   var $501=$179;
   var $502=(($501)|0);
   $178=$502;
   var $503=$178;
   var $504=$503;
   $177=$504;
   var $505=$177;
   var $506=(($505)|0);
   var $507=HEAP32[(($506)>>2)];
   $__t_i_i_i_i=$507;
   var $508=(($501)|0);
   $176=$508;
   var $509=$176;
   var $510=$509;
   $175=$510;
   var $511=$175;
   var $512=(($511)|0);
   HEAP32[(($512)>>2)]=0;
   var $513=$__t_i_i_i_i;
   $180=$__u1_i_i;
   var $514=$180;
   var $515=(($514)|0);
   var $516=HEAP32[(($515)>>2)];
   $183=$516;
   var $517=$183;
   var $518=(($517)|0);
   $182=$518;
   var $519=$182;
   var $520=$519;
   $181=$520;
   var $521=$181;
   var $522=(($521+4)|0);
   $184=$522;
   var $523=$184;
   var $524=$200;
   var $525=$523;
   assert(8 % 1 === 0);HEAP32[(($524)>>2)]=HEAP32[(($525)>>2)];HEAP32[((($524)+(4))>>2)]=HEAP32[((($525)+(4))>>2)];
   var $tmp_i_i_i20=$197;
   var $tmp1_i_i_i=$200;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i20, $tmp1_i_i_i, 8)|0);
   $195=$497;
   $196=$513;
   var $526=$195;
   var $527=$196;
   var $tmp_i_i_i_i21=$__t21_i_i_i_i;
   var $tmp2_i_i_i_i=$197;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i21, $tmp2_i_i_i_i, 8)|0);
   $192=$526;
   HEAP32[(($193)>>2)]=$527;
   var $528=$192;
   var $529=$528;
   $191=$193;
   var $530=$191;
   var $531=HEAP32[(($530)>>2)];
   $185=$__t21_i_i_i_i;
   var $532=$185;
   var $533=$194;
   var $534=$532;
   assert(8 % 1 === 0);HEAP32[(($533)>>2)]=HEAP32[(($534)>>2)];HEAP32[((($533)+(4))>>2)]=HEAP32[((($534)+(4))>>2)];
   var $tmp_i_i_i_i_i22=$190;
   var $tmp1_i_i_i_i_i23=$194;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i_i22, $tmp1_i_i_i_i_i23, 8)|0);
   $188=$529;
   HEAP32[(($189)>>2)]=$531;
   var $535=$188;
   var $536=(($535)|0);
   $187=$189;
   var $537=$187;
   var $538=HEAP32[(($537)>>2)];
   HEAP32[(($536)>>2)]=$538;
   var $539=(($535+4)|0);
   $186=$190;
   var $540=$186;
   var $541=$539;
   var $542=$540;
   assert(8 % 1 === 0);HEAP32[(($541)>>2)]=HEAP32[(($542)>>2)];HEAP32[((($541)+(4))>>2)]=HEAP32[((($542)+(4))>>2)];
   $138=$209;
   var $543=$138;
   $136=$208;
   $137=$543;
   var $544=$136;
   var $545=$137;
   $134=$544;
   $135=$545;
   var $546=$134;
   var $547=(($546)|0);
   var $548=$135;
   HEAP32[(($547)>>2)]=$548;
   var $tmp2_i24=$133;
   var $tmp3_i=$208;
   assert(4 % 1 === 0);HEAP8[($tmp2_i24)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i24)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i24)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i24)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   $132=$379;
   var $549=$132;
   var $tmp_i7_i=$__u1_i6_i;
   var $tmp2_i8_i=$133;
   assert(4 % 1 === 0);HEAP8[($tmp_i7_i)]=HEAP8[($tmp2_i8_i)];HEAP8[((($tmp_i7_i)+(1))|0)]=HEAP8[((($tmp2_i8_i)+(1))|0)];HEAP8[((($tmp_i7_i)+(2))|0)]=HEAP8[((($tmp2_i8_i)+(2))|0)];HEAP8[((($tmp_i7_i)+(3))|0)]=HEAP8[((($tmp2_i8_i)+(3))|0)];
   $130=$549;
   var $550=$130;
   var $551=(($550)|0);
   $129=$__u1_i6_i;
   var $552=$129;
   var $553=(($552)|0);
   var $554=HEAP32[(($553)>>2)];
   $110=$554;
   var $555=$110;
   var $556=(($555)|0);
   $109=$556;
   var $557=$109;
   var $558=$557;
   $108=$558;
   var $559=$108;
   var $560=(($559)|0);
   var $561=HEAP32[(($560)>>2)];
   $__t_i_i_i4_i=$561;
   var $562=(($555)|0);
   $107=$562;
   var $563=$107;
   var $564=$563;
   $106=$564;
   var $565=$106;
   var $566=(($565)|0);
   HEAP32[(($566)>>2)]=0;
   var $567=$__t_i_i_i4_i;
   $111=$__u1_i6_i;
   var $568=$111;
   var $569=(($568)|0);
   var $570=HEAP32[(($569)>>2)];
   $114=$570;
   var $571=$114;
   var $572=(($571)|0);
   $113=$572;
   var $573=$113;
   var $574=$573;
   $112=$574;
   var $575=$112;
   var $576=(($575+4)|0);
   $115=$576;
   var $577=$115;
   var $578=$131;
   var $579=$577;
   assert(8 % 1 === 0);HEAP32[(($578)>>2)]=HEAP32[(($579)>>2)];HEAP32[((($578)+(4))>>2)]=HEAP32[((($579)+(4))>>2)];
   var $tmp_i_i9_i=$128;
   var $tmp1_i_i10_i=$131;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i9_i, $tmp1_i_i10_i, 8)|0);
   $126=$551;
   $127=$567;
   var $580=$126;
   var $581=$127;
   var $tmp_i_i_i11_i=$__t21_i_i_i5_i;
   var $tmp2_i_i_i12_i=$128;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i11_i, $tmp2_i_i_i12_i, 8)|0);
   $123=$580;
   HEAP32[(($124)>>2)]=$581;
   var $582=$123;
   var $583=$582;
   $122=$124;
   var $584=$122;
   var $585=HEAP32[(($584)>>2)];
   $116=$__t21_i_i_i5_i;
   var $586=$116;
   var $587=$125;
   var $588=$586;
   assert(8 % 1 === 0);HEAP32[(($587)>>2)]=HEAP32[(($588)>>2)];HEAP32[((($587)+(4))>>2)]=HEAP32[((($588)+(4))>>2)];
   var $tmp_i_i_i_i13_i=$121;
   var $tmp1_i_i_i_i14_i=$125;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i13_i, $tmp1_i_i_i_i14_i, 8)|0);
   $119=$583;
   HEAP32[(($120)>>2)]=$585;
   var $589=$119;
   var $590=(($589)|0);
   $118=$120;
   var $591=$118;
   var $592=HEAP32[(($591)>>2)];
   HEAP32[(($590)>>2)]=$592;
   var $593=(($589+4)|0);
   $117=$121;
   var $594=$117;
   var $595=$593;
   var $596=$594;
   assert(8 % 1 === 0);HEAP32[(($595)>>2)]=HEAP32[(($596)>>2)];HEAP32[((($595)+(4))>>2)]=HEAP32[((($596)+(4))>>2)];
   $105=$209;
   var $597=$105;
   $104=$597;
   var $598=$104;
   $102=$598;
   $103=0;
   var $599=$102;
   var $600=(($599)|0);
   $101=$600;
   var $601=$101;
   var $602=$601;
   $100=$602;
   var $603=$100;
   var $604=(($603)|0);
   var $605=HEAP32[(($604)>>2)];
   $__tmp_i_i_i15_i=$605;
   var $606=$103;
   var $607=(($599)|0);
   $73=$607;
   var $608=$73;
   var $609=$608;
   $72=$609;
   var $610=$72;
   var $611=(($610)|0);
   HEAP32[(($611)>>2)]=$606;
   var $612=$__tmp_i_i_i15_i;
   var $613=(($612)|(0))!=0;
   if ($613) { label = 9; break; } else { label = 18; break; }
  case 9: 
   var $615=(($599)|0);
   $71=$615;
   var $616=$71;
   var $617=$616;
   $70=$617;
   var $618=$70;
   var $619=(($618+4)|0);
   var $620=$__tmp_i_i_i15_i;
   $96=$619;
   $97=$620;
   var $621=$96;
   var $622=(($621+5)|0);
   var $623=HEAP8[($622)];
   var $624=(($623) & 1);
   if ($624) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $626=(($621)|0);
   var $627=HEAP32[(($626)>>2)];
   var $628=$97;
   var $629=(($628+16)|0);
   var $630=(($629)|0);
   var $631=(($630+12)|0);
   $95=$631;
   var $632=$95;
   var $633=$632;
   var $634=$633;
   $85=$627;
   $86=$634;
   var $635=$88;
   var $636=$85;
   var $637=$86;
   var $tmp_i_i_i_i_i16_i=$84;
   var $tmp1_i_i_i_i_i17_i=$87;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i16_i)]=HEAP8[($tmp1_i_i_i_i_i17_i)];
   $82=$636;
   $83=$637;
   var $638=$83;
   label = 12; break;
  case 11: 
   var $640$0 = ___cxa_find_matching_catch(-1, -1); $640$1 = tempRet0;
   var $641=$640$0;
   $98=$641;
   var $642=$640$1;
   $99=$642;
   var $643=$98;
   ___cxa_call_unexpected($643);
   throw "Reached an unreachable!";
  case 12: 
   var $645=(($621+4)|0);
   var $646=HEAP8[($645)];
   var $647=(($646) & 1);
   if ($647) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $649=(($621)|0);
   var $650=HEAP32[(($649)>>2)];
   var $651=$97;
   var $652=(($651+16)|0);
   var $653=(($652)|0);
   var $654=(($653)|0);
   $74=$654;
   var $655=$74;
   var $656=$655;
   var $657=$656;
   $78=$650;
   $79=$657;
   var $658=$81;
   var $659=$78;
   var $660=$79;
   var $tmp_i1_i_i_i_i18_i=$77;
   var $tmp1_i2_i_i_i_i19_i=$80;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i18_i)]=HEAP8[($tmp1_i2_i_i_i_i19_i)];
   $75=$659;
   $76=$660;
   var $661=$76;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($661) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 11; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $663=$97;
   var $664=(($663)|(0))!=0;
   if ($664) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $666=(($621)|0);
   var $667=HEAP32[(($666)>>2)];
   var $668=$97;
   $92=$667;
   $93=$668;
   $94=1;
   var $669=$92;
   var $670=$93;
   var $671=$94;
   $89=$669;
   $90=$670;
   $91=$671;
   var $672=$89;
   var $673=$90;
   var $674=$673;
   __ZdlPv($674);
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   $69=$379;
   var $676=$69;
   $67=$378;
   $68=$676;
   var $677=$67;
   var $678=$68;
   $65=$677;
   $66=$678;
   var $679=$65;
   var $680=(($679)|0);
   var $681=$66;
   HEAP32[(($680)>>2)]=$681;
   label = 20; break;
  case 20: 
   var $tmp25=$64;
   var $tmp26=$378;
   assert(4 % 1 === 0);HEAP8[($tmp25)]=HEAP8[($tmp26)];HEAP8[((($tmp25)+(1))|0)]=HEAP8[((($tmp26)+(1))|0)];HEAP8[((($tmp25)+(2))|0)]=HEAP8[((($tmp26)+(2))|0)];HEAP8[((($tmp25)+(3))|0)]=HEAP8[((($tmp26)+(3))|0)];
   $63=$agg_result;
   var $683=$63;
   var $tmp_i28=$__u1_i;
   var $tmp2_i29=$64;
   assert(4 % 1 === 0);HEAP8[($tmp_i28)]=HEAP8[($tmp2_i29)];HEAP8[((($tmp_i28)+(1))|0)]=HEAP8[((($tmp2_i29)+(1))|0)];HEAP8[((($tmp_i28)+(2))|0)]=HEAP8[((($tmp2_i29)+(2))|0)];HEAP8[((($tmp_i28)+(3))|0)]=HEAP8[((($tmp2_i29)+(3))|0)];
   $61=$683;
   var $684=$61;
   var $685=(($684)|0);
   $60=$__u1_i;
   var $686=$60;
   var $687=(($686)|0);
   var $688=HEAP32[(($687)>>2)];
   $41=$688;
   var $689=$41;
   var $690=(($689)|0);
   $40=$690;
   var $691=$40;
   var $692=$691;
   $39=$692;
   var $693=$39;
   var $694=(($693)|0);
   var $695=HEAP32[(($694)>>2)];
   $__t_i_i_i=$695;
   var $696=(($689)|0);
   $38=$696;
   var $697=$38;
   var $698=$697;
   $37=$698;
   var $699=$37;
   var $700=(($699)|0);
   HEAP32[(($700)>>2)]=0;
   var $701=$__t_i_i_i;
   $42=$__u1_i;
   var $702=$42;
   var $703=(($702)|0);
   var $704=HEAP32[(($703)>>2)];
   $45=$704;
   var $705=$45;
   var $706=(($705)|0);
   $44=$706;
   var $707=$44;
   var $708=$707;
   $43=$708;
   var $709=$43;
   var $710=(($709+4)|0);
   $46=$710;
   var $711=$46;
   var $712=$62;
   var $713=$711;
   assert(8 % 1 === 0);HEAP32[(($712)>>2)]=HEAP32[(($713)>>2)];HEAP32[((($712)+(4))>>2)]=HEAP32[((($713)+(4))>>2)];
   var $tmp_i_i30=$59;
   var $tmp1_i_i31=$62;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i30, $tmp1_i_i31, 8)|0);
   $57=$685;
   $58=$701;
   var $714=$57;
   var $715=$58;
   var $tmp_i_i_i32=$__t21_i_i_i27;
   var $tmp2_i_i_i33=$59;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i32, $tmp2_i_i_i33, 8)|0);
   $54=$714;
   HEAP32[(($55)>>2)]=$715;
   var $716=$54;
   var $717=$716;
   $53=$55;
   var $718=$53;
   var $719=HEAP32[(($718)>>2)];
   $47=$__t21_i_i_i27;
   var $720=$47;
   var $721=$56;
   var $722=$720;
   assert(8 % 1 === 0);HEAP32[(($721)>>2)]=HEAP32[(($722)>>2)];HEAP32[((($721)+(4))>>2)]=HEAP32[((($722)+(4))>>2)];
   var $tmp_i_i_i_i34=$52;
   var $tmp1_i_i_i_i35=$56;
   assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i34, $tmp1_i_i_i_i35, 8)|0);
   $50=$717;
   HEAP32[(($51)>>2)]=$719;
   var $723=$50;
   var $724=(($723)|0);
   $49=$51;
   var $725=$49;
   var $726=HEAP32[(($725)>>2)];
   HEAP32[(($724)>>2)]=$726;
   var $727=(($723+4)|0);
   $48=$52;
   var $728=$48;
   var $729=$727;
   var $730=$728;
   assert(8 % 1 === 0);HEAP32[(($729)>>2)]=HEAP32[(($730)>>2)];HEAP32[((($729)+(4))>>2)]=HEAP32[((($730)+(4))>>2)];
   label = 21; break;
  case 21: 
   $36=$379;
   var $732=$36;
   $35=$732;
   var $733=$35;
   $33=$733;
   $34=0;
   var $734=$33;
   var $735=(($734)|0);
   $32=$735;
   var $736=$32;
   var $737=$736;
   $31=$737;
   var $738=$31;
   var $739=(($738)|0);
   var $740=HEAP32[(($739)>>2)];
   $__tmp_i_i_i36=$740;
   var $741=$34;
   var $742=(($734)|0);
   $4=$742;
   var $743=$4;
   var $744=$743;
   $3=$744;
   var $745=$3;
   var $746=(($745)|0);
   HEAP32[(($746)>>2)]=$741;
   var $747=$__tmp_i_i_i36;
   var $748=(($747)|(0))!=0;
   if ($748) { label = 22; break; } else { label = 31; break; }
  case 22: 
   var $750=(($734)|0);
   $2=$750;
   var $751=$2;
   var $752=$751;
   $1=$752;
   var $753=$1;
   var $754=(($753+4)|0);
   var $755=$__tmp_i_i_i36;
   $27=$754;
   $28=$755;
   var $756=$27;
   var $757=(($756+5)|0);
   var $758=HEAP8[($757)];
   var $759=(($758) & 1);
   if ($759) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $761=(($756)|0);
   var $762=HEAP32[(($761)>>2)];
   var $763=$28;
   var $764=(($763+16)|0);
   var $765=(($764)|0);
   var $766=(($765+12)|0);
   $26=$766;
   var $767=$26;
   var $768=$767;
   var $769=$768;
   $16=$762;
   $17=$769;
   var $770=$19;
   var $771=$16;
   var $772=$17;
   var $tmp_i_i_i_i_i37=$15;
   var $tmp1_i_i_i_i_i38=$18;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i37)]=HEAP8[($tmp1_i_i_i_i_i38)];
   $13=$771;
   $14=$772;
   var $773=$14;
   label = 25; break;
  case 24: 
   var $775$0 = ___cxa_find_matching_catch(-1, -1); $775$1 = tempRet0;
   var $776=$775$0;
   $29=$776;
   var $777=$775$1;
   $30=$777;
   var $778=$29;
   ___cxa_call_unexpected($778);
   throw "Reached an unreachable!";
  case 25: 
   var $780=(($756+4)|0);
   var $781=HEAP8[($780)];
   var $782=(($781) & 1);
   if ($782) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $784=(($756)|0);
   var $785=HEAP32[(($784)>>2)];
   var $786=$28;
   var $787=(($786+16)|0);
   var $788=(($787)|0);
   var $789=(($788)|0);
   $5=$789;
   var $790=$5;
   var $791=$790;
   var $792=$791;
   $9=$785;
   $10=$792;
   var $793=$12;
   var $794=$9;
   var $795=$10;
   var $tmp_i1_i_i_i_i39=$8;
   var $tmp1_i2_i_i_i_i40=$11;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i39)]=HEAP8[($tmp1_i2_i_i_i_i40)];
   $6=$794;
   $7=$795;
   var $796=$7;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 24; break; }
  case 27: 
   label = 28; break;
  case 28: 
   var $798=$28;
   var $799=(($798)|(0))!=0;
   if ($799) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $801=(($756)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803=$28;
   $23=$802;
   $24=$803;
   $25=1;
   var $804=$23;
   var $805=$24;
   var $806=$25;
   $20=$804;
   $21=$805;
   $22=$806;
   var $807=$20;
   var $808=$21;
   var $809=$808;
   __ZdlPv($809);
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   $380=1;
   $253=$__h;
   var $811=$253;
   $252=$811;
   var $812=$252;
   $250=$812;
   $251=0;
   var $813=$250;
   var $814=(($813)|0);
   $249=$814;
   var $815=$249;
   var $816=$815;
   $248=$816;
   var $817=$248;
   var $818=(($817)|0);
   var $819=HEAP32[(($818)>>2)];
   $__tmp_i_i_i10=$819;
   var $820=$251;
   var $821=(($813)|0);
   $221=$821;
   var $822=$221;
   var $823=$822;
   $220=$823;
   var $824=$220;
   var $825=(($824)|0);
   HEAP32[(($825)>>2)]=$820;
   var $826=$__tmp_i_i_i10;
   var $827=(($826)|(0))!=0;
   if ($827) { label = 33; break; } else { label = 42; break; }
  case 33: 
   var $829=(($813)|0);
   $219=$829;
   var $830=$219;
   var $831=$830;
   $218=$831;
   var $832=$218;
   var $833=(($832+4)|0);
   var $834=$__tmp_i_i_i10;
   $244=$833;
   $245=$834;
   var $835=$244;
   var $836=(($835+5)|0);
   var $837=HEAP8[($836)];
   var $838=(($837) & 1);
   if ($838) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $840=(($835)|0);
   var $841=HEAP32[(($840)>>2)];
   var $842=$245;
   var $843=(($842+16)|0);
   var $844=(($843)|0);
   var $845=(($844+12)|0);
   $243=$845;
   var $846=$243;
   var $847=$846;
   var $848=$847;
   $233=$841;
   $234=$848;
   var $849=$236;
   var $850=$233;
   var $851=$234;
   var $tmp_i_i_i_i_i11=$232;
   var $tmp1_i_i_i_i_i12=$235;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i11)]=HEAP8[($tmp1_i_i_i_i_i12)];
   $230=$850;
   $231=$851;
   var $852=$231;
   label = 36; break;
  case 35: 
   var $854$0 = ___cxa_find_matching_catch(-1, -1); $854$1 = tempRet0;
   var $855=$854$0;
   $246=$855;
   var $856=$854$1;
   $247=$856;
   var $857=$246;
   ___cxa_call_unexpected($857);
   throw "Reached an unreachable!";
  case 36: 
   var $859=(($835+4)|0);
   var $860=HEAP8[($859)];
   var $861=(($860) & 1);
   if ($861) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $863=(($835)|0);
   var $864=HEAP32[(($863)>>2)];
   var $865=$245;
   var $866=(($865+16)|0);
   var $867=(($866)|0);
   var $868=(($867)|0);
   $222=$868;
   var $869=$222;
   var $870=$869;
   var $871=$870;
   $226=$864;
   $227=$871;
   var $872=$229;
   var $873=$226;
   var $874=$227;
   var $tmp_i1_i_i_i_i13=$225;
   var $tmp1_i2_i_i_i_i14=$228;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i13)]=HEAP8[($tmp1_i2_i_i_i_i14)];
   $223=$873;
   $224=$874;
   var $875=$224;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($875) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 35; break; }
  case 38: 
   label = 39; break;
  case 39: 
   var $877=$245;
   var $878=(($877)|(0))!=0;
   if ($878) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $880=(($835)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=$245;
   $240=$881;
   $241=$882;
   $242=1;
   var $883=$240;
   var $884=$241;
   var $885=$242;
   $237=$883;
   $238=$884;
   $239=$885;
   var $886=$237;
   var $887=$238;
   var $888=$887;
   __ZdlPv($888);
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   STACKTOP = sp;
   return;
  case 43: 
   var $890$0 = ___cxa_find_matching_catch(-1, -1); $890$1 = tempRet0;
   var $891=$890$0;
   $376=$891;
   var $892=$890$1;
   $377=$892;
   label = 55; break;
  case 44: 
   var $915=(($899)|0);
   $265=$915;
   var $916=$265;
   var $917=$916;
   $264=$917;
   var $918=$264;
   var $919=(($918+4)|0);
   var $920=$__tmp_i_i_i2;
   $290=$919;
   $291=$920;
   var $921=$290;
   var $922=(($921+5)|0);
   var $923=HEAP8[($922)];
   var $924=(($923) & 1);
   if ($924) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $926=(($921)|0);
   var $927=HEAP32[(($926)>>2)];
   var $928=$291;
   var $929=(($928+16)|0);
   var $930=(($929)|0);
   var $931=(($930+12)|0);
   $289=$931;
   var $932=$289;
   var $933=$932;
   var $934=$933;
   $279=$927;
   $280=$934;
   var $935=$282;
   var $936=$279;
   var $937=$280;
   var $tmp_i_i_i_i_i3=$278;
   var $tmp1_i_i_i_i_i4=$281;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i3)]=HEAP8[($tmp1_i_i_i_i_i4)];
   $276=$936;
   $277=$937;
   var $938=$277;
   label = 47; break;
  case 46: 
   var $940$0 = ___cxa_find_matching_catch(-1, -1,0); $940$1 = tempRet0;
   var $941=$940$0;
   $292=$941;
   var $942=$940$1;
   $293=$942;
   var $943=$292;
   ___cxa_call_unexpected($943);
   throw "Reached an unreachable!";
  case 47: 
   var $945=(($921+4)|0);
   var $946=HEAP8[($945)];
   var $947=(($946) & 1);
   if ($947) { label = 48; break; } else { label = 50; break; }
  case 48: 
   var $949=(($921)|0);
   var $950=HEAP32[(($949)>>2)];
   var $951=$291;
   var $952=(($951+16)|0);
   var $953=(($952)|0);
   var $954=(($953)|0);
   $268=$954;
   var $955=$268;
   var $956=$955;
   var $957=$956;
   $272=$950;
   $273=$957;
   var $958=$275;
   var $959=$272;
   var $960=$273;
   var $tmp_i1_i_i_i_i5=$271;
   var $tmp1_i2_i_i_i_i6=$274;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i5)]=HEAP8[($tmp1_i2_i_i_i_i6)];
   $269=$959;
   $270=$960;
   var $961=$270;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($961) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 46; break; }
  case 49: 
   label = 50; break;
  case 50: 
   var $963=$291;
   var $964=(($963)|(0))!=0;
   if ($964) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $966=(($921)|0);
   var $967=HEAP32[(($966)>>2)];
   var $968=$291;
   $286=$967;
   $287=$968;
   $288=1;
   var $969=$286;
   var $970=$287;
   var $971=$288;
   $283=$969;
   $284=$970;
   $285=$971;
   var $972=$283;
   var $973=$284;
   var $974=$973;
   __ZdlPv($974);
   label = 52; break;
  case 52: 
   label = 53; break;
  case 53: 
   label = 54; break;
  case 54: 
   label = 55; break;
  case 55: 
   $360=$__h;
   var $977=$360;
   $359=$977;
   var $978=$359;
   $357=$978;
   $358=0;
   var $979=$357;
   var $980=(($979)|0);
   $356=$980;
   var $981=$356;
   var $982=$981;
   $355=$982;
   var $983=$355;
   var $984=(($983)|0);
   var $985=HEAP32[(($984)>>2)];
   $__tmp_i_i_i=$985;
   var $986=$358;
   var $987=(($979)|0);
   $328=$987;
   var $988=$328;
   var $989=$988;
   $327=$989;
   var $990=$327;
   var $991=(($990)|0);
   HEAP32[(($991)>>2)]=$986;
   var $992=$__tmp_i_i_i;
   var $993=(($992)|(0))!=0;
   if ($993) { label = 56; break; } else { label = 65; break; }
  case 56: 
   var $995=(($979)|0);
   $326=$995;
   var $996=$326;
   var $997=$996;
   $325=$997;
   var $998=$325;
   var $999=(($998+4)|0);
   var $1000=$__tmp_i_i_i;
   $351=$999;
   $352=$1000;
   var $1001=$351;
   var $1002=(($1001+5)|0);
   var $1003=HEAP8[($1002)];
   var $1004=(($1003) & 1);
   if ($1004) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $1006=(($1001)|0);
   var $1007=HEAP32[(($1006)>>2)];
   var $1008=$352;
   var $1009=(($1008+16)|0);
   var $1010=(($1009)|0);
   var $1011=(($1010+12)|0);
   $350=$1011;
   var $1012=$350;
   var $1013=$1012;
   var $1014=$1013;
   $340=$1007;
   $341=$1014;
   var $1015=$343;
   var $1016=$340;
   var $1017=$341;
   var $tmp_i_i_i_i_i=$339;
   var $tmp1_i_i_i_i_i=$342;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
   $337=$1016;
   $338=$1017;
   var $1018=$338;
   label = 59; break;
  case 58: 
   var $1020$0 = ___cxa_find_matching_catch(-1, -1,0); $1020$1 = tempRet0;
   var $1021=$1020$0;
   $353=$1021;
   var $1022=$1020$1;
   $354=$1022;
   var $1023=$353;
   ___cxa_call_unexpected($1023);
   throw "Reached an unreachable!";
  case 59: 
   var $1025=(($1001+4)|0);
   var $1026=HEAP8[($1025)];
   var $1027=(($1026) & 1);
   if ($1027) { label = 60; break; } else { label = 62; break; }
  case 60: 
   var $1029=(($1001)|0);
   var $1030=HEAP32[(($1029)>>2)];
   var $1031=$352;
   var $1032=(($1031+16)|0);
   var $1033=(($1032)|0);
   var $1034=(($1033)|0);
   $329=$1034;
   var $1035=$329;
   var $1036=$1035;
   var $1037=$1036;
   $333=$1030;
   $334=$1037;
   var $1038=$336;
   var $1039=$333;
   var $1040=$334;
   var $tmp_i1_i_i_i_i=$332;
   var $tmp1_i2_i_i_i_i=$335;
   assert(1 % 1 === 0);HEAP8[($tmp_i1_i_i_i_i)]=HEAP8[($tmp1_i2_i_i_i_i)];
   $330=$1039;
   $331=$1040;
   var $1041=$331;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 58; break; }
  case 61: 
   label = 62; break;
  case 62: 
   var $1043=$352;
   var $1044=(($1043)|(0))!=0;
   if ($1044) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $1046=(($1001)|0);
   var $1047=HEAP32[(($1046)>>2)];
   var $1048=$352;
   $347=$1047;
   $348=$1048;
   $349=1;
   var $1049=$347;
   var $1050=$348;
   var $1051=$349;
   $344=$1049;
   $345=$1050;
   $346=$1051;
   var $1052=$344;
   var $1053=$345;
   var $1054=$1053;
   __ZdlPv($1054);
   label = 64; break;
  case 64: 
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $1057=$376;
   var $1058=$377;
   var $1059$0=$1057;
   var $1059$1=0;
   var $1060$0=$1059$0;
   var $1060$1=$1058;
   ___resumeException($1060$0)
   var $1062$0 = ___cxa_find_matching_catch(-1, -1,0); $1062$1 = tempRet0;
   var $1063=$1062$0;
   ___clang_call_terminate($1063);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 7217
// WARNING: content after a branch in a label, line: 7219
// WARNING: content after a branch in a label, line: 7220
// WARNING: content after a branch in a label, line: 7221
// WARNING: content after a branch in a label, line: 7222
// WARNING: content after a branch in a label, line: 7223
// WARNING: content after a branch in a label, line: 7442
// WARNING: content after a branch in a label, line: 7444
// WARNING: content after a branch in a label, line: 7445
// WARNING: content after a branch in a label, line: 7446
// WARNING: content after a branch in a label, line: 7447
// WARNING: content after a branch in a label, line: 7448
// WARNING: content after a branch in a label, line: 7564
// WARNING: content after a branch in a label, line: 7566
// WARNING: content after a branch in a label, line: 7567
// WARNING: content after a branch in a label, line: 7568
// WARNING: content after a branch in a label, line: 7569
// WARNING: content after a branch in a label, line: 7570
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSN_SN_($this, $__parent, $__child, $__new_node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31=sp;
   var $32=(sp)+(8);
   var $33=(sp)+(16);
   $27=$this;
   $28=$__parent;
   $29=$__child;
   $30=$__new_node;
   var $34=$27;
   $25=$31;
   $26=-1;
   var $35=$25;
   var $36=$26;
   $23=$35;
   $24=$36;
   var $37=$23;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=0;
   $19=$31;
   var $39=$19;
   var $40=$30;
   var $41=$40;
   var $42=(($41)|0);
   HEAP32[(($42)>>2)]=0;
   $3=$32;
   $4=-1;
   var $43=$3;
   var $44=$4;
   $1=$43;
   $2=$44;
   var $45=$1;
   var $46=(($45)|0);
   HEAP32[(($46)>>2)]=0;
   $5=$32;
   var $47=$5;
   var $48=$30;
   var $49=(($48+4)|0);
   HEAP32[(($49)>>2)]=0;
   var $50=$28;
   var $51=$30;
   var $52=(($51+8)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$30;
   var $54=$29;
   HEAP32[(($54)>>2)]=$53;
   $6=$34;
   var $55=$6;
   var $56=(($55)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$57;
   var $59=(($58)|0);
   var $60=HEAP32[(($59)>>2)];
   $9=$33;
   $10=-1;
   var $61=$9;
   var $62=$10;
   $7=$61;
   $8=$62;
   var $63=$7;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=0;
   $11=$33;
   var $65=$11;
   var $66=(($60)|(0))!=0;
   if ($66) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $12=$34;
   var $68=$12;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$70;
   var $72=(($71)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73;
   $13=$34;
   var $75=$13;
   var $76=(($75)|0);
   HEAP32[(($76)>>2)]=$74;
   label = 3; break;
  case 3: 
   $18=$34;
   var $78=$18;
   var $79=(($78+4)|0);
   $17=$79;
   var $80=$17;
   var $81=$80;
   $16=$81;
   var $82=$16;
   var $83=(($82)|0);
   $15=$83;
   var $84=$15;
   $14=$84;
   var $85=$14;
   var $86=$85;
   var $87=$86;
   var $88=$87;
   var $89=$88;
   var $90=(($89)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$29;
   var $93=HEAP32[(($92)>>2)];
   __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($91, $93);
   $22=$34;
   var $94=$22;
   var $95=(($94+8)|0);
   $21=$95;
   var $96=$21;
   var $97=$96;
   $20=$97;
   var $98=$20;
   var $99=(($98)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $__y;
   var $16=sp;
   var $17;
   var $18;
   var $__y1;
   var $19=(sp)+(8);
   $14=$__root;
   $15=$__x;
   var $20=$15;
   var $21=$14;
   var $22=(($20)|(0))==(($21)|(0));
   var $23=$15;
   var $24=(($23+12)|0);
   var $25=(($22)&(1));
   HEAP8[($24)]=$25;
   label = 2; break;
  case 2: 
   var $27=$15;
   var $28=$14;
   var $29=(($27)|(0))!=(($28)|(0));
   if ($29) { label = 3; break; } else { var $39 = 0;label = 4; break; }
  case 3: 
   var $31=$15;
   var $32=(($31+8)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+12)|0);
   var $35=HEAP8[($34)];
   var $36=(($35) & 1);
   var $37=$36 ^ 1;
   var $39 = $37;label = 4; break;
  case 4: 
   var $39;
   if ($39) { label = 5; break; } else { label = 26; break; }
  case 5: 
   var $41=$15;
   var $42=(($41+8)|0);
   var $43=HEAP32[(($42)>>2)];
   $13=$43;
   var $44=$13;
   var $45=$13;
   var $46=(($45+8)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($44)|(0))==(($50)|(0));
   if ($51) { label = 6; break; } else { label = 16; break; }
  case 6: 
   var $53=$15;
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+4)|0);
   var $59=HEAP32[(($58)>>2)];
   $__y=$59;
   var $60=$__y;
   $11=$16;
   $12=-1;
   var $61=$11;
   var $62=$12;
   $9=$61;
   $10=$62;
   var $63=$9;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=0;
   label = 7; break;
  case 7: 
   $8=$16;
   var $66=$8;
   label = 8; break;
  case 8: 
   var $68=(($60)|(0))!=0;
   if ($68) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $70=$__y;
   var $71=(($70+12)|0);
   var $72=HEAP8[($71)];
   var $73=(($72) & 1);
   if ($73) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $75=$15;
   var $76=(($75+8)|0);
   var $77=HEAP32[(($76)>>2)];
   $15=$77;
   var $78=$15;
   var $79=(($78+12)|0);
   HEAP8[($79)]=1;
   var $80=$15;
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   $15=$82;
   var $83=$15;
   var $84=$14;
   var $85=(($83)|(0))==(($84)|(0));
   var $86=$15;
   var $87=(($86+12)|0);
   var $88=(($85)&(1));
   HEAP8[($87)]=$88;
   var $89=$__y;
   var $90=(($89+12)|0);
   HEAP8[($90)]=1;
   label = 15; break;
  case 11: 
   var $96=$17;
   ___cxa_call_unexpected($96);
   throw "Reached an unreachable!";
  case 12: 
   var $98=$15;
   $1=$98;
   var $99=$1;
   var $100=$1;
   var $101=(($100+8)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$102;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($99)|(0))==(($105)|(0));
   if ($106) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $108=$15;
   var $109=(($108+8)|0);
   var $110=HEAP32[(($109)>>2)];
   $15=$110;
   var $111=$15;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($111);
   label = 14; break;
  case 14: 
   var $113=$15;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   $15=$115;
   var $116=$15;
   var $117=(($116+12)|0);
   HEAP8[($117)]=1;
   var $118=$15;
   var $119=(($118+8)|0);
   var $120=HEAP32[(($119)>>2)];
   $15=$120;
   var $121=$15;
   var $122=(($121+12)|0);
   HEAP8[($122)]=0;
   var $123=$15;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($123);
   label = 26; break;
  case 15: 
   label = 25; break;
  case 16: 
   var $126=$15;
   var $127=(($126+8)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($128+8)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=$130;
   var $132=(($131)|0);
   var $133=HEAP32[(($132)>>2)];
   $__y1=$133;
   var $134=$__y1;
   $4=$19;
   $5=-1;
   var $135=$4;
   var $136=$5;
   $2=$135;
   $3=$136;
   var $137=$2;
   var $138=(($137)|0);
   HEAP32[(($138)>>2)]=0;
   label = 17; break;
  case 17: 
   $6=$19;
   var $140=$6;
   label = 18; break;
  case 18: 
   var $142=(($134)|(0))!=0;
   if ($142) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $144=$__y1;
   var $145=(($144+12)|0);
   var $146=HEAP8[($145)];
   var $147=(($146) & 1);
   if ($147) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $149=$15;
   var $150=(($149+8)|0);
   var $151=HEAP32[(($150)>>2)];
   $15=$151;
   var $152=$15;
   var $153=(($152+12)|0);
   HEAP8[($153)]=1;
   var $154=$15;
   var $155=(($154+8)|0);
   var $156=HEAP32[(($155)>>2)];
   $15=$156;
   var $157=$15;
   var $158=$14;
   var $159=(($157)|(0))==(($158)|(0));
   var $160=$15;
   var $161=(($160+12)|0);
   var $162=(($159)&(1));
   HEAP8[($161)]=$162;
   var $163=$__y1;
   var $164=(($163+12)|0);
   HEAP8[($164)]=1;
   label = 24; break;
  case 21: 
   var $166=$15;
   $7=$166;
   var $167=$7;
   var $168=$7;
   var $169=(($168+8)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$170;
   var $172=(($171)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($167)|(0))==(($173)|(0));
   if ($174) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $176=$15;
   var $177=(($176+8)|0);
   var $178=HEAP32[(($177)>>2)];
   $15=$178;
   var $179=$15;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($179);
   label = 23; break;
  case 23: 
   var $181=$15;
   var $182=(($181+8)|0);
   var $183=HEAP32[(($182)>>2)];
   $15=$183;
   var $184=$15;
   var $185=(($184+12)|0);
   HEAP8[($185)]=1;
   var $186=$15;
   var $187=(($186+8)|0);
   var $188=HEAP32[(($187)>>2)];
   $15=$188;
   var $189=$15;
   var $190=(($189+12)|0);
   HEAP8[($190)]=0;
   var $191=$15;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($191);
   label = 26; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 2; break;
  case 26: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__y;
   var $8=sp;
   var $9;
   var $10;
   $7=$__x;
   var $11=$7;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   $__y=$13;
   var $14=$__y;
   var $15=$14;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$7;
   var $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=$17;
   var $20=$7;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   $5=$8;
   $6=-1;
   var $23=$5;
   var $24=$6;
   $3=$23;
   $4=$24;
   var $25=$3;
   var $26=(($25)|0);
   HEAP32[(($26)>>2)]=0;
   label = 2; break;
  case 2: 
   $1=$8;
   var $28=$1;
   label = 3; break;
  case 3: 
   var $30=(($22)|(0))!=0;
   if ($30) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $32=$7;
   var $33=$7;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+8)|0);
   HEAP32[(($36)>>2)]=$32;
   label = 6; break;
  case 5: 
   var $42=$9;
   ___cxa_call_unexpected($42);
   throw "Reached an unreachable!";
  case 6: 
   var $44=$7;
   var $45=(($44+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$__y;
   var $48=(($47+8)|0);
   HEAP32[(($48)>>2)]=$46;
   var $49=$7;
   $2=$49;
   var $50=$2;
   var $51=$2;
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$53;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($50)|(0))==(($56)|(0));
   if ($57) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $59=$__y;
   var $60=$7;
   var $61=(($60+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=$59;
   label = 9; break;
  case 8: 
   var $66=$__y;
   var $67=$7;
   var $68=(($67+8)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+4)|0);
   HEAP32[(($70)>>2)]=$66;
   label = 9; break;
  case 9: 
   var $72=$7;
   var $73=$__y;
   var $74=$73;
   var $75=(($74)|0);
   HEAP32[(($75)>>2)]=$72;
   var $76=$__y;
   var $77=$7;
   var $78=(($77+8)|0);
   HEAP32[(($78)>>2)]=$76;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__y;
   var $8=sp;
   var $9;
   var $10;
   $7=$__x;
   var $11=$7;
   var $12=$11;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   $__y=$14;
   var $15=$__y;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$7;
   var $19=$18;
   var $20=(($19)|0);
   HEAP32[(($20)>>2)]=$17;
   var $21=$7;
   var $22=$21;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   $5=$8;
   $6=-1;
   var $25=$5;
   var $26=$6;
   $3=$25;
   $4=$26;
   var $27=$3;
   var $28=(($27)|0);
   HEAP32[(($28)>>2)]=0;
   label = 2; break;
  case 2: 
   $1=$8;
   var $30=$1;
   label = 3; break;
  case 3: 
   var $32=(($24)|(0))!=0;
   if ($32) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $34=$7;
   var $35=$7;
   var $36=$35;
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+8)|0);
   HEAP32[(($39)>>2)]=$34;
   label = 6; break;
  case 5: 
   var $45=$9;
   ___cxa_call_unexpected($45);
   throw "Reached an unreachable!";
  case 6: 
   var $47=$7;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$__y;
   var $51=(($50+8)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$7;
   $2=$52;
   var $53=$2;
   var $54=$2;
   var $55=(($54+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   var $58=(($57)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($53)|(0))==(($59)|(0));
   if ($60) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $62=$__y;
   var $63=$7;
   var $64=(($63+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65;
   var $67=(($66)|0);
   HEAP32[(($67)>>2)]=$62;
   label = 9; break;
  case 8: 
   var $69=$__y;
   var $70=$7;
   var $71=(($70+8)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+4)|0);
   HEAP32[(($73)>>2)]=$69;
   label = 9; break;
  case 9: 
   var $75=$7;
   var $76=$__y;
   var $77=(($76+4)|0);
   HEAP32[(($77)>>2)]=$75;
   var $78=$__y;
   var $79=$7;
   var $80=(($79+8)|0);
   HEAP32[(($80)>>2)]=$78;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEEC1ERKSH_($this, $__comp) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$__comp;
 var $3=$1;
 var $4=$2;
 __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEEC2ERKSH_($3, $4);
 return;
}
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEEC2ERKSH_($this, $__comp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(8);
 var $7;
 var $8;
 var $9=(sp)+(16);
 var $10=(sp)+(24);
 var $__t21_i=(sp)+(32);
 var $11;
 var $12;
 var $13=(sp)+(40);
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28=(sp)+(48);
 $26=$this;
 $27=$__comp;
 var $29=$26;
 var $30=(($29+4)|0);
 $25=$30;
 var $31=$25;
 $24=$31;
 var $32=$24;
 var $33=$32;
 $23=$33;
 var $34=$23;
 var $35=$34;
 $22=$35;
 var $36=$22;
 var $37=(($34)|0);
 $21=$37;
 var $38=$21;
 $20=$38;
 var $39=$20;
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($29+8)|0);
 var $42=$27;
 var $tmp=$13;
 var $tmp1=$28;
 assert(1 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];
 $11=$41;
 $12=0;
 var $43=$11;
 var $44=$12;
 var $tmp_i=$__t21_i;
 var $tmp2_i=$13;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];
 $8=$43;
 HEAP32[(($9)>>2)]=$44;
 var $45=$8;
 var $46=$45;
 $7=$9;
 var $47=$7;
 var $48=HEAP32[(($47)>>2)];
 $1=$__t21_i;
 var $49=$1;
 var $tmp_i_i=$6;
 var $tmp1_i_i=$10;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
 $4=$46;
 HEAP32[(($5)>>2)]=$48;
 var $50=$4;
 var $51=$50;
 $3=$6;
 var $52=$3;
 var $53=(($50)|0);
 $2=$5;
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 HEAP32[(($53)>>2)]=$55;
 $18=$29;
 var $56=$18;
 var $57=(($56+4)|0);
 $17=$57;
 var $58=$17;
 var $59=$58;
 $16=$59;
 var $60=$16;
 var $61=(($60)|0);
 $15=$61;
 var $62=$15;
 $14=$62;
 var $63=$14;
 var $64=$63;
 var $65=$64;
 var $66=$65;
 $19=$29;
 var $67=$19;
 var $68=(($67)|0);
 HEAP32[(($68)>>2)]=$66;
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIP5LayerNS_9allocatorIS2_EEED2Ev($3);
 return;
}
function __ZNSt3__113__vector_baseIP5LayerNS_9allocatorIS2_EEED2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=sp;
   var $5;
   var $6;
   var $7=(sp)+(8);
   var $8=(sp)+(16);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36=(sp)+(24);
   $35=$this;
   var $37=$35;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   $33=$36;
   $34=-1;
   var $40=$33;
   var $41=$34;
   $31=$40;
   $32=$41;
   var $42=$31;
   var $43=(($42)|0);
   HEAP32[(($43)>>2)]=0;
   $24=$36;
   var $44=$24;
   var $45=(($39)|(0))!=0;
   if ($45) { label = 2; break; } else { label = 6; break; }
  case 2: 
   $16=$37;
   var $47=$16;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   $12=$47;
   $13=$49;
   var $50=$12;
   label = 3; break;
  case 3: 
   var $52=$13;
   var $53=(($50+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($52)|(0))!=(($54)|(0));
   if ($55) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $11=$50;
   var $57=$11;
   var $58=(($57+8)|0);
   $10=$58;
   var $59=$10;
   var $60=$59;
   $9=$60;
   var $61=$9;
   var $62=$61;
   var $63=(($50+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(4))|0);
   HEAP32[(($63)>>2)]=$65;
   $1=$65;
   var $66=$1;
   $5=$62;
   $6=$66;
   var $67=$8;
   var $68=$5;
   var $69=$6;
   var $tmp_i_i_i=$4;
   var $tmp1_i_i_i=$7;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $2=$68;
   $3=$69;
   var $70=$3;
   label = 3; break;
  case 5: 
   $19=$37;
   var $71=$19;
   var $72=(($71+8)|0);
   $18=$72;
   var $73=$18;
   var $74=$73;
   $17=$74;
   var $75=$17;
   var $76=$75;
   var $77=(($37)|0);
   var $78=HEAP32[(($77)>>2)];
   $23=$37;
   var $79=$23;
   $22=$79;
   var $80=$22;
   var $81=(($80+8)|0);
   $21=$81;
   var $82=$21;
   var $83=$82;
   $20=$83;
   var $84=$20;
   var $85=(($84)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($79)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$86;
   var $90=$88;
   var $91=((($89)-($90))|0);
   var $92=((((($91)|(0)))/(4))&-1);
   $28=$76;
   $29=$78;
   $30=$92;
   var $93=$28;
   var $94=$29;
   var $95=$30;
   $25=$93;
   $26=$94;
   $27=$95;
   var $96=$25;
   var $97=$26;
   var $98=$97;
   __ZdlPv($98);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN13VerticalLayerD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN5LayerD2Ev($3);
 return;
}
function __ZN5LayerD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((5184)|0);
 var $4=(($2+4)|0);
 __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEED1Ev($4);
 return;
}
function __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEED2Ev($2);
 return;
}
function __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseI7LamellaNS_9allocatorIS1_EEED2Ev($3);
 return;
}
function __ZNSt3__113__vector_baseI7LamellaNS_9allocatorIS1_EEED2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=sp;
   var $5;
   var $6;
   var $7=(sp)+(8);
   var $8=(sp)+(16);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36=(sp)+(24);
   $35=$this;
   var $37=$35;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   $33=$36;
   $34=-1;
   var $40=$33;
   var $41=$34;
   $31=$40;
   $32=$41;
   var $42=$31;
   var $43=(($42)|0);
   HEAP32[(($43)>>2)]=0;
   $24=$36;
   var $44=$24;
   var $45=(($39)|(0))!=0;
   if ($45) { label = 2; break; } else { label = 6; break; }
  case 2: 
   $16=$37;
   var $47=$16;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   $12=$47;
   $13=$49;
   var $50=$12;
   label = 3; break;
  case 3: 
   var $52=$13;
   var $53=(($50+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($52)|(0))!=(($54)|(0));
   if ($55) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $11=$50;
   var $57=$11;
   var $58=(($57+8)|0);
   $10=$58;
   var $59=$10;
   var $60=$59;
   $9=$60;
   var $61=$9;
   var $62=$61;
   var $63=(($50+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(4))|0);
   HEAP32[(($63)>>2)]=$65;
   $1=$65;
   var $66=$1;
   $5=$62;
   $6=$66;
   var $67=$8;
   var $68=$5;
   var $69=$6;
   var $tmp_i_i_i=$4;
   var $tmp1_i_i_i=$7;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $2=$68;
   $3=$69;
   var $70=$3;
   label = 3; break;
  case 5: 
   $19=$37;
   var $71=$19;
   var $72=(($71+8)|0);
   $18=$72;
   var $73=$18;
   var $74=$73;
   $17=$74;
   var $75=$17;
   var $76=$75;
   var $77=(($37)|0);
   var $78=HEAP32[(($77)>>2)];
   $23=$37;
   var $79=$23;
   $22=$79;
   var $80=$22;
   var $81=(($80+8)|0);
   $21=$81;
   var $82=$21;
   var $83=$82;
   $20=$83;
   var $84=$20;
   var $85=(($84)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($79)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$86;
   var $90=$88;
   var $91=((($89)-($90))|0);
   var $92=((((($91)|(0)))/(4))&-1);
   $28=$76;
   $29=$78;
   $30=$92;
   var $93=$28;
   var $94=$29;
   var $95=$30;
   $25=$93;
   $26=$94;
   $27=$95;
   var $96=$25;
   var $97=$26;
   var $98=$97;
   __ZdlPv($98);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEED1Ev($3);
 return;
}
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEED2Ev($2);
 return;
}
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEED2Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $7=$this;
 var $8=$7;
 $6=$8;
 var $9=$6;
 $5=$9;
 var $10=$5;
 var $11=(($10+4)|0);
 $4=$11;
 var $12=$4;
 var $13=$12;
 $3=$13;
 var $14=$3;
 var $15=(($14)|0);
 $2=$15;
 var $16=$2;
 $1=$16;
 var $17=$1;
 var $18=$17;
 var $19=$18;
 var $20=$19;
 var $21=$20;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE7destroyEPNS_11__tree_nodeISF_PvEE($8, $24);
 return;
}
function __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE7destroyEPNS_11__tree_nodeISF_PvEE($this, $__nd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7=sp;
   var $8;
   var $9;
   var $10=(sp)+(8);
   var $11=(sp)+(16);
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=(sp)+(24);
   var $26;
   var $27;
   var $__na;
   $23=$this;
   $24=$__nd;
   var $28=$23;
   var $29=$24;
   $21=$25;
   $22=-1;
   var $30=$21;
   var $31=$22;
   $19=$30;
   $20=$31;
   var $32=$19;
   var $33=(($32)|0);
   HEAP32[(($33)>>2)]=0;
   label = 2; break;
  case 2: 
   $18=$25;
   var $35=$18;
   label = 3; break;
  case 3: 
   var $37=(($29)|(0))!=0;
   if ($37) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $39=$24;
   var $40=$39;
   var $41=(($40)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$42;
   __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE7destroyEPNS_11__tree_nodeISF_PvEE($28, $43);
   var $44=$24;
   var $45=$44;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   __ZNSt3__16__treeINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS7_EENS5_INS_4pairIKS7_fEEEEE12__value_typeENS_19__map_value_compareIS7_SF_S9_Lb1EEENS5_ISF_EEE7destroyEPNS_11__tree_nodeISF_PvEE($28, $48);
   $4=$28;
   var $49=$4;
   var $50=(($49+4)|0);
   $3=$50;
   var $51=$3;
   var $52=$51;
   $2=$52;
   var $53=$2;
   var $54=$53;
   $__na=$54;
   var $55=$__na;
   var $56=$24;
   var $57=(($56+16)|0);
   $1=$57;
   var $58=$1;
   var $59=$58;
   var $60=$59;
   $8=$55;
   $9=$60;
   var $61=$11;
   var $62=$8;
   var $63=$9;
   var $tmp_i=$7;
   var $tmp1_i=$10;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $5=$62;
   $6=$63;
   var $64=$6;
   (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE12__value_typeD1Ev($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $66=$__na;
   var $67=$24;
   $15=$66;
   $16=$67;
   $17=1;
   var $68=$15;
   var $69=$16;
   var $70=$17;
   $12=$68;
   $13=$69;
   $14=$70;
   var $71=$12;
   var $72=$13;
   var $73=$72;
   __ZdlPv($73);
   label = 9; break;
  case 7: 
   var $75$0 = ___cxa_find_matching_catch(-1, -1); $75$1 = tempRet0;
   var $76=$75$0;
   $26=$76;
   var $77=$75$1;
   $27=$77;
   label = 8; break;
  case 8: 
   var $79=$26;
   ___cxa_call_unexpected($79);
   throw "Reached an unreachable!";
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE12__value_typeD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE12__value_typeD2Ev($2);
 return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEE12__value_typeD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($3);
 return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($2);
 return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 return;
}
function __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this, $__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=sp;
   var $13;
   var $14;
   var $15=(sp)+(8);
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23=(sp)+(16);
   var $__ms_i;
   var $__cap_i;
   var $24=(sp)+(24);
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $__a;
   var $__v=(sp)+(32);
   var $31;
   var $32;
   $29=$this;
   $30=$__x;
   var $33=$29;
   var $34=$33;
   $28=$34;
   var $35=$28;
   var $36=(($35+8)|0);
   $27=$36;
   var $37=$27;
   var $38=$37;
   $26=$38;
   var $39=$26;
   var $40=$39;
   $__a=$40;
   $25=$33;
   var $41=$25;
   var $42=$41;
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$41;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$44;
   var $49=$47;
   var $50=((($48)-($49))|0);
   var $51=((((($50)|(0)))/(4))&-1);
   var $52=((($51)+(1))|0);
   $22=$33;
   HEAP32[(($23)>>2)]=$52;
   var $53=$22;
   var $54=__ZNKSt3__16vectorIP5LayerNS_9allocatorIS2_EEE8max_sizeEv($53);
   $__ms_i=$54;
   var $55=HEAP32[(($23)>>2)];
   var $56=$__ms_i;
   var $57=(($55)>>>(0)) > (($56)>>>(0));
   if ($57) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $59=$53;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
   label = 3; break;
  case 3: 
   $20=$53;
   var $61=$20;
   var $62=$61;
   $19=$62;
   var $63=$19;
   $18=$63;
   var $64=$18;
   var $65=(($64+8)|0);
   $17=$65;
   var $66=$17;
   var $67=$66;
   $16=$67;
   var $68=$16;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($63)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$70;
   var $74=$72;
   var $75=((($73)-($74))|0);
   var $76=((((($75)|(0)))/(4))&-1);
   $__cap_i=$76;
   var $77=$__cap_i;
   var $78=$__ms_i;
   var $79=((((($78)>>>(0)))/(2))&-1);
   var $80=(($77)>>>(0)) >= (($79)>>>(0));
   if ($80) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $82=$__ms_i;
   $21=$82;
   label = 9; break;
  case 5: 
   var $84=$__cap_i;
   var $85=($84<<1);
   HEAP32[(($24)>>2)]=$85;
   $13=$24;
   $14=$23;
   var $86=$13;
   var $87=$14;
   var $tmp_i_i=$12;
   var $tmp1_i_i=$15;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $10=$86;
   $11=$87;
   var $88=$10;
   var $89=$11;
   $7=$12;
   $8=$88;
   $9=$89;
   var $90=$7;
   var $91=$8;
   var $92=HEAP32[(($91)>>2)];
   var $93=$9;
   var $94=HEAP32[(($93)>>2)];
   var $95=(($92)>>>(0)) < (($94)>>>(0));
   if ($95) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $97=$11;
   var $100 = $97;label = 8; break;
  case 7: 
   var $99=$10;
   var $100 = $99;label = 8; break;
  case 8: 
   var $100;
   var $101=HEAP32[(($100)>>2)];
   $21=$101;
   label = 9; break;
  case 9: 
   var $102=$21;
   $6=$33;
   var $103=$6;
   var $104=$103;
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$103;
   var $108=(($107)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$106;
   var $111=$109;
   var $112=((($110)-($111))|0);
   var $113=((((($112)|(0)))/(4))&-1);
   var $114=$__a;
   __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEEC1EjjS5_($__v, $102, $113, $114);
   var $115=$__a;
   var $116=(($__v+8)|0);
   var $117=HEAP32[(($116)>>2)];
   $5=$117;
   var $118=$5;
   var $119=$30;
   $4=$119;
   var $120=$4;
   $1=$115;
   $2=$118;
   $3=$120;
   var $121=$2;
   var $122=$121;
   var $123=(($122)|(0))==0;
   if ($123) { var $128 = 0;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $125=$122;
   var $126=$3;
   var $127=HEAP32[(($126)>>2)];
   HEAP32[(($125)>>2)]=$127;
   var $128 = $125;label = 11; break;
  case 11: 
   var $128;
   label = 12; break;
  case 12: 
   var $130=(($__v+8)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+4)|0);
   HEAP32[(($130)>>2)]=$132;
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($33, $__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEED1Ev($__v);
   STACKTOP = sp;
   return;
  case 14: 
   var $135$0 = ___cxa_find_matching_catch(-1, -1); $135$1 = tempRet0;
   var $136=$135$0;
   $31=$136;
   var $137=$135$1;
   $32=$137;
   (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEED1Ev($__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $140=$31;
   var $141=$32;
   var $142$0=$140;
   var $142$1=0;
   var $143$0=$142$0;
   var $143$1=$141;
   ___resumeException($143$0)
  case 17: 
   var $145$0 = ___cxa_find_matching_catch(-1, -1,0); $145$1 = tempRet0;
   var $146=$145$0;
   ___clang_call_terminate($146);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEEC1EjjS5_($this, $__cap, $__start, $__a) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEEC2EjjS5_($5, $6, $7, $8);
 return;
}
function __ZNSt3__16vectorIP5LayerNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $_Np_i;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $__t_i2=sp;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $__t_i1=(sp)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__t_i=(sp)+(16);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 $30=$this;
 $31=$__v;
 var $32=$30;
 var $33=$32;
 $29=$33;
 var $34=$29;
 var $35=(($34+8)|0);
 $28=$35;
 var $36=$28;
 var $37=$36;
 $27=$37;
 var $38=$27;
 var $39=$38;
 var $40=$32;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$32;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$31;
 var $47=(($46+4)|0);
 $1=$39;
 $2=$42;
 $3=$45;
 $4=$47;
 var $48=$3;
 var $49=$2;
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=((((($52)|(0)))/(4))&-1);
 $_Np_i=$53;
 var $54=$_Np_i;
 var $55=$4;
 var $56=HEAP32[(($55)>>2)];
 var $57=(((-$54))|0);
 var $58=(($56+($57<<2))|0);
 HEAP32[(($55)>>2)]=$58;
 var $59=$4;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=$2;
 var $63=$62;
 var $64=$_Np_i;
 var $65=($64<<2);
 assert($65 % 1 === 0);(_memcpy($61, $63, $65)|0);
 var $66=$32;
 var $67=(($66)|0);
 var $68=$31;
 var $69=(($68+4)|0);
 $8=$67;
 $9=$69;
 var $70=$8;
 $7=$70;
 var $71=$7;
 var $72=HEAP32[(($71)>>2)];
 HEAP32[(($__t_i2)>>2)]=$72;
 var $73=$9;
 $5=$73;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=$8;
 HEAP32[(($76)>>2)]=$75;
 $6=$__t_i2;
 var $77=$6;
 var $78=HEAP32[(($77)>>2)];
 var $79=$9;
 HEAP32[(($79)>>2)]=$78;
 var $80=$32;
 var $81=(($80+4)|0);
 var $82=$31;
 var $83=(($82+8)|0);
 $13=$81;
 $14=$83;
 var $84=$13;
 $12=$84;
 var $85=$12;
 var $86=HEAP32[(($85)>>2)];
 HEAP32[(($__t_i1)>>2)]=$86;
 var $87=$14;
 $10=$87;
 var $88=$10;
 var $89=HEAP32[(($88)>>2)];
 var $90=$13;
 HEAP32[(($90)>>2)]=$89;
 $11=$__t_i1;
 var $91=$11;
 var $92=HEAP32[(($91)>>2)];
 var $93=$14;
 HEAP32[(($93)>>2)]=$92;
 var $94=$32;
 $17=$94;
 var $95=$17;
 var $96=(($95+8)|0);
 $16=$96;
 var $97=$16;
 var $98=$97;
 $15=$98;
 var $99=$15;
 var $100=(($99)|0);
 var $101=$31;
 $20=$101;
 var $102=$20;
 var $103=(($102+12)|0);
 $19=$103;
 var $104=$19;
 var $105=$104;
 $18=$105;
 var $106=$18;
 var $107=(($106)|0);
 $24=$100;
 $25=$107;
 var $108=$24;
 $23=$108;
 var $109=$23;
 var $110=HEAP32[(($109)>>2)];
 HEAP32[(($__t_i)>>2)]=$110;
 var $111=$25;
 $21=$111;
 var $112=$21;
 var $113=HEAP32[(($112)>>2)];
 var $114=$24;
 HEAP32[(($114)>>2)]=$113;
 $22=$__t_i;
 var $115=$22;
 var $116=HEAP32[(($115)>>2)];
 var $117=$25;
 HEAP32[(($117)>>2)]=$116;
 var $118=$31;
 var $119=(($118+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$31;
 var $122=(($121)|0);
 HEAP32[(($122)>>2)]=$120;
 $26=$32;
 var $123=$26;
 STACKTOP = sp;
 return;
}
function __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEED2Ev($2);
 return;
}
function __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEED2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17=sp;
   var $18;
   var $19;
   var $20=(sp)+(8);
   var $21=(sp)+(16);
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29=(sp)+(24);
   var $30;
   var $31;
   var $32=(sp)+(32);
   var $33;
   var $34;
   $34=$this;
   var $35=$34;
   $33=$35;
   var $36=$33;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   $30=$36;
   $31=$38;
   var $39=$30;
   var $40=$31;
   var $tmp_i_i=$29;
   var $tmp1_i_i=$32;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $25=$39;
   $26=$40;
   var $41=$25;
   label = 2; break;
  case 2: 
   var $43=$26;
   var $44=(($41+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))!=(($45)|(0));
   if ($46) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $24=$41;
   var $48=$24;
   var $49=(($48+12)|0);
   $23=$49;
   var $50=$23;
   var $51=$50;
   $22=$51;
   var $52=$22;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($41+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(4))|0);
   HEAP32[(($55)>>2)]=$57;
   $14=$57;
   var $58=$14;
   $18=$54;
   $19=$58;
   var $59=$21;
   var $60=$18;
   var $61=$19;
   var $tmp_i_i_i_i=$17;
   var $tmp1_i_i_i_i=$20;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $15=$60;
   $16=$61;
   var $62=$16;
   label = 2; break;
  case 4: 
   var $63=(($35)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $7=$35;
   var $67=$7;
   var $68=(($67+12)|0);
   $6=$68;
   var $69=$6;
   var $70=$69;
   $5=$70;
   var $71=$5;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($35)|0);
   var $75=HEAP32[(($74)>>2)];
   $4=$35;
   var $76=$4;
   $3=$76;
   var $77=$3;
   var $78=(($77+12)|0);
   $2=$78;
   var $79=$2;
   var $80=$79;
   $1=$80;
   var $81=$1;
   var $82=(($81)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($76)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$83;
   var $87=$85;
   var $88=((($86)-($87))|0);
   var $89=((((($88)|(0)))/(4))&-1);
   $11=$73;
   $12=$75;
   $13=$89;
   var $90=$11;
   var $91=$12;
   var $92=$13;
   $8=$90;
   $9=$91;
   $10=$92;
   var $93=$8;
   var $94=$9;
   var $95=$94;
   __ZdlPv($95);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 8965
// WARNING: content after a branch in a label, line: 8967
// WARNING: content after a branch in a label, line: 8968
// WARNING: content after a branch in a label, line: 8969
// WARNING: content after a branch in a label, line: 8970
// WARNING: content after a branch in a label, line: 8971
// WARNING: content after a branch in a label, line: 9858
// WARNING: content after a branch in a label, line: 9860
// WARNING: content after a branch in a label, line: 9861
// WARNING: content after a branch in a label, line: 9862
// WARNING: content after a branch in a label, line: 9863
// WARNING: content after a branch in a label, line: 9864
function __ZNKSt3__16vectorIP5LayerNS_9allocatorIS2_EEE8max_sizeEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   var $4;
   var $5=(sp)+(8);
   var $6=(sp)+(16);
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=(sp)+(24);
   var $13;
   var $14;
   var $15=(sp)+(32);
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22=(sp)+(40);
   var $23=(sp)+(48);
   $19=$this;
   var $24=$19;
   var $25=$24;
   $18=$25;
   var $26=$18;
   var $27=(($26+8)|0);
   $17=$27;
   var $28=$17;
   var $29=$28;
   $16=$29;
   var $30=$16;
   var $31=$30;
   $4=$31;
   var $32=$6;
   var $33=$4;
   var $tmp_i1=$3;
   var $tmp1_i2=$5;
   assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
   $2=$33;
   var $34=$2;
   $1=$34;
   var $35=$1;
   label = 2; break;
  case 2: 
   HEAP32[(($22)>>2)]=1073741823;
   var $37=((2147483647)&-1);
   HEAP32[(($23)>>2)]=$37;
   $13=$22;
   $14=$23;
   var $38=$13;
   var $39=$14;
   var $tmp_i=$12;
   var $tmp1_i=$15;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $10=$38;
   $11=$39;
   var $40=$11;
   var $41=$10;
   $7=$12;
   $8=$40;
   $9=$41;
   var $42=$7;
   var $43=$8;
   var $44=HEAP32[(($43)>>2)];
   var $45=$9;
   var $46=HEAP32[(($45)>>2)];
   var $47=(($44)>>>(0)) < (($46)>>>(0));
   if ($47) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $49=$11;
   var $52 = $49;label = 5; break;
  case 4: 
   var $51=$10;
   var $52 = $51;label = 5; break;
  case 5: 
   var $52;
   label = 6; break;
  case 6: 
   var $54=HEAP32[(($52)>>2)];
   STACKTOP = sp;
   return $54;
  case 7: 
   var $60=$20;
   ___cxa_call_unexpected($60);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIP5LayerRNS_9allocatorIS2_EEEC2EjjS5_($this, $__cap, $__start, $__a) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=sp;
   var $6;
   var $7;
   var $8;
   var $9=(sp)+(8);
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39=(sp)+(16);
   var $40=(sp)+(24);
   $35=$this;
   $36=$__cap;
   $37=$__start;
   $38=$__a;
   var $41=$35;
   var $42=$41;
   var $43=(($41+12)|0);
   $33=$39;
   $34=-1;
   var $44=$33;
   var $45=$34;
   $31=$44;
   $32=$45;
   var $46=$31;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=0;
   $17=$39;
   var $48=$17;
   var $49=$38;
   $11=$43;
   $12=0;
   $13=$49;
   var $50=$11;
   var $51=$12;
   var $52=$13;
   $8=$50;
   HEAP32[(($9)>>2)]=$51;
   $10=$52;
   var $53=$8;
   var $54=$53;
   $7=$9;
   var $55=$7;
   var $56=HEAP32[(($55)>>2)];
   var $57=$10;
   $1=$57;
   var $58=$1;
   $4=$54;
   HEAP32[(($5)>>2)]=$56;
   $6=$58;
   var $59=$4;
   var $60=(($59)|0);
   $3=$5;
   var $61=$3;
   var $62=HEAP32[(($61)>>2)];
   HEAP32[(($60)>>2)]=$62;
   var $63=(($59+4)|0);
   var $64=$6;
   $2=$64;
   var $65=$2;
   HEAP32[(($63)>>2)]=$65;
   var $66=$36;
   var $67=(($66)|(0))!=0;
   if ($67) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $16=$41;
   var $69=$16;
   var $70=(($69+12)|0);
   $15=$70;
   var $71=$15;
   var $72=$71;
   $14=$72;
   var $73=$14;
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$36;
   $21=$75;
   $22=$76;
   var $77=$21;
   var $78=$22;
   $18=$77;
   $19=$78;
   $20=0;
   var $79=$18;
   var $80=$19;
   var $81=($80<<2);
   var $82=__Znwj($81);
   var $83=$82;
   var $91 = $83;label = 4; break;
  case 3: 
   $25=$40;
   $26=-1;
   var $85=$25;
   var $86=$26;
   $23=$85;
   $24=$86;
   var $87=$23;
   var $88=(($87)|0);
   HEAP32[(($88)>>2)]=0;
   $27=$40;
   var $89=$27;
   var $91 = 0;label = 4; break;
  case 4: 
   var $91;
   var $92=(($41)|0);
   HEAP32[(($92)>>2)]=$91;
   var $93=(($41)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=$37;
   var $96=(($94+($95<<2))|0);
   var $97=(($41+8)|0);
   HEAP32[(($97)>>2)]=$96;
   var $98=(($41+4)|0);
   HEAP32[(($98)>>2)]=$96;
   var $99=(($41)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$36;
   var $102=(($100+($101<<2))|0);
   $30=$41;
   var $103=$30;
   var $104=(($103+12)|0);
   $29=$104;
   var $105=$29;
   var $106=$105;
   $28=$106;
   var $107=$28;
   var $108=(($107)|0);
   HEAP32[(($108)>>2)]=$102;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN7CorniceaSERKS_($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 var $6=$3;
 var $7=$6;
 var $8=__ZN13ComplectationaSERKS_($5, $7);
 return $4;
}
function __ZN13ComplectationaSERKS_($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return $4;
}
function __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this, $__x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=sp;
   var $13;
   var $14;
   var $15=(sp)+(8);
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23=(sp)+(16);
   var $__ms_i;
   var $__cap_i;
   var $24=(sp)+(24);
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $__a;
   var $__v=(sp)+(32);
   var $31;
   var $32;
   $29=$this;
   $30=$__x;
   var $33=$29;
   var $34=$33;
   $28=$34;
   var $35=$28;
   var $36=(($35+8)|0);
   $27=$36;
   var $37=$27;
   var $38=$37;
   $26=$38;
   var $39=$26;
   var $40=$39;
   $__a=$40;
   $25=$33;
   var $41=$25;
   var $42=$41;
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$41;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$44;
   var $49=$47;
   var $50=((($48)-($49))|0);
   var $51=((((($50)|(0)))/(4))&-1);
   var $52=((($51)+(1))|0);
   $22=$33;
   HEAP32[(($23)>>2)]=$52;
   var $53=$22;
   var $54=__ZNKSt3__16vectorI7LamellaNS_9allocatorIS1_EEE8max_sizeEv($53);
   $__ms_i=$54;
   var $55=HEAP32[(($23)>>2)];
   var $56=$__ms_i;
   var $57=(($55)>>>(0)) > (($56)>>>(0));
   if ($57) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $59=$53;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
   label = 3; break;
  case 3: 
   $20=$53;
   var $61=$20;
   var $62=$61;
   $19=$62;
   var $63=$19;
   $18=$63;
   var $64=$18;
   var $65=(($64+8)|0);
   $17=$65;
   var $66=$17;
   var $67=$66;
   $16=$67;
   var $68=$16;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($63)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$70;
   var $74=$72;
   var $75=((($73)-($74))|0);
   var $76=((((($75)|(0)))/(4))&-1);
   $__cap_i=$76;
   var $77=$__cap_i;
   var $78=$__ms_i;
   var $79=((((($78)>>>(0)))/(2))&-1);
   var $80=(($77)>>>(0)) >= (($79)>>>(0));
   if ($80) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $82=$__ms_i;
   $21=$82;
   label = 9; break;
  case 5: 
   var $84=$__cap_i;
   var $85=($84<<1);
   HEAP32[(($24)>>2)]=$85;
   $13=$24;
   $14=$23;
   var $86=$13;
   var $87=$14;
   var $tmp_i_i=$12;
   var $tmp1_i_i=$15;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $10=$86;
   $11=$87;
   var $88=$10;
   var $89=$11;
   $7=$12;
   $8=$88;
   $9=$89;
   var $90=$7;
   var $91=$8;
   var $92=HEAP32[(($91)>>2)];
   var $93=$9;
   var $94=HEAP32[(($93)>>2)];
   var $95=(($92)>>>(0)) < (($94)>>>(0));
   if ($95) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $97=$11;
   var $100 = $97;label = 8; break;
  case 7: 
   var $99=$10;
   var $100 = $99;label = 8; break;
  case 8: 
   var $100;
   var $101=HEAP32[(($100)>>2)];
   $21=$101;
   label = 9; break;
  case 9: 
   var $102=$21;
   $6=$33;
   var $103=$6;
   var $104=$103;
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$103;
   var $108=(($107)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$106;
   var $111=$109;
   var $112=((($110)-($111))|0);
   var $113=((((($112)|(0)))/(4))&-1);
   var $114=$__a;
   __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEEC1EjjS4_($__v, $102, $113, $114);
   var $115=$__a;
   var $116=(($__v+8)|0);
   var $117=HEAP32[(($116)>>2)];
   $5=$117;
   var $118=$5;
   var $119=$30;
   $4=$119;
   var $120=$4;
   $1=$115;
   $2=$118;
   $3=$120;
   var $121=$2;
   var $122=$121;
   var $123=(($122)|(0))==0;
   if ($123) { var $127 = 0;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $125=$122;
   var $126=$3;
   __ZN7LamellaC1ERKS_($125, $126);
   var $127 = $125;label = 11; break;
  case 11: 
   var $127;
   label = 12; break;
  case 12: 
   var $129=(($__v+8)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($130+4)|0);
   HEAP32[(($129)>>2)]=$131;
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($33, $__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEED1Ev($__v);
   STACKTOP = sp;
   return;
  case 14: 
   var $134$0 = ___cxa_find_matching_catch(-1, -1); $134$1 = tempRet0;
   var $135=$134$0;
   $31=$135;
   var $136=$134$1;
   $32=$136;
   (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEED1Ev($__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $139=$31;
   var $140=$32;
   var $141$0=$139;
   var $141$1=0;
   var $142$0=$141$0;
   var $142$1=$140;
   ___resumeException($142$0)
  case 17: 
   var $144$0 = ___cxa_find_matching_catch(-1, -1,0); $144$1 = tempRet0;
   var $145=$144$0;
   ___clang_call_terminate($145);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEEC1EjjS4_($this, $__cap, $__start, $__a) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEEC2EjjS4_($5, $6, $7, $8);
 return;
}
function __ZNSt3__16vectorI7LamellaNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $__t_i2=sp;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $__t_i1=(sp)+(8);
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $__t_i=(sp)+(16);
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   $38=$this;
   $39=$__v;
   var $40=$38;
   var $41=$40;
   $37=$41;
   var $42=$37;
   var $43=(($42+8)|0);
   $36=$43;
   var $44=$36;
   var $45=$44;
   $35=$45;
   var $46=$35;
   var $47=$46;
   var $48=$40;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$40;
   var $52=(($51+4)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$39;
   var $55=(($54+4)|0);
   $9=$47;
   $10=$50;
   $11=$53;
   $12=$55;
   label = 2; break;
  case 2: 
   var $57=$11;
   var $58=$10;
   var $59=(($57)|(0))!=(($58)|(0));
   if ($59) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $61=$9;
   var $62=$12;
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)-(4))|0);
   $8=$64;
   var $65=$8;
   var $66=$11;
   var $67=((($66)-(4))|0);
   $11=$67;
   $2=$67;
   var $68=$2;
   $1=$68;
   var $69=$1;
   $5=$61;
   $6=$65;
   $7=$69;
   var $70=$6;
   var $71=$70;
   var $72=(($71)|(0))==0;
   if ($72) { var $76 = 0;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $74=$71;
   var $75=$7;
   __ZN7LamellaC1ERKS_($74, $75);
   var $76 = $74;label = 5; break;
  case 5: 
   var $76;
   var $77=$12;
   var $78=HEAP32[(($77)>>2)];
   var $79=((($78)-(4))|0);
   HEAP32[(($77)>>2)]=$79;
   label = 2; break;
  case 6: 
   var $80=$40;
   var $81=(($80)|0);
   var $82=$39;
   var $83=(($82+4)|0);
   $16=$81;
   $17=$83;
   var $84=$16;
   $15=$84;
   var $85=$15;
   var $86=HEAP32[(($85)>>2)];
   HEAP32[(($__t_i2)>>2)]=$86;
   var $87=$17;
   $13=$87;
   var $88=$13;
   var $89=HEAP32[(($88)>>2)];
   var $90=$16;
   HEAP32[(($90)>>2)]=$89;
   $14=$__t_i2;
   var $91=$14;
   var $92=HEAP32[(($91)>>2)];
   var $93=$17;
   HEAP32[(($93)>>2)]=$92;
   var $94=$40;
   var $95=(($94+4)|0);
   var $96=$39;
   var $97=(($96+8)|0);
   $21=$95;
   $22=$97;
   var $98=$21;
   $20=$98;
   var $99=$20;
   var $100=HEAP32[(($99)>>2)];
   HEAP32[(($__t_i1)>>2)]=$100;
   var $101=$22;
   $18=$101;
   var $102=$18;
   var $103=HEAP32[(($102)>>2)];
   var $104=$21;
   HEAP32[(($104)>>2)]=$103;
   $19=$__t_i1;
   var $105=$19;
   var $106=HEAP32[(($105)>>2)];
   var $107=$22;
   HEAP32[(($107)>>2)]=$106;
   var $108=$40;
   $25=$108;
   var $109=$25;
   var $110=(($109+8)|0);
   $24=$110;
   var $111=$24;
   var $112=$111;
   $23=$112;
   var $113=$23;
   var $114=(($113)|0);
   var $115=$39;
   $28=$115;
   var $116=$28;
   var $117=(($116+12)|0);
   $27=$117;
   var $118=$27;
   var $119=$118;
   $26=$119;
   var $120=$26;
   var $121=(($120)|0);
   $32=$114;
   $33=$121;
   var $122=$32;
   $31=$122;
   var $123=$31;
   var $124=HEAP32[(($123)>>2)];
   HEAP32[(($__t_i)>>2)]=$124;
   var $125=$33;
   $29=$125;
   var $126=$29;
   var $127=HEAP32[(($126)>>2)];
   var $128=$32;
   HEAP32[(($128)>>2)]=$127;
   $30=$__t_i;
   var $129=$30;
   var $130=HEAP32[(($129)>>2)];
   var $131=$33;
   HEAP32[(($131)>>2)]=$130;
   var $132=$39;
   var $133=(($132+4)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$39;
   var $136=(($135)|0);
   HEAP32[(($136)>>2)]=$134;
   $34=$40;
   var $137=$34;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEED2Ev($2);
 return;
}
function __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEED2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17=sp;
   var $18;
   var $19;
   var $20=(sp)+(8);
   var $21=(sp)+(16);
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29=(sp)+(24);
   var $30;
   var $31;
   var $32=(sp)+(32);
   var $33;
   var $34;
   $34=$this;
   var $35=$34;
   $33=$35;
   var $36=$33;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   $30=$36;
   $31=$38;
   var $39=$30;
   var $40=$31;
   var $tmp_i_i=$29;
   var $tmp1_i_i=$32;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $25=$39;
   $26=$40;
   var $41=$25;
   label = 2; break;
  case 2: 
   var $43=$26;
   var $44=(($41+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))!=(($45)|(0));
   if ($46) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $24=$41;
   var $48=$24;
   var $49=(($48+12)|0);
   $23=$49;
   var $50=$23;
   var $51=$50;
   $22=$51;
   var $52=$22;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($41+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(4))|0);
   HEAP32[(($55)>>2)]=$57;
   $14=$57;
   var $58=$14;
   $18=$54;
   $19=$58;
   var $59=$21;
   var $60=$18;
   var $61=$19;
   var $tmp_i_i_i_i=$17;
   var $tmp1_i_i_i_i=$20;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $15=$60;
   $16=$61;
   var $62=$16;
   label = 2; break;
  case 4: 
   var $63=(($35)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $7=$35;
   var $67=$7;
   var $68=(($67+12)|0);
   $6=$68;
   var $69=$6;
   var $70=$69;
   $5=$70;
   var $71=$5;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($35)|0);
   var $75=HEAP32[(($74)>>2)];
   $4=$35;
   var $76=$4;
   $3=$76;
   var $77=$3;
   var $78=(($77+12)|0);
   $2=$78;
   var $79=$2;
   var $80=$79;
   $1=$80;
   var $81=$1;
   var $82=(($81)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($76)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$83;
   var $87=$85;
   var $88=((($86)-($87))|0);
   var $89=((((($88)|(0)))/(4))&-1);
   $11=$73;
   $12=$75;
   $13=$89;
   var $90=$11;
   var $91=$12;
   var $92=$13;
   $8=$90;
   $9=$91;
   $10=$92;
   var $93=$8;
   var $94=$9;
   var $95=$94;
   __ZdlPv($95);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16vectorI7LamellaNS_9allocatorIS1_EEE8max_sizeEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   var $4;
   var $5=(sp)+(8);
   var $6=(sp)+(16);
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=(sp)+(24);
   var $13;
   var $14;
   var $15=(sp)+(32);
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22=(sp)+(40);
   var $23=(sp)+(48);
   $19=$this;
   var $24=$19;
   var $25=$24;
   $18=$25;
   var $26=$18;
   var $27=(($26+8)|0);
   $17=$27;
   var $28=$17;
   var $29=$28;
   $16=$29;
   var $30=$16;
   var $31=$30;
   $4=$31;
   var $32=$6;
   var $33=$4;
   var $tmp_i1=$3;
   var $tmp1_i2=$5;
   assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
   $2=$33;
   var $34=$2;
   $1=$34;
   var $35=$1;
   label = 2; break;
  case 2: 
   HEAP32[(($22)>>2)]=1073741823;
   var $37=((2147483647)&-1);
   HEAP32[(($23)>>2)]=$37;
   $13=$22;
   $14=$23;
   var $38=$13;
   var $39=$14;
   var $tmp_i=$12;
   var $tmp1_i=$15;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $10=$38;
   $11=$39;
   var $40=$11;
   var $41=$10;
   $7=$12;
   $8=$40;
   $9=$41;
   var $42=$7;
   var $43=$8;
   var $44=HEAP32[(($43)>>2)];
   var $45=$9;
   var $46=HEAP32[(($45)>>2)];
   var $47=(($44)>>>(0)) < (($46)>>>(0));
   if ($47) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $49=$11;
   var $52 = $49;label = 5; break;
  case 4: 
   var $51=$10;
   var $52 = $51;label = 5; break;
  case 5: 
   var $52;
   label = 6; break;
  case 6: 
   var $54=HEAP32[(($52)>>2)];
   STACKTOP = sp;
   return $54;
  case 7: 
   var $60=$20;
   ___cxa_call_unexpected($60);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferI7LamellaRNS_9allocatorIS1_EEEC2EjjS4_($this, $__cap, $__start, $__a) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=sp;
   var $6;
   var $7;
   var $8;
   var $9=(sp)+(8);
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39=(sp)+(16);
   var $40=(sp)+(24);
   $35=$this;
   $36=$__cap;
   $37=$__start;
   $38=$__a;
   var $41=$35;
   var $42=$41;
   var $43=(($41+12)|0);
   $33=$39;
   $34=-1;
   var $44=$33;
   var $45=$34;
   $31=$44;
   $32=$45;
   var $46=$31;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=0;
   $17=$39;
   var $48=$17;
   var $49=$38;
   $11=$43;
   $12=0;
   $13=$49;
   var $50=$11;
   var $51=$12;
   var $52=$13;
   $8=$50;
   HEAP32[(($9)>>2)]=$51;
   $10=$52;
   var $53=$8;
   var $54=$53;
   $7=$9;
   var $55=$7;
   var $56=HEAP32[(($55)>>2)];
   var $57=$10;
   $1=$57;
   var $58=$1;
   $4=$54;
   HEAP32[(($5)>>2)]=$56;
   $6=$58;
   var $59=$4;
   var $60=(($59)|0);
   $3=$5;
   var $61=$3;
   var $62=HEAP32[(($61)>>2)];
   HEAP32[(($60)>>2)]=$62;
   var $63=(($59+4)|0);
   var $64=$6;
   $2=$64;
   var $65=$2;
   HEAP32[(($63)>>2)]=$65;
   var $66=$36;
   var $67=(($66)|(0))!=0;
   if ($67) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $16=$41;
   var $69=$16;
   var $70=(($69+12)|0);
   $15=$70;
   var $71=$15;
   var $72=$71;
   $14=$72;
   var $73=$14;
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$36;
   $21=$75;
   $22=$76;
   var $77=$21;
   var $78=$22;
   $18=$77;
   $19=$78;
   $20=0;
   var $79=$18;
   var $80=$19;
   var $81=($80<<2);
   var $82=__Znwj($81);
   var $83=$82;
   var $91 = $83;label = 4; break;
  case 3: 
   $25=$40;
   $26=-1;
   var $85=$25;
   var $86=$26;
   $23=$85;
   $24=$86;
   var $87=$23;
   var $88=(($87)|0);
   HEAP32[(($88)>>2)]=0;
   $27=$40;
   var $89=$27;
   var $91 = 0;label = 4; break;
  case 4: 
   var $91;
   var $92=(($41)|0);
   HEAP32[(($92)>>2)]=$91;
   var $93=(($41)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=$37;
   var $96=(($94+($95<<2))|0);
   var $97=(($41+8)|0);
   HEAP32[(($97)>>2)]=$96;
   var $98=(($41+4)|0);
   HEAP32[(($98)>>2)]=$96;
   var $99=(($41)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$36;
   var $102=(($100+($101<<2))|0);
   $30=$41;
   var $103=$30;
   var $104=(($103+12)|0);
   $29=$104;
   var $105=$29;
   var $106=$105;
   $28=$106;
   var $107=$28;
   var $108=(($107)|0);
   HEAP32[(($108)>>2)]=$102;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN7LamellaC1ERKS_($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$3;
 __ZN7LamellaC2ERKS_($4, $5);
 return;
}
function __ZN7LamellaC2ERKS_($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 var $6=$3;
 var $7=$6;
 __ZN13ComplectationC2ERKS_($5, $7);
 var $8=$4;
 HEAP32[(($8)>>2)]=((5136)|0);
 return;
}
function __ZN13ComplectationC2ERKS_($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 var $5=$4;
 HEAP32[(($5)>>2)]=((5256)|0);
 return;
}
function __ZN7Lamella9calculateEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZN7LamellaC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN13ComplectationC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((5136)|0);
 return;
}
function __ZN13ComplectationC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((5256)|0);
 return;
}
function __ZN13VerticalLayerC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN5LayerC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((5232)|0);
 return;
}
function __ZN5LayerC2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=sp;
 var $20;
 var $21;
 var $22=(sp)+(8);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=(sp)+(16);
 var $28=(sp)+(24);
 var $29=(sp)+(32);
 var $30;
 var $31;
 var $32;
 $32=$this;
 var $33=$32;
 var $34=$33;
 HEAP32[(($34)>>2)]=((5184)|0);
 var $35=(($33+4)|0);
 $31=$35;
 var $36=$31;
 $30=$36;
 var $37=$30;
 var $38=$37;
 $26=$38;
 var $39=$26;
 var $40=$39;
 $25=$40;
 var $41=$25;
 var $42=(($39)|0);
 $3=$27;
 $4=-1;
 var $43=$3;
 var $44=$4;
 $1=$43;
 $2=$44;
 var $45=$1;
 var $46=(($45)|0);
 HEAP32[(($46)>>2)]=0;
 $5=$27;
 var $47=$5;
 HEAP32[(($42)>>2)]=0;
 var $48=(($39+4)|0);
 $8=$28;
 $9=-1;
 var $49=$8;
 var $50=$9;
 $6=$49;
 $7=$50;
 var $51=$6;
 var $52=(($51)|0);
 HEAP32[(($52)>>2)]=0;
 $10=$28;
 var $53=$10;
 HEAP32[(($48)>>2)]=0;
 var $54=(($39+8)|0);
 $13=$29;
 $14=-1;
 var $55=$13;
 var $56=$14;
 $11=$55;
 $12=$56;
 var $57=$11;
 var $58=(($57)|0);
 HEAP32[(($58)>>2)]=0;
 $15=$29;
 var $59=$15;
 $23=$54;
 $24=0;
 var $60=$23;
 var $61=$24;
 $21=$60;
 HEAP32[(($22)>>2)]=$61;
 var $62=$21;
 var $63=$62;
 $20=$22;
 var $64=$20;
 var $65=HEAP32[(($64)>>2)];
 $18=$63;
 HEAP32[(($19)>>2)]=$65;
 var $66=$18;
 var $67=$66;
 $17=$67;
 var $68=$17;
 var $69=(($66)|0);
 $16=$19;
 var $70=$16;
 var $71=HEAP32[(($70)>>2)];
 HEAP32[(($69)>>2)]=$71;
 STACKTOP = sp;
 return;
}
function __ZN13VerticalLayer9calculateEv($this) {
 var label = 0;
 var $1;
 var $2;
 var $result;
 $2=$this;
 var $3=$2;
 var $4=$3;
 var $5=__ZN5Layer11getLamellasEv($4);
 $1=$5;
 var $6=$1;
 var $7=$6;
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$6;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$9;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=((((($15)|(0)))/(4))&-1);
 var $17=((($16)*(5))&-1);
 var $18=(($17)>>>(0));
 $result=$18;
 var $19=$result;
 return $19;
}
function __ZN5Layer11getLamellasEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 return $3;
}
function __ZN7CorniceC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN13ComplectationC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((5160)|0);
 return;
}
function __ZN16VerticalSunblindC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN8SunblindC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((5208)|0);
 return;
}
function __ZN8SunblindC2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19=sp;
 var $20;
 var $21;
 var $22=(sp)+(8);
 var $23;
 var $24;
 var $25;
 var $26;
 var $27=(sp)+(16);
 var $28=(sp)+(24);
 var $29=(sp)+(32);
 var $30;
 var $31;
 var $32;
 $32=$this;
 var $33=$32;
 var $34=$33;
 __ZN12ConstructionC2Ev($34);
 var $35=$33;
 HEAP32[(($35)>>2)]=((5112)|0);
 var $36=(($33+4)|0);
 __ZN7CorniceC1Ev($36);
 var $37=(($33+8)|0);
 $31=$37;
 var $38=$31;
 $30=$38;
 var $39=$30;
 var $40=$39;
 $26=$40;
 var $41=$26;
 var $42=$41;
 $25=$42;
 var $43=$25;
 var $44=(($41)|0);
 $3=$27;
 $4=-1;
 var $45=$3;
 var $46=$4;
 $1=$45;
 $2=$46;
 var $47=$1;
 var $48=(($47)|0);
 HEAP32[(($48)>>2)]=0;
 $5=$27;
 var $49=$5;
 HEAP32[(($44)>>2)]=0;
 var $50=(($41+4)|0);
 $8=$28;
 $9=-1;
 var $51=$8;
 var $52=$9;
 $6=$51;
 $7=$52;
 var $53=$6;
 var $54=(($53)|0);
 HEAP32[(($54)>>2)]=0;
 $10=$28;
 var $55=$10;
 HEAP32[(($50)>>2)]=0;
 var $56=(($41+8)|0);
 $13=$29;
 $14=-1;
 var $57=$13;
 var $58=$14;
 $11=$57;
 $12=$58;
 var $59=$11;
 var $60=(($59)|0);
 HEAP32[(($60)>>2)]=0;
 $15=$29;
 var $61=$15;
 $23=$56;
 $24=0;
 var $62=$23;
 var $63=$24;
 $21=$62;
 HEAP32[(($22)>>2)]=$63;
 var $64=$21;
 var $65=$64;
 $20=$22;
 var $66=$20;
 var $67=HEAP32[(($66)>>2)];
 $18=$65;
 HEAP32[(($19)>>2)]=$67;
 var $68=$18;
 var $69=$68;
 $17=$69;
 var $70=$17;
 var $71=(($68)|0);
 $16=$19;
 var $72=$16;
 var $73=HEAP32[(($72)>>2)];
 HEAP32[(($71)>>2)]=$73;
 STACKTOP = sp;
 return;
}
function __ZN12ConstructionC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((5280)|0);
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(sp)+(8);
   var $3=(sp)+(16);
   var $4=(sp)+(24);
   var $5=HEAP32[((_stdin)>>2)];
   __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(13072, $5, ((13200)|0));
   HEAP32[((14064)>>2)]=((4444)|0);
   HEAP32[(((((14072)|0)))>>2)]=((4464)|0);
   HEAP32[(((((14068)|0)))>>2)]=0;
   var $6=HEAP32[((4432)>>2)];
   var $7=((14064+$6)|0);
   var $8=$7;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($8, ((13072)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((((14072)|0)));
   ___resumeException($10$0)
  case 3: 
   var $_sum=((($6)+(72))|0);
   var $11=((14064+$_sum)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=0;
   var $_sum1=((($6)+(76))|0);
   var $13=((14064+$_sum1)|0);
   var $14=$13;
   HEAP32[(($14)>>2)]=-1;
   var $15=HEAP32[((_stdout)>>2)];
   var $16=$4;
   var $$etemp$0$0=4;
   var $$etemp$0$1=0;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(12976);
   HEAP32[((12976)>>2)]=(((4592)|0));
   HEAP32[(((((13008)|0)))>>2)]=$15;
   __ZNSt3__16localeC2ERKS0_($4, (((12980)|0)));
   var $17 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($4, 13400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   __ZNSt3__16localeD2Ev($4);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(12976);
   ___resumeException($19$0)
  case 5: 
   var $20=$17;
   __ZNSt3__16localeD2Ev($4);
   HEAP32[(((((13012)|0)))>>2)]=$20;
   HEAP32[(((((13016)|0)))>>2)]=((13208)|0);
   var $21=$17;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+28)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=FUNCTION_TABLE[$24]($20);
   var $26=(($25)&(1));
   HEAP8[((((13020)|0))|0)]=$26;
   var $$etemp$1$0=4;
   var $$etemp$1$1=0;
   HEAP32[((13800)>>2)]=((4348)|0);
   HEAP32[(((((13804)|0)))>>2)]=((4368)|0);
   var $27=HEAP32[((4336)>>2)];
   var $28=((13800+$27)|0);
   var $29=$28;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($29, ((12976)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((((13804)|0)));
   ___resumeException($31$0)
  case 7: 
   var $_sum2=((($27)+(72))|0);
   var $32=((13800+$_sum2)|0);
   var $33=$32;
   HEAP32[(($33)>>2)]=0;
   var $_sum3=((($27)+(76))|0);
   var $34=((13800+$_sum3)|0);
   var $35=$34;
   HEAP32[(($35)>>2)]=-1;
   var $36=HEAP32[((_stderr)>>2)];
   var $37=$3;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(13024);
   HEAP32[((13024)>>2)]=(((4592)|0));
   HEAP32[(((((13056)|0)))>>2)]=$36;
   __ZNSt3__16localeC2ERKS0_($3, (((13028)|0)));
   var $38 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3, 13400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $40$0 = ___cxa_find_matching_catch(-1, -1); $40$1 = tempRet0;
   __ZNSt3__16localeD2Ev($3);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(13024);
   ___resumeException($40$0)
  case 9: 
   var $41=$38;
   __ZNSt3__16localeD2Ev($3);
   HEAP32[(((((13060)|0)))>>2)]=$41;
   HEAP32[(((((13064)|0)))>>2)]=((13216)|0);
   var $42=$38;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+28)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=FUNCTION_TABLE[$45]($41);
   var $47=(($46)&(1));
   HEAP8[((((13068)|0))|0)]=$47;
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   HEAP32[((13976)>>2)]=((4348)|0);
   HEAP32[(((((13980)|0)))>>2)]=((4368)|0);
   var $48=((13976+$27)|0);
   var $49=$48;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($49, ((13024)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $51$0 = ___cxa_find_matching_catch(-1, -1); $51$1 = tempRet0;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((((13980)|0)));
   ___resumeException($51$0)
  case 11: 
   var $52=((13976+$_sum2)|0);
   var $53=$52;
   HEAP32[(($53)>>2)]=0;
   var $54=((13976+$_sum3)|0);
   var $55=$54;
   HEAP32[(($55)>>2)]=-1;
   var $56=HEAP32[((13976)>>2)];
   var $57=((($56)-(12))|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $_sum6=((($59)+(24))|0);
   var $60=((13976+$_sum6)|0);
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   HEAP32[((13888)>>2)]=((4348)|0);
   HEAP32[(((((13892)|0)))>>2)]=((4368)|0);
   var $63=((13888+$27)|0);
   var $64=$63;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($64, $62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((((13892)|0)));
   ___resumeException($66$0)
  case 13: 
   var $67=((13888+$_sum2)|0);
   var $68=$67;
   HEAP32[(($68)>>2)]=0;
   var $69=((13888+$_sum3)|0);
   var $70=$69;
   HEAP32[(($70)>>2)]=-1;
   var $71=HEAP32[((14064)>>2)];
   var $72=((($71)-(12))|0);
   var $73=$72;
   var $74=HEAP32[(($73)>>2)];
   var $_sum9=((($74)+(72))|0);
   var $75=((14064+$_sum9)|0);
   var $76=$75;
   HEAP32[(($76)>>2)]=13800;
   var $77=HEAP32[((13976)>>2)];
   var $78=((($77)-(12))|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $_sum10=((($80)+(4))|0);
   var $81=((13976+$_sum10)|0);
   var $82=$81;
   var $83=HEAP32[(($82)>>2)];
   var $84=$83 | 8192;
   HEAP32[(($82)>>2)]=$84;
   var $85=HEAP32[((13976)>>2)];
   var $86=((($85)-(12))|0);
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $_sum11=((($88)+(72))|0);
   var $89=((13976+$_sum11)|0);
   var $90=$89;
   HEAP32[(($90)>>2)]=13800;
   __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(12920, $5, ((13224)|0));
   HEAP32[((13712)>>2)]=((4396)|0);
   HEAP32[(((((13720)|0)))>>2)]=((4416)|0);
   HEAP32[(((((13716)|0)))>>2)]=0;
   var $91=HEAP32[((4384)>>2)];
   var $92=((13712+$91)|0);
   var $93=$92;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($93, ((12920)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $95$0 = ___cxa_find_matching_catch(-1, -1); $95$1 = tempRet0;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((((13720)|0)));
   ___resumeException($95$0)
  case 15: 
   var $_sum12=((($91)+(72))|0);
   var $96=((13712+$_sum12)|0);
   var $97=$96;
   HEAP32[(($97)>>2)]=0;
   var $_sum13=((($91)+(76))|0);
   var $98=((13712+$_sum13)|0);
   var $99=$98;
   HEAP32[(($99)>>2)]=-1;
   var $100=$2;
   var $$etemp$4$0=4;
   var $$etemp$4$1=0;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(12824);
   HEAP32[((12824)>>2)]=(((4520)|0));
   HEAP32[(((((12856)|0)))>>2)]=$15;
   __ZNSt3__16localeC2ERKS0_($2, (((12828)|0)));
   var $101 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2, 13392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $103$0 = ___cxa_find_matching_catch(-1, -1); $103$1 = tempRet0;
   __ZNSt3__16localeD2Ev($2);
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(12824);
   ___resumeException($103$0)
  case 17: 
   var $104=$101;
   __ZNSt3__16localeD2Ev($2);
   HEAP32[(((((12860)|0)))>>2)]=$104;
   HEAP32[(((((12864)|0)))>>2)]=((13232)|0);
   var $105=$101;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+28)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=FUNCTION_TABLE[$108]($104);
   var $110=(($109)&(1));
   HEAP8[((((12868)|0))|0)]=$110;
   var $$etemp$5$0=4;
   var $$etemp$5$1=0;
   HEAP32[((13432)>>2)]=((4300)|0);
   HEAP32[(((((13436)|0)))>>2)]=((4320)|0);
   var $111=HEAP32[((4288)>>2)];
   var $112=((13432+$111)|0);
   var $113=$112;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($113, ((12824)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1); $115$1 = tempRet0;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((((13436)|0)));
   ___resumeException($115$0)
  case 19: 
   var $_sum14=((($111)+(72))|0);
   var $116=((13432+$_sum14)|0);
   var $117=$116;
   HEAP32[(($117)>>2)]=0;
   var $_sum15=((($111)+(76))|0);
   var $118=((13432+$_sum15)|0);
   var $119=$118;
   HEAP32[(($119)>>2)]=-1;
   var $120=$1;
   var $$etemp$6$0=4;
   var $$etemp$6$1=0;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(12872);
   HEAP32[((12872)>>2)]=(((4520)|0));
   HEAP32[(((((12904)|0)))>>2)]=$36;
   __ZNSt3__16localeC2ERKS0_($1, (((12876)|0)));
   var $121 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1, 13392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $123$0 = ___cxa_find_matching_catch(-1, -1); $123$1 = tempRet0;
   __ZNSt3__16localeD2Ev($1);
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(12872);
   ___resumeException($123$0)
  case 21: 
   var $124=$121;
   __ZNSt3__16localeD2Ev($1);
   HEAP32[(((((12908)|0)))>>2)]=$124;
   HEAP32[(((((12912)|0)))>>2)]=((13240)|0);
   var $125=$121;
   var $126=HEAP32[(($125)>>2)];
   var $127=(($126+28)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=FUNCTION_TABLE[$128]($124);
   var $130=(($129)&(1));
   HEAP8[((((12916)|0))|0)]=$130;
   var $$etemp$7$0=4;
   var $$etemp$7$1=0;
   HEAP32[((13608)>>2)]=((4300)|0);
   HEAP32[(((((13612)|0)))>>2)]=((4320)|0);
   var $131=((13608+$111)|0);
   var $132=$131;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($132, ((12872)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $134$0 = ___cxa_find_matching_catch(-1, -1); $134$1 = tempRet0;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((((13612)|0)));
   ___resumeException($134$0)
  case 23: 
   var $135=((13608+$_sum14)|0);
   var $136=$135;
   HEAP32[(($136)>>2)]=0;
   var $137=((13608+$_sum15)|0);
   var $138=$137;
   HEAP32[(($138)>>2)]=-1;
   var $139=HEAP32[((13608)>>2)];
   var $140=((($139)-(12))|0);
   var $141=$140;
   var $142=HEAP32[(($141)>>2)];
   var $_sum18=((($142)+(24))|0);
   var $143=((13608+$_sum18)|0);
   var $144=$143;
   var $145=HEAP32[(($144)>>2)];
   HEAP32[((13520)>>2)]=((4300)|0);
   HEAP32[(((((13524)|0)))>>2)]=((4320)|0);
   var $146=((13520+$111)|0);
   var $147=$146;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($147, $145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $149$0 = ___cxa_find_matching_catch(-1, -1); $149$1 = tempRet0;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((((13524)|0)));
   ___resumeException($149$0)
  case 25: 
   var $150=((13520+$_sum14)|0);
   var $151=$150;
   HEAP32[(($151)>>2)]=0;
   var $152=((13520+$_sum15)|0);
   var $153=$152;
   HEAP32[(($153)>>2)]=-1;
   var $154=HEAP32[((13712)>>2)];
   var $155=((($154)-(12))|0);
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $_sum21=((($157)+(72))|0);
   var $158=((13712+$_sum21)|0);
   var $159=$158;
   HEAP32[(($159)>>2)]=13432;
   var $160=HEAP32[((13608)>>2)];
   var $161=((($160)-(12))|0);
   var $162=$161;
   var $163=HEAP32[(($162)>>2)];
   var $_sum22=((($163)+(4))|0);
   var $164=((13608+$_sum22)|0);
   var $165=$164;
   var $166=HEAP32[(($165)>>2)];
   var $167=$166 | 8192;
   HEAP32[(($165)>>2)]=$167;
   var $168=HEAP32[((13608)>>2)];
   var $169=((($168)-(12))|0);
   var $170=$169;
   var $171=HEAP32[(($170)>>2)];
   var $_sum23=((($171)+(72))|0);
   var $172=((13608+$_sum23)|0);
   var $173=$172;
   HEAP32[(($173)>>2)]=13432;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $3 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $5 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $7 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   return;
  case 6: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1,0); $10$1 = tempRet0;
   var $11=$10$0;
   ___clang_call_terminate($11);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 13392);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=(($13)&(1));
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__extbe=(sp)+(8);
   var $1=(($this+36)|0);
   var $2=(($this+40)|0);
   var $3=(($__extbuf)|0);
   var $4=(($__extbuf+8)|0);
   var $5=$__extbuf;
   var $6=(($this+32)|0);
   label = 2; break;
  case 2: 
   var $8=HEAP32[(($1)>>2)];
   var $9=HEAP32[(($2)>>2)];
   var $10=$8;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=FUNCTION_TABLE[$13]($8, $9, $3, $4, $__extbe);
   var $15=HEAP32[(($__extbe)>>2)];
   var $16=$15;
   var $17=((($16)-($5))|0);
   var $18=HEAP32[(($6)>>2)];
   var $19=_fwrite($3, 1, $17, $18);
   var $20=(($19)|(0))==(($17)|(0));
   if ($20) { label = 3; break; } else { var $_0 = -1;label = 5; break; }
  case 3: 
   if ((($14)|(0))==1) {
    label = 2; break;
   }
   else if ((($14)|(0))==2) {
    var $_0 = -1;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 4: 
   var $23=HEAP32[(($6)>>2)];
   var $24=_fflush($23);
   var $not_=(($24)|(0))!=0;
   var $_=(($not_ << 31) >> 31);
   var $_0 = $_;label = 5; break;
  case 5: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__1buf=(sp)+(8);
   var $__extbe=(sp)+(16);
   var $__e=(sp)+(24);
   var $1=(($__c)|(0))==-1;
   if ($1) { label = 11; break; } else { label = 2; break; }
  case 2: 
   HEAP32[(($__1buf)>>2)]=$__c;
   var $3=(($this+44)|0);
   var $4=HEAP8[($3)];
   var $5=$4 & 1;
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $8=$__1buf;
   var $9=(($this+32)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=_fwrite($8, 4, 1, $10);
   var $12=(($11)|(0))==1;
   if ($12) { label = 11; break; } else { var $_0 = -1;label = 12; break; }
  case 4: 
   var $14=(($__extbuf)|0);
   HEAP32[(($__extbe)>>2)]=$14;
   var $15=(($__1buf+4)|0);
   var $16=(($this+36)|0);
   var $17=(($this+40)|0);
   var $18=(($__extbuf+8)|0);
   var $19=$__extbuf;
   var $20=(($this+32)|0);
   var $pbase_0 = $__1buf;label = 5; break;
  case 5: 
   var $pbase_0;
   var $22=HEAP32[(($16)>>2)];
   var $23=HEAP32[(($17)>>2)];
   var $24=$22;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($22, $23, $pbase_0, $15, $__e, $14, $18, $__extbe);
   var $29=HEAP32[(($__e)>>2)];
   var $30=(($29)|(0))==(($pbase_0)|(0));
   if ($30) { var $_0 = -1;label = 12; break; } else { label = 6; break; }
  case 6: 
   var $32=(($28)|(0))==3;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $34=$pbase_0;
   var $35=HEAP32[(($20)>>2)];
   var $36=_fwrite($34, 1, 1, $35);
   var $37=(($36)|(0))==1;
   if ($37) { label = 11; break; } else { var $_0 = -1;label = 12; break; }
  case 8: 
   var $39=(($28)|(0))==1;
   var $40=(($28)>>>(0)) < 2;
   if ($40) { label = 9; break; } else { var $_0 = -1;label = 12; break; }
  case 9: 
   var $42=HEAP32[(($__extbe)>>2)];
   var $43=$42;
   var $44=((($43)-($19))|0);
   var $45=HEAP32[(($20)>>2)];
   var $46=_fwrite($14, 1, $44, $45);
   var $47=(($46)|(0))==(($44)|(0));
   if ($47) { label = 10; break; } else { var $_0 = -1;label = 12; break; }
  case 10: 
   var $49=HEAP32[(($__e)>>2)];
   var $_pbase_0=$39 ? $49 : $pbase_0;
   if ($39) { var $pbase_0 = $_pbase_0;label = 5; break; } else { label = 11; break; }
  case 11: 
   var $50=$1 ? 0 : $__c;
   var $_0 = $50;label = 12; break;
  case 12: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(($this)|0);
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($2);
   var $3=(($this)|0);
   HEAP32[(($3)>>2)]=(((4920)|0));
   var $4=(($this+32)|0);
   HEAP32[(($4)>>2)]=$__fp;
   var $5=(($this+40)|0);
   HEAP32[(($5)>>2)]=$__st;
   var $6=(($this+48)|0);
   HEAP32[(($6)>>2)]=-1;
   var $7=(($this+52)|0);
   HEAP8[($7)]=0;
   var $8=(($this+4)|0);
   __ZNSt3__16localeC2ERKS0_($1, $8);
   var $9 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1, 13392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=$9;
   var $11=(($this+36)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=$9;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=FUNCTION_TABLE[$15]($10);
   var $17=(($this+44)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=HEAP32[(($11)>>2)];
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=FUNCTION_TABLE[$22]($18);
   var $24=(($this+53)|0);
   var $25=(($23)&(1));
   HEAP8[($24)]=$25;
   var $26=HEAP32[(($17)>>2)];
   var $27=(($26)|(0)) > 8;
   if ($27) { label = 3; break; } else { label = 4; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((184)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   __ZNSt3__16localeD2Ev($1);
   STACKTOP = sp;
   return;
  case 5: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1); $30$1 = tempRet0;
   __ZNSt3__16localeD2Ev($1);
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($2);
   ___resumeException($30$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 13392);
   var $2=$1;
   var $3=(($this+36)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=$1;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+24)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=FUNCTION_TABLE[$7]($2);
   var $9=(($this+44)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=HEAP32[(($3)>>2)];
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+28)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   var $16=(($this+53)|0);
   var $17=(($15)&(1));
   HEAP8[($16)]=$17;
   var $18=HEAP32[(($9)>>2)];
   var $19=(($18)|(0)) > 8;
   if ($19) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__121__throw_runtime_errorEPKc(((184)|0));
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 var label = 0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this, 0);
 return $1;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 var label = 0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this, 1);
 return $1;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__enxt=(sp)+(8);
   var $__ci=(sp)+(16);
   var $__inxt=(sp)+(24);
   var $1=(($__c)|(0))==-1;
   var $2=(($this+52)|0);
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)!=0;
   if ($1) { label = 2; break; } else { label = 4; break; }
  case 2: 
   if ($5) { var $_01 = -1;label = 11; break; } else { label = 3; break; }
  case 3: 
   var $8=(($this+48)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=-1;
   var $11=(($10)&(1));
   HEAP8[($2)]=$11;
   var $_01 = $9;label = 11; break;
  case 4: 
   var $13=(($this+48)|0);
   if ($5) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $15=HEAP32[(($13)>>2)];
   HEAP32[(($__ci)>>2)]=$15;
   var $16=(($this+36)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($this+40)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($__ci+4)|0);
   var $21=(($__extbuf)|0);
   var $22=(($__extbuf+8)|0);
   var $23=$17;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=FUNCTION_TABLE[$26]($17, $19, $__ci, $20, $__inxt, $21, $22, $__enxt);
   if ((($27)|(0))==2 | (($27)|(0))==1) {
    var $_01 = -1;label = 11; break;
   }
   else if ((($27)|(0))==3) {
    label = 6; break;
   }
   else {
   label = 7; break;
   }
  case 6: 
   var $29=HEAP32[(($13)>>2)];
   var $30=(($29) & 255);
   HEAP8[($21)]=$30;
   var $31=(($__extbuf+1)|0);
   HEAP32[(($__enxt)>>2)]=$31;
   label = 7; break;
  case 7: 
   var $32=(($this+32)|0);
   label = 8; break;
  case 8: 
   var $33=HEAP32[(($__enxt)>>2)];
   var $34=(($33)>>>(0)) > (($21)>>>(0));
   if ($34) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $36=((($33)-(1))|0);
   HEAP32[(($__enxt)>>2)]=$36;
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24);
   var $39=HEAP32[(($32)>>2)];
   var $40=_ungetc($38, $39);
   var $41=(($40)|(0))==-1;
   if ($41) { var $_01 = -1;label = 11; break; } else { label = 8; break; }
  case 10: 
   HEAP32[(($13)>>2)]=$__c;
   HEAP8[($2)]=1;
   var $_01 = $__c;label = 11; break;
  case 11: 
   var $_01;
   STACKTOP = sp;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__1buf=(sp)+(8);
   var $__enxt=(sp)+(16);
   var $__inxt=(sp)+(24);
   var $1=(($this+52)|0);
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+48)|0);
   var $7=HEAP32[(($6)>>2)];
   if ($__consume) { label = 3; break; } else { var $_0 = $7;label = 22; break; }
  case 3: 
   HEAP32[(($6)>>2)]=-1;
   HEAP8[($1)]=0;
   var $_0 = $7;label = 22; break;
  case 4: 
   var $9=(($this+44)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0)) > 1;
   var $12=$11 ? $10 : 1;
   var $13=(($12)|(0)) > 0;
   if ($13) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $14=(($this+32)|0);
   var $__i_09 = 0;label = 6; break;
  case 6: 
   var $__i_09;
   var $16=HEAP32[(($14)>>2)];
   var $17=_fgetc($16);
   var $18=(($17)|(0))==-1;
   if ($18) { var $_0 = -1;label = 22; break; } else { label = 7; break; }
  case 7: 
   var $20=(($17) & 255);
   var $21=(($__extbuf+$__i_09)|0);
   HEAP8[($21)]=$20;
   var $22=((($__i_09)+(1))|0);
   var $23=(($22)|(0)) < (($12)|(0));
   if ($23) { var $__i_09 = $22;label = 6; break; } else { label = 8; break; }
  case 8: 
   var $24=(($this+53)|0);
   var $25=HEAP8[($24)];
   var $26=$25 & 1;
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $28=(($this+40)|0);
   var $29=(($this+36)|0);
   var $30=(($__extbuf)|0);
   var $31=(($__1buf+4)|0);
   var $32=(($this+32)|0);
   var $__nread_0 = $12;label = 11; break;
  case 10: 
   var $34=(($__extbuf)|0);
   var $35=HEAP8[($34)];
   var $36=(($35 << 24) >> 24);
   HEAP32[(($__1buf)>>2)]=$36;
   var $__nread_2 = $12;label = 16; break;
  case 11: 
   var $__nread_0;
   var $38=HEAP32[(($28)>>2)];
   var $39=$38;
   var $ld$0$0=(($39)|0);
   var $40$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($39+4)|0);
   var $40$1=HEAP32[(($ld$1$1)>>2)];
   var $41=HEAP32[(($29)>>2)];
   var $42=(($__extbuf+$__nread_0)|0);
   var $43=$41;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+16)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=FUNCTION_TABLE[$46]($41, $38, $30, $42, $__enxt, $__1buf, $31, $__inxt);
   if ((($47)|(0))==1) {
    label = 12; break;
   }
   else if ((($47)|(0))==3) {
    label = 14; break;
   }
   else if ((($47)|(0))==2) {
    var $_0 = -1;label = 22; break;
   }
   else {
   var $__nread_2 = $__nread_0;label = 16; break;
   }
  case 12: 
   var $49=HEAP32[(($28)>>2)];
   var $50=$49;
   var $st$2$0=(($50)|0);
   HEAP32[(($st$2$0)>>2)]=$40$0;
   var $st$3$1=(($50+4)|0);
   HEAP32[(($st$3$1)>>2)]=$40$1;
   var $51=(($__nread_0)|(0))==8;
   if ($51) { var $_0 = -1;label = 22; break; } else { label = 13; break; }
  case 13: 
   var $53=HEAP32[(($32)>>2)];
   var $54=_fgetc($53);
   var $55=(($54)|(0))==-1;
   if ($55) { var $_0 = -1;label = 22; break; } else { label = 15; break; }
  case 14: 
   var $57=HEAP8[($30)];
   var $58=(($57 << 24) >> 24);
   HEAP32[(($__1buf)>>2)]=$58;
   var $__nread_2 = $__nread_0;label = 16; break;
  case 15: 
   var $60=(($54) & 255);
   HEAP8[($42)]=$60;
   var $61=((($__nread_0)+(1))|0);
   var $__nread_0 = $61;label = 11; break;
  case 16: 
   var $__nread_2;
   if ($__consume) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $62=(($this+32)|0);
   var $__i2_0 = $__nread_2;label = 18; break;
  case 18: 
   var $__i2_0;
   var $64=(($__i2_0)|(0)) > 0;
   if ($64) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $66=((($__i2_0)-(1))|0);
   var $67=(($__extbuf+$66)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24);
   var $70=HEAP32[(($62)>>2)];
   var $71=_ungetc($69, $70);
   var $72=(($71)|(0))==-1;
   if ($72) { var $_0 = -1;label = 22; break; } else { var $__i2_0 = $66;label = 18; break; }
  case 20: 
   var $74=HEAP32[(($__1buf)>>2)];
   var $75=(($this+48)|0);
   HEAP32[(($75)>>2)]=$74;
   var $_0 = $74;label = 22; break;
  case 21: 
   var $_pre=HEAP32[(($__1buf)>>2)];
   var $_0 = $_pre;label = 22; break;
  case 22: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 13400);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=(($13)&(1));
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__extbe=(sp)+(8);
   var $1=(($this+36)|0);
   var $2=(($this+40)|0);
   var $3=(($__extbuf)|0);
   var $4=(($__extbuf+8)|0);
   var $5=$__extbuf;
   var $6=(($this+32)|0);
   label = 2; break;
  case 2: 
   var $8=HEAP32[(($1)>>2)];
   var $9=HEAP32[(($2)>>2)];
   var $10=$8;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=FUNCTION_TABLE[$13]($8, $9, $3, $4, $__extbe);
   var $15=HEAP32[(($__extbe)>>2)];
   var $16=$15;
   var $17=((($16)-($5))|0);
   var $18=HEAP32[(($6)>>2)];
   var $19=_fwrite($3, 1, $17, $18);
   var $20=(($19)|(0))==(($17)|(0));
   if ($20) { label = 3; break; } else { var $_0 = -1;label = 5; break; }
  case 3: 
   if ((($14)|(0))==1) {
    label = 2; break;
   }
   else if ((($14)|(0))==2) {
    var $_0 = -1;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 4: 
   var $23=HEAP32[(($6)>>2)];
   var $24=_fflush($23);
   var $not_=(($24)|(0))!=0;
   var $_=(($not_ << 31) >> 31);
   var $_0 = $_;label = 5; break;
  case 5: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__1buf=(sp)+(8);
   var $__extbe=(sp)+(16);
   var $__e=(sp)+(24);
   var $1=(($__c)|(0))==-1;
   if ($1) { label = 11; break; } else { label = 2; break; }
  case 2: 
   var $3=(($__c) & 255);
   HEAP8[($__1buf)]=$3;
   var $4=(($this+44)|0);
   var $5=HEAP8[($4)];
   var $6=$5 & 1;
   var $7=(($6 << 24) >> 24)==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=(($this+32)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=_fwrite($__1buf, 1, 1, $10);
   var $12=(($11)|(0))==1;
   if ($12) { label = 11; break; } else { var $_0 = -1;label = 12; break; }
  case 4: 
   var $14=(($__extbuf)|0);
   HEAP32[(($__extbe)>>2)]=$14;
   var $15=(($__1buf+1)|0);
   var $16=(($this+36)|0);
   var $17=(($this+40)|0);
   var $18=(($__extbuf+8)|0);
   var $19=$__extbuf;
   var $20=(($this+32)|0);
   var $pbase_0 = $__1buf;label = 5; break;
  case 5: 
   var $pbase_0;
   var $22=HEAP32[(($16)>>2)];
   var $23=HEAP32[(($17)>>2)];
   var $24=$22;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($22, $23, $pbase_0, $15, $__e, $14, $18, $__extbe);
   var $29=HEAP32[(($__e)>>2)];
   var $30=(($29)|(0))==(($pbase_0)|(0));
   if ($30) { var $_0 = -1;label = 12; break; } else { label = 6; break; }
  case 6: 
   var $32=(($28)|(0))==3;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $34=HEAP32[(($20)>>2)];
   var $35=_fwrite($pbase_0, 1, 1, $34);
   var $36=(($35)|(0))==1;
   if ($36) { label = 11; break; } else { var $_0 = -1;label = 12; break; }
  case 8: 
   var $38=(($28)|(0))==1;
   var $39=(($28)>>>(0)) < 2;
   if ($39) { label = 9; break; } else { var $_0 = -1;label = 12; break; }
  case 9: 
   var $41=HEAP32[(($__extbe)>>2)];
   var $42=$41;
   var $43=((($42)-($19))|0);
   var $44=HEAP32[(($20)>>2)];
   var $45=_fwrite($14, 1, $43, $44);
   var $46=(($45)|(0))==(($43)|(0));
   if ($46) { label = 10; break; } else { var $_0 = -1;label = 12; break; }
  case 10: 
   var $48=HEAP32[(($__e)>>2)];
   var $_pbase_0=$38 ? $48 : $pbase_0;
   if ($38) { var $pbase_0 = $_pbase_0;label = 5; break; } else { label = 11; break; }
  case 11: 
   var $49=$1 ? 0 : $__c;
   var $_0 = $49;label = 12; break;
  case 12: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(($this)|0);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($2);
   var $3=(($this)|0);
   HEAP32[(($3)>>2)]=(((4992)|0));
   var $4=(($this+32)|0);
   HEAP32[(($4)>>2)]=$__fp;
   var $5=(($this+40)|0);
   HEAP32[(($5)>>2)]=$__st;
   var $6=(($this+48)|0);
   HEAP32[(($6)>>2)]=-1;
   var $7=(($this+52)|0);
   HEAP8[($7)]=0;
   var $8=(($this+4)|0);
   __ZNSt3__16localeC2ERKS0_($1, $8);
   var $9 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1, 13400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=$9;
   var $11=(($this+36)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=$9;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=FUNCTION_TABLE[$15]($10);
   var $17=(($this+44)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=HEAP32[(($11)>>2)];
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=FUNCTION_TABLE[$22]($18);
   var $24=(($this+53)|0);
   var $25=(($23)&(1));
   HEAP8[($24)]=$25;
   var $26=HEAP32[(($17)>>2)];
   var $27=(($26)|(0)) > 8;
   if ($27) { label = 3; break; } else { label = 4; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((184)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   __ZNSt3__16localeD2Ev($1);
   STACKTOP = sp;
   return;
  case 5: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1); $30$1 = tempRet0;
   __ZNSt3__16localeD2Ev($1);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($2);
   ___resumeException($30$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 13400);
   var $2=$1;
   var $3=(($this+36)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=$1;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+24)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=FUNCTION_TABLE[$7]($2);
   var $9=(($this+44)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=HEAP32[(($3)>>2)];
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+28)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   var $16=(($this+53)|0);
   var $17=(($15)&(1));
   HEAP8[($16)]=$17;
   var $18=HEAP32[(($9)>>2)];
   var $19=(($18)|(0)) > 8;
   if ($19) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__121__throw_runtime_errorEPKc(((184)|0));
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 var label = 0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this, 0);
 return $1;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 var label = 0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this, 1);
 return $1;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__enxt=(sp)+(8);
   var $__ci=(sp)+(16);
   var $__inxt=(sp)+(24);
   var $1=(($__c)|(0))==-1;
   var $2=(($this+52)|0);
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)!=0;
   if ($1) { label = 2; break; } else { label = 4; break; }
  case 2: 
   if ($5) { var $_01 = -1;label = 11; break; } else { label = 3; break; }
  case 3: 
   var $8=(($this+48)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=-1;
   var $11=(($10)&(1));
   HEAP8[($2)]=$11;
   var $_01 = $9;label = 11; break;
  case 4: 
   var $13=(($this+48)|0);
   if ($5) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $15=HEAP32[(($13)>>2)];
   var $16=(($15) & 255);
   HEAP8[($__ci)]=$16;
   var $17=(($this+36)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($this+40)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($__ci+1)|0);
   var $22=(($__extbuf)|0);
   var $23=(($__extbuf+8)|0);
   var $24=$18;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($18, $20, $__ci, $21, $__inxt, $22, $23, $__enxt);
   if ((($28)|(0))==2 | (($28)|(0))==1) {
    var $_01 = -1;label = 11; break;
   }
   else if ((($28)|(0))==3) {
    label = 6; break;
   }
   else {
   label = 7; break;
   }
  case 6: 
   var $30=HEAP32[(($13)>>2)];
   var $31=(($30) & 255);
   HEAP8[($22)]=$31;
   var $32=(($__extbuf+1)|0);
   HEAP32[(($__enxt)>>2)]=$32;
   label = 7; break;
  case 7: 
   var $33=(($this+32)|0);
   label = 8; break;
  case 8: 
   var $34=HEAP32[(($__enxt)>>2)];
   var $35=(($34)>>>(0)) > (($22)>>>(0));
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=((($34)-(1))|0);
   HEAP32[(($__enxt)>>2)]=$37;
   var $38=HEAP8[($37)];
   var $39=(($38 << 24) >> 24);
   var $40=HEAP32[(($33)>>2)];
   var $41=_ungetc($39, $40);
   var $42=(($41)|(0))==-1;
   if ($42) { var $_01 = -1;label = 11; break; } else { label = 8; break; }
  case 10: 
   HEAP32[(($13)>>2)]=$__c;
   HEAP8[($2)]=1;
   var $_01 = $__c;label = 11; break;
  case 11: 
   var $_01;
   STACKTOP = sp;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__extbuf=sp;
   var $__1buf=(sp)+(8);
   var $__enxt=(sp)+(16);
   var $__inxt=(sp)+(24);
   var $1=(($this+52)|0);
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+48)|0);
   var $7=HEAP32[(($6)>>2)];
   if ($__consume) { label = 3; break; } else { var $_0 = $7;label = 23; break; }
  case 3: 
   HEAP32[(($6)>>2)]=-1;
   HEAP8[($1)]=0;
   var $_0 = $7;label = 23; break;
  case 4: 
   var $9=(($this+44)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0)) > 1;
   var $12=$11 ? $10 : 1;
   var $13=(($12)|(0)) > 0;
   if ($13) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $14=(($this+32)|0);
   var $__i_09 = 0;label = 6; break;
  case 6: 
   var $__i_09;
   var $16=HEAP32[(($14)>>2)];
   var $17=_fgetc($16);
   var $18=(($17)|(0))==-1;
   if ($18) { var $_0 = -1;label = 23; break; } else { label = 7; break; }
  case 7: 
   var $20=(($17) & 255);
   var $21=(($__extbuf+$__i_09)|0);
   HEAP8[($21)]=$20;
   var $22=((($__i_09)+(1))|0);
   var $23=(($22)|(0)) < (($12)|(0));
   if ($23) { var $__i_09 = $22;label = 6; break; } else { label = 8; break; }
  case 8: 
   var $24=(($this+53)|0);
   var $25=HEAP8[($24)];
   var $26=$25 & 1;
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $28=(($this+40)|0);
   var $29=(($this+36)|0);
   var $30=(($__extbuf)|0);
   var $31=(($__1buf+1)|0);
   var $32=(($this+32)|0);
   var $__nread_0 = $12;label = 11; break;
  case 10: 
   var $34=(($__extbuf)|0);
   var $35=HEAP8[($34)];
   HEAP8[($__1buf)]=$35;
   var $__nread_2 = $12;label = 16; break;
  case 11: 
   var $__nread_0;
   var $37=HEAP32[(($28)>>2)];
   var $38=$37;
   var $ld$0$0=(($38)|0);
   var $39$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($38+4)|0);
   var $39$1=HEAP32[(($ld$1$1)>>2)];
   var $40=HEAP32[(($29)>>2)];
   var $41=(($__extbuf+$__nread_0)|0);
   var $42=$40;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=FUNCTION_TABLE[$45]($40, $37, $30, $41, $__enxt, $__1buf, $31, $__inxt);
   if ((($46)|(0))==1) {
    label = 12; break;
   }
   else if ((($46)|(0))==3) {
    label = 14; break;
   }
   else if ((($46)|(0))==2) {
    var $_0 = -1;label = 23; break;
   }
   else {
   var $__nread_2 = $__nread_0;label = 16; break;
   }
  case 12: 
   var $48=HEAP32[(($28)>>2)];
   var $49=$48;
   var $st$2$0=(($49)|0);
   HEAP32[(($st$2$0)>>2)]=$39$0;
   var $st$3$1=(($49+4)|0);
   HEAP32[(($st$3$1)>>2)]=$39$1;
   var $50=(($__nread_0)|(0))==8;
   if ($50) { var $_0 = -1;label = 23; break; } else { label = 13; break; }
  case 13: 
   var $52=HEAP32[(($32)>>2)];
   var $53=_fgetc($52);
   var $54=(($53)|(0))==-1;
   if ($54) { var $_0 = -1;label = 23; break; } else { label = 15; break; }
  case 14: 
   var $56=HEAP8[($30)];
   HEAP8[($__1buf)]=$56;
   var $__nread_2 = $__nread_0;label = 16; break;
  case 15: 
   var $58=(($53) & 255);
   HEAP8[($41)]=$58;
   var $59=((($__nread_0)+(1))|0);
   var $__nread_0 = $59;label = 11; break;
  case 16: 
   var $__nread_2;
   if ($__consume) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $60=(($this+32)|0);
   var $__i2_0 = $__nread_2;label = 18; break;
  case 18: 
   var $__i2_0;
   var $62=(($__i2_0)|(0)) > 0;
   if ($62) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $64=((($__i2_0)-(1))|0);
   var $65=(($__extbuf+$64)|0);
   var $66=HEAP8[($65)];
   var $67=(($66)&(255));
   var $68=HEAP32[(($60)>>2)];
   var $69=_ungetc($67, $68);
   var $70=(($69)|(0))==-1;
   if ($70) { var $_0 = -1;label = 23; break; } else { var $__i2_0 = $64;label = 18; break; }
  case 20: 
   var $72=HEAP8[($__1buf)];
   var $73=(($72)&(255));
   var $74=(($this+48)|0);
   HEAP32[(($74)>>2)]=$73;
   var $76 = $72;label = 22; break;
  case 21: 
   var $_pre=HEAP8[($__1buf)];
   var $76 = $_pre;label = 22; break;
  case 22: 
   var $76;
   var $77=(($76)&(255));
   var $_0 = $77;label = 23; break;
  case 23: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a() {
 var label = 0;
 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((370), ((14152)|0), ___dso_handle);
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 var label = 0;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 var label = 0;
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+4)|0);
   var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
   var $3=(($2)|(0))==0;
   if ($3) { label = 2; break; } else { var $_0 = 0;label = 3; break; }
  case 2: 
   var $5=$this;
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   FUNCTION_TABLE[$8]($this);
   var $_0 = 1;label = 3; break;
  case 3: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorC2EPKc($this, $msg) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2480)|0));
 var $2=(($this+4)|0);
 var $3=_strlen($msg);
 var $4=((($3)+(1))|0);
 var $5=((($3)+(13))|0);
 var $6=__Znaj($5);
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 HEAP32[(($7)>>2)]=$3;
 var $10=(($6+12)|0);
 HEAP32[(($2)>>2)]=$10;
 var $11=(($6+8)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0;
 assert($4 % 1 === 0);(_memcpy($10, $msg, $4)|0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2480)|0));
   var $2=(($this+4)|0);
   var $this_idx_val_i_i=HEAP32[(($2)>>2)];
   var $3=((($this_idx_val_i_i)-(4))|0);
   var $4=$3;
   var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
   var $6=((($5)-(1))|0);
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($2)>>2)];
   var $10=((($9)-(12))|0);
   __ZdaPv($10);
   label = 3; break;
  case 3: 
   var $11=$this;
   __ZdlPv($11);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2480)|0));
   var $2=(($this+4)|0);
   var $this_idx_val_i=HEAP32[(($2)>>2)];
   var $3=((($this_idx_val_i)-(4))|0);
   var $4=$3;
   var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
   var $6=((($5)-(1))|0);
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($2)>>2)];
   var $10=((($9)-(12))|0);
   __ZdaPv($10);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt11logic_error4whatEv($this) {
 var label = 0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2416)|0));
   var $2=(($this+4)|0);
   var $3=$msg;
   var $4=HEAP8[($3)];
   var $5=$4 & 1;
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($msg+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $13 = $9;label = 4; break;
  case 3: 
   var $11=$msg;
   var $12=(($11+1)|0);
   var $13 = $12;label = 4; break;
  case 4: 
   var $13;
   var $14=_strlen($13);
   var $15=((($14)+(1))|0);
   var $16=((($14)+(13))|0);
   var $17=__Znaj($16);
   var $18=$17;
   var $19=(($17+4)|0);
   var $20=$19;
   HEAP32[(($20)>>2)]=$14;
   HEAP32[(($18)>>2)]=$14;
   var $21=(($17+12)|0);
   HEAP32[(($2)>>2)]=$21;
   var $22=(($17+8)|0);
   var $23=$22;
   HEAP32[(($23)>>2)]=0;
   assert($15 % 1 === 0);(_memcpy($21, $13, $15)|0);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2416)|0));
 var $2=(($this+4)|0);
 var $3=_strlen($msg);
 var $4=((($3)+(1))|0);
 var $5=((($3)+(13))|0);
 var $6=__Znaj($5);
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 HEAP32[(($7)>>2)]=$3;
 var $10=(($6+12)|0);
 HEAP32[(($2)>>2)]=$10;
 var $11=(($6+8)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0;
 assert($4 % 1 === 0);(_memcpy($10, $msg, $4)|0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2416)|0));
   var $2=(($this+4)|0);
   var $this_idx_val_i_i=HEAP32[(($2)>>2)];
   var $3=((($this_idx_val_i_i)-(4))|0);
   var $4=$3;
   var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
   var $6=((($5)-(1))|0);
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($2)>>2)];
   var $10=((($9)-(12))|0);
   __ZdaPv($10);
   label = 3; break;
  case 3: 
   var $11=$this;
   __ZdlPv($11);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2416)|0));
   var $2=(($this+4)|0);
   var $this_idx_val_i=HEAP32[(($2)>>2)];
   var $3=((($this_idx_val_i)-(4))|0);
   var $4=$3;
   var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
   var $6=((($5)-(1))|0);
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($2)>>2)];
   var $10=((($9)-(12))|0);
   __ZdaPv($10);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt13runtime_error4whatEv($this) {
 var label = 0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt12length_errorD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((2480)|0));
   var $2=(($this+4)|0);
   var $this_idx_val_i_i=HEAP32[(($2)>>2)];
   var $3=((($this_idx_val_i_i)-(4))|0);
   var $4=$3;
   var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
   var $6=((($5)-(1))|0);
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($2)>>2)];
   var $10=((($9)-(12))|0);
   __ZdaPv($10);
   label = 3; break;
  case 3: 
   var $11=$this;
   __ZdlPv($11);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114error_categoryC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4248)|0));
 return;
}
function __ZNSt3__114error_categoryD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 var label = 0;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result, $this, $ev) {
 var label = 0;
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=$this;
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3+12)|0);
   var $5=HEAP32[(($4)>>2)];
   FUNCTION_TABLE[$5]($1, $this, $code);
   var $6=(($1+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($condition+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($7)|(0))==(($9)|(0));
   if ($10) { label = 2; break; } else { var $17 = 0;label = 3; break; }
  case 2: 
   var $12=(($1)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($condition)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($13)|(0))==(($15)|(0));
   var $17 = $16;label = 3; break;
  case 3: 
   var $17;
   STACKTOP = sp;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($code+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { var $9 = 0;label = 3; break; }
  case 2: 
   var $5=(($code)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==(($condition)|(0));
   var $9 = $7;label = 3; break;
  case 3: 
   var $9;
   return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__112__do_message7messageEi($agg_result, $this, $ev) {
 var label = 0;
 var $1=_strerror($ev);
 var $2=_strlen($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result, $1, $2);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $ec, $what_arg) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$what_arg;
   var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=(($ec)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 16; break; } else { label = 2; break; }
  case 2: 
   var $7=HEAP8[($1)];
   var $8=(($7)&(255));
   var $9=$8 & 1;
   var $10=(($9)|(0))==0;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=(($what_arg+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $16 = $13;label = 5; break;
  case 4: 
   var $15=$8 >>> 1;
   var $16 = $15;label = 5; break;
  case 5: 
   var $16;
   var $17=(($16)|(0))==0;
   if ($17) { var $21 = $4;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $19=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg, ((1312)|0));
   var $_pre=HEAP32[(($3)>>2)];
   var $21 = $_pre;label = 7; break;
  case 7: 
   var $21;
   var $22=(($ec+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+24)|0);
   var $27=HEAP32[(($26)>>2)];
   FUNCTION_TABLE[$27]($2, $23, $21);
   var $28=$2;
   var $29=HEAP8[($28)];
   var $30=$29 & 1;
   var $31=(($30 << 24) >> 24)==0;
   if ($31) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $33=(($2+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $38 = $34;label = 10; break;
  case 9: 
   var $36=$2;
   var $37=(($36+1)|0);
   var $38 = $37;label = 10; break;
  case 10: 
   var $38;
   var $39=(($29)&(255));
   var $40=$39 & 1;
   var $41=(($40)|(0))==0;
   if ($41) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $43=(($2+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $47 = $44;label = 13; break;
  case 12: 
   var $46=$39 >>> 1;
   var $47 = $46;label = 13; break;
  case 13: 
   var $47;
   var $48 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, $38, $47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   label = 16; break;
  case 15: 
   var $50$0 = ___cxa_find_matching_catch(-1, -1); $50$1 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   ___resumeException($50$0)
  case 16: 
   var $51=$agg_result;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(sp)+(16);
   var $3=_strlen($what_arg);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2, $what_arg, $3);
   (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1, $ec, $2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $5=(($this)|0);
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($5, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   var $7=(($this)|0);
   HEAP32[(($7)>>2)]=(((4488)|0));
   var $8=(($this+8)|0);
   var $9=$ec;
   var $10=$8;
   var $ld$0$0=(($9)|0);
   var $11$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($9+4)|0);
   var $11$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($10)|0);
   HEAP32[(($st$2$0)>>2)]=$11$0;
   var $st$3$1=(($10+4)|0);
   HEAP32[(($st$3$1)>>2)]=$11$1;
   STACKTOP = sp;
   return;
  case 4: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1); $13$1 = tempRet0;
   var $14=$13$0;
   var $15=$13$1;
   var $_0 = $15;var $_01 = $14;label = 6; break;
  case 5: 
   var $17$0 = ___cxa_find_matching_catch(-1, -1); $17$1 = tempRet0;
   var $18=$17$0;
   var $19=$17$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   var $_0 = $19;var $_01 = $18;label = 6; break;
  case 6: 
   var $_01;
   var $_0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   var $21$0=$_01;
   var $21$1=0;
   var $22$0=$21$0;
   var $22$1=$_0;
   ___resumeException($22$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=HEAP32[(($flag)>>2)];
   var $3=(($2)|(0))==1;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $4=_pthread_cond_wait(13152, 13128);
   var $5=HEAP32[(($flag)>>2)];
   var $6=(($5)|(0))==1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP32[(($flag)>>2)];
   var $8=(($7)|(0))==0;
   if ($8) { label = 4; break; } else { label = 14; break; }
  case 4: 
   HEAP32[(($flag)>>2)]=1;
   var $10 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $13 = (function() { try { __THREW__ = 0; return _pthread_mutex_lock(13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 9; break; }
  case 7: 
   HEAP32[(($flag)>>2)]=-1;
   var $15 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $17 = (function() { try { __THREW__ = 0; return _pthread_cond_broadcast(13152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 9; break; }
  case 9: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1,0); $19$1 = tempRet0;
   var $20=$19$0;
   var $21=___cxa_begin_catch($20);
   var $22 = (function() { try { __THREW__ = 0; return _pthread_mutex_lock(13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 13; break; }
  case 10: 
   HEAP32[(($flag)>>2)]=0;
   var $24 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $26 = (function() { try { __THREW__ = 0; return _pthread_cond_broadcast(13152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 13; break; }
  case 13: 
   var $29$0 = ___cxa_find_matching_catch(-1, -1); $29$1 = tempRet0;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 17; break; }
  case 14: 
   var $31;
   label = 15; break;
  case 15: 
   return;
  case 16: 
   ___resumeException($29$0)
  case 17: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1,0); $35$1 = tempRet0;
   var $36=$35$0;
   ___clang_call_terminate($36);
   throw "Reached an unreachable!";
  case 18: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=___cxa_allocate_exception(8);
   var $2=$1;
   (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2, ((360)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=$1;
   HEAP32[(($3)>>2)]=((2448)|0);
   ___cxa_throw($1, 8472, (74));
   throw "Reached an unreachable!";
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1); $5$1 = tempRet0;
   ___cxa_free_exception($1);
   ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this, $__str) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$__str;
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$this;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
   label = 9; break;
  case 3: 
   var $8=(($__str+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($__str+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==-1;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 5: 
   var $15=(($11)>>>(0)) < 11;
   if ($15) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $17=$11 << 1;
   var $18=(($17) & 255);
   var $19=$this;
   var $20=$this;
   HEAP8[($20)]=$18;
   var $21=(($19+1)|0);
   var $__p_0_i_i = $21;label = 8; break;
  case 7: 
   var $22=((($11)+(16))|0);
   var $23=$22 & -16;
   var $24=__Znwj($23);
   var $25=(($this+8)|0);
   HEAP32[(($25)>>2)]=$24;
   var $26=$23 | 1;
   var $27=(($this)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=(($this+4)|0);
   HEAP32[(($28)>>2)]=$11;
   var $__p_0_i_i = $24;label = 8; break;
  case 8: 
   var $__p_0_i_i;
   assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
   var $29=(($__p_0_i_i+$11)|0);
   HEAP8[($29)]=0;
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__sz)|(0))==-1;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=(($__sz)>>>(0)) < 11;
   if ($4) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $6=$__sz << 1;
   var $7=(($6) & 255);
   var $8=$this;
   var $9=$this;
   HEAP8[($9)]=$7;
   var $10=(($8+1)|0);
   var $__p_0 = $10;label = 6; break;
  case 5: 
   var $11=((($__sz)+(16))|0);
   var $12=$11 & -16;
   var $13=__Znwj($12);
   var $14=(($this+8)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=$12 | 1;
   var $16=(($this)|0);
   HEAP32[(($16)>>2)]=$15;
   var $17=(($this+4)|0);
   HEAP32[(($17)>>2)]=$__sz;
   var $__p_0 = $13;label = 6; break;
  case 6: 
   var $__p_0;
   assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
   var $19=(($__p_0+$__sz)|0);
   HEAP8[($19)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__n)|(0))==-1;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=(($__n)>>>(0)) < 11;
   if ($4) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $6=$__n << 1;
   var $7=(($6) & 255);
   var $8=$this;
   var $9=$this;
   HEAP8[($9)]=$7;
   var $10=(($8+1)|0);
   var $__p_0 = $10;label = 6; break;
  case 5: 
   var $11=((($__n)+(16))|0);
   var $12=$11 & -16;
   var $13=__Znwj($12);
   var $14=(($this+8)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=$12 | 1;
   var $16=(($this)|0);
   HEAP32[(($16)>>2)]=$15;
   var $17=(($this+4)|0);
   HEAP32[(($17)>>2)]=$__n;
   var $__p_0 = $13;label = 6; break;
  case 6: 
   var $__p_0;
   _memset($__p_0, $__c, $__n);
   var $19=(($__p_0+$__n)|0);
   HEAP8[($19)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+8)|0);
   var $7=HEAP32[(($6)>>2)];
   __ZdlPv($7);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=_strlen($__s);
   var $2=$this;
   var $3=$this;
   var $4=HEAP8[($3)];
   var $5=$4 & 1;
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { var $13 = 10;var $12 = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($this)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & -2;
   var $phitmp_i=((($10)-(1))|0);
   var $11=(($9) & 255);
   var $13 = $phitmp_i;var $12 = $11;label = 3; break;
  case 3: 
   var $12;
   var $13;
   var $14=(($13)>>>(0)) < (($1)>>>(0));
   if ($14) { label = 10; break; } else { label = 4; break; }
  case 4: 
   var $16=$12 & 1;
   var $17=(($16 << 24) >> 24)==0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $19=(($this+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $23 = $20;label = 7; break;
  case 6: 
   var $22=(($2+1)|0);
   var $23 = $22;label = 7; break;
  case 7: 
   var $23;
   _memmove($23, $__s, $1, 1, 0);
   var $24=(($23+$1)|0);
   HEAP8[($24)]=0;
   var $25=HEAP8[($3)];
   var $26=$25 & 1;
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $29=(($this+4)|0);
   HEAP32[(($29)>>2)]=$1;
   label = 14; break;
  case 9: 
   var $31=$1 << 1;
   var $32=(($31) & 255);
   HEAP8[($3)]=$32;
   label = 14; break;
  case 10: 
   var $34=(($12)&(255));
   var $35=$34 & 1;
   var $36=(($35)|(0))==0;
   if ($36) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $38=(($this+4)|0);
   var $39=HEAP32[(($38)>>2)];
   var $42 = $39;label = 13; break;
  case 12: 
   var $41=$34 >>> 1;
   var $42 = $41;label = 13; break;
  case 13: 
   var $42;
   var $43=((($1)-($13))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $43, $42, 0, $42, $1, $__s);
   label = 14; break;
  case 14: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=$this;
   var $3=HEAP8[($2)];
   var $4=(($3)&(255));
   var $5=$4 & 1;
   var $6=(($5)|(0))==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($this+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $12 = $9;label = 4; break;
  case 3: 
   var $11=$4 >>> 1;
   var $12 = $11;label = 4; break;
  case 4: 
   var $12;
   var $13=(($12)>>>(0)) < (($__n)>>>(0));
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=((($__n)-($12))|0);
   var $16=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $15, $__c);
   label = 9; break;
  case 6: 
   var $18=$3 & 1;
   var $19=(($18 << 24) >> 24)==0;
   if ($19) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $21=(($this+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+$__n)|0);
   HEAP8[($23)]=0;
   var $24=(($this+4)|0);
   HEAP32[(($24)>>2)]=$__n;
   label = 9; break;
  case 8: 
   var $26=(($1+1+$__n)|0);
   HEAP8[($26)]=0;
   var $27=$__n << 1;
   var $28=(($27) & 255);
   HEAP8[($2)]=$28;
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__n)|(0))==0;
   if ($1) { label = 16; break; } else { label = 2; break; }
  case 2: 
   var $3=$this;
   var $4=$this;
   var $5=HEAP8[($4)];
   var $6=$5 & 1;
   var $7=(($6 << 24) >> 24)==0;
   if ($7) { var $14 = 10;var $13 = $5;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=(($this)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & -2;
   var $phitmp=((($11)-(1))|0);
   var $12=(($10) & 255);
   var $14 = $phitmp;var $13 = $12;label = 4; break;
  case 4: 
   var $13;
   var $14;
   var $15=(($13)&(255));
   var $16=$15 & 1;
   var $17=(($16)|(0))==0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $19=(($this+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $23 = $20;label = 7; break;
  case 6: 
   var $22=$15 >>> 1;
   var $23 = $22;label = 7; break;
  case 7: 
   var $23;
   var $24=((($14)-($23))|0);
   var $25=(($24)>>>(0)) < (($__n)>>>(0));
   if ($25) { label = 8; break; } else { var $30 = $13;label = 9; break; }
  case 8: 
   var $27=((($__n)-($14))|0);
   var $28=((($27)+($23))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $14, $28, $23, $23, 0, 0);
   var $_pre=HEAP8[($4)];
   var $30 = $_pre;label = 9; break;
  case 9: 
   var $30;
   var $31=$30 & 1;
   var $32=(($31 << 24) >> 24)==0;
   if ($32) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $34=(($this+8)|0);
   var $35=HEAP32[(($34)>>2)];
   var $38 = $35;label = 12; break;
  case 11: 
   var $37=(($3+1)|0);
   var $38 = $37;label = 12; break;
  case 12: 
   var $38;
   var $39=(($38+$23)|0);
   _memset($39, $__c, $__n);
   var $40=((($23)+($__n))|0);
   var $41=HEAP8[($4)];
   var $42=$41 & 1;
   var $43=(($42 << 24) >> 24)==0;
   if ($43) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $45=(($this+4)|0);
   HEAP32[(($45)>>2)]=$40;
   label = 15; break;
  case 14: 
   var $47=$40 << 1;
   var $48=(($47) & 255);
   HEAP8[($4)]=$48;
   label = 15; break;
  case 15: 
   var $49=(($38+$40)|0);
   HEAP8[($49)]=0;
   label = 16; break;
  case 16: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__res_arg)|(0))==-1;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=$this;
   var $5=$this;
   var $6=HEAP8[($5)];
   var $7=$6 & 1;
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { var $15 = 10;var $14 = $6;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=(($this)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & -2;
   var $phitmp=((($12)-(1))|0);
   var $13=(($11) & 255);
   var $15 = $phitmp;var $14 = $13;label = 5; break;
  case 5: 
   var $14;
   var $15;
   var $16=(($14)&(255));
   var $17=$16 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $20=(($this+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $24 = $21;label = 8; break;
  case 7: 
   var $23=$16 >>> 1;
   var $24 = $23;label = 8; break;
  case 8: 
   var $24;
   var $25=(($24)>>>(0)) > (($__res_arg)>>>(0));
   var $26=$25 ? $24 : $__res_arg;
   var $27=(($26)>>>(0)) < 11;
   if ($27) { var $31 = 11;label = 10; break; } else { label = 9; break; }
  case 9: 
   var $29=((($26)+(16))|0);
   var $30=$29 & -16;
   var $31 = $30;label = 10; break;
  case 10: 
   var $31;
   var $32=((($31)-(1))|0);
   var $33=(($32)|(0))==(($15)|(0));
   if ($33) { label = 29; break; } else { label = 11; break; }
  case 11: 
   var $35=(($32)|(0))==10;
   if ($35) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $37=(($4+1)|0);
   var $38=(($this+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $__new_data_1 = $37;var $__p_0 = $39;var $__was_long_0_off0 = 1;var $__now_long_0_off0 = 0;label = 21; break;
  case 13: 
   var $41=(($32)>>>(0)) > (($15)>>>(0));
   if ($41) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $43=__Znwj($31);
   var $__new_data_0 = $43;label = 17; break;
  case 15: 
   var $45 = (function() { try { __THREW__ = 0; return __Znwj($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0 = $45;label = 17; break; } else { label = 16; break; }
  case 16: 
   var $47$0 = ___cxa_find_matching_catch(-1, -1,0); $47$1 = tempRet0;
   var $48=$47$0;
   var $49=___cxa_begin_catch($48);
   ___cxa_end_catch();
   label = 29; break;
  case 17: 
   var $__new_data_0;
   var $50=$14 & 1;
   var $51=(($50 << 24) >> 24)==0;
   if ($51) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $53=(($this+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $57 = $54;label = 20; break;
  case 19: 
   var $56=(($4+1)|0);
   var $57 = $56;label = 20; break;
  case 20: 
   var $57;
   var $extract_t=(($50 << 24) >> 24)!=0;
   var $__new_data_1 = $__new_data_0;var $__p_0 = $57;var $__was_long_0_off0 = $extract_t;var $__now_long_0_off0 = 1;label = 21; break;
  case 21: 
   var $__now_long_0_off0;
   var $__was_long_0_off0;
   var $__p_0;
   var $__new_data_1;
   var $59=(($14)&(255));
   var $60=$59 & 1;
   var $61=(($60)|(0))==0;
   if ($61) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $63=(($this+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $67 = $64;label = 24; break;
  case 23: 
   var $66=$59 >>> 1;
   var $67 = $66;label = 24; break;
  case 24: 
   var $67;
   var $68=((($67)+(1))|0);
   assert($68 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $68)|0);
   if ($__was_long_0_off0) { label = 25; break; } else { label = 26; break; }
  case 25: 
   __ZdlPv($__p_0);
   label = 26; break;
  case 26: 
   if ($__now_long_0_off0) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $72=$31 | 1;
   var $73=(($this)|0);
   HEAP32[(($73)>>2)]=$72;
   var $74=(($this+4)|0);
   HEAP32[(($74)>>2)]=$24;
   var $75=(($this+8)|0);
   HEAP32[(($75)>>2)]=$__new_data_1;
   label = 29; break;
  case 28: 
   var $77=$24 << 1;
   var $78=(($77) & 255);
   HEAP8[($5)]=$78;
   label = 29; break;
  case 29: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this, $__s) {
 var label = 0;
 var $1=_strlen($__s);
 var $2=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $1);
 return $2;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=$this;
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($3)&(255));
   var $8=$7 >>> 1;
   var $__sz_0 = $8;var $__cap_0 = 10;label = 4; break;
  case 3: 
   var $10=(($this)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & -2;
   var $13=((($12)-(1))|0);
   var $14=(($this+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $__sz_0 = $15;var $__cap_0 = $13;label = 4; break;
  case 4: 
   var $__cap_0;
   var $__sz_0;
   var $17=(($__sz_0)|(0))==(($__cap_0)|(0));
   if ($17) { label = 5; break; } else { var $__is_short_0_off0_in_in = $3;label = 6; break; }
  case 5: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap_0, 1, $__cap_0, $__cap_0, 0, 0);
   var $19=HEAP8[($2)];
   var $__is_short_0_off0_in_in = $19;label = 6; break;
  case 6: 
   var $__is_short_0_off0_in_in;
   var $__is_short_0_off0_in=$__is_short_0_off0_in_in & 1;
   var $__is_short_0_off0=(($__is_short_0_off0_in << 24) >> 24)==0;
   if ($__is_short_0_off0) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $22=(($1+1)|0);
   var $23=$__sz_0 << 1;
   var $24=((($23)+(2))|0);
   var $25=(($24) & 255);
   HEAP8[($2)]=$25;
   var $__p_0_sum_pre=((($__sz_0)+(1))|0);
   var $_pn = $22;var $__p_0_sum_pre_phi = $__p_0_sum_pre;label = 9; break;
  case 8: 
   var $27=(($this+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($__sz_0)+(1))|0);
   var $30=(($this+4)|0);
   HEAP32[(($30)>>2)]=$29;
   var $_pn = $28;var $__p_0_sum_pre_phi = $29;label = 9; break;
  case 9: 
   var $__p_0_sum_pre_phi;
   var $_pn;
   var $__p_0=(($_pn+$__sz_0)|0);
   HEAP8[($__p_0)]=$__c;
   var $32=(($_pn+$__p_0_sum_pre_phi)|0);
   HEAP8[($32)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=$this;
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { var $12 = 10;var $11 = $3;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($this)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -2;
   var $phitmp=((($9)-(1))|0);
   var $10=(($8) & 255);
   var $12 = $phitmp;var $11 = $10;label = 3; break;
  case 3: 
   var $11;
   var $12;
   var $13=(($11)&(255));
   var $14=$13 & 1;
   var $15=(($14)|(0))==0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=(($this+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $21 = $18;label = 6; break;
  case 5: 
   var $20=$13 >>> 1;
   var $21 = $20;label = 6; break;
  case 6: 
   var $21;
   var $22=((($12)-($21))|0);
   var $23=(($22)>>>(0)) < (($__n)>>>(0));
   if ($23) { label = 15; break; } else { label = 7; break; }
  case 7: 
   var $25=(($__n)|(0))==0;
   if ($25) { label = 16; break; } else { label = 8; break; }
  case 8: 
   var $27=$11 & 1;
   var $28=(($27 << 24) >> 24)==0;
   if ($28) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $30=(($this+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $34 = $31;label = 11; break;
  case 10: 
   var $33=(($1+1)|0);
   var $34 = $33;label = 11; break;
  case 11: 
   var $34;
   var $35=(($34+$21)|0);
   assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
   var $36=((($21)+($__n))|0);
   var $37=HEAP8[($2)];
   var $38=$37 & 1;
   var $39=(($38 << 24) >> 24)==0;
   if ($39) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $41=(($this+4)|0);
   HEAP32[(($41)>>2)]=$36;
   label = 14; break;
  case 13: 
   var $43=$36 << 1;
   var $44=(($43) & 255);
   HEAP8[($2)]=$44;
   label = 14; break;
  case 14: 
   var $45=(($34+$36)|0);
   HEAP8[($45)]=0;
   label = 16; break;
  case 15: 
   var $47=((($__n)-($12))|0);
   var $48=((($47)+($21))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $12, $48, $21, $21, 0, $__n, $__s);
   label = 16; break;
  case 16: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(((-3)-($__old_cap))|0);
   var $2=(($1)>>>(0)) < (($__delta_cap)>>>(0));
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $5=$this;
   var $6=HEAP8[($5)];
   var $7=$6 & 1;
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=(($this+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $15 = $11;label = 6; break;
  case 5: 
   var $13=$this;
   var $14=(($13+1)|0);
   var $15 = $14;label = 6; break;
  case 6: 
   var $15;
   var $16=(($__old_cap)>>>(0)) < 2147483631;
   if ($16) { label = 7; break; } else { var $_sink = -2;label = 9; break; }
  case 7: 
   var $17=((($__delta_cap)+($__old_cap))|0);
   var $18=$__old_cap << 1;
   var $19=(($17)>>>(0)) < (($18)>>>(0));
   var $20=$19 ? $18 : $17;
   var $21=(($20)>>>(0)) < 11;
   if ($21) { var $_sink = 11;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $23=((($20)+(16))|0);
   var $24=$23 & -16;
   var $_sink = $24;label = 9; break;
  case 9: 
   var $_sink;
   var $25=__Znwj($_sink);
   var $26=(($__n_copy)|(0))==0;
   if ($26) { label = 11; break; } else { label = 10; break; }
  case 10: 
   assert($__n_copy % 1 === 0);(_memcpy($25, $15, $__n_copy)|0);
   label = 11; break;
  case 11: 
   var $29=(($__n_add)|(0))==0;
   if ($29) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $31=(($25+$__n_copy)|0);
   assert($__n_add % 1 === 0);(_memcpy($31, $__p_new_stuff, $__n_add)|0);
   label = 13; break;
  case 13: 
   var $33=((($__old_sz)-($__n_del))|0);
   var $34=(($33)|(0))==(($__n_copy)|(0));
   if ($34) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $36=((($33)-($__n_copy))|0);
   var $_sum=((($__n_add)+($__n_copy))|0);
   var $37=(($25+$_sum)|0);
   var $_sum3=((($__n_del)+($__n_copy))|0);
   var $38=(($15+$_sum3)|0);
   assert($36 % 1 === 0);(_memcpy($37, $38, $36)|0);
   label = 15; break;
  case 15: 
   var $40=(($__old_cap)|(0))==10;
   if ($40) { label = 17; break; } else { label = 16; break; }
  case 16: 
   __ZdlPv($15);
   label = 17; break;
  case 17: 
   var $43=(($this+8)|0);
   HEAP32[(($43)>>2)]=$25;
   var $44=$_sink | 1;
   var $45=(($this)|0);
   HEAP32[(($45)>>2)]=$44;
   var $46=((($33)+($__n_add))|0);
   var $47=(($this+4)|0);
   HEAP32[(($47)>>2)]=$46;
   var $48=(($25+$46)|0);
   HEAP8[($48)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(((-3)-($__old_cap))|0);
   var $2=(($1)>>>(0)) < (($__delta_cap)>>>(0));
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $5=$this;
   var $6=HEAP8[($5)];
   var $7=$6 & 1;
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=(($this+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $15 = $11;label = 6; break;
  case 5: 
   var $13=$this;
   var $14=(($13+1)|0);
   var $15 = $14;label = 6; break;
  case 6: 
   var $15;
   var $16=(($__old_cap)>>>(0)) < 2147483631;
   if ($16) { label = 7; break; } else { var $_sink = -2;label = 9; break; }
  case 7: 
   var $17=((($__delta_cap)+($__old_cap))|0);
   var $18=$__old_cap << 1;
   var $19=(($17)>>>(0)) < (($18)>>>(0));
   var $20=$19 ? $18 : $17;
   var $21=(($20)>>>(0)) < 11;
   if ($21) { var $_sink = 11;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $23=((($20)+(16))|0);
   var $24=$23 & -16;
   var $_sink = $24;label = 9; break;
  case 9: 
   var $_sink;
   var $25=__Znwj($_sink);
   var $26=(($__n_copy)|(0))==0;
   if ($26) { label = 11; break; } else { label = 10; break; }
  case 10: 
   assert($__n_copy % 1 === 0);(_memcpy($25, $15, $__n_copy)|0);
   label = 11; break;
  case 11: 
   var $29=((($__old_sz)-($__n_del))|0);
   var $30=(($29)|(0))==(($__n_copy)|(0));
   if ($30) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $32=((($29)-($__n_copy))|0);
   var $_sum=((($__n_add)+($__n_copy))|0);
   var $33=(($25+$_sum)|0);
   var $_sum3=((($__n_del)+($__n_copy))|0);
   var $34=(($15+$_sum3)|0);
   assert($32 % 1 === 0);(_memcpy($33, $34, $32)|0);
   label = 13; break;
  case 13: 
   var $36=(($__old_cap)|(0))==10;
   if ($36) { label = 15; break; } else { label = 14; break; }
  case 14: 
   __ZdlPv($15);
   label = 15; break;
  case 15: 
   var $39=(($this+8)|0);
   HEAP32[(($39)>>2)]=$25;
   var $40=$_sink | 1;
   var $41=(($this)|0);
   HEAP32[(($41)>>2)]=$40;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__sz)>>>(0)) > 1073741822;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=(($__sz)>>>(0)) < 2;
   if ($4) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $6=$__sz << 1;
   var $7=(($6) & 255);
   var $8=$this;
   HEAP8[($8)]=$7;
   var $9=(($this+4)|0);
   var $__p_0 = $9;label = 6; break;
  case 5: 
   var $10=((($__sz)+(4))|0);
   var $11=$10 & -4;
   var $12=$11 << 2;
   var $13=__Znwj($12);
   var $14=$13;
   var $15=(($this+8)|0);
   HEAP32[(($15)>>2)]=$14;
   var $16=$11 | 1;
   var $17=(($this)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=(($this+4)|0);
   HEAP32[(($18)>>2)]=$__sz;
   var $__p_0 = $14;label = 6; break;
  case 6: 
   var $__p_0;
   var $20=_wmemcpy($__p_0, $__s, $__sz);
   var $21=(($__p_0+($__sz<<2))|0);
   HEAP32[(($21)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__n)>>>(0)) > 1073741822;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=(($__n)>>>(0)) < 2;
   if ($4) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $6=$__n << 1;
   var $7=(($6) & 255);
   var $8=$this;
   HEAP8[($8)]=$7;
   var $9=(($this+4)|0);
   var $__p_0 = $9;label = 6; break;
  case 5: 
   var $10=((($__n)+(4))|0);
   var $11=$10 & -4;
   var $12=$11 << 2;
   var $13=__Znwj($12);
   var $14=$13;
   var $15=(($this+8)|0);
   HEAP32[(($15)>>2)]=$14;
   var $16=$11 | 1;
   var $17=(($this)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=(($this+4)|0);
   HEAP32[(($18)>>2)]=$__n;
   var $__p_0 = $14;label = 6; break;
  case 6: 
   var $__p_0;
   var $20=_wmemset($__p_0, $__c, $__n);
   var $21=(($__p_0+($__n<<2))|0);
   HEAP32[(($21)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   __ZdlPv($8);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 var label = 0;
 var $1=_wcslen($__s);
 var $2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $1);
 return $2;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { var $11 = 1;var $10 = $2;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & -2;
   var $phitmp=((($8)-(1))|0);
   var $9=(($7) & 255);
   var $11 = $phitmp;var $10 = $9;label = 3; break;
  case 3: 
   var $10;
   var $11;
   var $12=(($11)>>>(0)) < (($__n)>>>(0));
   if ($12) { label = 10; break; } else { label = 4; break; }
  case 4: 
   var $14=$10 & 1;
   var $15=(($14 << 24) >> 24)==0;
   if ($15) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $17=(($this+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $21 = $18;label = 7; break;
  case 6: 
   var $20=(($this+4)|0);
   var $21 = $20;label = 7; break;
  case 7: 
   var $21;
   var $22=_wmemmove($21, $__s, $__n);
   var $23=(($21+($__n<<2))|0);
   HEAP32[(($23)>>2)]=0;
   var $24=HEAP8[($1)];
   var $25=$24 & 1;
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $28=(($this+4)|0);
   HEAP32[(($28)>>2)]=$__n;
   label = 14; break;
  case 9: 
   var $30=$__n << 1;
   var $31=(($30) & 255);
   HEAP8[($1)]=$31;
   label = 14; break;
  case 10: 
   var $33=(($10)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $37=(($this+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $41 = $38;label = 13; break;
  case 12: 
   var $40=$33 >>> 1;
   var $41 = $40;label = 13; break;
  case 13: 
   var $41;
   var $42=((($__n)-($11))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $11, $42, $41, 0, $41, $__n, $__s);
   label = 14; break;
  case 14: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__res_arg)>>>(0)) > 1073741822;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $4=$this;
   var $5=HEAP8[($4)];
   var $6=$5 & 1;
   var $7=(($6 << 24) >> 24)==0;
   if ($7) { var $14 = 1;var $13 = $5;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $9=(($this)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & -2;
   var $phitmp=((($11)-(1))|0);
   var $12=(($10) & 255);
   var $14 = $phitmp;var $13 = $12;label = 5; break;
  case 5: 
   var $13;
   var $14;
   var $15=(($13)&(255));
   var $16=$15 & 1;
   var $17=(($16)|(0))==0;
   if ($17) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $19=(($this+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $23 = $20;label = 8; break;
  case 7: 
   var $22=$15 >>> 1;
   var $23 = $22;label = 8; break;
  case 8: 
   var $23;
   var $24=(($23)>>>(0)) > (($__res_arg)>>>(0));
   var $25=$24 ? $23 : $__res_arg;
   var $26=(($25)>>>(0)) < 2;
   if ($26) { var $30 = 2;label = 10; break; } else { label = 9; break; }
  case 9: 
   var $28=((($25)+(4))|0);
   var $29=$28 & -4;
   var $30 = $29;label = 10; break;
  case 10: 
   var $30;
   var $31=((($30)-(1))|0);
   var $32=(($31)|(0))==(($14)|(0));
   if ($32) { label = 29; break; } else { label = 11; break; }
  case 11: 
   var $34=(($31)|(0))==1;
   if ($34) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $36=(($this+4)|0);
   var $37=$36;
   var $38=(($this+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $__new_data_1_in = $37;var $__p_0 = $39;var $__was_long_0_off0 = 1;var $__now_long_0_off0 = 0;label = 21; break;
  case 13: 
   var $41=(($31)>>>(0)) > (($14)>>>(0));
   var $42=$30 << 2;
   if ($41) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $44=__Znwj($42);
   var $__new_data_0_in = $44;label = 17; break;
  case 15: 
   var $46 = (function() { try { __THREW__ = 0; return __Znwj($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0_in = $46;label = 17; break; } else { label = 16; break; }
  case 16: 
   var $48$0 = ___cxa_find_matching_catch(-1, -1,0); $48$1 = tempRet0;
   var $49=$48$0;
   var $50=___cxa_begin_catch($49);
   ___cxa_end_catch();
   label = 29; break;
  case 17: 
   var $__new_data_0_in;
   var $51=$13 & 1;
   var $52=(($51 << 24) >> 24)==0;
   if ($52) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $54=(($this+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $58 = $55;label = 20; break;
  case 19: 
   var $57=(($this+4)|0);
   var $58 = $57;label = 20; break;
  case 20: 
   var $58;
   var $extract_t=(($51 << 24) >> 24)!=0;
   var $__new_data_1_in = $__new_data_0_in;var $__p_0 = $58;var $__was_long_0_off0 = $extract_t;var $__now_long_0_off0 = 1;label = 21; break;
  case 21: 
   var $__now_long_0_off0;
   var $__was_long_0_off0;
   var $__p_0;
   var $__new_data_1_in;
   var $__new_data_1=$__new_data_1_in;
   var $60=(($13)&(255));
   var $61=$60 & 1;
   var $62=(($61)|(0))==0;
   if ($62) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $64=(($this+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $68 = $65;label = 24; break;
  case 23: 
   var $67=$60 >>> 1;
   var $68 = $67;label = 24; break;
  case 24: 
   var $68;
   var $69=((($68)+(1))|0);
   var $70=_wmemcpy($__new_data_1, $__p_0, $69);
   if ($__was_long_0_off0) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $72=$__p_0;
   __ZdlPv($72);
   label = 26; break;
  case 26: 
   if ($__now_long_0_off0) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $75=$30 | 1;
   var $76=(($this)|0);
   HEAP32[(($76)>>2)]=$75;
   var $77=(($this+4)|0);
   HEAP32[(($77)>>2)]=$23;
   var $78=(($this+8)|0);
   HEAP32[(($78)>>2)]=$__new_data_1;
   label = 29; break;
  case 28: 
   var $80=$23 << 1;
   var $81=(($80) & 255);
   HEAP8[($4)]=$81;
   label = 29; break;
  case 29: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP8[($1)];
   var $3=$2 & 1;
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=(($2)&(255));
   var $7=$6 >>> 1;
   var $__sz_0 = $7;var $__cap_0 = 1;label = 4; break;
  case 3: 
   var $9=(($this)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & -2;
   var $12=((($11)-(1))|0);
   var $13=(($this+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $__sz_0 = $14;var $__cap_0 = $12;label = 4; break;
  case 4: 
   var $__cap_0;
   var $__sz_0;
   var $16=(($__sz_0)|(0))==(($__cap_0)|(0));
   if ($16) { label = 5; break; } else { var $__is_short_0_off0_in_in = $2;label = 6; break; }
  case 5: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap_0, 1, $__cap_0, $__cap_0, 0, 0);
   var $18=HEAP8[($1)];
   var $__is_short_0_off0_in_in = $18;label = 6; break;
  case 6: 
   var $__is_short_0_off0_in_in;
   var $__is_short_0_off0_in=$__is_short_0_off0_in_in & 1;
   var $__is_short_0_off0=(($__is_short_0_off0_in << 24) >> 24)==0;
   if ($__is_short_0_off0) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $21=(($this+4)|0);
   var $22=$__sz_0 << 1;
   var $23=((($22)+(2))|0);
   var $24=(($23) & 255);
   HEAP8[($1)]=$24;
   var $__p_0_sum_pre=((($__sz_0)+(1))|0);
   var $_pn = $21;var $__p_0_sum_pre_phi = $__p_0_sum_pre;label = 9; break;
  case 8: 
   var $26=(($this+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($__sz_0)+(1))|0);
   var $29=(($this+4)|0);
   HEAP32[(($29)>>2)]=$28;
   var $_pn = $27;var $__p_0_sum_pre_phi = $28;label = 9; break;
  case 9: 
   var $__p_0_sum_pre_phi;
   var $_pn;
   var $__p_0=(($_pn+($__sz_0<<2))|0);
   HEAP32[(($__p_0)>>2)]=$__c;
   var $31=(($_pn+($__p_0_sum_pre_phi<<2))|0);
   HEAP32[(($31)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(((1073741821)-($__old_cap))|0);
   var $2=(($1)>>>(0)) < (($__delta_cap)>>>(0));
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $5=$this;
   var $6=HEAP8[($5)];
   var $7=$6 & 1;
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=(($this+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $14 = $11;label = 6; break;
  case 5: 
   var $13=(($this+4)|0);
   var $14 = $13;label = 6; break;
  case 6: 
   var $14;
   var $15=(($__old_cap)>>>(0)) < 536870895;
   if ($15) { label = 7; break; } else { var $_sink = 1073741822;label = 9; break; }
  case 7: 
   var $16=((($__delta_cap)+($__old_cap))|0);
   var $17=$__old_cap << 1;
   var $18=(($16)>>>(0)) < (($17)>>>(0));
   var $19=$18 ? $17 : $16;
   var $20=(($19)>>>(0)) < 2;
   if ($20) { var $_sink = 2;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $22=((($19)+(4))|0);
   var $23=$22 & -4;
   var $_sink = $23;label = 9; break;
  case 9: 
   var $_sink;
   var $24=$_sink << 2;
   var $25=__Znwj($24);
   var $26=$25;
   var $27=(($__n_copy)|(0))==0;
   if ($27) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $29=_wmemcpy($26, $14, $__n_copy);
   label = 11; break;
  case 11: 
   var $31=(($__n_add)|(0))==0;
   if ($31) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $33=(($26+($__n_copy<<2))|0);
   var $34=_wmemcpy($33, $__p_new_stuff, $__n_add);
   label = 13; break;
  case 13: 
   var $36=((($__old_sz)-($__n_del))|0);
   var $37=(($36)|(0))==(($__n_copy)|(0));
   if ($37) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $39=((($36)-($__n_copy))|0);
   var $_sum=((($__n_add)+($__n_copy))|0);
   var $40=(($26+($_sum<<2))|0);
   var $_sum3=((($__n_del)+($__n_copy))|0);
   var $41=(($14+($_sum3<<2))|0);
   var $42=_wmemcpy($40, $41, $39);
   label = 15; break;
  case 15: 
   var $44=(($__old_cap)|(0))==1;
   if ($44) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $46=$14;
   __ZdlPv($46);
   label = 17; break;
  case 17: 
   var $48=(($this+8)|0);
   HEAP32[(($48)>>2)]=$26;
   var $49=$_sink | 1;
   var $50=(($this)|0);
   HEAP32[(($50)>>2)]=$49;
   var $51=((($36)+($__n_add))|0);
   var $52=(($this+4)|0);
   HEAP32[(($52)>>2)]=$51;
   var $53=(($26+($51<<2))|0);
   HEAP32[(($53)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(((1073741821)-($__old_cap))|0);
   var $2=(($1)>>>(0)) < (($__delta_cap)>>>(0));
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 3: 
   var $5=$this;
   var $6=HEAP8[($5)];
   var $7=$6 & 1;
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=(($this+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $14 = $11;label = 6; break;
  case 5: 
   var $13=(($this+4)|0);
   var $14 = $13;label = 6; break;
  case 6: 
   var $14;
   var $15=(($__old_cap)>>>(0)) < 536870895;
   if ($15) { label = 7; break; } else { var $_sink = 1073741822;label = 9; break; }
  case 7: 
   var $16=((($__delta_cap)+($__old_cap))|0);
   var $17=$__old_cap << 1;
   var $18=(($16)>>>(0)) < (($17)>>>(0));
   var $19=$18 ? $17 : $16;
   var $20=(($19)>>>(0)) < 2;
   if ($20) { var $_sink = 2;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $22=((($19)+(4))|0);
   var $23=$22 & -4;
   var $_sink = $23;label = 9; break;
  case 9: 
   var $_sink;
   var $24=$_sink << 2;
   var $25=__Znwj($24);
   var $26=$25;
   var $27=(($__n_copy)|(0))==0;
   if ($27) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $29=_wmemcpy($26, $14, $__n_copy);
   label = 11; break;
  case 11: 
   var $31=((($__old_sz)-($__n_del))|0);
   var $32=(($31)|(0))==(($__n_copy)|(0));
   if ($32) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $34=((($31)-($__n_copy))|0);
   var $_sum=((($__n_add)+($__n_copy))|0);
   var $35=(($26+($_sum<<2))|0);
   var $_sum3=((($__n_del)+($__n_copy))|0);
   var $36=(($14+($_sum3<<2))|0);
   var $37=_wmemcpy($35, $36, $34);
   label = 13; break;
  case 13: 
   var $39=(($__old_cap)|(0))==1;
   if ($39) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $41=$14;
   __ZdlPv($41);
   label = 15; break;
  case 15: 
   var $43=(($this+8)|0);
   HEAP32[(($43)>>2)]=$26;
   var $44=$_sink | 1;
   var $45=(($this)|0);
   HEAP32[(($45)>>2)]=$44;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(($this+24)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+16)|0);
   HEAP32[(($6)>>2)]=$state;
   label = 4; break;
  case 3: 
   var $8=$state | 1;
   var $9=(($this+16)|0);
   HEAP32[(($9)>>2)]=$8;
   label = 4; break;
  case 4: 
   var $11=(($4)&(1));
   var $12=$11 | $state;
   var $13=(($this+20)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$12 & $14;
   var $16=(($15)|(0))==0;
   if ($16) { label = 11; break; } else { label = 5; break; }
  case 5: 
   var $18=___cxa_allocate_exception(16);
   var $19=HEAP8[(14272)];
   var $20=(($19 << 24) >> 24)==0;
   if ($20) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $22=___cxa_guard_acquire(14272);
   var $23=(($22)|(0))==0;
   if ($23) { label = 8; break; } else { label = 7; break; }
  case 7: 
   __ZNSt3__114error_categoryC2Ev(((12168)|0));
   HEAP32[((((12168)|0))>>2)]=(((3944)|0));
   var $25=_atexit((180), 12168, ___dso_handle);
   label = 8; break;
  case 8: 
   var $26=$1;
   var $$etemp$0$0=8;
   var $$etemp$0$1=0;
   var $tmpcast_i=$1;
   var $27=$18;
   var $$etemp$3$0=1;
   var $$etemp$3$1=0;
   var $$etemp$5$0=32;
   var $$etemp$5$1=0;
   var $$etemp$6=12168;
   var $$etemp$4$0=$$etemp$6;
   var $$etemp$4$1=0;
   var $$etemp$2$0 = _bitshift64Shl($$etemp$4$0,$$etemp$4$1,$$etemp$5$0);var $$etemp$2$1 = tempRet0;
   var $$etemp$1$0=$$etemp$2$0 | $$etemp$3$0;
   var $$etemp$1$1=$$etemp$2$1 | $$etemp$3$1;
   var $st$7$0=(($1)|0);
   HEAP32[(($st$7$0)>>2)]=$$etemp$1$0;
   var $st$8$1=(($1+4)|0);
   HEAP32[(($st$8$1)>>2)]=$$etemp$1$1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27, $tmpcast_i, ((1320)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $29=$18;
   HEAP32[(($29)>>2)]=(((3128)|0));
   var $$etemp$9$0=8;
   var $$etemp$9$1=0;
   ___cxa_throw($18, 9016, (66));
   throw "Reached an unreachable!";
  case 10: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   ___cxa_free_exception($18);
   ___resumeException($31$0)
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((3104)|0));
   var $2=(($this+40)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==0;
   var $_pre=(($this+32)|0);
   var $_pre1=(($this+36)|0);
   if ($4) { label = 4; break; } else { var $i_01_i = $3;label = 2; break; }
  case 2: 
   var $i_01_i;
   var $5=((($i_01_i)-(1))|0);
   var $6=HEAP32[(($_pre)>>2)];
   var $7=(($6+($5<<2))|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=HEAP32[(($_pre1)>>2)];
   var $10=(($9+($5<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0, $this, $11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $12=(($5)|(0))==0;
   if ($12) { label = 4; break; } else { var $i_01_i = $5;label = 2; break; }
  case 4: 
   var $13=(($this+28)|0);
   var $14=$13;
   __ZNSt3__16localeD2Ev($14);
   var $15=HEAP32[(($_pre)>>2)];
   var $16=$15;
   _free($16);
   var $17=HEAP32[(($_pre1)>>2)];
   var $18=$17;
   _free($18);
   var $19=(($this+48)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   _free($21);
   var $22=(($this+60)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   _free($24);
   return;
  case 5: 
   var $26$0 = ___cxa_find_matching_catch(-1, -1,0); $26$1 = tempRet0;
   var $27=$26$0;
   ___clang_call_terminate($27);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg_result, $this) {
 var label = 0;
 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result, $2);
 return;
}
function __ZNSt3__18ios_base4initEPv($this, $sb) {
 var label = 0;
 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=(($sb)|(0))==0;
 var $2=(($not_)&(1));
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=$9;
 var $11=$8;
 _memset($11, 0, 40);
 __ZNSt3__16localeC2Ev($10);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4176)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4176)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4176)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4176)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 var label = 0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 var label = 0;
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var label = 0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result, $this, $0, $1) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 var label = 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 var label = 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($__n)|(0)) > 0;
   if ($2) { label = 2; break; } else { var $__i_0_lcssa = 0;label = 8; break; }
  case 2: 
   var $3=(($this+12)|0);
   var $4=(($this+16)|0);
   var $_01 = $__s;var $__i_02 = 0;label = 3; break;
  case 3: 
   var $__i_02;
   var $_01;
   var $6=HEAP32[(($3)>>2)];
   var $7=HEAP32[(($4)>>2)];
   var $8=(($6)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $10=(($6+1)|0);
   HEAP32[(($3)>>2)]=$10;
   var $11=HEAP8[($6)];
   var $storemerge = $11;label = 7; break;
  case 5: 
   var $13=HEAP32[(($1)>>2)];
   var $14=(($13+40)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=FUNCTION_TABLE[$15]($this);
   var $17=(($16)|(0))==-1;
   if ($17) { var $__i_0_lcssa = $__i_02;label = 8; break; } else { label = 6; break; }
  case 6: 
   var $19=(($16) & 255);
   var $storemerge = $19;label = 7; break;
  case 7: 
   var $storemerge;
   HEAP8[($_01)]=$storemerge;
   var $21=((($__i_02)+(1))|0);
   var $22=(($_01+1)|0);
   var $23=(($21)|(0)) < (($__n)|(0));
   if ($23) { var $_01 = $22;var $__i_02 = $21;label = 3; break; } else { var $__i_0_lcssa = $21;label = 8; break; }
  case 8: 
   var $__i_0_lcssa;
   return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 var label = 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2+36)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=FUNCTION_TABLE[$4]($this);
   var $6=(($5)|(0))==-1;
   if ($6) { var $_0 = -1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($this+12)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+1)|0);
   HEAP32[(($8)>>2)]=$10;
   var $11=HEAP8[($9)];
   var $12=(($11)&(255));
   var $_0 = $12;label = 3; break;
  case 3: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 var label = 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($__n)|(0)) > 0;
   if ($2) { label = 2; break; } else { var $__i_0_lcssa = 0;label = 7; break; }
  case 2: 
   var $3=(($this+24)|0);
   var $4=(($this+28)|0);
   var $__i_01 = 0;var $_02 = $__s;label = 3; break;
  case 3: 
   var $_02;
   var $__i_01;
   var $6=HEAP32[(($3)>>2)];
   var $7=HEAP32[(($4)>>2)];
   var $8=(($6)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $10=HEAP8[($_02)];
   var $11=(($6+1)|0);
   HEAP32[(($3)>>2)]=$11;
   HEAP8[($6)]=$10;
   label = 6; break;
  case 5: 
   var $13=HEAP32[(($1)>>2)];
   var $14=(($13+52)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=HEAP8[($_02)];
   var $17=(($16)&(255));
   var $18=FUNCTION_TABLE[$15]($this, $17);
   var $19=(($18)|(0))==-1;
   if ($19) { var $__i_0_lcssa = $__i_01;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $21=(($_02+1)|0);
   var $22=((($__i_01)+(1))|0);
   var $23=(($22)|(0)) < (($__n)|(0));
   if ($23) { var $__i_01 = $22;var $_02 = $21;label = 3; break; } else { var $__i_0_lcssa = $22;label = 7; break; }
  case 7: 
   var $__i_0_lcssa;
   return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 var label = 0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4104)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4104)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4104)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((4104)|0));
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 var label = 0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 var label = 0;
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var label = 0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result, $this, $0, $1) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 var label = 0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 var label = 0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($__n)|(0)) > 0;
   if ($2) { label = 2; break; } else { var $__i_0_lcssa = 0;label = 7; break; }
  case 2: 
   var $3=(($this+12)|0);
   var $4=(($this+16)|0);
   var $_01 = $__s;var $__i_02 = 0;label = 3; break;
  case 3: 
   var $__i_02;
   var $_01;
   var $6=HEAP32[(($3)>>2)];
   var $7=HEAP32[(($4)>>2)];
   var $8=(($6)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $10=(($6+4)|0);
   HEAP32[(($3)>>2)]=$10;
   var $11=HEAP32[(($6)>>2)];
   var $storemerge = $11;label = 6; break;
  case 5: 
   var $13=HEAP32[(($1)>>2)];
   var $14=(($13+40)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=FUNCTION_TABLE[$15]($this);
   var $17=(($16)|(0))==-1;
   if ($17) { var $__i_0_lcssa = $__i_02;label = 7; break; } else { var $storemerge = $16;label = 6; break; }
  case 6: 
   var $storemerge;
   HEAP32[(($_01)>>2)]=$storemerge;
   var $19=((($__i_02)+(1))|0);
   var $20=(($_01+4)|0);
   var $21=(($19)|(0)) < (($__n)|(0));
   if ($21) { var $_01 = $20;var $__i_02 = $19;label = 3; break; } else { var $__i_0_lcssa = $19;label = 7; break; }
  case 7: 
   var $__i_0_lcssa;
   return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 var label = 0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2+36)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=FUNCTION_TABLE[$4]($this);
   var $6=(($5)|(0))==-1;
   if ($6) { var $_0 = -1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($this+12)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+4)|0);
   HEAP32[(($8)>>2)]=$10;
   var $11=HEAP32[(($9)>>2)];
   var $_0 = $11;label = 3; break;
  case 3: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 var label = 0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($__n)|(0)) > 0;
   if ($2) { label = 2; break; } else { var $__i_0_lcssa = 0;label = 7; break; }
  case 2: 
   var $3=(($this+24)|0);
   var $4=(($this+28)|0);
   var $__i_01 = 0;var $_02 = $__s;label = 3; break;
  case 3: 
   var $_02;
   var $__i_01;
   var $6=HEAP32[(($3)>>2)];
   var $7=HEAP32[(($4)>>2)];
   var $8=(($6)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $10=HEAP32[(($_02)>>2)];
   var $11=(($6+4)|0);
   HEAP32[(($3)>>2)]=$11;
   HEAP32[(($6)>>2)]=$10;
   label = 6; break;
  case 5: 
   var $13=HEAP32[(($1)>>2)];
   var $14=(($13+52)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=HEAP32[(($_02)>>2)];
   var $17=FUNCTION_TABLE[$15]($this, $16);
   var $18=(($17)|(0))==-1;
   if ($18) { var $__i_0_lcssa = $__i_01;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $20=(($_02+4)|0);
   var $21=((($__i_01)+(1))|0);
   var $22=(($21)|(0)) < (($__n)|(0));
   if ($22) { var $__i_01 = $21;var $_02 = $20;label = 3; break; } else { var $__i_0_lcssa = $21;label = 7; break; }
  case 7: 
   var $__i_0_lcssa;
   return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 var label = 0;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__s=sp;
   var $1=$this;
   var $2=HEAP32[(($1)>>2)];
   var $3=((($2)-(12))|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$this;
   var $_sum=((($5)+(24))|0);
   var $7=(($6+$_sum)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 14; break; } else { label = 2; break; }
  case 2: 
   var $12=(($__s)|0);
   HEAP8[($12)]=0;
   var $13=(($__s+4)|0);
   HEAP32[(($13)>>2)]=$this;
   var $_sum_i=((($5)+(16))|0);
   var $14=(($6+$_sum_i)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 15; break; }
  case 3: 
   var $_sum1_i=((($5)+(72))|0);
   var $19=(($6+$_sum1_i)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 8; break; }
  case 5: 
   HEAP8[($12)]=1;
   var $26=HEAP32[(($1)>>2)];
   var $27=((($26)-(12))|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $_sum1=((($29)+(24))|0);
   var $30=(($6+$_sum1)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=$32;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 7; break; } else { label = 15; break; }
  case 7: 
   var $41=HEAP32[(($1)>>2)];
   var $42=((($41)-(12))|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($6+$44)|0);
   var $46=$45;
   var $_sum2=((($44)+(16))|0);
   var $47=(($6+$_sum2)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 | 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46, $50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 9; break; }
  case 8: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1,0); $52$1 = tempRet0;
   var $53=$52$0;
   var $_0 = $53;label = 10; break;
  case 9: 
   var $55$0 = ___cxa_find_matching_catch(-1, -1,0); $55$1 = tempRet0;
   var $56=$55$0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   var $_0 = $56;label = 10; break;
  case 10: 
   var $_0;
   var $58=___cxa_begin_catch($_0);
   var $59=HEAP32[(($1)>>2)];
   var $60=((($59)-(12))|0);
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $_sum5=((($62)+(16))|0);
   var $63=(($6+$_sum5)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$65 | 1;
   HEAP32[(($64)>>2)]=$66;
   var $_sum6=((($62)+(20))|0);
   var $67=(($6+$_sum6)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=$69 & 1;
   var $71=(($70)|(0))==0;
   if ($71) { label = 13; break; } else { label = 11; break; }
  case 11: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   throw "Reached an unreachable!";
  case 13: 
   ___cxa_end_catch();
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return $this;
  case 15: 
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   label = 14; break;
  case 16: 
   var $75$0 = ___cxa_find_matching_catch(-1, -1); $75$1 = tempRet0;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   ___resumeException($75$0)
  case 18: 
   var $78$0 = ___cxa_find_matching_catch(-1, -1,0); $78$1 = tempRet0;
   var $79=$78$0;
   ___clang_call_terminate($79);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+16)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2 | 1;
   HEAP32[(($1)>>2)]=$3;
   var $4=(($this+20)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   ___cxa_rethrow();
   throw "Reached an unreachable!";
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__s=sp;
   var $1=$this;
   var $2=HEAP32[(($1)>>2)];
   var $3=((($2)-(12))|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$this;
   var $_sum=((($5)+(24))|0);
   var $7=(($6+$_sum)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 14; break; } else { label = 2; break; }
  case 2: 
   var $12=(($__s)|0);
   HEAP8[($12)]=0;
   var $13=(($__s+4)|0);
   HEAP32[(($13)>>2)]=$this;
   var $_sum_i=((($5)+(16))|0);
   var $14=(($6+$_sum_i)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 15; break; }
  case 3: 
   var $_sum1_i=((($5)+(72))|0);
   var $19=(($6+$_sum1_i)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 8; break; }
  case 5: 
   HEAP8[($12)]=1;
   var $26=HEAP32[(($1)>>2)];
   var $27=((($26)-(12))|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $_sum1=((($29)+(24))|0);
   var $30=(($6+$_sum1)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=$32;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 7; break; } else { label = 15; break; }
  case 7: 
   var $41=HEAP32[(($1)>>2)];
   var $42=((($41)-(12))|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($6+$44)|0);
   var $46=$45;
   var $_sum2=((($44)+(16))|0);
   var $47=(($6+$_sum2)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 | 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46, $50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 9; break; }
  case 8: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1,0); $52$1 = tempRet0;
   var $53=$52$0;
   var $_0 = $53;label = 10; break;
  case 9: 
   var $55$0 = ___cxa_find_matching_catch(-1, -1,0); $55$1 = tempRet0;
   var $56=$55$0;
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   var $_0 = $56;label = 10; break;
  case 10: 
   var $_0;
   var $58=___cxa_begin_catch($_0);
   var $59=HEAP32[(($1)>>2)];
   var $60=((($59)-(12))|0);
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $_sum5=((($62)+(16))|0);
   var $63=(($6+$_sum5)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$65 | 1;
   HEAP32[(($64)>>2)]=$66;
   var $_sum6=((($62)+(20))|0);
   var $67=(($6+$_sum6)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=$69 & 1;
   var $71=(($70)|(0))==0;
   if ($71) { label = 13; break; } else { label = 11; break; }
  case 11: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   throw "Reached an unreachable!";
  case 13: 
   ___cxa_end_catch();
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return $this;
  case 15: 
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   label = 14; break;
  case 16: 
   var $75$0 = ___cxa_find_matching_catch(-1, -1); $75$1 = tempRet0;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   ___resumeException($75$0)
  case 18: 
   var $78$0 = ___cxa_find_matching_catch(-1, -1,0); $78$1 = tempRet0;
   var $79=$78$0;
   ___clang_call_terminate($79);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this, $__os) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP8[($1)]=0;
   var $2=(($this+4)|0);
   HEAP32[(($2)>>2)]=$__os;
   var $3=$__os;
   var $4=HEAP32[(($3)>>2)];
   var $5=((($4)-(12))|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$__os;
   var $_sum_i=((($7)+(16))|0);
   var $9=(($8+$_sum_i)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==0;
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $_sum1_i=((($7)+(72))|0);
   var $14=(($8+$_sum1_i)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $19=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16);
   label = 4; break;
  case 4: 
   HEAP8[($1)]=1;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 var label = 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=((($4)-(12))|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$2;
   var $_sum=((($7)+(24))|0);
   var $9=(($8+$_sum)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==0;
   if ($12) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $_sum1=((($7)+(16))|0);
   var $14=(($8+$_sum1)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $_sum2=((($7)+(4))|0);
   var $19=(($8+$_sum2)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 8192;
   var $23=(($22)|(0))==0;
   if ($23) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $25=__ZSt18uncaught_exceptionv();
   if ($25) { label = 9; break; } else { label = 5; break; }
  case 5: 
   var $27=HEAP32[(($1)>>2)];
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(12))|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $_sum3=((($32)+(24))|0);
   var $34=(($33+$_sum3)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=$36;
   var $38=$36;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $43=(($42)|(0))==-1;
   if ($43) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $45=HEAP32[(($1)>>2)];
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=((($47)-(12))|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   var $51=$45;
   var $52=(($51+$50)|0);
   var $53=$52;
   var $_sum4=((($50)+(16))|0);
   var $54=(($51+$_sum4)|0);
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=$56 | 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53, $57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1,0); $59$1 = tempRet0;
   var $60=$59$0;
   var $61=___cxa_begin_catch($60);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   return;
  case 10: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1,0); $63$1 = tempRet0;
   var $64=$63$0;
   ___clang_call_terminate($64);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf($this, $__n) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(sp)+(8);
   var $__s=(sp)+(16);
   var $3=(sp)+(24);
   var $4=(sp)+(32);
   var $5=(($__s)|0);
   HEAP8[($5)]=0;
   var $6=(($__s+4)|0);
   HEAP32[(($6)>>2)]=$this;
   var $7=$this;
   var $8=HEAP32[(($7)>>2)];
   var $9=((($8)-(12))|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$this;
   var $_sum_i_i=((($11)+(16))|0);
   var $13=(($12+$_sum_i_i)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $_sum1_i_i=((($11)+(72))|0);
   var $18=(($12+$_sum1_i_i)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==0;
   if ($21) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $23 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
  case 4: 
   HEAP8[($5)]=1;
   var $25=HEAP32[(($7)>>2)];
   var $26=((($25)-(12))|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $_sum4=((($28)+(28))|0);
   var $29=(($12+$_sum4)|0);
   var $30=$29;
   __ZNSt3__16localeC2ERKS0_($3, $30);
   var $31 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3, 13352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 16; break; }
  case 5: 
   var $32=$31;
   __ZNSt3__16localeD2Ev($3);
   var $33=HEAP32[(($7)>>2)];
   var $34=((($33)-(12))|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(($12+$36)|0);
   var $_sum=((($36)+(24))|0);
   var $38=(($12+$_sum)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$40;
   var $42=$37;
   var $_sum1=((($36)+(76))|0);
   var $43=(($12+$_sum1)|0);
   var $44=$43;
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))==-1;
   var $extract_t8=(($45) & 255);
   if ($46) { label = 6; break; } else { var $_off0 = $extract_t8;label = 10; break; }
  case 6: 
   var $_sum7=((($36)+(28))|0);
   var $48=(($12+$_sum7)|0);
   var $49=$48;
   __ZNSt3__16localeC2ERKS0_($2, $49);
   var $50 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2, 13704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $51=$50;
   var $52=$50;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+28)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($51, 32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $58$0 = ___cxa_find_matching_catch(-1, -1,0); $58$1 = tempRet0;
   __ZNSt3__16localeD2Ev($2);
   var $eh_lpad_body$1 = $58$1;var $eh_lpad_body$0 = $58$0;label = 15; break;
  case 9: 
   __ZNSt3__16localeD2Ev($2);
   var $59=(($56 << 24) >> 24);
   HEAP32[(($44)>>2)]=$59;
   var $_off0 = $56;label = 10; break;
  case 10: 
   var $_off0;
   var $60=$__n;
   var $61=$31;
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+32)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($1)|0);
   HEAP32[(($65)>>2)]=$41;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($4, $32, $1, $42, $_off0, $60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $66=(($4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==0;
   if ($68) { label = 12; break; } else { label = 17; break; }
  case 12: 
   var $70=HEAP32[(($7)>>2)];
   var $71=((($70)-(12))|0);
   var $72=$71;
   var $73=HEAP32[(($72)>>2)];
   var $74=(($12+$73)|0);
   var $75=$74;
   var $_sum2=((($73)+(16))|0);
   var $76=(($12+$_sum2)|0);
   var $77=$76;
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 | 5;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($75, $79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 14; break; }
  case 13: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1,0); $81$1 = tempRet0;
   var $82=$81$0;
   var $_1 = $82;label = 19; break;
  case 14: 
   var $84$0 = ___cxa_find_matching_catch(-1, -1,0); $84$1 = tempRet0;
   var $eh_lpad_body$1 = $84$1;var $eh_lpad_body$0 = $84$0;label = 15; break;
  case 15: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $85=$eh_lpad_body$0;
   var $_0 = $85;label = 18; break;
  case 16: 
   var $87$0 = ___cxa_find_matching_catch(-1, -1,0); $87$1 = tempRet0;
   var $88=$87$0;
   __ZNSt3__16localeD2Ev($3);
   var $_0 = $88;label = 18; break;
  case 17: 
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   label = 23; break;
  case 18: 
   var $_0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   var $_1 = $_0;label = 19; break;
  case 19: 
   var $_1;
   var $91=___cxa_begin_catch($_1);
   var $92=HEAP32[(($7)>>2)];
   var $93=((($92)-(12))|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $_sum5=((($95)+(16))|0);
   var $96=(($12+$_sum5)|0);
   var $97=$96;
   var $98=HEAP32[(($97)>>2)];
   var $99=$98 | 1;
   HEAP32[(($97)>>2)]=$99;
   var $_sum6=((($95)+(20))|0);
   var $100=(($12+$_sum6)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=$102 & 1;
   var $104=(($103)|(0))==0;
   if ($104) { label = 22; break; } else { label = 20; break; }
  case 20: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 24; break; }
  case 21: 
   throw "Reached an unreachable!";
  case 22: 
   ___cxa_end_catch();
   label = 23; break;
  case 23: 
   STACKTOP = sp;
   return $this;
  case 24: 
   var $108$0 = ___cxa_find_matching_catch(-1, -1); $108$1 = tempRet0;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 26; break; }
  case 25: 
   ___resumeException($108$0)
  case 26: 
   var $111$0 = ___cxa_find_matching_catch(-1, -1,0); $111$1 = tempRet0;
   var $112=$111$0;
   ___clang_call_terminate($112);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__s=sp;
   var $1=(($__s)|0);
   HEAP8[($1)]=0;
   var $2=(($__s+4)|0);
   HEAP32[(($2)>>2)]=$this;
   var $3=$this;
   var $4=HEAP32[(($3)>>2)];
   var $5=((($4)-(12))|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$this;
   var $_sum_i_i=((($7)+(16))|0);
   var $9=(($8+$_sum_i_i)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==0;
   if ($12) { label = 2; break; } else { label = 18; break; }
  case 2: 
   var $_sum1_i_i=((($7)+(72))|0);
   var $14=(($8+$_sum1_i_i)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $19 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 11; break; }
  case 4: 
   HEAP8[($1)]=1;
   var $21=HEAP32[(($3)>>2)];
   var $22=((($21)-(12))|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $_sum=((($24)+(24))|0);
   var $25=(($8+$_sum)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($27)|(0))==0;
   if ($29) { var $__o_sroa_0_0 = $28;label = 9; break; } else { label = 5; break; }
  case 5: 
   var $31=(($27+24)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($27+28)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(($33)|(0))==(($36)|(0));
   if ($37) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $39=$27;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+52)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($__c)&(255));
   var $44 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($28, $43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01 = $44;label = 8; break; } else { label = 12; break; }
  case 7: 
   var $46=(($33+1)|0);
   HEAP32[(($32)>>2)]=$46;
   HEAP8[($33)]=$__c;
   var $47=(($__c)&(255));
   var $_01 = $47;label = 8; break;
  case 8: 
   var $_01;
   var $48=(($_01)|(0))==-1;
   var $_=$48 ? 0 : $28;
   var $__o_sroa_0_0 = $_;label = 9; break;
  case 9: 
   var $__o_sroa_0_0;
   var $49=(($__o_sroa_0_0)|(0))==0;
   if ($49) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $51=HEAP32[(($3)>>2)];
   var $52=((($51)-(12))|0);
   var $53=$52;
   var $54=HEAP32[(($53)>>2)];
   var $55=(($8+$54)|0);
   var $56=$55;
   var $_sum2=((($54)+(16))|0);
   var $57=(($8+$_sum2)|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $60=$59 | 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($56, $60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 12; break; }
  case 11: 
   var $62$0 = ___cxa_find_matching_catch(-1, -1,0); $62$1 = tempRet0;
   var $63=$62$0;
   var $_0 = $63;label = 13; break;
  case 12: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1,0); $65$1 = tempRet0;
   var $66=$65$0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   var $_0 = $66;label = 13; break;
  case 13: 
   var $_0;
   var $68=___cxa_begin_catch($_0);
   var $69=HEAP32[(($3)>>2)];
   var $70=((($69)-(12))|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum4=((($72)+(16))|0);
   var $73=(($8+$_sum4)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=$75 | 1;
   HEAP32[(($74)>>2)]=$76;
   var $_sum5=((($72)+(20))|0);
   var $77=(($8+$_sum5)|0);
   var $78=$77;
   var $79=HEAP32[(($78)>>2)];
   var $80=$79 & 1;
   var $81=(($80)|(0))==0;
   if ($81) { label = 16; break; } else { label = 14; break; }
  case 14: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 19; break; }
  case 15: 
   throw "Reached an unreachable!";
  case 16: 
   ___cxa_end_catch();
   label = 17; break;
  case 17: 
   STACKTOP = sp;
   return $this;
  case 18: 
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   label = 17; break;
  case 19: 
   var $85$0 = ___cxa_find_matching_catch(-1, -1); $85$1 = tempRet0;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 21; break; }
  case 20: 
   ___resumeException($85$0)
  case 21: 
   var $88$0 = ___cxa_find_matching_catch(-1, -1,0); $88$1 = tempRet0;
   var $89=$88$0;
   ___clang_call_terminate($89);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=((($4)-(12))|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$2;
   var $_sum=((($7)+(24))|0);
   var $9=(($8+$_sum)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==0;
   if ($12) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $_sum1=((($7)+(16))|0);
   var $14=(($8+$_sum1)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $_sum2=((($7)+(4))|0);
   var $19=(($8+$_sum2)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 8192;
   var $23=(($22)|(0))==0;
   if ($23) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $25=__ZSt18uncaught_exceptionv();
   if ($25) { label = 9; break; } else { label = 5; break; }
  case 5: 
   var $27=HEAP32[(($1)>>2)];
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(12))|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $_sum3=((($32)+(24))|0);
   var $34=(($33+$_sum3)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=$36;
   var $38=$36;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $43=(($42)|(0))==-1;
   if ($43) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $45=HEAP32[(($1)>>2)];
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=((($47)-(12))|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   var $51=$45;
   var $52=(($51+$50)|0);
   var $53=$52;
   var $_sum4=((($50)+(16))|0);
   var $54=(($51+$_sum4)|0);
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=$56 | 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53, $57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1,0); $59$1 = tempRet0;
   var $60=$59$0;
   var $61=___cxa_begin_catch($60);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   return;
  case 10: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1,0); $63$1 = tempRet0;
   var $64=$63$0;
   ___clang_call_terminate($64);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 var label = 0;
 return ((1448)|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result, $this, $ev) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($ev)|(0))==1;
   if ($1) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=(($this)|0);
   __ZNKSt3__112__do_message7messageEi($agg_result, $3, $ev);
   label = 4; break;
  case 3: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result, ((1672)|0), 35);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 var label = 0;
 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__lo2)|(0))==(($__hi2)|(0));
   if ($1) { var $_02_lcssa = $__lo1;label = 6; break; } else { var $_024 = $__lo1;var $_015 = $__lo2;label = 2; break; }
  case 2: 
   var $_015;
   var $_024;
   var $2=(($_024)|(0))==(($__hi1)|(0));
   if ($2) { var $_0 = -1;label = 7; break; } else { label = 3; break; }
  case 3: 
   var $4=HEAP8[($_024)];
   var $5=HEAP8[($_015)];
   var $6=(($4 << 24) >> 24) < (($5 << 24) >> 24);
   if ($6) { var $_0 = -1;label = 7; break; } else { label = 4; break; }
  case 4: 
   var $8=(($5 << 24) >> 24) < (($4 << 24) >> 24);
   if ($8) { var $_0 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $10=(($_024+1)|0);
   var $11=(($_015+1)|0);
   var $12=(($11)|(0))==(($__hi2)|(0));
   if ($12) { var $_02_lcssa = $10;label = 6; break; } else { var $_024 = $10;var $_015 = $11;label = 2; break; }
  case 6: 
   var $_02_lcssa;
   var $13=(($_02_lcssa)|(0))!=(($__hi1)|(0));
   var $14=(($13)&(1));
   var $_0 = $14;label = 7; break;
  case 7: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$__lo;
   var $2=$__hi;
   var $3=((($2)-($1))|0);
   var $4=(($3)|(0))==-1;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$agg_result;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
   label = 5; break;
  case 3: 
   var $7=(($3)>>>(0)) < 11;
   if ($7) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $9=$3 << 1;
   var $10=(($9) & 255);
   var $11=$agg_result;
   var $12=$agg_result;
   HEAP8[($12)]=$10;
   var $13=(($11+1)|0);
   var $__p_0_ph_i = $13;label = 6; break;
  case 5: 
   var $14=((($3)+(16))|0);
   var $15=$14 & -16;
   var $16=__Znwj($15);
   var $17=(($agg_result+8)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=$15 | 1;
   var $19=(($agg_result)|0);
   HEAP32[(($19)>>2)]=$18;
   var $20=(($agg_result+4)|0);
   HEAP32[(($20)>>2)]=$3;
   var $__p_0_ph_i = $16;label = 6; break;
  case 6: 
   var $__p_0_ph_i;
   var $21=(($__lo)|(0))==(($__hi)|(0));
   if ($21) { var $__p_0_lcssa_i = $__p_0_ph_i;label = 10; break; } else { label = 7; break; }
  case 7: 
   var $22=(((-$1))|0);
   var $scevgep_i=(($__hi+$22)|0);
   var $__p_04_i = $__p_0_ph_i;var $_05_i = $__lo;label = 8; break;
  case 8: 
   var $_05_i;
   var $__p_04_i;
   var $24=HEAP8[($_05_i)];
   HEAP8[($__p_04_i)]=$24;
   var $25=(($_05_i+1)|0);
   var $26=(($__p_04_i+1)|0);
   var $27=(($25)|(0))==(($__hi)|(0));
   if ($27) { label = 9; break; } else { var $__p_04_i = $26;var $_05_i = $25;label = 8; break; }
  case 9: 
   var $scevgep6_i=$scevgep_i;
   var $scevgep7_i=(($__p_0_ph_i+$scevgep6_i)|0);
   var $__p_0_lcssa_i = $scevgep7_i;label = 10; break;
  case 10: 
   var $__p_0_lcssa_i;
   HEAP8[($__p_0_lcssa_i)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__lo)|(0))==(($__hi)|(0));
   if ($1) { var $__h_0_lcssa = 0;label = 3; break; } else { var $__p_01 = $__lo;var $__h_02 = 0;label = 2; break; }
  case 2: 
   var $__h_02;
   var $__p_01;
   var $2=$__h_02 << 4;
   var $3=HEAP8[($__p_01)];
   var $4=(($3 << 24) >> 24);
   var $5=((($4)+($2))|0);
   var $6=$5 & -268435456;
   var $7=$6 >>> 24;
   var $8=$7 | $6;
   var $9=$8 ^ $5;
   var $10=(($__p_01+1)|0);
   var $11=(($10)|(0))==(($__hi)|(0));
   if ($11) { var $__h_0_lcssa = $9;label = 3; break; } else { var $__p_01 = $10;var $__h_02 = $9;label = 2; break; }
  case 3: 
   var $__h_0_lcssa;
   return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__lo2)|(0))==(($__hi2)|(0));
   if ($1) { var $_02_lcssa = $__lo1;label = 6; break; } else { var $_024 = $__lo1;var $_015 = $__lo2;label = 2; break; }
  case 2: 
   var $_015;
   var $_024;
   var $2=(($_024)|(0))==(($__hi1)|(0));
   if ($2) { var $_0 = -1;label = 7; break; } else { label = 3; break; }
  case 3: 
   var $4=HEAP32[(($_024)>>2)];
   var $5=HEAP32[(($_015)>>2)];
   var $6=(($4)|(0)) < (($5)|(0));
   if ($6) { var $_0 = -1;label = 7; break; } else { label = 4; break; }
  case 4: 
   var $8=(($5)|(0)) < (($4)|(0));
   if ($8) { var $_0 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $10=(($_024+4)|0);
   var $11=(($_015+4)|0);
   var $12=(($11)|(0))==(($__hi2)|(0));
   if ($12) { var $_02_lcssa = $10;label = 6; break; } else { var $_024 = $10;var $_015 = $11;label = 2; break; }
  case 6: 
   var $_02_lcssa;
   var $13=(($_02_lcssa)|(0))!=(($__hi1)|(0));
   var $14=(($13)&(1));
   var $_0 = $14;label = 7; break;
  case 7: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$__lo;
   var $2=$__hi;
   var $3=((($2)-($1))|0);
   var $4=$3 >> 2;
   var $5=(($4)>>>(0)) > 1073741822;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$agg_result;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
   label = 3; break;
  case 3: 
   var $9=(($4)>>>(0)) < 2;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$3 >>> 1;
   var $12=(($11) & 255);
   var $13=$agg_result;
   HEAP8[($13)]=$12;
   var $14=(($agg_result+4)|0);
   var $__p_0_ph_i = $14;label = 6; break;
  case 5: 
   var $15=((($4)+(4))|0);
   var $16=$15 & -4;
   var $17=$16 << 2;
   var $18=__Znwj($17);
   var $19=$18;
   var $20=(($agg_result+8)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=$16 | 1;
   var $22=(($agg_result)|0);
   HEAP32[(($22)>>2)]=$21;
   var $23=(($agg_result+4)|0);
   HEAP32[(($23)>>2)]=$4;
   var $__p_0_ph_i = $19;label = 6; break;
  case 6: 
   var $__p_0_ph_i;
   var $24=(($__lo)|(0))==(($__hi)|(0));
   if ($24) { var $__p_0_lcssa_i = $__p_0_ph_i;label = 10; break; } else { label = 7; break; }
  case 7: 
   var $scevgep_i=((($__hi)-(4))|0);
   var $scevgep6_i=$scevgep_i;
   var $25=(((-$1))|0);
   var $uglygep_i=(($scevgep6_i+$25)|0);
   var $uglygep7_i=$uglygep_i;
   var $26=$uglygep7_i >>> 2;
   var $__p_04_i = $__p_0_ph_i;var $_05_i = $__lo;label = 8; break;
  case 8: 
   var $_05_i;
   var $__p_04_i;
   var $28=HEAP32[(($_05_i)>>2)];
   HEAP32[(($__p_04_i)>>2)]=$28;
   var $29=(($_05_i+4)|0);
   var $30=(($__p_04_i+4)|0);
   var $31=(($29)|(0))==(($__hi)|(0));
   if ($31) { label = 9; break; } else { var $__p_04_i = $30;var $_05_i = $29;label = 8; break; }
  case 9: 
   var $32=((($26)+(1))|0);
   var $scevgep8_i=(($__p_0_ph_i+($32<<2))|0);
   var $__p_0_lcssa_i = $scevgep8_i;label = 10; break;
  case 10: 
   var $__p_0_lcssa_i;
   HEAP32[(($__p_0_lcssa_i)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__lo)|(0))==(($__hi)|(0));
   if ($1) { var $__h_0_lcssa = 0;label = 3; break; } else { var $__p_01 = $__lo;var $__h_02 = 0;label = 2; break; }
  case 2: 
   var $__h_02;
   var $__p_01;
   var $2=$__h_02 << 4;
   var $3=HEAP32[(($__p_01)>>2)];
   var $4=((($3)+($2))|0);
   var $5=$4 & -268435456;
   var $6=$5 >>> 24;
   var $7=$6 | $5;
   var $8=$7 ^ $4;
   var $9=(($__p_01+4)|0);
   var $10=(($9)|(0))==(($__hi)|(0));
   if ($10) { var $__h_0_lcssa = $8;label = 3; break; } else { var $__p_01 = $9;var $__h_02 = $8;label = 2; break; }
  case 3: 
   var $__h_0_lcssa;
   return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i4=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__lv=(sp)+(32);
   var $1=(sp)+(40);
   var $2=(sp)+(48);
   var $3=(sp)+(56);
   var $4=(sp)+(64);
   var $5=(sp)+(72);
   var $__names=(sp)+(80);
   var $6=(sp)+(104);
   var $7=(($__iob+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & 1;
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   HEAP32[(($__lv)>>2)]=-1;
   var $12=$this;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($__b)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($2)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=(($__e)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($3)|0);
   HEAP32[(($21)>>2)]=$20;
   FUNCTION_TABLE[$15]($1, $this, $2, $3, $__iob, $__err, $__lv);
   var $22=(($1)|0);
   var $23=HEAP32[(($22)>>2)];
   HEAP32[(($16)>>2)]=$23;
   var $24=HEAP32[(($__lv)>>2)];
   if ((($24)|(0))==0) {
    label = 3; break;
   }
   else if ((($24)|(0))==1) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 3: 
   HEAP8[($__v)]=0;
   label = 6; break;
  case 4: 
   HEAP8[($__v)]=1;
   label = 6; break;
  case 5: 
   HEAP8[($__v)]=1;
   HEAP32[(($__err)>>2)]=4;
   label = 6; break;
  case 6: 
   var $29=(($agg_result)|0);
   HEAP32[(($29)>>2)]=$23;
   label = 28; break;
  case 7: 
   __ZNKSt3__18ios_base6getlocEv($4, $__iob);
   var $31=(($4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $34=HEAP32[((((13704)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $37=(($__p_i_i_i)|0);
   HEAP32[(($37)>>2)]=13704;
   var $38=(($__p_i_i_i+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 23; break; }
  case 9: 
   var $40=HEAP32[((((13708)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 23; break; }
  case 12: 
   throw "Reached an unreachable!";
  case 13: 
   var $56=$52;
   var $57=HEAP32[(($31)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   __ZNKSt3__18ios_base6getlocEv($5, $__iob);
   var $60=(($5)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$__p_i_i_i4;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $63=HEAP32[((((13320)|0))>>2)];
   var $64=(($63)|(0))==-1;
   if ($64) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $66=(($__p_i_i_i4)|0);
   HEAP32[(($66)>>2)]=13320;
   var $67=(($__p_i_i_i4+4)|0);
   HEAP32[(($67)>>2)]=(26);
   var $68=(($__p_i_i_i4+8)|0);
   HEAP32[(($68)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $62, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 24; break; }
  case 15: 
   var $69=HEAP32[((((13324)|0))>>2)];
   var $70=((($69)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $71=(($61+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($61+8)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$72;
   var $76=$74;
   var $77=((($75)-($76))|0);
   var $78=$77 >> 2;
   var $79=(($78)>>>(0)) > (($70)>>>(0));
   if ($79) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $80=(($74+($70<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))==0;
   if ($82) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $83=___cxa_allocate_exception(4);
   var $84=$83;
   __ZNSt8bad_castC2Ev($84);
   (function() { try { __THREW__ = 0; return ___cxa_throw($83, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 24; break; }
  case 18: 
   throw "Reached an unreachable!";
  case 19: 
   var $85=$81;
   var $86=HEAP32[(($60)>>2)];
   var $87=(($86)|0);
   var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
   var $89=(($__names)|0);
   var $90=$81;
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+24)|0);
   var $93=HEAP32[(($92)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($89, $85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { var $_02 = $89;label = 25; break; }
  case 20: 
   var $94=(($__names+12)|0);
   var $95=HEAP32[(($90)>>2)];
   var $96=(($95+28)|0);
   var $97=HEAP32[(($96)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($94, $85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { var $_02 = $94;label = 25; break; }
  case 21: 
   var $98=(($__e)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($6)|0);
   HEAP32[(($100)>>2)]=$99;
   var $101=(($__names+24)|0);
   var $102 = (function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $6, $89, $101, $56, $__err, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $103=(($102)|(0))==(($89)|(0));
   var $104=(($103)&(1));
   HEAP8[($__v)]=$104;
   var $105=(($__b)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($agg_result)|0);
   HEAP32[(($107)>>2)]=$106;
   var $108=(($__names+12)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($108);
   var $109=(($__names)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($109);
   label = 28; break;
  case 23: 
   var $111$0 = ___cxa_find_matching_catch(-1, -1); $111$1 = tempRet0;
   var $112=$111$0;
   var $113=$111$1;
   var $114=HEAP32[(($31)>>2)];
   var $115=(($114)|0);
   var $116=__ZNSt3__114__shared_count16__release_sharedEv($115);
   var $_0 = $112;var $_01 = $113;label = 29; break;
  case 24: 
   var $118$0 = ___cxa_find_matching_catch(-1, -1); $118$1 = tempRet0;
   var $119=$118$0;
   var $120=$118$1;
   var $121=HEAP32[(($60)>>2)];
   var $122=(($121)|0);
   var $123=__ZNSt3__114__shared_count16__release_sharedEv($122);
   var $_0 = $119;var $_01 = $120;label = 29; break;
  case 25: 
   var $_02;
   var $125$0 = ___cxa_find_matching_catch(-1, -1); $125$1 = tempRet0;
   var $126=$125$0;
   var $127=$125$1;
   var $128=(($89)|(0))==(($_02)|(0));
   if ($128) { var $_0 = $126;var $_01 = $127;label = 29; break; } else { var $129 = $_02;label = 26; break; }
  case 26: 
   var $129;
   var $130=((($129)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($130);
   var $131=(($130)|(0))==(($89)|(0));
   if ($131) { var $_0 = $126;var $_01 = $127;label = 29; break; } else { var $129 = $130;label = 26; break; }
  case 27: 
   var $132$0 = ___cxa_find_matching_catch(-1, -1); $132$1 = tempRet0;
   var $133=$132$0;
   var $134=(($__names+12)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($134);
   var $135=(($__names)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($135);
   var $136=$132$1;
   var $_0 = $133;var $_01 = $136;label = 29; break;
  case 28: 
   STACKTOP = sp;
   return;
  case 29: 
   var $_01;
   var $_0;
   var $138$0=$_0;
   var $138$1=0;
   var $139$0=$138$0;
   var $139$1=$_01;
   ___resumeException($139$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__statbuf=sp;
   var $1=$__ke;
   var $2=$__kb;
   var $3=((($1)-($2))|0);
   var $4=((((($3)|(0)))/(12))&-1);
   var $5=(($__statbuf)|0);
   var $6=(($4)>>>(0)) > 100;
   if ($6) { label = 2; break; } else { var $__status_0 = $5;var $__stat_hold_sroa_0_1 = 0;label = 10; break; }
  case 2: 
   var $8=_malloc($4);
   var $9=(($8)|(0))==0;
   if ($9) { label = 3; break; } else { var $__status_0 = $8;var $__stat_hold_sroa_0_1 = $8;label = 10; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0 = 0;var $__stat_hold_sroa_0_1 = 0;label = 10; break; } else { label = 4; break; }
  case 4: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   var $266$1 = $11$1;var $266$0 = $11$0;label = 104; break;
  case 5: 
   var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); $lpad_us_lcssa$1 = tempRet0;
   var $lpad_phi$1 = $lpad_us_lcssa$1;var $lpad_phi$0 = $lpad_us_lcssa$0;label = 8; break;
  case 6: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 8; break;
  case 7: 
   var $lpad_nonloopexit43$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit43$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit43$1;var $lpad_phi$0 = $lpad_nonloopexit43$0;label = 8; break;
  case 8: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $12=(($__stat_hold_sroa_0_1)|(0))==0;
   if ($12) { var $266$1 = $lpad_phi$1;var $266$0 = $lpad_phi$0;label = 104; break; } else { label = 9; break; }
  case 9: 
   _free($__stat_hold_sroa_0_1);
   var $266$1 = $lpad_phi$1;var $266$0 = $lpad_phi$0;label = 104; break;
  case 10: 
   var $__stat_hold_sroa_0_1;
   var $__status_0;
   var $14=(($__kb)|(0))==(($__ke)|(0));
   if ($14) { var $__n_might_match_0_lcssa = $4;var $__n_does_match_0_lcssa = 0;label = 11; break; } else { var $__n_might_match_053 = $4;var $__n_does_match_054 = 0;var $__st_055 = $__status_0;var $__ky_056 = $__kb;label = 12; break; }
  case 11: 
   var $__n_does_match_0_lcssa;
   var $__n_might_match_0_lcssa;
   var $15=(($__b)|0);
   var $16=(($__e)|0);
   var $17=$__ct;
   var $__indx_0 = 0;var $__n_does_match_2 = $__n_does_match_0_lcssa;var $__n_might_match_2 = $__n_might_match_0_lcssa;label = 19; break;
  case 12: 
   var $__ky_056;
   var $__st_055;
   var $__n_does_match_054;
   var $__n_might_match_053;
   var $18=$__ky_056;
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=$20 & 1;
   var $22=(($21)|(0))==0;
   if ($22) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $24=(($__ky_056+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $28 = $25;label = 15; break;
  case 14: 
   var $27=$20 >>> 1;
   var $28 = $27;label = 15; break;
  case 15: 
   var $28;
   var $29=(($28)|(0))==0;
   if ($29) { label = 17; break; } else { label = 16; break; }
  case 16: 
   HEAP8[($__st_055)]=1;
   var $__n_does_match_1 = $__n_does_match_054;var $__n_might_match_1 = $__n_might_match_053;label = 18; break;
  case 17: 
   HEAP8[($__st_055)]=2;
   var $32=((($__n_might_match_053)-(1))|0);
   var $33=((($__n_does_match_054)+(1))|0);
   var $__n_does_match_1 = $33;var $__n_might_match_1 = $32;label = 18; break;
  case 18: 
   var $__n_might_match_1;
   var $__n_does_match_1;
   var $35=(($__ky_056+12)|0);
   var $36=(($__st_055+1)|0);
   var $37=(($35)|(0))==(($__ke)|(0));
   if ($37) { var $__n_might_match_0_lcssa = $__n_might_match_1;var $__n_does_match_0_lcssa = $__n_does_match_1;label = 11; break; } else { var $__n_might_match_053 = $__n_might_match_1;var $__n_does_match_054 = $__n_does_match_1;var $__st_055 = $36;var $__ky_056 = $35;label = 12; break; }
  case 19: 
   var $__n_might_match_2;
   var $__n_does_match_2;
   var $__indx_0;
   var $39=HEAP32[(($15)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { var $55 = 0;label = 25; break; } else { label = 20; break; }
  case 20: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 21; break; } else { var $55 = $39;label = 25; break; }
  case 21: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 6; break; }
  case 22: 
   var $53=(($52)|(0))==-1;
   if ($53) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $_pre=HEAP32[(($15)>>2)];
   var $55 = $_pre;label = 25; break;
  case 24: 
   HEAP32[(($15)>>2)]=0;
   var $55 = 0;label = 25; break;
  case 25: 
   var $55;
   var $56=(($55)|(0))==0;
   var $57=HEAP32[(($16)>>2)];
   var $58=(($57)|(0))==0;
   if ($58) { var $75 = $55;var $74 = 0;label = 31; break; } else { label = 26; break; }
  case 26: 
   var $60=(($57+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($57+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61)|(0))==(($63)|(0));
   if ($64) { label = 27; break; } else { var $73 = $57;label = 30; break; }
  case 27: 
   var $66=$57;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+36)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 6; break; }
  case 28: 
   var $71=(($70)|(0))==-1;
   if ($71) { label = 29; break; } else { var $73 = $57;label = 30; break; }
  case 29: 
   HEAP32[(($16)>>2)]=0;
   var $73 = 0;label = 30; break;
  case 30: 
   var $73;
   var $_pr=HEAP32[(($15)>>2)];
   var $75 = $_pr;var $74 = $73;label = 31; break;
  case 31: 
   var $74;
   var $75;
   var $76=(($74)|(0))==0;
   var $77=$56 ^ $76;
   var $78=(($__n_might_match_2)|(0))!=0;
   var $_=$77 & $78;
   if ($_) { label = 32; break; } else { label = 81; break; }
  case 32: 
   var $80=(($75+12)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($75+16)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($81)|(0))==(($83)|(0));
   if ($84) { label = 33; break; } else { label = 35; break; }
  case 33: 
   var $86=$75;
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+36)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 6; break; }
  case 34: 
   var $extract_t=(($90) & 255);
   var $_04_off0 = $extract_t;label = 36; break;
  case 35: 
   var $92=HEAP8[($81)];
   var $_04_off0 = $92;label = 36; break;
  case 36: 
   var $_04_off0;
   if ($__case_sensitive) { var $__c_0 = $_04_off0;label = 38; break; } else { label = 37; break; }
  case 37: 
   var $94=HEAP32[(($17)>>2)];
   var $95=(($94+12)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct, $_04_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0 = $97;label = 38; break; } else { label = 6; break; }
  case 38: 
   var $__c_0;
   if ($14) { var $__n_does_match_7 = $__n_does_match_2;var $__n_might_match_3_lcssa69 = $__n_might_match_2;label = 80; break; } else { label = 39; break; }
  case 39: 
   var $98=((($__indx_0)+(1))|0);
   if ($__case_sensitive) { var $__n_might_match_323_us = $__n_might_match_2;var $__n_does_match_324_us = $__n_does_match_2;var $__st_125_us = $__status_0;var $__consume_0_off027_us = 0;var $__ky1_028_us = $__kb;label = 40; break; } else { var $__n_might_match_323 = $__n_might_match_2;var $__n_does_match_324 = $__n_does_match_2;var $__st_125 = $__status_0;var $__consume_0_off027 = 0;var $__ky1_028 = $__kb;label = 53; break; }
  case 40: 
   var $__ky1_028_us;
   var $__consume_0_off027_us;
   var $__st_125_us;
   var $__n_does_match_324_us;
   var $__n_might_match_323_us;
   var $99=HEAP8[($__st_125_us)];
   var $100=(($99 << 24) >> 24)==1;
   if ($100) { label = 41; break; } else { var $__consume_1_off0_us = $__consume_0_off027_us;var $__n_does_match_4_us = $__n_does_match_324_us;var $__n_might_match_4_us = $__n_might_match_323_us;label = 51; break; }
  case 41: 
   var $102=$__ky1_028_us;
   var $103=HEAP8[($102)];
   var $104=$103 & 1;
   var $105=(($104 << 24) >> 24)==0;
   if ($105) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $107=(($__ky1_028_us+8)|0);
   var $108=HEAP32[(($107)>>2)];
   var $112 = $108;label = 44; break;
  case 43: 
   var $110=$__ky1_028_us;
   var $111=(($110+1)|0);
   var $112 = $111;label = 44; break;
  case 44: 
   var $112;
   var $113=(($112+$__indx_0)|0);
   var $114=HEAP8[($113)];
   var $115=(($__c_0 << 24) >> 24)==(($114 << 24) >> 24);
   if ($115) { label = 46; break; } else { label = 45; break; }
  case 45: 
   HEAP8[($__st_125_us)]=0;
   var $117=((($__n_might_match_323_us)-(1))|0);
   var $__consume_1_off0_us = $__consume_0_off027_us;var $__n_does_match_4_us = $__n_does_match_324_us;var $__n_might_match_4_us = $117;label = 51; break;
  case 46: 
   var $119=HEAP8[($102)];
   var $120=(($119)&(255));
   var $121=$120 & 1;
   var $122=(($121)|(0))==0;
   if ($122) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $124=(($__ky1_028_us+4)|0);
   var $125=HEAP32[(($124)>>2)];
   var $128 = $125;label = 49; break;
  case 48: 
   var $127=$120 >>> 1;
   var $128 = $127;label = 49; break;
  case 49: 
   var $128;
   var $129=(($128)|(0))==(($98)|(0));
   if ($129) { label = 50; break; } else { var $__consume_1_off0_us = 1;var $__n_does_match_4_us = $__n_does_match_324_us;var $__n_might_match_4_us = $__n_might_match_323_us;label = 51; break; }
  case 50: 
   HEAP8[($__st_125_us)]=2;
   var $131=((($__n_might_match_323_us)-(1))|0);
   var $132=((($__n_does_match_324_us)+(1))|0);
   var $__consume_1_off0_us = 1;var $__n_does_match_4_us = $132;var $__n_might_match_4_us = $131;label = 51; break;
  case 51: 
   var $__n_might_match_4_us;
   var $__n_does_match_4_us;
   var $__consume_1_off0_us;
   var $134=(($__ky1_028_us+12)|0);
   var $135=(($134)|(0))==(($__ke)|(0));
   if ($135) { var $__n_might_match_3_lcssa = $__n_might_match_4_us;var $__n_does_match_3_lcssa = $__n_does_match_4_us;var $__consume_0_off0_lcssa = $__consume_1_off0_us;label = 67; break; } else { label = 52; break; }
  case 52: 
   var $136=(($__st_125_us+1)|0);
   var $__n_might_match_323_us = $__n_might_match_4_us;var $__n_does_match_324_us = $__n_does_match_4_us;var $__st_125_us = $136;var $__consume_0_off027_us = $__consume_1_off0_us;var $__ky1_028_us = $134;label = 40; break;
  case 53: 
   var $__ky1_028;
   var $__consume_0_off027;
   var $__st_125;
   var $__n_does_match_324;
   var $__n_might_match_323;
   var $137=HEAP8[($__st_125)];
   var $138=(($137 << 24) >> 24)==1;
   if ($138) { label = 54; break; } else { var $__consume_1_off0 = $__consume_0_off027;var $__n_does_match_4 = $__n_does_match_324;var $__n_might_match_4 = $__n_might_match_323;label = 65; break; }
  case 54: 
   var $140=$__ky1_028;
   var $141=HEAP8[($140)];
   var $142=$141 & 1;
   var $143=(($142 << 24) >> 24)==0;
   if ($143) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $145=(($__ky1_028+8)|0);
   var $146=HEAP32[(($145)>>2)];
   var $151 = $146;label = 57; break;
  case 56: 
   var $148=$__ky1_028;
   var $149=(($148+1)|0);
   var $151 = $149;label = 57; break;
  case 57: 
   var $151;
   var $152=(($151+$__indx_0)|0);
   var $153=HEAP8[($152)];
   var $154=HEAP32[(($17)>>2)];
   var $155=(($154+12)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($__ct, $153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 58; break; } else { label = 5; break; }
  case 58: 
   var $158=(($__c_0 << 24) >> 24)==(($157 << 24) >> 24);
   if ($158) { label = 59; break; } else { label = 64; break; }
  case 59: 
   var $160=HEAP8[($140)];
   var $161=(($160)&(255));
   var $162=$161 & 1;
   var $163=(($162)|(0))==0;
   if ($163) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $165=(($__ky1_028+4)|0);
   var $166=HEAP32[(($165)>>2)];
   var $169 = $166;label = 62; break;
  case 61: 
   var $168=$161 >>> 1;
   var $169 = $168;label = 62; break;
  case 62: 
   var $169;
   var $170=(($169)|(0))==(($98)|(0));
   if ($170) { label = 63; break; } else { var $__consume_1_off0 = 1;var $__n_does_match_4 = $__n_does_match_324;var $__n_might_match_4 = $__n_might_match_323;label = 65; break; }
  case 63: 
   HEAP8[($__st_125)]=2;
   var $172=((($__n_might_match_323)-(1))|0);
   var $173=((($__n_does_match_324)+(1))|0);
   var $__consume_1_off0 = 1;var $__n_does_match_4 = $173;var $__n_might_match_4 = $172;label = 65; break;
  case 64: 
   HEAP8[($__st_125)]=0;
   var $175=((($__n_might_match_323)-(1))|0);
   var $__consume_1_off0 = $__consume_0_off027;var $__n_does_match_4 = $__n_does_match_324;var $__n_might_match_4 = $175;label = 65; break;
  case 65: 
   var $__n_might_match_4;
   var $__n_does_match_4;
   var $__consume_1_off0;
   var $177=(($__ky1_028+12)|0);
   var $178=(($177)|(0))==(($__ke)|(0));
   if ($178) { var $__n_might_match_3_lcssa = $__n_might_match_4;var $__n_does_match_3_lcssa = $__n_does_match_4;var $__consume_0_off0_lcssa = $__consume_1_off0;label = 67; break; } else { label = 66; break; }
  case 66: 
   var $179=(($__st_125+1)|0);
   var $__n_might_match_323 = $__n_might_match_4;var $__n_does_match_324 = $__n_does_match_4;var $__st_125 = $179;var $__consume_0_off027 = $__consume_1_off0;var $__ky1_028 = $177;label = 53; break;
  case 67: 
   var $__consume_0_off0_lcssa;
   var $__n_does_match_3_lcssa;
   var $__n_might_match_3_lcssa;
   if ($__consume_0_off0_lcssa) { label = 68; break; } else { var $__n_does_match_7 = $__n_does_match_3_lcssa;var $__n_might_match_3_lcssa69 = $__n_might_match_3_lcssa;label = 80; break; }
  case 68: 
   var $181=HEAP32[(($15)>>2)];
   var $182=(($181+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181+16)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)|(0))==(($185)|(0));
   if ($186) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $188=$181;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+40)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 6; break; }
  case 70: 
   var $194=(($183+1)|0);
   HEAP32[(($182)>>2)]=$194;
   label = 71; break;
  case 71: 
   var $195=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
   var $_not=(($195)>>>(0)) < 2;
   var $brmerge=$_not | $14;
   if ($brmerge) { var $__n_does_match_7 = $__n_does_match_3_lcssa;var $__n_might_match_3_lcssa69 = $__n_might_match_3_lcssa;label = 80; break; } else { label = 72; break; }
  case 72: 
   var $196=((($__indx_0)+(1))|0);
   var $__n_does_match_537 = $__n_does_match_3_lcssa;var $__st_238 = $__status_0;var $__ky2_039 = $__kb;label = 73; break;
  case 73: 
   var $__ky2_039;
   var $__st_238;
   var $__n_does_match_537;
   var $198=HEAP8[($__st_238)];
   var $199=(($198 << 24) >> 24)==2;
   if ($199) { label = 74; break; } else { var $__n_does_match_6 = $__n_does_match_537;label = 79; break; }
  case 74: 
   var $201=$__ky2_039;
   var $202=HEAP8[($201)];
   var $203=(($202)&(255));
   var $204=$203 & 1;
   var $205=(($204)|(0))==0;
   if ($205) { label = 76; break; } else { label = 75; break; }
  case 75: 
   var $207=(($__ky2_039+4)|0);
   var $208=HEAP32[(($207)>>2)];
   var $211 = $208;label = 77; break;
  case 76: 
   var $210=$203 >>> 1;
   var $211 = $210;label = 77; break;
  case 77: 
   var $211;
   var $212=(($211)|(0))==(($196)|(0));
   if ($212) { var $__n_does_match_6 = $__n_does_match_537;label = 79; break; } else { label = 78; break; }
  case 78: 
   HEAP8[($__st_238)]=0;
   var $214=((($__n_does_match_537)-(1))|0);
   var $__n_does_match_6 = $214;label = 79; break;
  case 79: 
   var $__n_does_match_6;
   var $216=(($__ky2_039+12)|0);
   var $217=(($__st_238+1)|0);
   var $218=(($216)|(0))==(($__ke)|(0));
   if ($218) { var $__n_does_match_7 = $__n_does_match_6;var $__n_might_match_3_lcssa69 = $__n_might_match_3_lcssa;label = 80; break; } else { var $__n_does_match_537 = $__n_does_match_6;var $__st_238 = $217;var $__ky2_039 = $216;label = 73; break; }
  case 80: 
   var $__n_might_match_3_lcssa69;
   var $__n_does_match_7;
   var $219=((($__indx_0)+(1))|0);
   var $__indx_0 = $219;var $__n_does_match_2 = $__n_does_match_7;var $__n_might_match_2 = $__n_might_match_3_lcssa69;label = 19; break;
  case 81: 
   var $221=(($75)|(0))==0;
   if ($221) { var $236 = 0;label = 87; break; } else { label = 82; break; }
  case 82: 
   var $223=(($75+12)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=(($75+16)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=(($224)|(0))==(($226)|(0));
   if ($227) { label = 83; break; } else { var $236 = $75;label = 87; break; }
  case 83: 
   var $229=$75;
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+36)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$232]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 84; break; } else { label = 7; break; }
  case 84: 
   var $234=(($233)|(0))==-1;
   if ($234) { label = 86; break; } else { label = 85; break; }
  case 85: 
   var $_pre68=HEAP32[(($15)>>2)];
   var $236 = $_pre68;label = 87; break;
  case 86: 
   HEAP32[(($15)>>2)]=0;
   var $236 = 0;label = 87; break;
  case 87: 
   var $236;
   var $237=(($236)|(0))==0;
   if ($76) { label = 93; break; } else { label = 88; break; }
  case 88: 
   var $239=(($74+12)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=(($74+16)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($240)|(0))==(($242)|(0));
   if ($243) { label = 90; break; } else { label = 89; break; }
  case 89: 
   if ($237) { label = 96; break; } else { label = 95; break; }
  case 90: 
   var $245=$74;
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246+36)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 91; break; } else { label = 7; break; }
  case 91: 
   var $250=(($249)|(0))==-1;
   if ($250) { label = 92; break; } else { label = 94; break; }
  case 92: 
   HEAP32[(($16)>>2)]=0;
   label = 93; break;
  case 93: 
   if ($237) { label = 95; break; } else { label = 96; break; }
  case 94: 
   var $252=(($74)|(0))==0;
   var $tmp8=$237 ^ $252;
   if ($tmp8) { label = 96; break; } else { label = 95; break; }
  case 95: 
   var $254=HEAP32[(($__err)>>2)];
   var $255=$254 | 2;
   HEAP32[(($__err)>>2)]=$255;
   label = 96; break;
  case 96: 
   if ($14) { label = 100; break; } else { var $_0717 = $__kb;var $__st_318 = $__status_0;label = 97; break; }
  case 97: 
   var $__st_318;
   var $_0717;
   var $256=HEAP8[($__st_318)];
   var $257=(($256 << 24) >> 24)==2;
   if ($257) { var $_0716 = $_0717;label = 101; break; } else { label = 98; break; }
  case 98: 
   var $259=(($_0717+12)|0);
   var $260=(($259)|(0))==(($__ke)|(0));
   if ($260) { label = 100; break; } else { label = 99; break; }
  case 99: 
   var $261=(($__st_318+1)|0);
   var $_0717 = $259;var $__st_318 = $261;label = 97; break;
  case 100: 
   var $262=HEAP32[(($__err)>>2)];
   var $263=$262 | 4;
   HEAP32[(($__err)>>2)]=$263;
   var $_0716 = $__ke;label = 101; break;
  case 101: 
   var $_0716;
   var $264=(($__stat_hold_sroa_0_1)|(0))==0;
   if ($264) { label = 103; break; } else { label = 102; break; }
  case 102: 
   _free($__stat_hold_sroa_0_1);
   label = 103; break;
  case 103: 
   STACKTOP = sp;
   return $_0716;
  case 104: 
   var $266$0;
   var $266$1;
   ___resumeException($266$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$152;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i2=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__loc=(sp)+(32);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13704)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13704;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $3, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 17; break; }
  case 3: 
   var $10=HEAP32[((((13708)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   (function() { try { __THREW__ = 0; return ___cxa_throw($24, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 17; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $26=$22;
   var $27=$22;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+32)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26, ((10088)|0), ((10114)|0), $__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $32=HEAP32[(($1)>>2)];
   var $33=$__p_i_i_i2;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $34=HEAP32[((((13320)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $37=(($__p_i_i_i2)|0);
   HEAP32[(($37)>>2)]=13320;
   var $38=(($__p_i_i_i2+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i2+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 17; break; }
  case 10: 
   var $40=HEAP32[((((13324)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 17; break; }
  case 13: 
   throw "Reached an unreachable!";
  case 14: 
   var $56=$52;
   var $57=$52;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+16)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
  case 15: 
   HEAP8[($__thousands_sep)]=$61;
   var $62=$52;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+20)|0);
   var $65=HEAP32[(($64)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $66=HEAP32[(($1)>>2)];
   var $67=(($66)|0);
   var $68=__ZNSt3__114__shared_count16__release_sharedEv($67);
   STACKTOP = sp;
   return;
  case 17: 
   var $70$0 = ___cxa_find_matching_catch(-1, -1); $70$1 = tempRet0;
   var $71=HEAP32[(($1)>>2)];
   var $72=(($71)|0);
   var $73=__ZNSt3__114__shared_count16__release_sharedEv($72);
   ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[(($__a_end)>>2)];
   var $2=(($1)|(0))==(($__a)|(0));
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=(($__atoms+24)|0);
   var $5=HEAP8[($4)];
   var $6=(($5 << 24) >> 24)==(($__ct << 24) >> 24);
   if ($6) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $8=(($__atoms+25)|0);
   var $9=HEAP8[($8)];
   var $10=(($9 << 24) >> 24)==(($__ct << 24) >> 24);
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$6 ? 43 : 45;
   var $13=(($__a+1)|0);
   HEAP32[(($__a_end)>>2)]=$13;
   HEAP8[($__a)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 23; break;
  case 5: 
   var $15=$__grouping;
   var $16=HEAP8[($15)];
   var $17=(($16)&(255));
   var $18=$17 & 1;
   var $19=(($18)|(0))==0;
   if ($19) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $21=(($__grouping+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $25 = $22;label = 8; break;
  case 7: 
   var $24=$17 >>> 1;
   var $25 = $24;label = 8; break;
  case 8: 
   var $25;
   var $26=(($25)|(0))!=0;
   var $27=(($__ct << 24) >> 24)==(($__thousands_sep << 24) >> 24);
   var $or_cond=$26 & $27;
   if ($or_cond) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $29=HEAP32[(($__g_end)>>2)];
   var $30=$29;
   var $31=$__g;
   var $32=((($30)-($31))|0);
   var $33=(($32)|(0)) < 160;
   if ($33) { label = 10; break; } else { var $_01 = 0;label = 23; break; }
  case 10: 
   var $35=HEAP32[(($__dc)>>2)];
   var $36=(($29+4)|0);
   HEAP32[(($__g_end)>>2)]=$36;
   HEAP32[(($29)>>2)]=$35;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 23; break;
  case 11: 
   var $37=(($__atoms+26)|0);
   var $_02 = $__atoms;label = 13; break;
  case 12: 
   var $39=(($43)|(0))==(($37)|(0));
   if ($39) { var $_0_lcssa = $37;label = 14; break; } else { var $_02 = $43;label = 13; break; }
  case 13: 
   var $_02;
   var $41=HEAP8[($_02)];
   var $42=(($41 << 24) >> 24)==(($__ct << 24) >> 24);
   var $43=(($_02+1)|0);
   if ($42) { var $_0_lcssa = $_02;label = 14; break; } else { label = 12; break; }
  case 14: 
   var $_0_lcssa;
   var $44=$_0_lcssa;
   var $45=$__atoms;
   var $46=((($44)-($45))|0);
   var $47=(($46)|(0)) > 23;
   if ($47) { var $_01 = -1;label = 23; break; } else { label = 15; break; }
  case 15: 
   if ((($__base)|(0))==8 | (($__base)|(0))==10) {
    label = 16; break;
   }
   else if ((($__base)|(0))==16) {
    label = 17; break;
   }
   else {
   label = 22; break;
   }
  case 16: 
   var $50=(($46)|(0)) < (($__base)|(0));
   if ($50) { label = 22; break; } else { var $_01 = -1;label = 23; break; }
  case 17: 
   var $52=(($46)|(0)) < 22;
   if ($52) { label = 22; break; } else { label = 18; break; }
  case 18: 
   if ($2) { var $_01 = -1;label = 23; break; } else { label = 19; break; }
  case 19: 
   var $55=$1;
   var $56=$__a;
   var $57=((($55)-($56))|0);
   var $58=(($57)|(0)) < 3;
   if ($58) { label = 20; break; } else { var $_01 = -1;label = 23; break; }
  case 20: 
   var $60=((($1)-(1))|0);
   var $61=HEAP8[($60)];
   var $62=(($61 << 24) >> 24)==48;
   if ($62) { label = 21; break; } else { var $_01 = -1;label = 23; break; }
  case 21: 
   HEAP32[(($__dc)>>2)]=0;
   var $64=((10088+$46)|0);
   var $65=HEAP8[($64)];
   var $66=HEAP32[(($__a_end)>>2)];
   var $67=(($66+1)|0);
   HEAP32[(($__a_end)>>2)]=$67;
   HEAP8[($66)]=$65;
   var $_01 = 0;label = 23; break;
  case 22: 
   var $69=((10088+$46)|0);
   var $70=HEAP8[($69)];
   var $71=(($1+1)|0);
   HEAP32[(($__a_end)>>2)]=$71;
   HEAP8[($1)]=$70;
   var $72=HEAP32[(($__dc)>>2)];
   var $73=((($72)+(1))|0);
   HEAP32[(($__dc)>>2)]=$73;
   var $_01 = 0;label = 23; break;
  case 23: 
   var $_01;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 14; break; } else { label = 2; break; }
  case 2: 
   var $3=___errno_location();
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$11;
   label = 7; break;
  case 6: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 7: 
   var $15=HEAP32[((12160)>>2)];
   var $16$0=_strtoll($__a, $__p2, $__base, $15);
   var $16$1=tempRet0;
   var $17=HEAP32[(($3)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($3)>>2)]=$4;
   label = 9; break;
  case 9: 
   var $21=HEAP32[(($__p2)>>2)];
   var $22=(($21)|(0))==(($__a_end)|(0));
   if ($22) { label = 11; break; } else { label = 10; break; }
  case 10: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 15; break;
  case 11: 
   var $25=(($17)|(0))==34;
   var $$etemp$0$0=-2147483648;
   var $$etemp$0$1=-1;
   var $26=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
   var $or_cond=$25 | $26;
   var $$etemp$1$0=2147483647;
   var $$etemp$1$1=0;
   var $27=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
   var $or_cond1=$or_cond | $27;
   if ($or_cond1) { label = 12; break; } else { label = 13; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $29=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
   var $_=$29 ? 2147483647 : -2147483648;
   var $_0 = $_;label = 15; break;
  case 13: 
   var $31$0=$16$0;
   var $31=$31$0;
   var $_0 = $31;label = 15; break;
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 15; break;
  case 15: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$__grouping;
   var $2=$__grouping;
   var $3=HEAP8[($2)];
   var $4=(($3)&(255));
   var $5=$4 & 1;
   var $6=(($5)|(0))==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($__grouping+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $12 = $9;label = 4; break;
  case 3: 
   var $11=$4 >>> 1;
   var $12 = $11;label = 4; break;
  case 4: 
   var $12;
   var $13=(($12)|(0))==0;
   if ($13) { label = 24; break; } else { label = 5; break; }
  case 5: 
   var $15=(($__g)|(0))==(($__g_end)|(0));
   if ($15) { var $24 = $3;label = 9; break; } else { label = 6; break; }
  case 6: 
   var $16=((($__g_end)-(4))|0);
   var $17=(($16)>>>(0)) > (($__g)>>>(0));
   if ($17) { var $_017 = $__g;var $18 = $16;label = 7; break; } else { var $24 = $3;label = 9; break; }
  case 7: 
   var $18;
   var $_017;
   var $19=HEAP32[(($_017)>>2)];
   var $20=HEAP32[(($18)>>2)];
   HEAP32[(($_017)>>2)]=$20;
   HEAP32[(($18)>>2)]=$19;
   var $21=(($_017+4)|0);
   var $22=((($18)-(4))|0);
   var $23=(($21)>>>(0)) < (($22)>>>(0));
   if ($23) { var $_017 = $21;var $18 = $22;label = 7; break; } else { label = 8; break; }
  case 8: 
   var $_pre_pre=HEAP8[($2)];
   var $24 = $_pre_pre;label = 9; break;
  case 9: 
   var $24;
   var $25=$24 & 1;
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $28=(($__grouping+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $32 = $29;label = 12; break;
  case 11: 
   var $31=(($1+1)|0);
   var $32 = $31;label = 12; break;
  case 12: 
   var $32;
   var $33=(($24)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $37=(($__grouping+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $41 = $38;label = 15; break;
  case 14: 
   var $40=$33 >>> 1;
   var $41 = $40;label = 15; break;
  case 15: 
   var $41;
   var $42=((($__g_end)-(4))|0);
   var $43=(($42)>>>(0)) > (($__g)>>>(0));
   var $44=HEAP8[($32)];
   var $45=(($44 << 24) >> 24);
   var $_not10=(($44 << 24) >> 24) < 1;
   var $46=(($44 << 24) >> 24)==127;
   var $or_cond11=$_not10 | $46;
   if ($43) { label = 16; break; } else { var $_lcssa7 = $45;var $or_cond_lcssa = $or_cond11;label = 21; break; }
  case 16: 
   var $47=(($32+$41)|0);
   var $48=$47;
   var $__ig_012 = $32;var $__r_013 = $__g;var $50 = $45;var $or_cond14 = $or_cond11;label = 17; break;
  case 17: 
   var $or_cond14;
   var $50;
   var $__r_013;
   var $__ig_012;
   if ($or_cond14) { label = 20; break; } else { label = 18; break; }
  case 18: 
   var $52=HEAP32[(($__r_013)>>2)];
   var $53=(($50)|(0))==(($52)|(0));
   if ($53) { label = 20; break; } else { label = 19; break; }
  case 19: 
   HEAP32[(($__err)>>2)]=4;
   label = 24; break;
  case 20: 
   var $56=$__ig_012;
   var $57=((($48)-($56))|0);
   var $58=(($57)|(0)) > 1;
   var $59=(($__ig_012+1)|0);
   var $___ig_0=$58 ? $59 : $__ig_012;
   var $60=(($__r_013+4)|0);
   var $61=(($60)>>>(0)) < (($42)>>>(0));
   var $62=HEAP8[($___ig_0)];
   var $63=(($62 << 24) >> 24);
   var $_not=(($62 << 24) >> 24) < 1;
   var $64=(($62 << 24) >> 24)==127;
   var $or_cond=$_not | $64;
   if ($61) { var $__ig_012 = $___ig_0;var $__r_013 = $60;var $50 = $63;var $or_cond14 = $or_cond;label = 17; break; } else { var $_lcssa7 = $63;var $or_cond_lcssa = $or_cond;label = 21; break; }
  case 21: 
   var $or_cond_lcssa;
   var $_lcssa7;
   if ($or_cond_lcssa) { label = 24; break; } else { label = 22; break; }
  case 22: 
   var $66=HEAP32[(($42)>>2)];
   var $67=(($_lcssa7)>>>(0)) < (($66)>>>(0));
   var $68=(($66)|(0))==0;
   var $or_cond5=$67 | $68;
   if ($or_cond5) { label = 23; break; } else { label = 24; break; }
  case 23: 
   HEAP32[(($__err)>>2)]=4;
   label = 24; break;
  case 24: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0 = $152;var $152$1 = tempRet0;if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   var $st$0$0=(($__v)|0);
   HEAP32[(($st$0$0)>>2)]=$152$0;
   var $st$1$1=(($__v+4)|0);
   HEAP32[(($st$1$1)>>2)]=$152$1;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 13; break; } else { label = 2; break; }
  case 2: 
   var $3=___errno_location();
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$11;
   label = 7; break;
  case 6: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 7: 
   var $15=HEAP32[((12160)>>2)];
   var $16$0=_strtoll($__a, $__p2, $__base, $15);
   var $16$1=tempRet0;
   var $17=HEAP32[(($3)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($3)>>2)]=$4;
   label = 9; break;
  case 9: 
   var $21=HEAP32[(($__p2)>>2)];
   var $22=(($21)|(0))==(($__a_end)|(0));
   if ($22) { label = 11; break; } else { label = 10; break; }
  case 10: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = 0;var $_0$0 = 0;label = 14; break;
  case 11: 
   var $25=(($17)|(0))==34;
   if ($25) { label = 12; break; } else { var $_0$1 = $16$1;var $_0$0 = $16$0;label = 14; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
   var $$etemp$2$0=0;
   var $$etemp$2$1=-2147483648;
   var $$etemp$1$0=-1;
   var $$etemp$1$1=2147483647;
   var $_$0=$27 ? $$etemp$1$0 : $$etemp$2$0;
   var $_$1=$27 ? $$etemp$1$1 : $$etemp$2$1;
   var $_0$1 = $_$1;var $_0$0 = $_$0;label = 14; break;
  case 13: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = 0;var $_0$0 = 0;label = 14; break;
  case 14: 
   var $_0$0;
   var $_0$1;
   STACKTOP = sp;
   return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   HEAP16[(($__v)>>1)]=$152;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 16; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP8[($__a)];
   var $4=(($3 << 24) >> 24)==45;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 4: 
   var $7=___errno_location();
   var $8=HEAP32[(($7)>>2)];
   HEAP32[(($7)>>2)]=0;
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   HEAP32[((12160)>>2)]=$15;
   label = 9; break;
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   ___resumeException($18$0)
  case 9: 
   var $19=HEAP32[((12160)>>2)];
   var $20$0=_strtoull($__a, $__p2, $__base, $19);
   var $20$1=tempRet0;
   var $21=HEAP32[(($7)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 10; break; } else { label = 11; break; }
  case 10: 
   HEAP32[(($7)>>2)]=$8;
   label = 11; break;
  case 11: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=(($25)|(0))==(($__a_end)|(0));
   if ($26) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 13: 
   var $29=(($21)|(0))==34;
   var $$etemp$0$0=65535;
   var $$etemp$0$1=0;
   var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
   var $or_cond=$29 | $30;
   if ($or_cond) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = -1;label = 17; break;
  case 15: 
   var $33$0=$20$0;
   var $33=$33$0&65535;
   var $_0 = $33;label = 17; break;
  case 16: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 17: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$152;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 16; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP8[($__a)];
   var $4=(($3 << 24) >> 24)==45;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 4: 
   var $7=___errno_location();
   var $8=HEAP32[(($7)>>2)];
   HEAP32[(($7)>>2)]=0;
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   HEAP32[((12160)>>2)]=$15;
   label = 9; break;
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   ___resumeException($18$0)
  case 9: 
   var $19=HEAP32[((12160)>>2)];
   var $20$0=_strtoull($__a, $__p2, $__base, $19);
   var $20$1=tempRet0;
   var $21=HEAP32[(($7)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 10; break; } else { label = 11; break; }
  case 10: 
   HEAP32[(($7)>>2)]=$8;
   label = 11; break;
  case 11: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=(($25)|(0))==(($__a_end)|(0));
   if ($26) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 13: 
   var $29=(($21)|(0))==34;
   var $$etemp$0$0=-1;
   var $$etemp$0$1=0;
   var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
   var $or_cond=$29 | $30;
   if ($or_cond) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = -1;label = 17; break;
  case 15: 
   var $33$0=$20$0;
   var $33=$33$0;
   var $_0 = $33;label = 17; break;
  case 16: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 17: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$152;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 16; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP8[($__a)];
   var $4=(($3 << 24) >> 24)==45;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 4: 
   var $7=___errno_location();
   var $8=HEAP32[(($7)>>2)];
   HEAP32[(($7)>>2)]=0;
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   HEAP32[((12160)>>2)]=$15;
   label = 9; break;
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   ___resumeException($18$0)
  case 9: 
   var $19=HEAP32[((12160)>>2)];
   var $20$0=_strtoull($__a, $__p2, $__base, $19);
   var $20$1=tempRet0;
   var $21=HEAP32[(($7)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 10; break; } else { label = 11; break; }
  case 10: 
   HEAP32[(($7)>>2)]=$8;
   label = 11; break;
  case 11: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=(($25)|(0))==(($__a_end)|(0));
   if ($26) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 13: 
   var $29=(($21)|(0))==34;
   var $$etemp$0$0=-1;
   var $$etemp$0$1=0;
   var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
   var $or_cond=$29 | $30;
   if ($or_cond) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = -1;label = 17; break;
  case 15: 
   var $33$0=$20$0;
   var $33=$33$0;
   var $_0 = $33;label = 17; break;
  case 16: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 17; break;
  case 17: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(32);
   var $__grouping=(sp)+(40);
   var $__buf=(sp)+(56);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre11=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre11;var $_pre_phi13 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi13 = $_pre12;label = 9; break;
  case 9: 
   var $_pre_phi13;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $41 = 0;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { var $41 = $25;label = 15; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   var $39=(($38)|(0))==-1;
   if ($39) { label = 14; break; } else { var $41 = $25;label = 15; break; }
  case 14: 
   HEAP32[(($20)>>2)]=0;
   var $41 = 0;label = 15; break;
  case 15: 
   var $41;
   var $42=(($41)|(0))==0;
   var $43=HEAP32[(($21)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $46=(($43+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($43+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0))==(($49)|(0));
   if ($50) { label = 18; break; } else { label = 17; break; }
  case 17: 
   if ($42) { var $62 = $43;var $61 = 0;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = 0;label = 45; break; }
  case 18: 
   var $52=$43;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 34; break; }
  case 19: 
   var $57=(($56)|(0))==-1;
   if ($57) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[(($21)>>2)]=0;
   label = 21; break;
  case 21: 
   if ($42) { var $__a_2 = $__a_0;var $129 = 0;var $128 = 1;label = 45; break; } else { var $62 = 0;var $61 = 1;label = 23; break; }
  case 22: 
   var $59=(($43)|(0))==0;
   var $60=$42 ^ $59;
   if ($60) { var $62 = $43;var $61 = $59;label = 23; break; } else { var $__a_2 = $__a_0;var $129 = $43;var $128 = $59;label = 45; break; }
  case 23: 
   var $61;
   var $62;
   var $63=HEAP32[(($__a_end)>>2)];
   var $64=$63;
   var $65=$__a_0;
   var $66=((($64)-($65))|0);
   var $67=HEAP8[($1)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($23)>>2)];
   var $72=$68 >>> 1;
   var $73=$70 ? $72 : $71;
   var $74=(($66)|(0))==(($73)|(0));
   if ($74) { label = 24; break; } else { var $__a_1 = $__a_0;label = 37; break; }
  case 24: 
   if ($70) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=HEAP32[(($23)>>2)];
   var $82 = $77;var $81 = $77;label = 27; break;
  case 26: 
   var $79=$68 >>> 1;
   var $80=$68 >>> 1;
   var $82 = $80;var $81 = $79;label = 27; break;
  case 27: 
   var $81;
   var $82;
   var $83=$82 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $83, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $84=HEAP8[($1)];
   var $85=$84 & 1;
   var $86=(($85 << 24) >> 24)==0;
   if ($86) { var $90 = 10;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $88=HEAP32[(($22)>>2)];
   var $89=$88 & -2;
   var $phitmp8=((($89)-(1))|0);
   var $90 = $phitmp8;label = 30; break;
  case 30: 
   var $90;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $90, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $91=HEAP8[($1)];
   var $92=$91 & 1;
   var $93=(($92 << 24) >> 24)==0;
   if ($93) { var $96 = $_pre_phi;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $95=HEAP32[(($_pre_phi13)>>2)];
   var $96 = $95;label = 33; break;
  case 33: 
   var $96;
   var $97=(($96+$81)|0);
   HEAP32[(($__a_end)>>2)]=$97;
   var $__a_1 = $96;label = 37; break;
  case 34: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 36; break;
  case 35: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 36; break;
  case 36: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 37: 
   var $__a_1;
   var $99=(($41+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($41+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $105=$41;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   var $extract_t=(($109) & 255);
   var $_0_off0 = $extract_t;label = 41; break;
  case 40: 
   var $111=HEAP8[($100)];
   var $_0_off0 = $111;label = 41; break;
  case 41: 
   var $_0_off0;
   var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $114=(($113)|(0))==0;
   if ($114) { label = 42; break; } else { var $__a_2 = $__a_1;var $129 = $62;var $128 = $61;label = 45; break; }
  case 42: 
   var $116=HEAP32[(($99)>>2)];
   var $117=HEAP32[(($101)>>2)];
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $120=$41;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+40)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $41;label = 10; break; } else { label = 34; break; }
  case 44: 
   var $126=(($116+1)|0);
   HEAP32[(($99)>>2)]=$126;
   var $__a_0 = $__a_1;var $25 = $41;label = 10; break;
  case 45: 
   var $128;
   var $129;
   var $__a_2;
   var $130=$__grouping;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))==0;
   if ($134) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $136=(($__grouping+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $140 = $137;label = 48; break;
  case 47: 
   var $139=$132 >>> 1;
   var $140 = $139;label = 48; break;
  case 48: 
   var $140;
   var $141=(($140)|(0))==0;
   if ($141) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $143=HEAP32[(($__g_end)>>2)];
   var $144=$143;
   var $145=$__g;
   var $146=((($144)-($145))|0);
   var $147=(($146)|(0)) < 160;
   if ($147) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $149=HEAP32[(($__dc)>>2)];
   var $150=(($143+4)|0);
   HEAP32[(($__g_end)>>2)]=$150;
   HEAP32[(($143)>>2)]=$149;
   label = 51; break;
  case 51: 
   var $151=HEAP32[(($__a_end)>>2)];
   var $152 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2, $151, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0 = $152;var $152$1 = tempRet0;if (!__THREW__) { label = 52; break; } else { label = 35; break; }
  case 52: 
   var $st$0$0=(($__v)|0);
   HEAP32[(($st$0$0)>>2)]=$152$0;
   var $st$1$1=(($__v+4)|0);
   HEAP32[(($st$1$1)>>2)]=$152$1;
   var $154=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $154, $__err);
   if ($42) { var $169 = 0;label = 57; break; } else { label = 53; break; }
  case 53: 
   var $156=(($41+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($41+16)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($157)|(0))==(($159)|(0));
   if ($160) { label = 54; break; } else { var $169 = $41;label = 57; break; }
  case 54: 
   var $162=$41;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+36)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 35; break; }
  case 55: 
   var $167=(($166)|(0))==-1;
   if ($167) { label = 56; break; } else { var $169 = $41;label = 57; break; }
  case 56: 
   HEAP32[(($20)>>2)]=0;
   var $169 = 0;label = 57; break;
  case 57: 
   var $169;
   var $170=(($169)|(0))==0;
   if ($128) { label = 62; break; } else { label = 58; break; }
  case 58: 
   var $172=(($129+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($129+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($173)|(0))==(($175)|(0));
   if ($176) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $178=$129;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+36)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 35; break; }
  case 60: 
   var $183=(($182)|(0))==-1;
   if ($183) { label = 61; break; } else { label = 63; break; }
  case 61: 
   HEAP32[(($21)>>2)]=0;
   label = 62; break;
  case 62: 
   if ($170) { label = 64; break; } else { label = 65; break; }
  case 63: 
   var $185=(($129)|(0))==0;
   var $tmp6=$170 ^ $185;
   if ($tmp6) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $187=HEAP32[(($__err)>>2)];
   var $188=$187 | 2;
   HEAP32[(($__err)>>2)]=$188;
   label = 65; break;
  case 65: 
   var $190=(($agg_result)|0);
   HEAP32[(($190)>>2)]=$169;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 15; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP8[($__a)];
   var $4=(($3 << 24) >> 24)==45;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = 0;var $_0$0 = 0;label = 16; break;
  case 4: 
   var $7=___errno_location();
   var $8=HEAP32[(($7)>>2)];
   HEAP32[(($7)>>2)]=0;
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   HEAP32[((12160)>>2)]=$15;
   label = 9; break;
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   ___resumeException($18$0)
  case 9: 
   var $19=HEAP32[((12160)>>2)];
   var $20$0=_strtoull($__a, $__p2, $__base, $19);
   var $20$1=tempRet0;
   var $21=HEAP32[(($7)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 10; break; } else { label = 11; break; }
  case 10: 
   HEAP32[(($7)>>2)]=$8;
   label = 11; break;
  case 11: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=(($25)|(0))==(($__a_end)|(0));
   if ($26) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = 0;var $_0$0 = 0;label = 16; break;
  case 13: 
   var $29=(($21)|(0))==34;
   if ($29) { label = 14; break; } else { var $_0$1 = $20$1;var $_0$0 = $20$0;label = 16; break; }
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = -1;var $_0$0 = -1;label = 16; break;
  case 15: 
   HEAP32[(($__err)>>2)]=4;
   var $_0$1 = 0;var $_0$0 = 0;label = 16; break;
  case 16: 
   var $_0$0;
   var $_0$1;
   STACKTOP = sp;
   return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(32);
   var $__thousands_sep=(sp)+(40);
   var $__grouping=(sp)+(48);
   var $__buf=(sp)+(64);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre12=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre12;var $_pre_phi14 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre13=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi14 = $_pre13;label = 5; break;
  case 5: 
   var $_pre_phi14;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP8[($__decimal_point)];
   var $18=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $35 = 0;label = 11; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { var $35 = $19;label = 11; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 30; break; }
  case 9: 
   var $33=(($32)|(0))==-1;
   if ($33) { label = 10; break; } else { var $35 = $19;label = 11; break; }
  case 10: 
   HEAP32[(($13)>>2)]=0;
   var $35 = 0;label = 11; break;
  case 11: 
   var $35;
   var $36=(($35)|(0))==0;
   var $37=HEAP32[(($14)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 17; break; } else { label = 12; break; }
  case 12: 
   var $40=(($37+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($37+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0))==(($43)|(0));
   if ($44) { label = 14; break; } else { label = 13; break; }
  case 13: 
   if ($36) { var $56 = $37;var $55 = 0;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = 0;label = 41; break; }
  case 14: 
   var $46=$37;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+36)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 30; break; }
  case 15: 
   var $51=(($50)|(0))==-1;
   if ($51) { label = 16; break; } else { label = 18; break; }
  case 16: 
   HEAP32[(($14)>>2)]=0;
   label = 17; break;
  case 17: 
   if ($36) { var $__a_2 = $__a_0;var $123 = 0;var $122 = 1;label = 41; break; } else { var $56 = 0;var $55 = 1;label = 19; break; }
  case 18: 
   var $53=(($37)|(0))==0;
   var $54=$36 ^ $53;
   if ($54) { var $56 = $37;var $55 = $53;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = $53;label = 41; break; }
  case 19: 
   var $55;
   var $56;
   var $57=HEAP32[(($__a_end)>>2)];
   var $58=$57;
   var $59=$__a_0;
   var $60=((($58)-($59))|0);
   var $61=HEAP8[($0)];
   var $62=(($61)&(255));
   var $63=$62 & 1;
   var $64=(($63)|(0))==0;
   var $65=HEAP32[(($16)>>2)];
   var $66=$62 >>> 1;
   var $67=$64 ? $66 : $65;
   var $68=(($60)|(0))==(($67)|(0));
   if ($68) { label = 20; break; } else { var $__a_1 = $__a_0;label = 33; break; }
  case 20: 
   if ($64) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $71=HEAP32[(($16)>>2)];
   var $76 = $71;var $75 = $71;label = 23; break;
  case 22: 
   var $73=$62 >>> 1;
   var $74=$62 >>> 1;
   var $76 = $74;var $75 = $73;label = 23; break;
  case 23: 
   var $75;
   var $76;
   var $77=$76 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $77, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 30; break; }
  case 24: 
   var $78=HEAP8[($0)];
   var $79=$78 & 1;
   var $80=(($79 << 24) >> 24)==0;
   if ($80) { var $84 = 10;label = 26; break; } else { label = 25; break; }
  case 25: 
   var $82=HEAP32[(($15)>>2)];
   var $83=$82 & -2;
   var $phitmp8=((($83)-(1))|0);
   var $84 = $phitmp8;label = 26; break;
  case 26: 
   var $84;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $85=HEAP8[($0)];
   var $86=$85 & 1;
   var $87=(($86 << 24) >> 24)==0;
   if ($87) { var $90 = $_pre_phi;label = 29; break; } else { label = 28; break; }
  case 28: 
   var $89=HEAP32[(($_pre_phi14)>>2)];
   var $90 = $89;label = 29; break;
  case 29: 
   var $90;
   var $91=(($90+$75)|0);
   HEAP32[(($__a_end)>>2)]=$91;
   var $__a_1 = $90;label = 33; break;
  case 30: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 32; break;
  case 31: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 32; break;
  case 32: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 33: 
   var $__a_1;
   var $93=(($35+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($35+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($94)|(0))==(($96)|(0));
   if ($97) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $99=$35;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+36)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 30; break; }
  case 35: 
   var $extract_t=(($103) & 255);
   var $_0_off0 = $extract_t;label = 37; break;
  case 36: 
   var $105=HEAP8[($94)];
   var $_0_off0 = $105;label = 37; break;
  case 37: 
   var $_0_off0;
   var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $108=(($107)|(0))==0;
   if ($108) { label = 38; break; } else { var $__a_2 = $__a_1;var $123 = $56;var $122 = $55;label = 41; break; }
  case 38: 
   var $110=HEAP32[(($93)>>2)];
   var $111=HEAP32[(($95)>>2)];
   var $112=(($110)|(0))==(($111)|(0));
   if ($112) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $114=$35;
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+40)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $35;label = 6; break; } else { label = 30; break; }
  case 40: 
   var $120=(($110+1)|0);
   HEAP32[(($93)>>2)]=$120;
   var $__a_0 = $__a_1;var $19 = $35;label = 6; break;
  case 41: 
   var $122;
   var $123;
   var $__a_2;
   var $124=$__grouping;
   var $125=HEAP8[($124)];
   var $126=(($125)&(255));
   var $127=$126 & 1;
   var $128=(($127)|(0))==0;
   if ($128) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $130=(($__grouping+4)|0);
   var $131=HEAP32[(($130)>>2)];
   var $134 = $131;label = 44; break;
  case 43: 
   var $133=$126 >>> 1;
   var $134 = $133;label = 44; break;
  case 44: 
   var $134;
   var $135=(($134)|(0))==0;
   if ($135) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $137=HEAP8[($__in_units)];
   var $138=$137 & 1;
   var $139=(($138 << 24) >> 24)==0;
   if ($139) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $141=HEAP32[(($__g_end)>>2)];
   var $142=$141;
   var $143=$__g;
   var $144=((($142)-($143))|0);
   var $145=(($144)|(0)) < 160;
   if ($145) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $147=HEAP32[(($__dc)>>2)];
   var $148=(($141+4)|0);
   HEAP32[(($__g_end)>>2)]=$148;
   HEAP32[(($141)>>2)]=$147;
   label = 48; break;
  case 48: 
   var $149=HEAP32[(($__a_end)>>2)];
   var $150 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2, $149, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 31; break; }
  case 49: 
   HEAPF32[(($__v)>>2)]=$150;
   var $152=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $152, $__err);
   if ($36) { var $167 = 0;label = 54; break; } else { label = 50; break; }
  case 50: 
   var $154=(($35+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($35+16)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($155)|(0))==(($157)|(0));
   if ($158) { label = 51; break; } else { var $167 = $35;label = 54; break; }
  case 51: 
   var $160=$35;
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+36)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 31; break; }
  case 52: 
   var $165=(($164)|(0))==-1;
   if ($165) { label = 53; break; } else { var $167 = $35;label = 54; break; }
  case 53: 
   HEAP32[(($13)>>2)]=0;
   var $167 = 0;label = 54; break;
  case 54: 
   var $167;
   var $168=(($167)|(0))==0;
   if ($122) { label = 59; break; } else { label = 55; break; }
  case 55: 
   var $170=(($123+12)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($123+16)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($171)|(0))==(($173)|(0));
   if ($174) { label = 56; break; } else { label = 60; break; }
  case 56: 
   var $176=$123;
   var $177=HEAP32[(($176)>>2)];
   var $178=(($177+36)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 31; break; }
  case 57: 
   var $181=(($180)|(0))==-1;
   if ($181) { label = 58; break; } else { label = 60; break; }
  case 58: 
   HEAP32[(($14)>>2)]=0;
   label = 59; break;
  case 59: 
   if ($168) { label = 61; break; } else { label = 62; break; }
  case 60: 
   var $183=(($123)|(0))==0;
   var $tmp6=$168 ^ $183;
   if ($tmp6) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $185=HEAP32[(($__err)>>2)];
   var $186=$185 | 2;
   HEAP32[(($__err)>>2)]=$186;
   label = 62; break;
  case 62: 
   var $188=(($agg_result)|0);
   HEAP32[(($188)>>2)]=$167;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i2=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__loc=(sp)+(32);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13704)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13704;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $3, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 18; break; }
  case 3: 
   var $10=HEAP32[((((13708)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   (function() { try { __THREW__ = 0; return ___cxa_throw($24, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 18; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $26=$22;
   var $27=$22;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+32)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26, ((10088)|0), ((10120)|0), $__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 18; break; }
  case 8: 
   var $32=HEAP32[(($1)>>2)];
   var $33=$__p_i_i_i2;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $34=HEAP32[((((13320)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $37=(($__p_i_i_i2)|0);
   HEAP32[(($37)>>2)]=13320;
   var $38=(($__p_i_i_i2+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i2+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $40=HEAP32[((((13324)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 18; break; }
  case 13: 
   throw "Reached an unreachable!";
  case 14: 
   var $56=$52;
   var $57=$52;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 18; break; }
  case 15: 
   HEAP8[($__decimal_point)]=$61;
   var $62=HEAP32[(($57)>>2)];
   var $63=(($62+16)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 18; break; }
  case 16: 
   HEAP8[($__thousands_sep)]=$65;
   var $66=$52;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+20)|0);
   var $69=HEAP32[(($68)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $70=HEAP32[(($1)>>2)];
   var $71=(($70)|0);
   var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
   STACKTOP = sp;
   return;
  case 18: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $75=HEAP32[(($1)>>2)];
   var $76=(($75)|0);
   var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
   ___resumeException($74$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__ct << 24) >> 24)==(($__decimal_point << 24) >> 24);
   if ($1) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $3=HEAP8[($__in_units)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { var $_01 = -1;label = 36; break; } else { label = 3; break; }
  case 3: 
   HEAP8[($__in_units)]=0;
   var $7=HEAP32[(($__a_end)>>2)];
   var $8=(($7+1)|0);
   HEAP32[(($__a_end)>>2)]=$8;
   HEAP8[($7)]=46;
   var $9=$__grouping;
   var $10=HEAP8[($9)];
   var $11=(($10)&(255));
   var $12=$11 & 1;
   var $13=(($12)|(0))==0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($__grouping+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 6; break;
  case 5: 
   var $18=$11 >>> 1;
   var $19 = $18;label = 6; break;
  case 6: 
   var $19;
   var $20=(($19)|(0))==0;
   if ($20) { var $_01 = 0;label = 36; break; } else { label = 7; break; }
  case 7: 
   var $22=HEAP32[(($__g_end)>>2)];
   var $23=$22;
   var $24=$__g;
   var $25=((($23)-($24))|0);
   var $26=(($25)|(0)) < 160;
   if ($26) { label = 8; break; } else { var $_01 = 0;label = 36; break; }
  case 8: 
   var $28=HEAP32[(($__dc)>>2)];
   var $29=(($22+4)|0);
   HEAP32[(($__g_end)>>2)]=$29;
   HEAP32[(($22)>>2)]=$28;
   var $_01 = 0;label = 36; break;
  case 9: 
   var $31=(($__ct << 24) >> 24)==(($__thousands_sep << 24) >> 24);
   if ($31) { label = 10; break; } else { label = 17; break; }
  case 10: 
   var $33=$__grouping;
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=$35 & 1;
   var $37=(($36)|(0))==0;
   if ($37) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $39=(($__grouping+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $43 = $40;label = 13; break;
  case 12: 
   var $42=$35 >>> 1;
   var $43 = $42;label = 13; break;
  case 13: 
   var $43;
   var $44=(($43)|(0))==0;
   if ($44) { label = 17; break; } else { label = 14; break; }
  case 14: 
   var $46=HEAP8[($__in_units)];
   var $47=$46 & 1;
   var $48=(($47 << 24) >> 24)==0;
   if ($48) { var $_01 = -1;label = 36; break; } else { label = 15; break; }
  case 15: 
   var $50=HEAP32[(($__g_end)>>2)];
   var $51=$50;
   var $52=$__g;
   var $53=((($51)-($52))|0);
   var $54=(($53)|(0)) < 160;
   if ($54) { label = 16; break; } else { var $_01 = 0;label = 36; break; }
  case 16: 
   var $56=HEAP32[(($__dc)>>2)];
   var $57=(($50+4)|0);
   HEAP32[(($__g_end)>>2)]=$57;
   HEAP32[(($50)>>2)]=$56;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 36; break;
  case 17: 
   var $58=(($__atoms+32)|0);
   var $_02 = $__atoms;label = 19; break;
  case 18: 
   var $60=(($64)|(0))==(($58)|(0));
   if ($60) { var $_0_lcssa = $58;label = 20; break; } else { var $_02 = $64;label = 19; break; }
  case 19: 
   var $_02;
   var $62=HEAP8[($_02)];
   var $63=(($62 << 24) >> 24)==(($__ct << 24) >> 24);
   var $64=(($_02+1)|0);
   if ($63) { var $_0_lcssa = $_02;label = 20; break; } else { label = 18; break; }
  case 20: 
   var $_0_lcssa;
   var $65=$_0_lcssa;
   var $66=$__atoms;
   var $67=((($65)-($66))|0);
   var $68=(($67)|(0)) > 31;
   if ($68) { var $_01 = -1;label = 36; break; } else { label = 21; break; }
  case 21: 
   var $70=((10088+$67)|0);
   var $71=HEAP8[($70)];
   if ((($67)|(0))==25 | (($67)|(0))==24) {
    label = 22; break;
   }
   else if ((($67)|(0))==22 | (($67)|(0))==23) {
    label = 25; break;
   }
   else {
   label = 26; break;
   }
  case 22: 
   var $73=HEAP32[(($__a_end)>>2)];
   var $74=(($73)|(0))==(($__a)|(0));
   if ($74) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $76=((($73)-(1))|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=$78 & 95;
   var $80=HEAP8[($__exp)];
   var $81=(($80)&(255));
   var $82=$81 & 127;
   var $83=(($79)|(0))==(($82)|(0));
   if ($83) { label = 24; break; } else { var $_01 = -1;label = 36; break; }
  case 24: 
   var $85=(($73+1)|0);
   HEAP32[(($__a_end)>>2)]=$85;
   HEAP8[($73)]=$71;
   var $_01 = 0;label = 36; break;
  case 25: 
   HEAP8[($__exp)]=80;
   var $86=HEAP32[(($__a_end)>>2)];
   var $87=(($86+1)|0);
   HEAP32[(($__a_end)>>2)]=$87;
   HEAP8[($86)]=$71;
   var $_01 = 0;label = 36; break;
  case 26: 
   var $89=(($71)&(255));
   var $90=$89 & 95;
   var $91=HEAP8[($__exp)];
   var $92=(($91 << 24) >> 24);
   var $93=(($90)|(0))==(($92)|(0));
   if ($93) { label = 27; break; } else { label = 34; break; }
  case 27: 
   var $95=$91 | -128;
   HEAP8[($__exp)]=$95;
   var $96=HEAP8[($__in_units)];
   var $97=$96 & 1;
   var $98=(($97 << 24) >> 24)==0;
   if ($98) { label = 34; break; } else { label = 28; break; }
  case 28: 
   HEAP8[($__in_units)]=0;
   var $100=$__grouping;
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=$102 & 1;
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $106=(($__grouping+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $110 = $107;label = 31; break;
  case 30: 
   var $109=$102 >>> 1;
   var $110 = $109;label = 31; break;
  case 31: 
   var $110;
   var $111=(($110)|(0))==0;
   if ($111) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $113=HEAP32[(($__g_end)>>2)];
   var $114=$113;
   var $115=$__g;
   var $116=((($114)-($115))|0);
   var $117=(($116)|(0)) < 160;
   if ($117) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $119=HEAP32[(($__dc)>>2)];
   var $120=(($113+4)|0);
   HEAP32[(($__g_end)>>2)]=$120;
   HEAP32[(($113)>>2)]=$119;
   label = 34; break;
  case 34: 
   var $122=HEAP32[(($__a_end)>>2)];
   var $123=(($122+1)|0);
   HEAP32[(($__a_end)>>2)]=$123;
   HEAP8[($122)]=$71;
   var $124=(($67)|(0)) > 21;
   if ($124) { var $_01 = 0;label = 36; break; } else { label = 35; break; }
  case 35: 
   var $126=HEAP32[(($__dc)>>2)];
   var $127=((($126)+(1))|0);
   HEAP32[(($__dc)>>2)]=$127;
   var $_01 = 0;label = 36; break;
  case 36: 
   var $_01;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 14; break; } else { label = 2; break; }
  case 2: 
   var $3=___errno_location();
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$11;
   label = 7; break;
  case 6: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 7: 
   var $15=HEAP32[((12160)>>2)];
   var $16=_strtold_l($__a, $__p2, $15);
   var $17=HEAP32[(($3)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($3)>>2)]=$4;
   label = 9; break;
  case 9: 
   var $21=HEAP32[(($__p2)>>2)];
   var $22=(($21)|(0))==(($__a_end)|(0));
   if ($22) { label = 11; break; } else { label = 10; break; }
  case 10: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 15; break;
  case 11: 
   var $25=(($17)|(0))==34;
   if ($25) { label = 12; break; } else { label = 13; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   label = 13; break;
  case 13: 
   var $28=$16;
   var $_0 = $28;label = 15; break;
  case 14: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 15; break;
  case 15: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(32);
   var $__thousands_sep=(sp)+(40);
   var $__grouping=(sp)+(48);
   var $__buf=(sp)+(64);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre12=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre12;var $_pre_phi14 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre13=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi14 = $_pre13;label = 5; break;
  case 5: 
   var $_pre_phi14;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP8[($__decimal_point)];
   var $18=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $35 = 0;label = 11; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { var $35 = $19;label = 11; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 30; break; }
  case 9: 
   var $33=(($32)|(0))==-1;
   if ($33) { label = 10; break; } else { var $35 = $19;label = 11; break; }
  case 10: 
   HEAP32[(($13)>>2)]=0;
   var $35 = 0;label = 11; break;
  case 11: 
   var $35;
   var $36=(($35)|(0))==0;
   var $37=HEAP32[(($14)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 17; break; } else { label = 12; break; }
  case 12: 
   var $40=(($37+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($37+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0))==(($43)|(0));
   if ($44) { label = 14; break; } else { label = 13; break; }
  case 13: 
   if ($36) { var $56 = $37;var $55 = 0;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = 0;label = 41; break; }
  case 14: 
   var $46=$37;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+36)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 30; break; }
  case 15: 
   var $51=(($50)|(0))==-1;
   if ($51) { label = 16; break; } else { label = 18; break; }
  case 16: 
   HEAP32[(($14)>>2)]=0;
   label = 17; break;
  case 17: 
   if ($36) { var $__a_2 = $__a_0;var $123 = 0;var $122 = 1;label = 41; break; } else { var $56 = 0;var $55 = 1;label = 19; break; }
  case 18: 
   var $53=(($37)|(0))==0;
   var $54=$36 ^ $53;
   if ($54) { var $56 = $37;var $55 = $53;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = $53;label = 41; break; }
  case 19: 
   var $55;
   var $56;
   var $57=HEAP32[(($__a_end)>>2)];
   var $58=$57;
   var $59=$__a_0;
   var $60=((($58)-($59))|0);
   var $61=HEAP8[($0)];
   var $62=(($61)&(255));
   var $63=$62 & 1;
   var $64=(($63)|(0))==0;
   var $65=HEAP32[(($16)>>2)];
   var $66=$62 >>> 1;
   var $67=$64 ? $66 : $65;
   var $68=(($60)|(0))==(($67)|(0));
   if ($68) { label = 20; break; } else { var $__a_1 = $__a_0;label = 33; break; }
  case 20: 
   if ($64) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $71=HEAP32[(($16)>>2)];
   var $76 = $71;var $75 = $71;label = 23; break;
  case 22: 
   var $73=$62 >>> 1;
   var $74=$62 >>> 1;
   var $76 = $74;var $75 = $73;label = 23; break;
  case 23: 
   var $75;
   var $76;
   var $77=$76 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $77, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 30; break; }
  case 24: 
   var $78=HEAP8[($0)];
   var $79=$78 & 1;
   var $80=(($79 << 24) >> 24)==0;
   if ($80) { var $84 = 10;label = 26; break; } else { label = 25; break; }
  case 25: 
   var $82=HEAP32[(($15)>>2)];
   var $83=$82 & -2;
   var $phitmp8=((($83)-(1))|0);
   var $84 = $phitmp8;label = 26; break;
  case 26: 
   var $84;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $85=HEAP8[($0)];
   var $86=$85 & 1;
   var $87=(($86 << 24) >> 24)==0;
   if ($87) { var $90 = $_pre_phi;label = 29; break; } else { label = 28; break; }
  case 28: 
   var $89=HEAP32[(($_pre_phi14)>>2)];
   var $90 = $89;label = 29; break;
  case 29: 
   var $90;
   var $91=(($90+$75)|0);
   HEAP32[(($__a_end)>>2)]=$91;
   var $__a_1 = $90;label = 33; break;
  case 30: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 32; break;
  case 31: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 32; break;
  case 32: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 33: 
   var $__a_1;
   var $93=(($35+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($35+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($94)|(0))==(($96)|(0));
   if ($97) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $99=$35;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+36)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 30; break; }
  case 35: 
   var $extract_t=(($103) & 255);
   var $_0_off0 = $extract_t;label = 37; break;
  case 36: 
   var $105=HEAP8[($94)];
   var $_0_off0 = $105;label = 37; break;
  case 37: 
   var $_0_off0;
   var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $108=(($107)|(0))==0;
   if ($108) { label = 38; break; } else { var $__a_2 = $__a_1;var $123 = $56;var $122 = $55;label = 41; break; }
  case 38: 
   var $110=HEAP32[(($93)>>2)];
   var $111=HEAP32[(($95)>>2)];
   var $112=(($110)|(0))==(($111)|(0));
   if ($112) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $114=$35;
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+40)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $35;label = 6; break; } else { label = 30; break; }
  case 40: 
   var $120=(($110+1)|0);
   HEAP32[(($93)>>2)]=$120;
   var $__a_0 = $__a_1;var $19 = $35;label = 6; break;
  case 41: 
   var $122;
   var $123;
   var $__a_2;
   var $124=$__grouping;
   var $125=HEAP8[($124)];
   var $126=(($125)&(255));
   var $127=$126 & 1;
   var $128=(($127)|(0))==0;
   if ($128) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $130=(($__grouping+4)|0);
   var $131=HEAP32[(($130)>>2)];
   var $134 = $131;label = 44; break;
  case 43: 
   var $133=$126 >>> 1;
   var $134 = $133;label = 44; break;
  case 44: 
   var $134;
   var $135=(($134)|(0))==0;
   if ($135) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $137=HEAP8[($__in_units)];
   var $138=$137 & 1;
   var $139=(($138 << 24) >> 24)==0;
   if ($139) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $141=HEAP32[(($__g_end)>>2)];
   var $142=$141;
   var $143=$__g;
   var $144=((($142)-($143))|0);
   var $145=(($144)|(0)) < 160;
   if ($145) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $147=HEAP32[(($__dc)>>2)];
   var $148=(($141+4)|0);
   HEAP32[(($__g_end)>>2)]=$148;
   HEAP32[(($141)>>2)]=$147;
   label = 48; break;
  case 48: 
   var $149=HEAP32[(($__a_end)>>2)];
   var $150 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2, $149, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 31; break; }
  case 49: 
   HEAPF64[(($__v)>>3)]=$150;
   var $152=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $152, $__err);
   if ($36) { var $167 = 0;label = 54; break; } else { label = 50; break; }
  case 50: 
   var $154=(($35+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($35+16)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($155)|(0))==(($157)|(0));
   if ($158) { label = 51; break; } else { var $167 = $35;label = 54; break; }
  case 51: 
   var $160=$35;
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+36)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 31; break; }
  case 52: 
   var $165=(($164)|(0))==-1;
   if ($165) { label = 53; break; } else { var $167 = $35;label = 54; break; }
  case 53: 
   HEAP32[(($13)>>2)]=0;
   var $167 = 0;label = 54; break;
  case 54: 
   var $167;
   var $168=(($167)|(0))==0;
   if ($122) { label = 59; break; } else { label = 55; break; }
  case 55: 
   var $170=(($123+12)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($123+16)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($171)|(0))==(($173)|(0));
   if ($174) { label = 56; break; } else { label = 60; break; }
  case 56: 
   var $176=$123;
   var $177=HEAP32[(($176)>>2)];
   var $178=(($177+36)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 31; break; }
  case 57: 
   var $181=(($180)|(0))==-1;
   if ($181) { label = 58; break; } else { label = 60; break; }
  case 58: 
   HEAP32[(($14)>>2)]=0;
   label = 59; break;
  case 59: 
   if ($168) { label = 61; break; } else { label = 62; break; }
  case 60: 
   var $183=(($123)|(0))==0;
   var $tmp6=$168 ^ $183;
   if ($tmp6) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $185=HEAP32[(($__err)>>2)];
   var $186=$185 | 2;
   HEAP32[(($__err)>>2)]=$186;
   label = 62; break;
  case 62: 
   var $188=(($agg_result)|0);
   HEAP32[(($188)>>2)]=$167;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 13; break; } else { label = 2; break; }
  case 2: 
   var $3=___errno_location();
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$11;
   label = 7; break;
  case 6: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 7: 
   var $15=HEAP32[((12160)>>2)];
   var $16=_strtold_l($__a, $__p2, $15);
   var $17=HEAP32[(($3)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($3)>>2)]=$4;
   label = 9; break;
  case 9: 
   var $21=HEAP32[(($__p2)>>2)];
   var $22=(($21)|(0))==(($__a_end)|(0));
   if ($22) { label = 11; break; } else { label = 10; break; }
  case 10: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 14; break;
  case 11: 
   var $25=(($17)|(0))==34;
   if ($25) { label = 12; break; } else { var $_0 = $16;label = 14; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = $16;label = 14; break;
  case 13: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 14; break;
  case 14: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(32);
   var $__thousands_sep=(sp)+(40);
   var $__grouping=(sp)+(48);
   var $__buf=(sp)+(64);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre12=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre12;var $_pre_phi14 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre13=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi14 = $_pre13;label = 5; break;
  case 5: 
   var $_pre_phi14;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP8[($__decimal_point)];
   var $18=HEAP8[($__thousands_sep)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $35 = 0;label = 11; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { var $35 = $19;label = 11; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 30; break; }
  case 9: 
   var $33=(($32)|(0))==-1;
   if ($33) { label = 10; break; } else { var $35 = $19;label = 11; break; }
  case 10: 
   HEAP32[(($13)>>2)]=0;
   var $35 = 0;label = 11; break;
  case 11: 
   var $35;
   var $36=(($35)|(0))==0;
   var $37=HEAP32[(($14)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 17; break; } else { label = 12; break; }
  case 12: 
   var $40=(($37+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($37+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0))==(($43)|(0));
   if ($44) { label = 14; break; } else { label = 13; break; }
  case 13: 
   if ($36) { var $56 = $37;var $55 = 0;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = 0;label = 41; break; }
  case 14: 
   var $46=$37;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+36)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 30; break; }
  case 15: 
   var $51=(($50)|(0))==-1;
   if ($51) { label = 16; break; } else { label = 18; break; }
  case 16: 
   HEAP32[(($14)>>2)]=0;
   label = 17; break;
  case 17: 
   if ($36) { var $__a_2 = $__a_0;var $123 = 0;var $122 = 1;label = 41; break; } else { var $56 = 0;var $55 = 1;label = 19; break; }
  case 18: 
   var $53=(($37)|(0))==0;
   var $54=$36 ^ $53;
   if ($54) { var $56 = $37;var $55 = $53;label = 19; break; } else { var $__a_2 = $__a_0;var $123 = $37;var $122 = $53;label = 41; break; }
  case 19: 
   var $55;
   var $56;
   var $57=HEAP32[(($__a_end)>>2)];
   var $58=$57;
   var $59=$__a_0;
   var $60=((($58)-($59))|0);
   var $61=HEAP8[($0)];
   var $62=(($61)&(255));
   var $63=$62 & 1;
   var $64=(($63)|(0))==0;
   var $65=HEAP32[(($16)>>2)];
   var $66=$62 >>> 1;
   var $67=$64 ? $66 : $65;
   var $68=(($60)|(0))==(($67)|(0));
   if ($68) { label = 20; break; } else { var $__a_1 = $__a_0;label = 33; break; }
  case 20: 
   if ($64) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $71=HEAP32[(($16)>>2)];
   var $76 = $71;var $75 = $71;label = 23; break;
  case 22: 
   var $73=$62 >>> 1;
   var $74=$62 >>> 1;
   var $76 = $74;var $75 = $73;label = 23; break;
  case 23: 
   var $75;
   var $76;
   var $77=$76 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $77, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 30; break; }
  case 24: 
   var $78=HEAP8[($0)];
   var $79=$78 & 1;
   var $80=(($79 << 24) >> 24)==0;
   if ($80) { var $84 = 10;label = 26; break; } else { label = 25; break; }
  case 25: 
   var $82=HEAP32[(($15)>>2)];
   var $83=$82 & -2;
   var $phitmp8=((($83)-(1))|0);
   var $84 = $phitmp8;label = 26; break;
  case 26: 
   var $84;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $85=HEAP8[($0)];
   var $86=$85 & 1;
   var $87=(($86 << 24) >> 24)==0;
   if ($87) { var $90 = $_pre_phi;label = 29; break; } else { label = 28; break; }
  case 28: 
   var $89=HEAP32[(($_pre_phi14)>>2)];
   var $90 = $89;label = 29; break;
  case 29: 
   var $90;
   var $91=(($90+$75)|0);
   HEAP32[(($__a_end)>>2)]=$91;
   var $__a_1 = $90;label = 33; break;
  case 30: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 32; break;
  case 31: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 32; break;
  case 32: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 33: 
   var $__a_1;
   var $93=(($35+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($35+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($94)|(0))==(($96)|(0));
   if ($97) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $99=$35;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+36)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 30; break; }
  case 35: 
   var $extract_t=(($103) & 255);
   var $_0_off0 = $extract_t;label = 37; break;
  case 36: 
   var $105=HEAP8[($94)];
   var $_0_off0 = $105;label = 37; break;
  case 37: 
   var $_0_off0;
   var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $108=(($107)|(0))==0;
   if ($108) { label = 38; break; } else { var $__a_2 = $__a_1;var $123 = $56;var $122 = $55;label = 41; break; }
  case 38: 
   var $110=HEAP32[(($93)>>2)];
   var $111=HEAP32[(($95)>>2)];
   var $112=(($110)|(0))==(($111)|(0));
   if ($112) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $114=$35;
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+40)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $35;label = 6; break; } else { label = 30; break; }
  case 40: 
   var $120=(($110+1)|0);
   HEAP32[(($93)>>2)]=$120;
   var $__a_0 = $__a_1;var $19 = $35;label = 6; break;
  case 41: 
   var $122;
   var $123;
   var $__a_2;
   var $124=$__grouping;
   var $125=HEAP8[($124)];
   var $126=(($125)&(255));
   var $127=$126 & 1;
   var $128=(($127)|(0))==0;
   if ($128) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $130=(($__grouping+4)|0);
   var $131=HEAP32[(($130)>>2)];
   var $134 = $131;label = 44; break;
  case 43: 
   var $133=$126 >>> 1;
   var $134 = $133;label = 44; break;
  case 44: 
   var $134;
   var $135=(($134)|(0))==0;
   if ($135) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $137=HEAP8[($__in_units)];
   var $138=$137 & 1;
   var $139=(($138 << 24) >> 24)==0;
   if ($139) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $141=HEAP32[(($__g_end)>>2)];
   var $142=$141;
   var $143=$__g;
   var $144=((($142)-($143))|0);
   var $145=(($144)|(0)) < 160;
   if ($145) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $147=HEAP32[(($__dc)>>2)];
   var $148=(($141+4)|0);
   HEAP32[(($__g_end)>>2)]=$148;
   HEAP32[(($141)>>2)]=$147;
   label = 48; break;
  case 48: 
   var $149=HEAP32[(($__a_end)>>2)];
   var $150 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2, $149, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 31; break; }
  case 49: 
   HEAPF64[(($__v)>>3)]=$150;
   var $152=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $152, $__err);
   if ($36) { var $167 = 0;label = 54; break; } else { label = 50; break; }
  case 50: 
   var $154=(($35+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($35+16)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($155)|(0))==(($157)|(0));
   if ($158) { label = 51; break; } else { var $167 = $35;label = 54; break; }
  case 51: 
   var $160=$35;
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+36)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 31; break; }
  case 52: 
   var $165=(($164)|(0))==-1;
   if ($165) { label = 53; break; } else { var $167 = $35;label = 54; break; }
  case 53: 
   HEAP32[(($13)>>2)]=0;
   var $167 = 0;label = 54; break;
  case 54: 
   var $167;
   var $168=(($167)|(0))==0;
   if ($122) { label = 59; break; } else { label = 55; break; }
  case 55: 
   var $170=(($123+12)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($123+16)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($171)|(0))==(($173)|(0));
   if ($174) { label = 56; break; } else { label = 60; break; }
  case 56: 
   var $176=$123;
   var $177=HEAP32[(($176)>>2)];
   var $178=(($177+36)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 31; break; }
  case 57: 
   var $181=(($180)|(0))==-1;
   if ($181) { label = 58; break; } else { label = 60; break; }
  case 58: 
   HEAP32[(($14)>>2)]=0;
   label = 59; break;
  case 59: 
   if ($168) { label = 61; break; } else { label = 62; break; }
  case 60: 
   var $183=(($123)|(0))==0;
   var $tmp6=$168 ^ $183;
   if ($tmp6) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $185=HEAP32[(($__err)>>2)];
   var $186=$185 | 2;
   HEAP32[(($__err)>>2)]=$186;
   label = 62; break;
  case 62: 
   var $188=(($agg_result)|0);
   HEAP32[(($188)>>2)]=$167;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p2=sp;
   var $1=(($__a)|(0))==(($__a_end)|(0));
   if ($1) { label = 13; break; } else { label = 2; break; }
  case 2: 
   var $3=___errno_location();
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$11;
   label = 7; break;
  case 6: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 7: 
   var $15=HEAP32[((12160)>>2)];
   var $16=_strtold_l($__a, $__p2, $15);
   var $17=HEAP32[(($3)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($3)>>2)]=$4;
   label = 9; break;
  case 9: 
   var $21=HEAP32[(($__p2)>>2)];
   var $22=(($21)|(0))==(($__a_end)|(0));
   if ($22) { label = 11; break; } else { label = 10; break; }
  case 10: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 14; break;
  case 11: 
   var $25=(($17)|(0))==34;
   if ($25) { label = 12; break; } else { var $_0 = $16;label = 14; break; }
  case 12: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = $16;label = 14; break;
  case 13: 
   HEAP32[(($__err)>>2)]=4;
   var $_0 = 0;label = 14; break;
  case 14: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__atoms=(sp)+(16);
   var $__grouping=(sp)+(48);
   var $__grouping15=$__grouping;
   var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   HEAP32[(($__grouping15)>>2)]=0; HEAP32[((($__grouping15)+(4))>>2)]=0; HEAP32[((($__grouping15)+(8))>>2)]=0;
   var $1=$__buf;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 38; break; }
  case 2: 
   var $3=(($0)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13704)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13704;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 39; break; }
  case 4: 
   var $12=HEAP32[((((13708)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 39; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $28=$24;
   var $29=(($__atoms)|0);
   var $30=$24;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+32)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($28, ((10088)|0), ((10114)|0), $29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 39; break; }
  case 9: 
   var $35=HEAP32[(($3)>>2)];
   var $36=(($35)|0);
   var $37=__ZNSt3__114__shared_count16__release_sharedEv($36);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $38=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 41; break; }
  case 10: 
   var $39=HEAP8[($1)];
   var $40=$39 & 1;
   var $41=(($40 << 24) >> 24)==0;
   if ($41) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $43=(($__buf+8)|0);
   var $44=HEAP32[(($43)>>2)];
   var $_pre16=(($38+1)|0);
   var $47 = $44;var $_pre_phi = $_pre16;var $_pre_phi18 = $43;label = 13; break;
  case 12: 
   var $46=(($38+1)|0);
   var $_pre17=(($__buf+8)|0);
   var $47 = $46;var $_pre_phi = $46;var $_pre_phi18 = $_pre17;label = 13; break;
  case 13: 
   var $_pre_phi18;
   var $_pre_phi;
   var $47;
   HEAP32[(($__a_end)>>2)]=$47;
   var $48=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$48;
   HEAP32[(($__dc)>>2)]=0;
   var $49=(($__b)|0);
   var $50=(($__e)|0);
   var $51=(($__buf)|0);
   var $52=(($__buf+4)|0);
   var $_pre=HEAP32[(($49)>>2)];
   var $__a_0 = $47;var $53 = $_pre;label = 14; break;
  case 14: 
   var $53;
   var $__a_0;
   var $54=(($53)|(0))==0;
   if ($54) { var $69 = 0;label = 19; break; } else { label = 15; break; }
  case 15: 
   var $56=(($53+12)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($53+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($57)|(0))==(($59)|(0));
   if ($60) { label = 16; break; } else { var $69 = $53;label = 19; break; }
  case 16: 
   var $62=$53;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+36)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 40; break; }
  case 17: 
   var $67=(($66)|(0))==-1;
   if ($67) { label = 18; break; } else { var $69 = $53;label = 19; break; }
  case 18: 
   HEAP32[(($49)>>2)]=0;
   var $69 = 0;label = 19; break;
  case 19: 
   var $69;
   var $70=(($69)|(0))==0;
   var $71=HEAP32[(($50)>>2)];
   var $72=(($71)|(0))==0;
   if ($72) { label = 25; break; } else { label = 20; break; }
  case 20: 
   var $74=(($71+12)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($71+16)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75)|(0))==(($77)|(0));
   if ($78) { label = 22; break; } else { label = 21; break; }
  case 21: 
   if ($70) { label = 27; break; } else { var $__a_2 = $__a_0;label = 51; break; }
  case 22: 
   var $80=$71;
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+36)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 40; break; }
  case 23: 
   var $85=(($84)|(0))==-1;
   if ($85) { label = 24; break; } else { label = 26; break; }
  case 24: 
   HEAP32[(($50)>>2)]=0;
   label = 25; break;
  case 25: 
   if ($70) { var $__a_2 = $__a_0;label = 51; break; } else { label = 27; break; }
  case 26: 
   var $87=(($71)|(0))==0;
   var $88=$70 ^ $87;
   if ($88) { label = 27; break; } else { var $__a_2 = $__a_0;label = 51; break; }
  case 27: 
   var $89=HEAP32[(($__a_end)>>2)];
   var $90=$89;
   var $91=$__a_0;
   var $92=((($90)-($91))|0);
   var $93=HEAP8[($1)];
   var $94=(($93)&(255));
   var $95=$94 & 1;
   var $96=(($95)|(0))==0;
   var $97=HEAP32[(($52)>>2)];
   var $98=$94 >>> 1;
   var $99=$96 ? $98 : $97;
   var $100=(($92)|(0))==(($99)|(0));
   if ($100) { label = 28; break; } else { var $__a_1 = $__a_0;label = 43; break; }
  case 28: 
   if ($96) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $103=HEAP32[(($52)>>2)];
   var $108 = $103;var $107 = $103;label = 31; break;
  case 30: 
   var $105=$94 >>> 1;
   var $106=$94 >>> 1;
   var $108 = $106;var $107 = $105;label = 31; break;
  case 31: 
   var $107;
   var $108;
   var $109=$108 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $109, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 40; break; }
  case 32: 
   var $110=HEAP8[($1)];
   var $111=$110 & 1;
   var $112=(($111 << 24) >> 24)==0;
   if ($112) { var $116 = 10;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $114=HEAP32[(($51)>>2)];
   var $115=$114 & -2;
   var $phitmp10=((($115)-(1))|0);
   var $116 = $phitmp10;label = 34; break;
  case 34: 
   var $116;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $116, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $117=HEAP8[($1)];
   var $118=$117 & 1;
   var $119=(($118 << 24) >> 24)==0;
   if ($119) { var $122 = $_pre_phi;label = 37; break; } else { label = 36; break; }
  case 36: 
   var $121=HEAP32[(($_pre_phi18)>>2)];
   var $122 = $121;label = 37; break;
  case 37: 
   var $122;
   var $123=(($122+$107)|0);
   HEAP32[(($__a_end)>>2)]=$123;
   var $__a_1 = $122;label = 43; break;
  case 38: 
   var $125$0 = ___cxa_find_matching_catch(-1, -1); $125$1 = tempRet0;
   var $126=$125$0;
   var $127=$125$1;
   var $_02 = $127;var $_03 = $126;label = 74; break;
  case 39: 
   var $129$0 = ___cxa_find_matching_catch(-1, -1); $129$1 = tempRet0;
   var $130=$129$0;
   var $131=$129$1;
   var $132=HEAP32[(($3)>>2)];
   var $133=(($132)|0);
   var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
   var $_02 = $131;var $_03 = $130;label = 74; break;
  case 40: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit$1;var $eh_lpad_body$0 = $lpad_loopexit$0;label = 42; break;
  case 41: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_nonloopexit$1;var $eh_lpad_body$0 = $lpad_nonloopexit$0;label = 42; break;
  case 42: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $135=$eh_lpad_body$0;
   var $136=$eh_lpad_body$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   var $_02 = $136;var $_03 = $135;label = 74; break;
  case 43: 
   var $__a_1;
   var $137=(($69+12)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($69+16)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($138)|(0))==(($140)|(0));
   if ($141) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $143=$69;
   var $144=HEAP32[(($143)>>2)];
   var $145=(($144+36)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 40; break; }
  case 45: 
   var $extract_t=(($147) & 255);
   var $_0_off0 = $extract_t;label = 47; break;
  case 46: 
   var $149=HEAP8[($138)];
   var $_0_off0 = $149;label = 47; break;
  case 47: 
   var $_0_off0;
   var $151=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, 16, $__a_1, $__a_end, $__dc, 0, $__grouping, $48, $__g_end, $29);
   var $152=(($151)|(0))==0;
   if ($152) { label = 48; break; } else { var $__a_2 = $__a_1;label = 51; break; }
  case 48: 
   var $154=HEAP32[(($137)>>2)];
   var $155=HEAP32[(($139)>>2)];
   var $156=(($154)|(0))==(($155)|(0));
   if ($156) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $158=$69;
   var $159=HEAP32[(($158)>>2)];
   var $160=(($159+40)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $53 = $69;label = 14; break; } else { label = 40; break; }
  case 50: 
   var $164=(($154+1)|0);
   HEAP32[(($137)>>2)]=$164;
   var $__a_0 = $__a_1;var $53 = $69;label = 14; break;
  case 51: 
   var $__a_2;
   var $166=(($__a_2+3)|0);
   HEAP8[($166)]=0;
   var $167=HEAP8[(14264)];
   var $168=(($167 << 24) >> 24)==0;
   if ($168) { label = 52; break; } else { label = 56; break; }
  case 52: 
   var $170=___cxa_guard_acquire(14264);
   var $171=(($170)|(0))==0;
   if ($171) { label = 56; break; } else { label = 53; break; }
  case 53: 
   var $173 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 55; break; }
  case 54: 
   HEAP32[((12160)>>2)]=$173;
   label = 56; break;
  case 55: 
   var $176$0 = ___cxa_find_matching_catch(-1, -1); $176$1 = tempRet0;
   var $eh_lpad_body$1 = $176$1;var $eh_lpad_body$0 = $176$0;label = 42; break;
  case 56: 
   var $178=HEAP32[((12160)>>2)];
   var $179 = (function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2, $178, ((1336)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label = 57; break; } else { label = 41; break; }
  case 57: 
   var $181=(($179)|(0))==1;
   if ($181) { label = 59; break; } else { label = 58; break; }
  case 58: 
   HEAP32[(($__err)>>2)]=4;
   label = 59; break;
  case 59: 
   var $184=HEAP32[(($49)>>2)];
   var $185=(($184)|(0))==0;
   if ($185) { var $200 = 0;label = 64; break; } else { label = 60; break; }
  case 60: 
   var $187=(($184+12)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($184+16)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=(($188)|(0))==(($190)|(0));
   if ($191) { label = 61; break; } else { var $200 = $184;label = 64; break; }
  case 61: 
   var $193=$184;
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194+36)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$196]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 41; break; }
  case 62: 
   var $198=(($197)|(0))==-1;
   if ($198) { label = 63; break; } else { var $200 = $184;label = 64; break; }
  case 63: 
   HEAP32[(($49)>>2)]=0;
   var $200 = 0;label = 64; break;
  case 64: 
   var $200;
   var $201=(($200)|(0))==0;
   var $202=HEAP32[(($50)>>2)];
   var $203=(($202)|(0))==0;
   if ($203) { label = 70; break; } else { label = 65; break; }
  case 65: 
   var $205=(($202+12)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($202+16)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($206)|(0))==(($208)|(0));
   if ($209) { label = 67; break; } else { label = 66; break; }
  case 66: 
   if ($201) { label = 73; break; } else { label = 72; break; }
  case 67: 
   var $211=$202;
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212+36)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 68; break; } else { label = 41; break; }
  case 68: 
   var $216=(($215)|(0))==-1;
   if ($216) { label = 69; break; } else { label = 71; break; }
  case 69: 
   HEAP32[(($50)>>2)]=0;
   label = 70; break;
  case 70: 
   if ($201) { label = 72; break; } else { label = 73; break; }
  case 71: 
   var $218=(($202)|(0))==0;
   var $tmp8=$201 ^ $218;
   if ($tmp8) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $220=HEAP32[(($__err)>>2)];
   var $221=$220 | 2;
   HEAP32[(($__err)>>2)]=$221;
   label = 73; break;
  case 73: 
   var $223=(($agg_result)|0);
   HEAP32[(($223)>>2)]=$200;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  case 74: 
   var $_03;
   var $_02;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   var $225$0=$_03;
   var $225$1=0;
   var $226$0=$225$0;
   var $226$1=$_02;
   ___resumeException($226$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__va=sp;
   var $1=(($__va)|0);
   var $2=$__va;
   HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
   var $3=_uselocale($__l);
   var $4=_vsscanf($__s, $__format, $1);
   var $5=(($3)|(0))==0;
   if ($5) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $7 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1,0); $9$1 = tempRet0;
   var $10=$9$0;
   ___clang_call_terminate($10);
   throw "Reached an unreachable!";
  case 4: 
   STACKTOP = sp;
   return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i4=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__lv=(sp)+(32);
   var $1=(sp)+(40);
   var $2=(sp)+(48);
   var $3=(sp)+(56);
   var $4=(sp)+(64);
   var $5=(sp)+(72);
   var $__names=(sp)+(80);
   var $6=(sp)+(104);
   var $7=(($__iob+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & 1;
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   HEAP32[(($__lv)>>2)]=-1;
   var $12=$this;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($__b)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($2)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=(($__e)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($3)|0);
   HEAP32[(($21)>>2)]=$20;
   FUNCTION_TABLE[$15]($1, $this, $2, $3, $__iob, $__err, $__lv);
   var $22=(($1)|0);
   var $23=HEAP32[(($22)>>2)];
   HEAP32[(($16)>>2)]=$23;
   var $24=HEAP32[(($__lv)>>2)];
   if ((($24)|(0))==0) {
    label = 3; break;
   }
   else if ((($24)|(0))==1) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 3: 
   HEAP8[($__v)]=0;
   label = 6; break;
  case 4: 
   HEAP8[($__v)]=1;
   label = 6; break;
  case 5: 
   HEAP8[($__v)]=1;
   HEAP32[(($__err)>>2)]=4;
   label = 6; break;
  case 6: 
   var $29=(($agg_result)|0);
   HEAP32[(($29)>>2)]=$23;
   label = 28; break;
  case 7: 
   __ZNKSt3__18ios_base6getlocEv($4, $__iob);
   var $31=(($4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $34=HEAP32[((((13696)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $37=(($__p_i_i_i)|0);
   HEAP32[(($37)>>2)]=13696;
   var $38=(($__p_i_i_i+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 23; break; }
  case 9: 
   var $40=HEAP32[((((13700)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 23; break; }
  case 12: 
   throw "Reached an unreachable!";
  case 13: 
   var $56=$52;
   var $57=HEAP32[(($31)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   __ZNKSt3__18ios_base6getlocEv($5, $__iob);
   var $60=(($5)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$__p_i_i_i4;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $63=HEAP32[((((13312)|0))>>2)];
   var $64=(($63)|(0))==-1;
   if ($64) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $66=(($__p_i_i_i4)|0);
   HEAP32[(($66)>>2)]=13312;
   var $67=(($__p_i_i_i4+4)|0);
   HEAP32[(($67)>>2)]=(26);
   var $68=(($__p_i_i_i4+8)|0);
   HEAP32[(($68)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $62, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 24; break; }
  case 15: 
   var $69=HEAP32[((((13316)|0))>>2)];
   var $70=((($69)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $71=(($61+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($61+8)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$72;
   var $76=$74;
   var $77=((($75)-($76))|0);
   var $78=$77 >> 2;
   var $79=(($78)>>>(0)) > (($70)>>>(0));
   if ($79) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $80=(($74+($70<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))==0;
   if ($82) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $83=___cxa_allocate_exception(4);
   var $84=$83;
   __ZNSt8bad_castC2Ev($84);
   (function() { try { __THREW__ = 0; return ___cxa_throw($83, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 24; break; }
  case 18: 
   throw "Reached an unreachable!";
  case 19: 
   var $85=$81;
   var $86=HEAP32[(($60)>>2)];
   var $87=(($86)|0);
   var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
   var $89=(($__names)|0);
   var $90=$81;
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+24)|0);
   var $93=HEAP32[(($92)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($89, $85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { var $_02 = $89;label = 25; break; }
  case 20: 
   var $94=(($__names+12)|0);
   var $95=HEAP32[(($90)>>2)];
   var $96=(($95+28)|0);
   var $97=HEAP32[(($96)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($94, $85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { var $_02 = $94;label = 25; break; }
  case 21: 
   var $98=(($__e)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($6)|0);
   HEAP32[(($100)>>2)]=$99;
   var $101=(($__names+24)|0);
   var $102 = (function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $6, $89, $101, $56, $__err, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $103=(($102)|(0))==(($89)|(0));
   var $104=(($103)&(1));
   HEAP8[($__v)]=$104;
   var $105=(($__b)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($agg_result)|0);
   HEAP32[(($107)>>2)]=$106;
   var $108=(($__names+12)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($108);
   var $109=(($__names)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($109);
   label = 28; break;
  case 23: 
   var $111$0 = ___cxa_find_matching_catch(-1, -1); $111$1 = tempRet0;
   var $112=$111$0;
   var $113=$111$1;
   var $114=HEAP32[(($31)>>2)];
   var $115=(($114)|0);
   var $116=__ZNSt3__114__shared_count16__release_sharedEv($115);
   var $_0 = $112;var $_01 = $113;label = 29; break;
  case 24: 
   var $118$0 = ___cxa_find_matching_catch(-1, -1); $118$1 = tempRet0;
   var $119=$118$0;
   var $120=$118$1;
   var $121=HEAP32[(($60)>>2)];
   var $122=(($121)|0);
   var $123=__ZNSt3__114__shared_count16__release_sharedEv($122);
   var $_0 = $119;var $_01 = $120;label = 29; break;
  case 25: 
   var $_02;
   var $125$0 = ___cxa_find_matching_catch(-1, -1); $125$1 = tempRet0;
   var $126=$125$0;
   var $127=$125$1;
   var $128=(($89)|(0))==(($_02)|(0));
   if ($128) { var $_0 = $126;var $_01 = $127;label = 29; break; } else { var $129 = $_02;label = 26; break; }
  case 26: 
   var $129;
   var $130=((($129)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($130);
   var $131=(($130)|(0))==(($89)|(0));
   if ($131) { var $_0 = $126;var $_01 = $127;label = 29; break; } else { var $129 = $130;label = 26; break; }
  case 27: 
   var $132$0 = ___cxa_find_matching_catch(-1, -1); $132$1 = tempRet0;
   var $133=$132$0;
   var $134=(($__names+12)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($134);
   var $135=(($__names)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($135);
   var $136=$132$1;
   var $_0 = $133;var $_01 = $136;label = 29; break;
  case 28: 
   STACKTOP = sp;
   return;
  case 29: 
   var $_01;
   var $_0;
   var $138$0=$_0;
   var $138$1=0;
   var $139$0=$138$0;
   var $139$1=$_01;
   ___resumeException($139$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__statbuf=sp;
   var $1=$__ke;
   var $2=$__kb;
   var $3=((($1)-($2))|0);
   var $4=((((($3)|(0)))/(12))&-1);
   var $5=(($__statbuf)|0);
   var $6=(($4)>>>(0)) > 100;
   if ($6) { label = 2; break; } else { var $__status_0 = $5;var $__stat_hold_sroa_0_1 = 0;label = 10; break; }
  case 2: 
   var $8=_malloc($4);
   var $9=(($8)|(0))==0;
   if ($9) { label = 3; break; } else { var $__status_0 = $8;var $__stat_hold_sroa_0_1 = $8;label = 10; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0 = 0;var $__stat_hold_sroa_0_1 = 0;label = 10; break; } else { label = 4; break; }
  case 4: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   var $271$1 = $11$1;var $271$0 = $11$0;label = 106; break;
  case 5: 
   var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); $lpad_us_lcssa$1 = tempRet0;
   var $lpad_phi$1 = $lpad_us_lcssa$1;var $lpad_phi$0 = $lpad_us_lcssa$0;label = 8; break;
  case 6: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 8; break;
  case 7: 
   var $lpad_nonloopexit41$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit41$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit41$1;var $lpad_phi$0 = $lpad_nonloopexit41$0;label = 8; break;
  case 8: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $12=(($__stat_hold_sroa_0_1)|(0))==0;
   if ($12) { var $271$1 = $lpad_phi$1;var $271$0 = $lpad_phi$0;label = 106; break; } else { label = 9; break; }
  case 9: 
   _free($__stat_hold_sroa_0_1);
   var $271$1 = $lpad_phi$1;var $271$0 = $lpad_phi$0;label = 106; break;
  case 10: 
   var $__stat_hold_sroa_0_1;
   var $__status_0;
   var $14=(($__kb)|(0))==(($__ke)|(0));
   if ($14) { var $__n_might_match_0_lcssa = $4;var $__n_does_match_0_lcssa = 0;label = 11; break; } else { var $__n_might_match_051 = $4;var $__n_does_match_052 = 0;var $__st_053 = $__status_0;var $__ky_054 = $__kb;label = 12; break; }
  case 11: 
   var $__n_does_match_0_lcssa;
   var $__n_might_match_0_lcssa;
   var $15=(($__b)|0);
   var $16=(($__e)|0);
   var $17=$__ct;
   var $__indx_0 = 0;var $__n_does_match_2 = $__n_does_match_0_lcssa;var $__n_might_match_2 = $__n_might_match_0_lcssa;label = 19; break;
  case 12: 
   var $__ky_054;
   var $__st_053;
   var $__n_does_match_052;
   var $__n_might_match_051;
   var $18=$__ky_054;
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=$20 & 1;
   var $22=(($21)|(0))==0;
   if ($22) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $24=(($__ky_054+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $28 = $25;label = 15; break;
  case 14: 
   var $27=$20 >>> 1;
   var $28 = $27;label = 15; break;
  case 15: 
   var $28;
   var $29=(($28)|(0))==0;
   if ($29) { label = 17; break; } else { label = 16; break; }
  case 16: 
   HEAP8[($__st_053)]=1;
   var $__n_does_match_1 = $__n_does_match_052;var $__n_might_match_1 = $__n_might_match_051;label = 18; break;
  case 17: 
   HEAP8[($__st_053)]=2;
   var $32=((($__n_might_match_051)-(1))|0);
   var $33=((($__n_does_match_052)+(1))|0);
   var $__n_does_match_1 = $33;var $__n_might_match_1 = $32;label = 18; break;
  case 18: 
   var $__n_might_match_1;
   var $__n_does_match_1;
   var $35=(($__ky_054+12)|0);
   var $36=(($__st_053+1)|0);
   var $37=(($35)|(0))==(($__ke)|(0));
   if ($37) { var $__n_might_match_0_lcssa = $__n_might_match_1;var $__n_does_match_0_lcssa = $__n_does_match_1;label = 11; break; } else { var $__n_might_match_051 = $__n_might_match_1;var $__n_does_match_052 = $__n_does_match_1;var $__st_053 = $36;var $__ky_054 = $35;label = 12; break; }
  case 19: 
   var $__n_might_match_2;
   var $__n_does_match_2;
   var $__indx_0;
   var $39=HEAP32[(($15)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { var $57 = 0;label = 26; break; } else { label = 20; break; }
  case 20: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_06 = $52;label = 23; break; } else { label = 6; break; }
  case 22: 
   var $54=HEAP32[(($43)>>2)];
   var $_06 = $54;label = 23; break;
  case 23: 
   var $_06;
   var $55=(($_06)|(0))==-1;
   if ($55) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $_pre=HEAP32[(($15)>>2)];
   var $57 = $_pre;label = 26; break;
  case 25: 
   HEAP32[(($15)>>2)]=0;
   var $57 = 0;label = 26; break;
  case 26: 
   var $57;
   var $58=(($57)|(0))==0;
   var $59=HEAP32[(($16)>>2)];
   var $60=(($59)|(0))==0;
   if ($60) { var $79 = $57;var $78 = 0;label = 33; break; } else { label = 27; break; }
  case 27: 
   var $62=(($59+12)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($59+16)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($63)|(0))==(($65)|(0));
   if ($66) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $68=$59;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+36)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $72;label = 30; break; } else { label = 6; break; }
  case 29: 
   var $74=HEAP32[(($63)>>2)];
   var $_05 = $74;label = 30; break;
  case 30: 
   var $_05;
   var $75=(($_05)|(0))==-1;
   if ($75) { label = 31; break; } else { var $77 = $59;label = 32; break; }
  case 31: 
   HEAP32[(($16)>>2)]=0;
   var $77 = 0;label = 32; break;
  case 32: 
   var $77;
   var $_pr=HEAP32[(($15)>>2)];
   var $79 = $_pr;var $78 = $77;label = 33; break;
  case 33: 
   var $78;
   var $79;
   var $80=(($78)|(0))==0;
   var $81=$58 ^ $80;
   var $82=(($__n_might_match_2)|(0))!=0;
   var $_=$81 & $82;
   if ($_) { label = 34; break; } else { label = 82; break; }
  case 34: 
   var $84=(($79+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($79+16)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($85)|(0))==(($87)|(0));
   if ($88) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $90=$79;
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+36)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $94;label = 37; break; } else { label = 6; break; }
  case 36: 
   var $96=HEAP32[(($85)>>2)];
   var $_04 = $96;label = 37; break;
  case 37: 
   var $_04;
   if ($__case_sensitive) { var $__c_0 = $_04;label = 39; break; } else { label = 38; break; }
  case 38: 
   var $98=HEAP32[(($17)>>2)];
   var $99=(($98+28)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct, $_04) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0 = $101;label = 39; break; } else { label = 6; break; }
  case 39: 
   var $__c_0;
   if ($14) { var $__n_does_match_7 = $__n_does_match_2;var $__n_might_match_3_lcssa66 = $__n_might_match_2;label = 81; break; } else { label = 40; break; }
  case 40: 
   var $102=((($__indx_0)+(1))|0);
   if ($__case_sensitive) { var $__n_might_match_321_us = $__n_might_match_2;var $__n_does_match_322_us = $__n_does_match_2;var $__st_123_us = $__status_0;var $__consume_0_off025_us = 0;var $__ky1_026_us = $__kb;label = 41; break; } else { var $__n_might_match_321 = $__n_might_match_2;var $__n_does_match_322 = $__n_does_match_2;var $__st_123 = $__status_0;var $__consume_0_off025 = 0;var $__ky1_026 = $__kb;label = 54; break; }
  case 41: 
   var $__ky1_026_us;
   var $__consume_0_off025_us;
   var $__st_123_us;
   var $__n_does_match_322_us;
   var $__n_might_match_321_us;
   var $103=HEAP8[($__st_123_us)];
   var $104=(($103 << 24) >> 24)==1;
   if ($104) { label = 42; break; } else { var $__consume_1_off0_us = $__consume_0_off025_us;var $__n_does_match_4_us = $__n_does_match_322_us;var $__n_might_match_4_us = $__n_might_match_321_us;label = 52; break; }
  case 42: 
   var $106=$__ky1_026_us;
   var $107=HEAP8[($106)];
   var $108=$107 & 1;
   var $109=(($108 << 24) >> 24)==0;
   if ($109) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $111=(($__ky1_026_us+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $115 = $112;label = 45; break;
  case 44: 
   var $114=(($__ky1_026_us+4)|0);
   var $115 = $114;label = 45; break;
  case 45: 
   var $115;
   var $116=(($115+($__indx_0<<2))|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($__c_0)|(0))==(($117)|(0));
   if ($118) { label = 47; break; } else { label = 46; break; }
  case 46: 
   HEAP8[($__st_123_us)]=0;
   var $120=((($__n_might_match_321_us)-(1))|0);
   var $__consume_1_off0_us = $__consume_0_off025_us;var $__n_does_match_4_us = $__n_does_match_322_us;var $__n_might_match_4_us = $120;label = 52; break;
  case 47: 
   var $122=HEAP8[($106)];
   var $123=(($122)&(255));
   var $124=$123 & 1;
   var $125=(($124)|(0))==0;
   if ($125) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $127=(($__ky1_026_us+4)|0);
   var $128=HEAP32[(($127)>>2)];
   var $131 = $128;label = 50; break;
  case 49: 
   var $130=$123 >>> 1;
   var $131 = $130;label = 50; break;
  case 50: 
   var $131;
   var $132=(($131)|(0))==(($102)|(0));
   if ($132) { label = 51; break; } else { var $__consume_1_off0_us = 1;var $__n_does_match_4_us = $__n_does_match_322_us;var $__n_might_match_4_us = $__n_might_match_321_us;label = 52; break; }
  case 51: 
   HEAP8[($__st_123_us)]=2;
   var $134=((($__n_might_match_321_us)-(1))|0);
   var $135=((($__n_does_match_322_us)+(1))|0);
   var $__consume_1_off0_us = 1;var $__n_does_match_4_us = $135;var $__n_might_match_4_us = $134;label = 52; break;
  case 52: 
   var $__n_might_match_4_us;
   var $__n_does_match_4_us;
   var $__consume_1_off0_us;
   var $137=(($__ky1_026_us+12)|0);
   var $138=(($137)|(0))==(($__ke)|(0));
   if ($138) { var $__n_might_match_3_lcssa = $__n_might_match_4_us;var $__n_does_match_3_lcssa = $__n_does_match_4_us;var $__consume_0_off0_lcssa = $__consume_1_off0_us;label = 68; break; } else { label = 53; break; }
  case 53: 
   var $139=(($__st_123_us+1)|0);
   var $__n_might_match_321_us = $__n_might_match_4_us;var $__n_does_match_322_us = $__n_does_match_4_us;var $__st_123_us = $139;var $__consume_0_off025_us = $__consume_1_off0_us;var $__ky1_026_us = $137;label = 41; break;
  case 54: 
   var $__ky1_026;
   var $__consume_0_off025;
   var $__st_123;
   var $__n_does_match_322;
   var $__n_might_match_321;
   var $140=HEAP8[($__st_123)];
   var $141=(($140 << 24) >> 24)==1;
   if ($141) { label = 55; break; } else { var $__consume_1_off0 = $__consume_0_off025;var $__n_does_match_4 = $__n_does_match_322;var $__n_might_match_4 = $__n_might_match_321;label = 66; break; }
  case 55: 
   var $143=$__ky1_026;
   var $144=HEAP8[($143)];
   var $145=$144 & 1;
   var $146=(($145 << 24) >> 24)==0;
   if ($146) { label = 57; break; } else { label = 56; break; }
  case 56: 
   var $148=(($__ky1_026+8)|0);
   var $149=HEAP32[(($148)>>2)];
   var $153 = $149;label = 58; break;
  case 57: 
   var $151=(($__ky1_026+4)|0);
   var $153 = $151;label = 58; break;
  case 58: 
   var $153;
   var $154=(($153+($__indx_0<<2))|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=HEAP32[(($17)>>2)];
   var $157=(($156+28)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($__ct, $155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 5; break; }
  case 59: 
   var $160=(($__c_0)|(0))==(($159)|(0));
   if ($160) { label = 60; break; } else { label = 65; break; }
  case 60: 
   var $162=HEAP8[($143)];
   var $163=(($162)&(255));
   var $164=$163 & 1;
   var $165=(($164)|(0))==0;
   if ($165) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $167=(($__ky1_026+4)|0);
   var $168=HEAP32[(($167)>>2)];
   var $171 = $168;label = 63; break;
  case 62: 
   var $170=$163 >>> 1;
   var $171 = $170;label = 63; break;
  case 63: 
   var $171;
   var $172=(($171)|(0))==(($102)|(0));
   if ($172) { label = 64; break; } else { var $__consume_1_off0 = 1;var $__n_does_match_4 = $__n_does_match_322;var $__n_might_match_4 = $__n_might_match_321;label = 66; break; }
  case 64: 
   HEAP8[($__st_123)]=2;
   var $174=((($__n_might_match_321)-(1))|0);
   var $175=((($__n_does_match_322)+(1))|0);
   var $__consume_1_off0 = 1;var $__n_does_match_4 = $175;var $__n_might_match_4 = $174;label = 66; break;
  case 65: 
   HEAP8[($__st_123)]=0;
   var $177=((($__n_might_match_321)-(1))|0);
   var $__consume_1_off0 = $__consume_0_off025;var $__n_does_match_4 = $__n_does_match_322;var $__n_might_match_4 = $177;label = 66; break;
  case 66: 
   var $__n_might_match_4;
   var $__n_does_match_4;
   var $__consume_1_off0;
   var $179=(($__ky1_026+12)|0);
   var $180=(($179)|(0))==(($__ke)|(0));
   if ($180) { var $__n_might_match_3_lcssa = $__n_might_match_4;var $__n_does_match_3_lcssa = $__n_does_match_4;var $__consume_0_off0_lcssa = $__consume_1_off0;label = 68; break; } else { label = 67; break; }
  case 67: 
   var $181=(($__st_123+1)|0);
   var $__n_might_match_321 = $__n_might_match_4;var $__n_does_match_322 = $__n_does_match_4;var $__st_123 = $181;var $__consume_0_off025 = $__consume_1_off0;var $__ky1_026 = $179;label = 54; break;
  case 68: 
   var $__consume_0_off0_lcssa;
   var $__n_does_match_3_lcssa;
   var $__n_might_match_3_lcssa;
   if ($__consume_0_off0_lcssa) { label = 69; break; } else { var $__n_does_match_7 = $__n_does_match_3_lcssa;var $__n_might_match_3_lcssa66 = $__n_might_match_3_lcssa;label = 81; break; }
  case 69: 
   var $183=HEAP32[(($15)>>2)];
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 6; break; }
  case 71: 
   var $196=(($185+4)|0);
   HEAP32[(($184)>>2)]=$196;
   label = 72; break;
  case 72: 
   var $197=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
   var $_not=(($197)>>>(0)) < 2;
   var $brmerge=$_not | $14;
   if ($brmerge) { var $__n_does_match_7 = $__n_does_match_3_lcssa;var $__n_might_match_3_lcssa66 = $__n_might_match_3_lcssa;label = 81; break; } else { label = 73; break; }
  case 73: 
   var $198=((($__indx_0)+(1))|0);
   var $__n_does_match_535 = $__n_does_match_3_lcssa;var $__st_236 = $__status_0;var $__ky2_037 = $__kb;label = 74; break;
  case 74: 
   var $__ky2_037;
   var $__st_236;
   var $__n_does_match_535;
   var $200=HEAP8[($__st_236)];
   var $201=(($200 << 24) >> 24)==2;
   if ($201) { label = 75; break; } else { var $__n_does_match_6 = $__n_does_match_535;label = 80; break; }
  case 75: 
   var $203=$__ky2_037;
   var $204=HEAP8[($203)];
   var $205=(($204)&(255));
   var $206=$205 & 1;
   var $207=(($206)|(0))==0;
   if ($207) { label = 77; break; } else { label = 76; break; }
  case 76: 
   var $209=(($__ky2_037+4)|0);
   var $210=HEAP32[(($209)>>2)];
   var $213 = $210;label = 78; break;
  case 77: 
   var $212=$205 >>> 1;
   var $213 = $212;label = 78; break;
  case 78: 
   var $213;
   var $214=(($213)|(0))==(($198)|(0));
   if ($214) { var $__n_does_match_6 = $__n_does_match_535;label = 80; break; } else { label = 79; break; }
  case 79: 
   HEAP8[($__st_236)]=0;
   var $216=((($__n_does_match_535)-(1))|0);
   var $__n_does_match_6 = $216;label = 80; break;
  case 80: 
   var $__n_does_match_6;
   var $218=(($__ky2_037+12)|0);
   var $219=(($__st_236+1)|0);
   var $220=(($218)|(0))==(($__ke)|(0));
   if ($220) { var $__n_does_match_7 = $__n_does_match_6;var $__n_might_match_3_lcssa66 = $__n_might_match_3_lcssa;label = 81; break; } else { var $__n_does_match_535 = $__n_does_match_6;var $__st_236 = $219;var $__ky2_037 = $218;label = 74; break; }
  case 81: 
   var $__n_might_match_3_lcssa66;
   var $__n_does_match_7;
   var $221=((($__indx_0)+(1))|0);
   var $__indx_0 = $221;var $__n_does_match_2 = $__n_does_match_7;var $__n_might_match_2 = $__n_might_match_3_lcssa66;label = 19; break;
  case 82: 
   var $223=(($79)|(0))==0;
   if ($223) { var $240 = 1;label = 89; break; } else { label = 83; break; }
  case 83: 
   var $225=(($79+12)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=(($79+16)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($226)|(0))==(($228)|(0));
   if ($229) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $231=$79;
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232+36)|0);
   var $234=HEAP32[(($233)>>2)];
   var $235 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $235;label = 86; break; } else { label = 7; break; }
  case 85: 
   var $237=HEAP32[(($226)>>2)];
   var $_02 = $237;label = 86; break;
  case 86: 
   var $_02;
   var $238=(($_02)|(0))==-1;
   if ($238) { label = 88; break; } else { label = 87; break; }
  case 87: 
   var $_pre65=HEAP32[(($15)>>2)];
   var $phitmp=(($_pre65)|(0))==0;
   var $240 = $phitmp;label = 89; break;
  case 88: 
   HEAP32[(($15)>>2)]=0;
   var $240 = 1;label = 89; break;
  case 89: 
   var $240;
   if ($80) { label = 95; break; } else { label = 90; break; }
  case 90: 
   var $242=(($78+12)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=(($78+16)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($243)|(0))==(($245)|(0));
   if ($246) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $248=$78;
   var $249=HEAP32[(($248)>>2)];
   var $250=(($249+36)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $252;label = 93; break; } else { label = 7; break; }
  case 92: 
   var $254=HEAP32[(($243)>>2)];
   var $_0 = $254;label = 93; break;
  case 93: 
   var $_0;
   var $255=(($_0)|(0))==-1;
   if ($255) { label = 94; break; } else { label = 96; break; }
  case 94: 
   HEAP32[(($16)>>2)]=0;
   label = 95; break;
  case 95: 
   if ($240) { label = 97; break; } else { label = 98; break; }
  case 96: 
   var $257=(($78)|(0))==0;
   var $tmp8=$240 ^ $257;
   if ($tmp8) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $259=HEAP32[(($__err)>>2)];
   var $260=$259 | 2;
   HEAP32[(($__err)>>2)]=$260;
   label = 98; break;
  case 98: 
   if ($14) { label = 102; break; } else { var $_0715 = $__kb;var $__st_316 = $__status_0;label = 99; break; }
  case 99: 
   var $__st_316;
   var $_0715;
   var $261=HEAP8[($__st_316)];
   var $262=(($261 << 24) >> 24)==2;
   if ($262) { var $_0714 = $_0715;label = 103; break; } else { label = 100; break; }
  case 100: 
   var $264=(($_0715+12)|0);
   var $265=(($264)|(0))==(($__ke)|(0));
   if ($265) { label = 102; break; } else { label = 101; break; }
  case 101: 
   var $266=(($__st_316+1)|0);
   var $_0715 = $264;var $__st_316 = $266;label = 99; break;
  case 102: 
   var $267=HEAP32[(($__err)>>2)];
   var $268=$267 | 4;
   HEAP32[(($__err)>>2)]=$268;
   var $_0714 = $__ke;label = 103; break;
  case 103: 
   var $_0714;
   var $269=(($__stat_hold_sroa_0_1)|(0))==0;
   if ($269) { label = 105; break; } else { label = 104; break; }
  case 104: 
   _free($__stat_hold_sroa_0_1);
   label = 105; break;
  case 105: 
   STACKTOP = sp;
   return $_0714;
  case 106: 
   var $271$0;
   var $271$1;
   ___resumeException($271$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$156;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i2=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__loc=(sp)+(32);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13696)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13696;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $3, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 17; break; }
  case 3: 
   var $10=HEAP32[((((13700)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   (function() { try { __THREW__ = 0; return ___cxa_throw($24, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 17; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $26=$22;
   var $27=$22;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+48)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26, ((10088)|0), ((10114)|0), $__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $32=HEAP32[(($1)>>2)];
   var $33=$__p_i_i_i2;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $34=HEAP32[((((13312)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $37=(($__p_i_i_i2)|0);
   HEAP32[(($37)>>2)]=13312;
   var $38=(($__p_i_i_i2+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i2+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 17; break; }
  case 10: 
   var $40=HEAP32[((((13316)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 17; break; }
  case 13: 
   throw "Reached an unreachable!";
  case 14: 
   var $56=$52;
   var $57=$52;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+16)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
  case 15: 
   HEAP32[(($__thousands_sep)>>2)]=$61;
   var $62=$52;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+20)|0);
   var $65=HEAP32[(($64)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $66=HEAP32[(($1)>>2)];
   var $67=(($66)|0);
   var $68=__ZNSt3__114__shared_count16__release_sharedEv($67);
   STACKTOP = sp;
   return;
  case 17: 
   var $70$0 = ___cxa_find_matching_catch(-1, -1); $70$1 = tempRet0;
   var $71=HEAP32[(($1)>>2)];
   var $72=(($71)|0);
   var $73=__ZNSt3__114__shared_count16__release_sharedEv($72);
   ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[(($__a_end)>>2)];
   var $2=(($1)|(0))==(($__a)|(0));
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=(($__atoms+96)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==(($__ct)|(0));
   if ($6) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $8=(($__atoms+100)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==(($__ct)|(0));
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$6 ? 43 : 45;
   var $13=(($__a+1)|0);
   HEAP32[(($__a_end)>>2)]=$13;
   HEAP8[($__a)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 23; break;
  case 5: 
   var $15=$__grouping;
   var $16=HEAP8[($15)];
   var $17=(($16)&(255));
   var $18=$17 & 1;
   var $19=(($18)|(0))==0;
   if ($19) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $21=(($__grouping+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $25 = $22;label = 8; break;
  case 7: 
   var $24=$17 >>> 1;
   var $25 = $24;label = 8; break;
  case 8: 
   var $25;
   var $26=(($25)|(0))!=0;
   var $27=(($__ct)|(0))==(($__thousands_sep)|(0));
   var $or_cond=$26 & $27;
   if ($or_cond) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $29=HEAP32[(($__g_end)>>2)];
   var $30=$29;
   var $31=$__g;
   var $32=((($30)-($31))|0);
   var $33=(($32)|(0)) < 160;
   if ($33) { label = 10; break; } else { var $_01 = 0;label = 23; break; }
  case 10: 
   var $35=HEAP32[(($__dc)>>2)];
   var $36=(($29+4)|0);
   HEAP32[(($__g_end)>>2)]=$36;
   HEAP32[(($29)>>2)]=$35;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 23; break;
  case 11: 
   var $37=(($__atoms+104)|0);
   var $_02 = $__atoms;label = 13; break;
  case 12: 
   var $39=(($43)|(0))==(($37)|(0));
   if ($39) { var $_0_lcssa = $37;label = 14; break; } else { var $_02 = $43;label = 13; break; }
  case 13: 
   var $_02;
   var $41=HEAP32[(($_02)>>2)];
   var $42=(($41)|(0))==(($__ct)|(0));
   var $43=(($_02+4)|0);
   if ($42) { var $_0_lcssa = $_02;label = 14; break; } else { label = 12; break; }
  case 14: 
   var $_0_lcssa;
   var $44=$_0_lcssa;
   var $45=$__atoms;
   var $46=((($44)-($45))|0);
   var $47=$46 >> 2;
   var $48=(($46)|(0)) > 92;
   if ($48) { var $_01 = -1;label = 23; break; } else { label = 15; break; }
  case 15: 
   if ((($__base)|(0))==8 | (($__base)|(0))==10) {
    label = 16; break;
   }
   else if ((($__base)|(0))==16) {
    label = 17; break;
   }
   else {
   label = 22; break;
   }
  case 16: 
   var $51=(($47)|(0)) < (($__base)|(0));
   if ($51) { label = 22; break; } else { var $_01 = -1;label = 23; break; }
  case 17: 
   var $53=(($46)|(0)) < 88;
   if ($53) { label = 22; break; } else { label = 18; break; }
  case 18: 
   if ($2) { var $_01 = -1;label = 23; break; } else { label = 19; break; }
  case 19: 
   var $56=$1;
   var $57=$__a;
   var $58=((($56)-($57))|0);
   var $59=(($58)|(0)) < 3;
   if ($59) { label = 20; break; } else { var $_01 = -1;label = 23; break; }
  case 20: 
   var $61=((($1)-(1))|0);
   var $62=HEAP8[($61)];
   var $63=(($62 << 24) >> 24)==48;
   if ($63) { label = 21; break; } else { var $_01 = -1;label = 23; break; }
  case 21: 
   HEAP32[(($__dc)>>2)]=0;
   var $65=((10088+$47)|0);
   var $66=HEAP8[($65)];
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=(($67+1)|0);
   HEAP32[(($__a_end)>>2)]=$68;
   HEAP8[($67)]=$66;
   var $_01 = 0;label = 23; break;
  case 22: 
   var $70=((10088+$47)|0);
   var $71=HEAP8[($70)];
   var $72=(($1+1)|0);
   HEAP32[(($__a_end)>>2)]=$72;
   HEAP8[($1)]=$71;
   var $73=HEAP32[(($__dc)>>2)];
   var $74=((($73)+(1))|0);
   HEAP32[(($__dc)>>2)]=$74;
   var $_01 = 0;label = 23; break;
  case 23: 
   var $_01;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0 = $156;var $156$1 = tempRet0;if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   var $st$0$0=(($__v)|0);
   HEAP32[(($st$0$0)>>2)]=$156$0;
   var $st$1$1=(($__v+4)|0);
   HEAP32[(($st$1$1)>>2)]=$156$1;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   HEAP16[(($__v)>>1)]=$156;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$156;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   HEAP32[(($__v)>>2)]=$156;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__thousands_sep=(sp)+(104);
   var $__grouping=(sp)+(112);
   var $__buf=(sp)+(128);
   var $1=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=(($__iob+4)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=$3 & 74;
   if ((($4)|(0))==8) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==64) {
    var $_0_i = 8;label = 5; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $_0_i = 16;label = 5; break;
  case 3: 
   var $_0_i = 0;label = 5; break;
  case 4: 
   var $_0_i = 10;label = 5; break;
  case 5: 
   var $_0_i;
   var $8=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $9=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 36; break; }
  case 6: 
   var $10=HEAP8[($1)];
   var $11=$10 & 1;
   var $12=(($11 << 24) >> 24)==0;
   if ($12) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $14=(($__buf+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $_pre10=(($9+1)|0);
   var $18 = $15;var $_pre_phi = $_pre10;var $_pre_phi12 = $14;label = 9; break;
  case 8: 
   var $17=(($9+1)|0);
   var $_pre11=(($__buf+8)|0);
   var $18 = $17;var $_pre_phi = $17;var $_pre_phi12 = $_pre11;label = 9; break;
  case 9: 
   var $_pre_phi12;
   var $_pre_phi;
   var $18;
   HEAP32[(($__a_end)>>2)]=$18;
   var $19=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$19;
   HEAP32[(($__dc)>>2)]=0;
   var $20=(($__b)|0);
   var $21=(($__e)|0);
   var $22=(($__buf)|0);
   var $23=(($__buf+4)|0);
   var $24=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($20)>>2)];
   var $__a_0 = $18;var $25 = $_pre;label = 10; break;
  case 10: 
   var $25;
   var $__a_0;
   var $26=(($25)|(0))==0;
   if ($26) { var $43 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $28=(($25+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($25+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)|(0))==(($31)|(0));
   if ($32) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $34=$25;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+36)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $38;label = 14; break; } else { label = 35; break; }
  case 13: 
   var $40=HEAP32[(($29)>>2)];
   var $_03 = $40;label = 14; break;
  case 14: 
   var $_03;
   var $41=(($_03)|(0))==-1;
   if ($41) { label = 15; break; } else { var $43 = $25;label = 16; break; }
  case 15: 
   HEAP32[(($20)>>2)]=0;
   var $43 = 0;label = 16; break;
  case 16: 
   var $43;
   var $44=(($43)|(0))==0;
   var $45=HEAP32[(($21)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 22; break; } else { label = 17; break; }
  case 17: 
   var $48=(($45+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$45;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $58;label = 20; break; } else { label = 35; break; }
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_02 = $60;label = 20; break;
  case 20: 
   var $_02;
   var $61=(($_02)|(0))==-1;
   if ($61) { label = 21; break; } else { label = 23; break; }
  case 21: 
   HEAP32[(($21)>>2)]=0;
   label = 22; break;
  case 22: 
   if ($44) { var $__a_2 = $__a_0;var $133 = 0;var $132 = 1;label = 45; break; } else { var $66 = 0;var $65 = 1;label = 24; break; }
  case 23: 
   var $63=(($45)|(0))==0;
   var $64=$44 ^ $63;
   if ($64) { var $66 = $45;var $65 = $63;label = 24; break; } else { var $__a_2 = $__a_0;var $133 = $45;var $132 = $63;label = 45; break; }
  case 24: 
   var $65;
   var $66;
   var $67=HEAP32[(($__a_end)>>2)];
   var $68=$67;
   var $69=$__a_0;
   var $70=((($68)-($69))|0);
   var $71=HEAP8[($1)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))==0;
   var $75=HEAP32[(($23)>>2)];
   var $76=$72 >>> 1;
   var $77=$74 ? $76 : $75;
   var $78=(($70)|(0))==(($77)|(0));
   if ($78) { label = 25; break; } else { var $__a_1 = $__a_0;label = 38; break; }
  case 25: 
   if ($74) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $81=HEAP32[(($23)>>2)];
   var $86 = $81;var $85 = $81;label = 28; break;
  case 27: 
   var $83=$72 >>> 1;
   var $84=$72 >>> 1;
   var $86 = $84;var $85 = $83;label = 28; break;
  case 28: 
   var $85;
   var $86;
   var $87=$86 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $88=HEAP8[($1)];
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)==0;
   if ($90) { var $94 = 10;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $92=HEAP32[(($22)>>2)];
   var $93=$92 & -2;
   var $phitmp7=((($93)-(1))|0);
   var $94 = $phitmp7;label = 31; break;
  case 31: 
   var $94;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $94, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $95=HEAP8[($1)];
   var $96=$95 & 1;
   var $97=(($96 << 24) >> 24)==0;
   if ($97) { var $100 = $_pre_phi;label = 34; break; } else { label = 33; break; }
  case 33: 
   var $99=HEAP32[(($_pre_phi12)>>2)];
   var $100 = $99;label = 34; break;
  case 34: 
   var $100;
   var $101=(($100+$85)|0);
   HEAP32[(($__a_end)>>2)]=$101;
   var $__a_1 = $100;label = 38; break;
  case 35: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 37; break;
  case 36: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 37; break;
  case 37: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 38: 
   var $__a_1;
   var $103=(($43+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($43+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $109=$43;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $113;label = 41; break; } else { label = 35; break; }
  case 40: 
   var $115=HEAP32[(($104)>>2)];
   var $_0 = $115;label = 41; break;
  case 41: 
   var $_0;
   var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8);
   var $118=(($117)|(0))==0;
   if ($118) { label = 42; break; } else { var $__a_2 = $__a_1;var $133 = $66;var $132 = $65;label = 45; break; }
  case 42: 
   var $120=HEAP32[(($103)>>2)];
   var $121=HEAP32[(($105)>>2)];
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $124=$43;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+40)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $25 = $43;label = 10; break; } else { label = 35; break; }
  case 44: 
   var $130=(($120+4)|0);
   HEAP32[(($103)>>2)]=$130;
   var $__a_0 = $__a_1;var $25 = $43;label = 10; break;
  case 45: 
   var $132;
   var $133;
   var $__a_2;
   var $134=$__grouping;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))==0;
   if ($138) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $140=(($__grouping+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $144 = $141;label = 48; break;
  case 47: 
   var $143=$136 >>> 1;
   var $144 = $143;label = 48; break;
  case 48: 
   var $144;
   var $145=(($144)|(0))==0;
   if ($145) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $147=HEAP32[(($__g_end)>>2)];
   var $148=$147;
   var $149=$__g;
   var $150=((($148)-($149))|0);
   var $151=(($150)|(0)) < 160;
   if ($151) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $153=HEAP32[(($__dc)>>2)];
   var $154=(($147+4)|0);
   HEAP32[(($__g_end)>>2)]=$154;
   HEAP32[(($147)>>2)]=$153;
   label = 51; break;
  case 51: 
   var $155=HEAP32[(($__a_end)>>2)];
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2, $155, $__err, $_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0 = $156;var $156$1 = tempRet0;if (!__THREW__) { label = 52; break; } else { label = 36; break; }
  case 52: 
   var $st$0$0=(($__v)|0);
   HEAP32[(($st$0$0)>>2)]=$156$0;
   var $st$1$1=(($__v+4)|0);
   HEAP32[(($st$1$1)>>2)]=$156$1;
   var $158=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, $158, $__err);
   if ($44) { var $175 = 0;label = 58; break; } else { label = 53; break; }
  case 53: 
   var $160=(($43+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($43+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $166=$43;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $170;label = 56; break; } else { label = 36; break; }
  case 55: 
   var $172=HEAP32[(($161)>>2)];
   var $_05 = $172;label = 56; break;
  case 56: 
   var $_05;
   var $173=(($_05)|(0))==-1;
   if ($173) { label = 57; break; } else { var $175 = $43;label = 58; break; }
  case 57: 
   HEAP32[(($20)>>2)]=0;
   var $175 = 0;label = 58; break;
  case 58: 
   var $175;
   var $176=(($175)|(0))==0;
   if ($132) { label = 64; break; } else { label = 59; break; }
  case 59: 
   var $178=(($133+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($133+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)|(0))==(($181)|(0));
   if ($182) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $184=$133;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+36)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $188;label = 62; break; } else { label = 36; break; }
  case 61: 
   var $190=HEAP32[(($179)>>2)];
   var $_04 = $190;label = 62; break;
  case 62: 
   var $_04;
   var $191=(($_04)|(0))==-1;
   if ($191) { label = 63; break; } else { label = 65; break; }
  case 63: 
   HEAP32[(($21)>>2)]=0;
   label = 64; break;
  case 64: 
   if ($176) { label = 66; break; } else { label = 67; break; }
  case 65: 
   var $193=(($133)|(0))==0;
   var $tmp6=$176 ^ $193;
   if ($tmp6) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $195=HEAP32[(($__err)>>2)];
   var $196=$195 | 2;
   HEAP32[(($__err)>>2)]=$196;
   label = 67; break;
  case 67: 
   var $198=(($agg_result)|0);
   HEAP32[(($198)>>2)]=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(128);
   var $__thousands_sep=(sp)+(136);
   var $__grouping=(sp)+(144);
   var $__buf=(sp)+(160);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 32; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre11=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre11;var $_pre_phi13 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi13 = $_pre12;label = 5; break;
  case 5: 
   var $_pre_phi13;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP32[(($__decimal_point)>>2)];
   var $18=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $37 = 0;label = 12; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $32;label = 10; break; } else { label = 31; break; }
  case 9: 
   var $34=HEAP32[(($23)>>2)];
   var $_03 = $34;label = 10; break;
  case 10: 
   var $_03;
   var $35=(($_03)|(0))==-1;
   if ($35) { label = 11; break; } else { var $37 = $19;label = 12; break; }
  case 11: 
   HEAP32[(($13)>>2)]=0;
   var $37 = 0;label = 12; break;
  case 12: 
   var $37;
   var $38=(($37)|(0))==0;
   var $39=HEAP32[(($14)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 13; break; }
  case 13: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $52;label = 16; break; } else { label = 31; break; }
  case 15: 
   var $54=HEAP32[(($43)>>2)];
   var $_02 = $54;label = 16; break;
  case 16: 
   var $_02;
   var $55=(($_02)|(0))==-1;
   if ($55) { label = 17; break; } else { label = 19; break; }
  case 17: 
   HEAP32[(($14)>>2)]=0;
   label = 18; break;
  case 18: 
   if ($38) { var $__a_2 = $__a_0;var $127 = 0;var $126 = 1;label = 41; break; } else { var $60 = 0;var $59 = 1;label = 20; break; }
  case 19: 
   var $57=(($39)|(0))==0;
   var $58=$38 ^ $57;
   if ($58) { var $60 = $39;var $59 = $57;label = 20; break; } else { var $__a_2 = $__a_0;var $127 = $39;var $126 = $57;label = 41; break; }
  case 20: 
   var $59;
   var $60;
   var $61=HEAP32[(($__a_end)>>2)];
   var $62=$61;
   var $63=$__a_0;
   var $64=((($62)-($63))|0);
   var $65=HEAP8[($0)];
   var $66=(($65)&(255));
   var $67=$66 & 1;
   var $68=(($67)|(0))==0;
   var $69=HEAP32[(($16)>>2)];
   var $70=$66 >>> 1;
   var $71=$68 ? $70 : $69;
   var $72=(($64)|(0))==(($71)|(0));
   if ($72) { label = 21; break; } else { var $__a_1 = $__a_0;label = 34; break; }
  case 21: 
   if ($68) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $75=HEAP32[(($16)>>2)];
   var $80 = $75;var $79 = $75;label = 24; break;
  case 23: 
   var $77=$66 >>> 1;
   var $78=$66 >>> 1;
   var $80 = $78;var $79 = $77;label = 24; break;
  case 24: 
   var $79;
   var $80;
   var $81=$80 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $81, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 31; break; }
  case 25: 
   var $82=HEAP8[($0)];
   var $83=$82 & 1;
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { var $88 = 10;label = 27; break; } else { label = 26; break; }
  case 26: 
   var $86=HEAP32[(($15)>>2)];
   var $87=$86 & -2;
   var $phitmp7=((($87)-(1))|0);
   var $88 = $phitmp7;label = 27; break;
  case 27: 
   var $88;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $88, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $89=HEAP8[($0)];
   var $90=$89 & 1;
   var $91=(($90 << 24) >> 24)==0;
   if ($91) { var $94 = $_pre_phi;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $93=HEAP32[(($_pre_phi13)>>2)];
   var $94 = $93;label = 30; break;
  case 30: 
   var $94;
   var $95=(($94+$79)|0);
   HEAP32[(($__a_end)>>2)]=$95;
   var $__a_1 = $94;label = 34; break;
  case 31: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 33; break;
  case 32: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 33; break;
  case 33: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 34: 
   var $__a_1;
   var $97=(($37+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($37+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $103=$37;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+36)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $107;label = 37; break; } else { label = 31; break; }
  case 36: 
   var $109=HEAP32[(($98)>>2)];
   var $_0 = $109;label = 37; break;
  case 37: 
   var $_0;
   var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $112=(($111)|(0))==0;
   if ($112) { label = 38; break; } else { var $__a_2 = $__a_1;var $127 = $60;var $126 = $59;label = 41; break; }
  case 38: 
   var $114=HEAP32[(($97)>>2)];
   var $115=HEAP32[(($99)>>2)];
   var $116=(($114)|(0))==(($115)|(0));
   if ($116) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $118=$37;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+40)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $37;label = 6; break; } else { label = 31; break; }
  case 40: 
   var $124=(($114+4)|0);
   HEAP32[(($97)>>2)]=$124;
   var $__a_0 = $__a_1;var $19 = $37;label = 6; break;
  case 41: 
   var $126;
   var $127;
   var $__a_2;
   var $128=$__grouping;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))==0;
   if ($132) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $134=(($__grouping+4)|0);
   var $135=HEAP32[(($134)>>2)];
   var $138 = $135;label = 44; break;
  case 43: 
   var $137=$130 >>> 1;
   var $138 = $137;label = 44; break;
  case 44: 
   var $138;
   var $139=(($138)|(0))==0;
   if ($139) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $141=HEAP8[($__in_units)];
   var $142=$141 & 1;
   var $143=(($142 << 24) >> 24)==0;
   if ($143) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $145=HEAP32[(($__g_end)>>2)];
   var $146=$145;
   var $147=$__g;
   var $148=((($146)-($147))|0);
   var $149=(($148)|(0)) < 160;
   if ($149) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $151=HEAP32[(($__dc)>>2)];
   var $152=(($145+4)|0);
   HEAP32[(($__g_end)>>2)]=$152;
   HEAP32[(($145)>>2)]=$151;
   label = 48; break;
  case 48: 
   var $153=HEAP32[(($__a_end)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2, $153, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 32; break; }
  case 49: 
   HEAPF32[(($__v)>>2)]=$154;
   var $156=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $156, $__err);
   if ($38) { var $173 = 0;label = 55; break; } else { label = 50; break; }
  case 50: 
   var $158=(($37+12)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($37+16)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159)|(0))==(($161)|(0));
   if ($162) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $164=$37;
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+36)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $168;label = 53; break; } else { label = 32; break; }
  case 52: 
   var $170=HEAP32[(($159)>>2)];
   var $_05 = $170;label = 53; break;
  case 53: 
   var $_05;
   var $171=(($_05)|(0))==-1;
   if ($171) { label = 54; break; } else { var $173 = $37;label = 55; break; }
  case 54: 
   HEAP32[(($13)>>2)]=0;
   var $173 = 0;label = 55; break;
  case 55: 
   var $173;
   var $174=(($173)|(0))==0;
   if ($126) { label = 61; break; } else { label = 56; break; }
  case 56: 
   var $176=(($127+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($127+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($177)|(0))==(($179)|(0));
   if ($180) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $182=$127;
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183+36)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $186;label = 59; break; } else { label = 32; break; }
  case 58: 
   var $188=HEAP32[(($177)>>2)];
   var $_04 = $188;label = 59; break;
  case 59: 
   var $_04;
   var $189=(($_04)|(0))==-1;
   if ($189) { label = 60; break; } else { label = 62; break; }
  case 60: 
   HEAP32[(($14)>>2)]=0;
   label = 61; break;
  case 61: 
   if ($174) { label = 63; break; } else { label = 64; break; }
  case 62: 
   var $191=(($127)|(0))==0;
   var $tmp6=$174 ^ $191;
   if ($tmp6) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $193=HEAP32[(($__err)>>2)];
   var $194=$193 | 2;
   HEAP32[(($__err)>>2)]=$194;
   label = 64; break;
  case 64: 
   var $196=(($agg_result)|0);
   HEAP32[(($196)>>2)]=$173;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i2=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__loc=(sp)+(32);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13696)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13696;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $3, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 18; break; }
  case 3: 
   var $10=HEAP32[((((13700)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   (function() { try { __THREW__ = 0; return ___cxa_throw($24, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 18; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $26=$22;
   var $27=$22;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+48)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26, ((10088)|0), ((10120)|0), $__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 18; break; }
  case 8: 
   var $32=HEAP32[(($1)>>2)];
   var $33=$__p_i_i_i2;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $34=HEAP32[((((13312)|0))>>2)];
   var $35=(($34)|(0))==-1;
   if ($35) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $37=(($__p_i_i_i2)|0);
   HEAP32[(($37)>>2)]=13312;
   var $38=(($__p_i_i_i2+4)|0);
   HEAP32[(($38)>>2)]=(26);
   var $39=(($__p_i_i_i2+8)|0);
   HEAP32[(($39)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $33, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $40=HEAP32[((((13316)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $42=(($32+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($32+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$43;
   var $47=$45;
   var $48=((($46)-($47))|0);
   var $49=$48 >> 2;
   var $50=(($49)>>>(0)) > (($41)>>>(0));
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $51=(($45+($41<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==0;
   if ($53) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $54=___cxa_allocate_exception(4);
   var $55=$54;
   __ZNSt8bad_castC2Ev($55);
   (function() { try { __THREW__ = 0; return ___cxa_throw($54, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 18; break; }
  case 13: 
   throw "Reached an unreachable!";
  case 14: 
   var $56=$52;
   var $57=$52;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 18; break; }
  case 15: 
   HEAP32[(($__decimal_point)>>2)]=$61;
   var $62=HEAP32[(($57)>>2)];
   var $63=(($62+16)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 18; break; }
  case 16: 
   HEAP32[(($__thousands_sep)>>2)]=$65;
   var $66=$52;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+20)|0);
   var $69=HEAP32[(($68)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $70=HEAP32[(($1)>>2)];
   var $71=(($70)|0);
   var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
   STACKTOP = sp;
   return;
  case 18: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $75=HEAP32[(($1)>>2)];
   var $76=(($75)|0);
   var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
   ___resumeException($74$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__ct)|(0))==(($__decimal_point)|(0));
   if ($1) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $3=HEAP8[($__in_units)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { var $_01 = -1;label = 36; break; } else { label = 3; break; }
  case 3: 
   HEAP8[($__in_units)]=0;
   var $7=HEAP32[(($__a_end)>>2)];
   var $8=(($7+1)|0);
   HEAP32[(($__a_end)>>2)]=$8;
   HEAP8[($7)]=46;
   var $9=$__grouping;
   var $10=HEAP8[($9)];
   var $11=(($10)&(255));
   var $12=$11 & 1;
   var $13=(($12)|(0))==0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($__grouping+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 6; break;
  case 5: 
   var $18=$11 >>> 1;
   var $19 = $18;label = 6; break;
  case 6: 
   var $19;
   var $20=(($19)|(0))==0;
   if ($20) { var $_01 = 0;label = 36; break; } else { label = 7; break; }
  case 7: 
   var $22=HEAP32[(($__g_end)>>2)];
   var $23=$22;
   var $24=$__g;
   var $25=((($23)-($24))|0);
   var $26=(($25)|(0)) < 160;
   if ($26) { label = 8; break; } else { var $_01 = 0;label = 36; break; }
  case 8: 
   var $28=HEAP32[(($__dc)>>2)];
   var $29=(($22+4)|0);
   HEAP32[(($__g_end)>>2)]=$29;
   HEAP32[(($22)>>2)]=$28;
   var $_01 = 0;label = 36; break;
  case 9: 
   var $31=(($__ct)|(0))==(($__thousands_sep)|(0));
   if ($31) { label = 10; break; } else { label = 17; break; }
  case 10: 
   var $33=$__grouping;
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=$35 & 1;
   var $37=(($36)|(0))==0;
   if ($37) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $39=(($__grouping+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $43 = $40;label = 13; break;
  case 12: 
   var $42=$35 >>> 1;
   var $43 = $42;label = 13; break;
  case 13: 
   var $43;
   var $44=(($43)|(0))==0;
   if ($44) { label = 17; break; } else { label = 14; break; }
  case 14: 
   var $46=HEAP8[($__in_units)];
   var $47=$46 & 1;
   var $48=(($47 << 24) >> 24)==0;
   if ($48) { var $_01 = -1;label = 36; break; } else { label = 15; break; }
  case 15: 
   var $50=HEAP32[(($__g_end)>>2)];
   var $51=$50;
   var $52=$__g;
   var $53=((($51)-($52))|0);
   var $54=(($53)|(0)) < 160;
   if ($54) { label = 16; break; } else { var $_01 = 0;label = 36; break; }
  case 16: 
   var $56=HEAP32[(($__dc)>>2)];
   var $57=(($50+4)|0);
   HEAP32[(($__g_end)>>2)]=$57;
   HEAP32[(($50)>>2)]=$56;
   HEAP32[(($__dc)>>2)]=0;
   var $_01 = 0;label = 36; break;
  case 17: 
   var $58=(($__atoms+128)|0);
   var $_02 = $__atoms;label = 19; break;
  case 18: 
   var $60=(($64)|(0))==(($58)|(0));
   if ($60) { var $_0_lcssa = $58;label = 20; break; } else { var $_02 = $64;label = 19; break; }
  case 19: 
   var $_02;
   var $62=HEAP32[(($_02)>>2)];
   var $63=(($62)|(0))==(($__ct)|(0));
   var $64=(($_02+4)|0);
   if ($63) { var $_0_lcssa = $_02;label = 20; break; } else { label = 18; break; }
  case 20: 
   var $_0_lcssa;
   var $65=$_0_lcssa;
   var $66=$__atoms;
   var $67=((($65)-($66))|0);
   var $68=$67 >> 2;
   var $69=(($67)|(0)) > 124;
   if ($69) { var $_01 = -1;label = 36; break; } else { label = 21; break; }
  case 21: 
   var $71=((10088+$68)|0);
   var $72=HEAP8[($71)];
   if ((($68)|(0))==25 | (($68)|(0))==24) {
    label = 22; break;
   }
   else if ((($68)|(0))==22 | (($68)|(0))==23) {
    label = 25; break;
   }
   else {
   label = 26; break;
   }
  case 22: 
   var $74=HEAP32[(($__a_end)>>2)];
   var $75=(($74)|(0))==(($__a)|(0));
   if ($75) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $77=((($74)-(1))|0);
   var $78=HEAP8[($77)];
   var $79=(($78)&(255));
   var $80=$79 & 95;
   var $81=HEAP8[($__exp)];
   var $82=(($81)&(255));
   var $83=$82 & 127;
   var $84=(($80)|(0))==(($83)|(0));
   if ($84) { label = 24; break; } else { var $_01 = -1;label = 36; break; }
  case 24: 
   var $86=(($74+1)|0);
   HEAP32[(($__a_end)>>2)]=$86;
   HEAP8[($74)]=$72;
   var $_01 = 0;label = 36; break;
  case 25: 
   HEAP8[($__exp)]=80;
   label = 34; break;
  case 26: 
   var $89=(($72)&(255));
   var $90=$89 & 95;
   var $91=HEAP8[($__exp)];
   var $92=(($91 << 24) >> 24);
   var $93=(($90)|(0))==(($92)|(0));
   if ($93) { label = 27; break; } else { label = 34; break; }
  case 27: 
   var $95=$91 | -128;
   HEAP8[($__exp)]=$95;
   var $96=HEAP8[($__in_units)];
   var $97=$96 & 1;
   var $98=(($97 << 24) >> 24)==0;
   if ($98) { label = 34; break; } else { label = 28; break; }
  case 28: 
   HEAP8[($__in_units)]=0;
   var $100=$__grouping;
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=$102 & 1;
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $106=(($__grouping+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $110 = $107;label = 31; break;
  case 30: 
   var $109=$102 >>> 1;
   var $110 = $109;label = 31; break;
  case 31: 
   var $110;
   var $111=(($110)|(0))==0;
   if ($111) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $113=HEAP32[(($__g_end)>>2)];
   var $114=$113;
   var $115=$__g;
   var $116=((($114)-($115))|0);
   var $117=(($116)|(0)) < 160;
   if ($117) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $119=HEAP32[(($__dc)>>2)];
   var $120=(($113+4)|0);
   HEAP32[(($__g_end)>>2)]=$120;
   HEAP32[(($113)>>2)]=$119;
   label = 34; break;
  case 34: 
   var $122=HEAP32[(($__a_end)>>2)];
   var $123=(($122+1)|0);
   HEAP32[(($__a_end)>>2)]=$123;
   HEAP8[($122)]=$72;
   var $124=(($67)|(0)) > 84;
   if ($124) { var $_01 = 0;label = 36; break; } else { label = 35; break; }
  case 35: 
   var $126=HEAP32[(($__dc)>>2)];
   var $127=((($126)+(1))|0);
   HEAP32[(($__dc)>>2)]=$127;
   var $_01 = 0;label = 36; break;
  case 36: 
   var $_01;
   return $_01;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(128);
   var $__thousands_sep=(sp)+(136);
   var $__grouping=(sp)+(144);
   var $__buf=(sp)+(160);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 32; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre11=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre11;var $_pre_phi13 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi13 = $_pre12;label = 5; break;
  case 5: 
   var $_pre_phi13;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP32[(($__decimal_point)>>2)];
   var $18=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $37 = 0;label = 12; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $32;label = 10; break; } else { label = 31; break; }
  case 9: 
   var $34=HEAP32[(($23)>>2)];
   var $_03 = $34;label = 10; break;
  case 10: 
   var $_03;
   var $35=(($_03)|(0))==-1;
   if ($35) { label = 11; break; } else { var $37 = $19;label = 12; break; }
  case 11: 
   HEAP32[(($13)>>2)]=0;
   var $37 = 0;label = 12; break;
  case 12: 
   var $37;
   var $38=(($37)|(0))==0;
   var $39=HEAP32[(($14)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 13; break; }
  case 13: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $52;label = 16; break; } else { label = 31; break; }
  case 15: 
   var $54=HEAP32[(($43)>>2)];
   var $_02 = $54;label = 16; break;
  case 16: 
   var $_02;
   var $55=(($_02)|(0))==-1;
   if ($55) { label = 17; break; } else { label = 19; break; }
  case 17: 
   HEAP32[(($14)>>2)]=0;
   label = 18; break;
  case 18: 
   if ($38) { var $__a_2 = $__a_0;var $127 = 0;var $126 = 1;label = 41; break; } else { var $60 = 0;var $59 = 1;label = 20; break; }
  case 19: 
   var $57=(($39)|(0))==0;
   var $58=$38 ^ $57;
   if ($58) { var $60 = $39;var $59 = $57;label = 20; break; } else { var $__a_2 = $__a_0;var $127 = $39;var $126 = $57;label = 41; break; }
  case 20: 
   var $59;
   var $60;
   var $61=HEAP32[(($__a_end)>>2)];
   var $62=$61;
   var $63=$__a_0;
   var $64=((($62)-($63))|0);
   var $65=HEAP8[($0)];
   var $66=(($65)&(255));
   var $67=$66 & 1;
   var $68=(($67)|(0))==0;
   var $69=HEAP32[(($16)>>2)];
   var $70=$66 >>> 1;
   var $71=$68 ? $70 : $69;
   var $72=(($64)|(0))==(($71)|(0));
   if ($72) { label = 21; break; } else { var $__a_1 = $__a_0;label = 34; break; }
  case 21: 
   if ($68) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $75=HEAP32[(($16)>>2)];
   var $80 = $75;var $79 = $75;label = 24; break;
  case 23: 
   var $77=$66 >>> 1;
   var $78=$66 >>> 1;
   var $80 = $78;var $79 = $77;label = 24; break;
  case 24: 
   var $79;
   var $80;
   var $81=$80 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $81, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 31; break; }
  case 25: 
   var $82=HEAP8[($0)];
   var $83=$82 & 1;
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { var $88 = 10;label = 27; break; } else { label = 26; break; }
  case 26: 
   var $86=HEAP32[(($15)>>2)];
   var $87=$86 & -2;
   var $phitmp7=((($87)-(1))|0);
   var $88 = $phitmp7;label = 27; break;
  case 27: 
   var $88;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $88, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $89=HEAP8[($0)];
   var $90=$89 & 1;
   var $91=(($90 << 24) >> 24)==0;
   if ($91) { var $94 = $_pre_phi;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $93=HEAP32[(($_pre_phi13)>>2)];
   var $94 = $93;label = 30; break;
  case 30: 
   var $94;
   var $95=(($94+$79)|0);
   HEAP32[(($__a_end)>>2)]=$95;
   var $__a_1 = $94;label = 34; break;
  case 31: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 33; break;
  case 32: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 33; break;
  case 33: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 34: 
   var $__a_1;
   var $97=(($37+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($37+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $103=$37;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+36)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $107;label = 37; break; } else { label = 31; break; }
  case 36: 
   var $109=HEAP32[(($98)>>2)];
   var $_0 = $109;label = 37; break;
  case 37: 
   var $_0;
   var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $112=(($111)|(0))==0;
   if ($112) { label = 38; break; } else { var $__a_2 = $__a_1;var $127 = $60;var $126 = $59;label = 41; break; }
  case 38: 
   var $114=HEAP32[(($97)>>2)];
   var $115=HEAP32[(($99)>>2)];
   var $116=(($114)|(0))==(($115)|(0));
   if ($116) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $118=$37;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+40)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $37;label = 6; break; } else { label = 31; break; }
  case 40: 
   var $124=(($114+4)|0);
   HEAP32[(($97)>>2)]=$124;
   var $__a_0 = $__a_1;var $19 = $37;label = 6; break;
  case 41: 
   var $126;
   var $127;
   var $__a_2;
   var $128=$__grouping;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))==0;
   if ($132) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $134=(($__grouping+4)|0);
   var $135=HEAP32[(($134)>>2)];
   var $138 = $135;label = 44; break;
  case 43: 
   var $137=$130 >>> 1;
   var $138 = $137;label = 44; break;
  case 44: 
   var $138;
   var $139=(($138)|(0))==0;
   if ($139) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $141=HEAP8[($__in_units)];
   var $142=$141 & 1;
   var $143=(($142 << 24) >> 24)==0;
   if ($143) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $145=HEAP32[(($__g_end)>>2)];
   var $146=$145;
   var $147=$__g;
   var $148=((($146)-($147))|0);
   var $149=(($148)|(0)) < 160;
   if ($149) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $151=HEAP32[(($__dc)>>2)];
   var $152=(($145+4)|0);
   HEAP32[(($__g_end)>>2)]=$152;
   HEAP32[(($145)>>2)]=$151;
   label = 48; break;
  case 48: 
   var $153=HEAP32[(($__a_end)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2, $153, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 32; break; }
  case 49: 
   HEAPF64[(($__v)>>3)]=$154;
   var $156=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $156, $__err);
   if ($38) { var $173 = 0;label = 55; break; } else { label = 50; break; }
  case 50: 
   var $158=(($37+12)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($37+16)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159)|(0))==(($161)|(0));
   if ($162) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $164=$37;
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+36)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $168;label = 53; break; } else { label = 32; break; }
  case 52: 
   var $170=HEAP32[(($159)>>2)];
   var $_05 = $170;label = 53; break;
  case 53: 
   var $_05;
   var $171=(($_05)|(0))==-1;
   if ($171) { label = 54; break; } else { var $173 = $37;label = 55; break; }
  case 54: 
   HEAP32[(($13)>>2)]=0;
   var $173 = 0;label = 55; break;
  case 55: 
   var $173;
   var $174=(($173)|(0))==0;
   if ($126) { label = 61; break; } else { label = 56; break; }
  case 56: 
   var $176=(($127+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($127+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($177)|(0))==(($179)|(0));
   if ($180) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $182=$127;
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183+36)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $186;label = 59; break; } else { label = 32; break; }
  case 58: 
   var $188=HEAP32[(($177)>>2)];
   var $_04 = $188;label = 59; break;
  case 59: 
   var $_04;
   var $189=(($_04)|(0))==-1;
   if ($189) { label = 60; break; } else { label = 62; break; }
  case 60: 
   HEAP32[(($14)>>2)]=0;
   label = 61; break;
  case 61: 
   if ($174) { label = 63; break; } else { label = 64; break; }
  case 62: 
   var $191=(($127)|(0))==0;
   var $tmp6=$174 ^ $191;
   if ($tmp6) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $193=HEAP32[(($__err)>>2)];
   var $194=$193 | 2;
   HEAP32[(($__err)>>2)]=$194;
   label = 64; break;
  case 64: 
   var $196=(($agg_result)|0);
   HEAP32[(($196)>>2)]=$173;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__atoms=sp;
   var $__decimal_point=(sp)+(128);
   var $__thousands_sep=(sp)+(136);
   var $__grouping=(sp)+(144);
   var $__buf=(sp)+(160);
   var $0=$__buf;
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $2=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 32; break; }
  case 2: 
   var $3=HEAP8[($0)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $7=(($__buf+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $_pre11=(($2+1)|0);
   var $11 = $8;var $_pre_phi = $_pre11;var $_pre_phi13 = $7;label = 5; break;
  case 4: 
   var $10=(($2+1)|0);
   var $_pre12=(($__buf+8)|0);
   var $11 = $10;var $_pre_phi = $10;var $_pre_phi13 = $_pre12;label = 5; break;
  case 5: 
   var $_pre_phi13;
   var $_pre_phi;
   var $11;
   HEAP32[(($__a_end)>>2)]=$11;
   var $12=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$12;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   var $13=(($__b)|0);
   var $14=(($__e)|0);
   var $15=(($__buf)|0);
   var $16=(($__buf+4)|0);
   var $17=HEAP32[(($__decimal_point)>>2)];
   var $18=HEAP32[(($__thousands_sep)>>2)];
   var $_pre=HEAP32[(($13)>>2)];
   var $__a_0 = $11;var $19 = $_pre;label = 6; break;
  case 6: 
   var $19;
   var $__a_0;
   var $20=(($19)|(0))==0;
   if ($20) { var $37 = 0;label = 12; break; } else { label = 7; break; }
  case 7: 
   var $22=(($19+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($19+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $28=$19;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03 = $32;label = 10; break; } else { label = 31; break; }
  case 9: 
   var $34=HEAP32[(($23)>>2)];
   var $_03 = $34;label = 10; break;
  case 10: 
   var $_03;
   var $35=(($_03)|(0))==-1;
   if ($35) { label = 11; break; } else { var $37 = $19;label = 12; break; }
  case 11: 
   HEAP32[(($13)>>2)]=0;
   var $37 = 0;label = 12; break;
  case 12: 
   var $37;
   var $38=(($37)|(0))==0;
   var $39=HEAP32[(($14)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 13; break; }
  case 13: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_02 = $52;label = 16; break; } else { label = 31; break; }
  case 15: 
   var $54=HEAP32[(($43)>>2)];
   var $_02 = $54;label = 16; break;
  case 16: 
   var $_02;
   var $55=(($_02)|(0))==-1;
   if ($55) { label = 17; break; } else { label = 19; break; }
  case 17: 
   HEAP32[(($14)>>2)]=0;
   label = 18; break;
  case 18: 
   if ($38) { var $__a_2 = $__a_0;var $127 = 0;var $126 = 1;label = 41; break; } else { var $60 = 0;var $59 = 1;label = 20; break; }
  case 19: 
   var $57=(($39)|(0))==0;
   var $58=$38 ^ $57;
   if ($58) { var $60 = $39;var $59 = $57;label = 20; break; } else { var $__a_2 = $__a_0;var $127 = $39;var $126 = $57;label = 41; break; }
  case 20: 
   var $59;
   var $60;
   var $61=HEAP32[(($__a_end)>>2)];
   var $62=$61;
   var $63=$__a_0;
   var $64=((($62)-($63))|0);
   var $65=HEAP8[($0)];
   var $66=(($65)&(255));
   var $67=$66 & 1;
   var $68=(($67)|(0))==0;
   var $69=HEAP32[(($16)>>2)];
   var $70=$66 >>> 1;
   var $71=$68 ? $70 : $69;
   var $72=(($64)|(0))==(($71)|(0));
   if ($72) { label = 21; break; } else { var $__a_1 = $__a_0;label = 34; break; }
  case 21: 
   if ($68) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $75=HEAP32[(($16)>>2)];
   var $80 = $75;var $79 = $75;label = 24; break;
  case 23: 
   var $77=$66 >>> 1;
   var $78=$66 >>> 1;
   var $80 = $78;var $79 = $77;label = 24; break;
  case 24: 
   var $79;
   var $80;
   var $81=$80 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $81, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 31; break; }
  case 25: 
   var $82=HEAP8[($0)];
   var $83=$82 & 1;
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { var $88 = 10;label = 27; break; } else { label = 26; break; }
  case 26: 
   var $86=HEAP32[(($15)>>2)];
   var $87=$86 & -2;
   var $phitmp7=((($87)-(1))|0);
   var $88 = $phitmp7;label = 27; break;
  case 27: 
   var $88;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $88, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $89=HEAP8[($0)];
   var $90=$89 & 1;
   var $91=(($90 << 24) >> 24)==0;
   if ($91) { var $94 = $_pre_phi;label = 30; break; } else { label = 29; break; }
  case 29: 
   var $93=HEAP32[(($_pre_phi13)>>2)];
   var $94 = $93;label = 30; break;
  case 30: 
   var $94;
   var $95=(($94+$79)|0);
   HEAP32[(($__a_end)>>2)]=$95;
   var $__a_1 = $94;label = 34; break;
  case 31: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 33; break;
  case 32: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 33; break;
  case 33: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 34: 
   var $__a_1;
   var $97=(($37+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($37+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $103=$37;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+36)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $107;label = 37; break; } else { label = 31; break; }
  case 36: 
   var $109=HEAP32[(($98)>>2)];
   var $_0 = $109;label = 37; break;
  case 37: 
   var $_0;
   var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1);
   var $112=(($111)|(0))==0;
   if ($112) { label = 38; break; } else { var $__a_2 = $__a_1;var $127 = $60;var $126 = $59;label = 41; break; }
  case 38: 
   var $114=HEAP32[(($97)>>2)];
   var $115=HEAP32[(($99)>>2)];
   var $116=(($114)|(0))==(($115)|(0));
   if ($116) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $118=$37;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+40)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $19 = $37;label = 6; break; } else { label = 31; break; }
  case 40: 
   var $124=(($114+4)|0);
   HEAP32[(($97)>>2)]=$124;
   var $__a_0 = $__a_1;var $19 = $37;label = 6; break;
  case 41: 
   var $126;
   var $127;
   var $__a_2;
   var $128=$__grouping;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))==0;
   if ($132) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $134=(($__grouping+4)|0);
   var $135=HEAP32[(($134)>>2)];
   var $138 = $135;label = 44; break;
  case 43: 
   var $137=$130 >>> 1;
   var $138 = $137;label = 44; break;
  case 44: 
   var $138;
   var $139=(($138)|(0))==0;
   if ($139) { label = 48; break; } else { label = 45; break; }
  case 45: 
   var $141=HEAP8[($__in_units)];
   var $142=$141 & 1;
   var $143=(($142 << 24) >> 24)==0;
   if ($143) { label = 48; break; } else { label = 46; break; }
  case 46: 
   var $145=HEAP32[(($__g_end)>>2)];
   var $146=$145;
   var $147=$__g;
   var $148=((($146)-($147))|0);
   var $149=(($148)|(0)) < 160;
   if ($149) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $151=HEAP32[(($__dc)>>2)];
   var $152=(($145+4)|0);
   HEAP32[(($__g_end)>>2)]=$152;
   HEAP32[(($145)>>2)]=$151;
   label = 48; break;
  case 48: 
   var $153=HEAP32[(($__a_end)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2, $153, $__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 32; break; }
  case 49: 
   HEAPF64[(($__v)>>3)]=$154;
   var $156=HEAP32[(($__g_end)>>2)];
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, $156, $__err);
   if ($38) { var $173 = 0;label = 55; break; } else { label = 50; break; }
  case 50: 
   var $158=(($37+12)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($37+16)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159)|(0))==(($161)|(0));
   if ($162) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $164=$37;
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+36)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $168;label = 53; break; } else { label = 32; break; }
  case 52: 
   var $170=HEAP32[(($159)>>2)];
   var $_05 = $170;label = 53; break;
  case 53: 
   var $_05;
   var $171=(($_05)|(0))==-1;
   if ($171) { label = 54; break; } else { var $173 = $37;label = 55; break; }
  case 54: 
   HEAP32[(($13)>>2)]=0;
   var $173 = 0;label = 55; break;
  case 55: 
   var $173;
   var $174=(($173)|(0))==0;
   if ($126) { label = 61; break; } else { label = 56; break; }
  case 56: 
   var $176=(($127+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($127+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($177)|(0))==(($179)|(0));
   if ($180) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $182=$127;
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183+36)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $186;label = 59; break; } else { label = 32; break; }
  case 58: 
   var $188=HEAP32[(($177)>>2)];
   var $_04 = $188;label = 59; break;
  case 59: 
   var $_04;
   var $189=(($_04)|(0))==-1;
   if ($189) { label = 60; break; } else { label = 62; break; }
  case 60: 
   HEAP32[(($14)>>2)]=0;
   label = 61; break;
  case 61: 
   if ($174) { label = 63; break; } else { label = 64; break; }
  case 62: 
   var $191=(($127)|(0))==0;
   var $tmp6=$174 ^ $191;
   if ($tmp6) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $193=HEAP32[(($__err)>>2)];
   var $194=$193 | 2;
   HEAP32[(($__err)>>2)]=$194;
   label = 64; break;
  case 64: 
   var $196=(($agg_result)|0);
   HEAP32[(($196)>>2)]=$173;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__atoms=(sp)+(16);
   var $__grouping=(sp)+(120);
   var $__grouping14=$__grouping;
   var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   HEAP32[(($__grouping14)>>2)]=0; HEAP32[((($__grouping14)+(4))>>2)]=0; HEAP32[((($__grouping14)+(8))>>2)]=0;
   var $1=$__buf;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 39; break; }
  case 2: 
   var $3=(($0)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13696)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13696;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 40; break; }
  case 4: 
   var $12=HEAP32[((((13700)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 40; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $28=$24;
   var $29=(($__atoms)|0);
   var $30=$24;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+48)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($28, ((10088)|0), ((10114)|0), $29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 40; break; }
  case 9: 
   var $35=HEAP32[(($3)>>2)];
   var $36=(($35)|0);
   var $37=__ZNSt3__114__shared_count16__release_sharedEv($36);
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $38=$__buf;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 42; break; }
  case 10: 
   var $39=HEAP8[($1)];
   var $40=$39 & 1;
   var $41=(($40 << 24) >> 24)==0;
   if ($41) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $43=(($__buf+8)|0);
   var $44=HEAP32[(($43)>>2)];
   var $_pre15=(($38+1)|0);
   var $47 = $44;var $_pre_phi = $_pre15;var $_pre_phi17 = $43;label = 13; break;
  case 12: 
   var $46=(($38+1)|0);
   var $_pre16=(($__buf+8)|0);
   var $47 = $46;var $_pre_phi = $46;var $_pre_phi17 = $_pre16;label = 13; break;
  case 13: 
   var $_pre_phi17;
   var $_pre_phi;
   var $47;
   HEAP32[(($__a_end)>>2)]=$47;
   var $48=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$48;
   HEAP32[(($__dc)>>2)]=0;
   var $49=(($__b)|0);
   var $50=(($__e)|0);
   var $51=(($__buf)|0);
   var $52=(($__buf+4)|0);
   var $_pre=HEAP32[(($49)>>2)];
   var $__a_0 = $47;var $53 = $_pre;label = 14; break;
  case 14: 
   var $53;
   var $__a_0;
   var $54=(($53)|(0))==0;
   if ($54) { var $71 = 0;label = 20; break; } else { label = 15; break; }
  case 15: 
   var $56=(($53+12)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($53+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($57)|(0))==(($59)|(0));
   if ($60) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $62=$53;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+36)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $66;label = 18; break; } else { label = 41; break; }
  case 17: 
   var $68=HEAP32[(($57)>>2)];
   var $_05 = $68;label = 18; break;
  case 18: 
   var $_05;
   var $69=(($_05)|(0))==-1;
   if ($69) { label = 19; break; } else { var $71 = $53;label = 20; break; }
  case 19: 
   HEAP32[(($49)>>2)]=0;
   var $71 = 0;label = 20; break;
  case 20: 
   var $71;
   var $72=(($71)|(0))==0;
   var $73=HEAP32[(($50)>>2)];
   var $74=(($73)|(0))==0;
   if ($74) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $76=(($73+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($73+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $82=$73;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_04 = $86;label = 24; break; } else { label = 41; break; }
  case 23: 
   var $88=HEAP32[(($77)>>2)];
   var $_04 = $88;label = 24; break;
  case 24: 
   var $_04;
   var $89=(($_04)|(0))==-1;
   if ($89) { label = 25; break; } else { label = 27; break; }
  case 25: 
   HEAP32[(($50)>>2)]=0;
   label = 26; break;
  case 26: 
   if ($72) { var $__a_2 = $__a_0;label = 51; break; } else { label = 28; break; }
  case 27: 
   var $91=(($73)|(0))==0;
   var $92=$72 ^ $91;
   if ($92) { label = 28; break; } else { var $__a_2 = $__a_0;label = 51; break; }
  case 28: 
   var $93=HEAP32[(($__a_end)>>2)];
   var $94=$93;
   var $95=$__a_0;
   var $96=((($94)-($95))|0);
   var $97=HEAP8[($1)];
   var $98=(($97)&(255));
   var $99=$98 & 1;
   var $100=(($99)|(0))==0;
   var $101=HEAP32[(($52)>>2)];
   var $102=$98 >>> 1;
   var $103=$100 ? $102 : $101;
   var $104=(($96)|(0))==(($103)|(0));
   if ($104) { label = 29; break; } else { var $__a_1 = $__a_0;label = 44; break; }
  case 29: 
   if ($100) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $107=HEAP32[(($52)>>2)];
   var $112 = $107;var $111 = $107;label = 32; break;
  case 31: 
   var $109=$98 >>> 1;
   var $110=$98 >>> 1;
   var $112 = $110;var $111 = $109;label = 32; break;
  case 32: 
   var $111;
   var $112;
   var $113=$112 << 1;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $113, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 41; break; }
  case 33: 
   var $114=HEAP8[($1)];
   var $115=$114 & 1;
   var $116=(($115 << 24) >> 24)==0;
   if ($116) { var $120 = 10;label = 35; break; } else { label = 34; break; }
  case 34: 
   var $118=HEAP32[(($51)>>2)];
   var $119=$118 & -2;
   var $phitmp9=((($119)-(1))|0);
   var $120 = $phitmp9;label = 35; break;
  case 35: 
   var $120;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $120, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 41; break; }
  case 36: 
   var $121=HEAP8[($1)];
   var $122=$121 & 1;
   var $123=(($122 << 24) >> 24)==0;
   if ($123) { var $126 = $_pre_phi;label = 38; break; } else { label = 37; break; }
  case 37: 
   var $125=HEAP32[(($_pre_phi17)>>2)];
   var $126 = $125;label = 38; break;
  case 38: 
   var $126;
   var $127=(($126+$111)|0);
   HEAP32[(($__a_end)>>2)]=$127;
   var $__a_1 = $126;label = 44; break;
  case 39: 
   var $129$0 = ___cxa_find_matching_catch(-1, -1); $129$1 = tempRet0;
   var $130=$129$0;
   var $131=$129$1;
   var $_02 = $131;var $_03 = $130;label = 75; break;
  case 40: 
   var $133$0 = ___cxa_find_matching_catch(-1, -1); $133$1 = tempRet0;
   var $134=$133$0;
   var $135=$133$1;
   var $136=HEAP32[(($3)>>2)];
   var $137=(($136)|0);
   var $138=__ZNSt3__114__shared_count16__release_sharedEv($137);
   var $_02 = $135;var $_03 = $134;label = 75; break;
  case 41: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit$1;var $eh_lpad_body$0 = $lpad_loopexit$0;label = 43; break;
  case 42: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_nonloopexit$1;var $eh_lpad_body$0 = $lpad_nonloopexit$0;label = 43; break;
  case 43: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $139=$eh_lpad_body$0;
   var $140=$eh_lpad_body$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   var $_02 = $140;var $_03 = $139;label = 75; break;
  case 44: 
   var $__a_1;
   var $141=(($71+12)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($71+16)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($142)|(0))==(($144)|(0));
   if ($145) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $147=$71;
   var $148=HEAP32[(($147)>>2)];
   var $149=(($148+36)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $151;label = 47; break; } else { label = 41; break; }
  case 46: 
   var $153=HEAP32[(($142)>>2)];
   var $_0 = $153;label = 47; break;
  case 47: 
   var $_0;
   var $155=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, 16, $__a_1, $__a_end, $__dc, 0, $__grouping, $48, $__g_end, $29);
   var $156=(($155)|(0))==0;
   if ($156) { label = 48; break; } else { var $__a_2 = $__a_1;label = 51; break; }
  case 48: 
   var $158=HEAP32[(($141)>>2)];
   var $159=HEAP32[(($143)>>2)];
   var $160=(($158)|(0))==(($159)|(0));
   if ($160) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $162=$71;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+40)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0 = $__a_1;var $53 = $71;label = 14; break; } else { label = 41; break; }
  case 50: 
   var $168=(($158+4)|0);
   HEAP32[(($141)>>2)]=$168;
   var $__a_0 = $__a_1;var $53 = $71;label = 14; break;
  case 51: 
   var $__a_2;
   var $170=(($__a_2+3)|0);
   HEAP8[($170)]=0;
   var $171=HEAP8[(14264)];
   var $172=(($171 << 24) >> 24)==0;
   if ($172) { label = 52; break; } else { label = 56; break; }
  case 52: 
   var $174=___cxa_guard_acquire(14264);
   var $175=(($174)|(0))==0;
   if ($175) { label = 56; break; } else { label = 53; break; }
  case 53: 
   var $177 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 55; break; }
  case 54: 
   HEAP32[((12160)>>2)]=$177;
   label = 56; break;
  case 55: 
   var $180$0 = ___cxa_find_matching_catch(-1, -1); $180$1 = tempRet0;
   var $eh_lpad_body$1 = $180$1;var $eh_lpad_body$0 = $180$0;label = 43; break;
  case 56: 
   var $182=HEAP32[((12160)>>2)];
   var $183 = (function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2, $182, ((1336)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label = 57; break; } else { label = 42; break; }
  case 57: 
   var $185=(($183)|(0))==1;
   if ($185) { label = 59; break; } else { label = 58; break; }
  case 58: 
   HEAP32[(($__err)>>2)]=4;
   label = 59; break;
  case 59: 
   var $188=HEAP32[(($49)>>2)];
   var $189=(($188)|(0))==0;
   if ($189) { var $206 = 0;label = 65; break; } else { label = 60; break; }
  case 60: 
   var $191=(($188+12)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=(($188+16)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($192)|(0))==(($194)|(0));
   if ($195) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $197=$188;
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198+36)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$200]($188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_07 = $201;label = 63; break; } else { label = 42; break; }
  case 62: 
   var $203=HEAP32[(($192)>>2)];
   var $_07 = $203;label = 63; break;
  case 63: 
   var $_07;
   var $204=(($_07)|(0))==-1;
   if ($204) { label = 64; break; } else { var $206 = $188;label = 65; break; }
  case 64: 
   HEAP32[(($49)>>2)]=0;
   var $206 = 0;label = 65; break;
  case 65: 
   var $206;
   var $207=(($206)|(0))==0;
   var $208=HEAP32[(($50)>>2)];
   var $209=(($208)|(0))==0;
   if ($209) { label = 71; break; } else { label = 66; break; }
  case 66: 
   var $211=(($208+12)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($208+16)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=(($212)|(0))==(($214)|(0));
   if ($215) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $217=$208;
   var $218=HEAP32[(($217)>>2)];
   var $219=(($218+36)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_06 = $221;label = 69; break; } else { label = 42; break; }
  case 68: 
   var $223=HEAP32[(($212)>>2)];
   var $_06 = $223;label = 69; break;
  case 69: 
   var $_06;
   var $224=(($_06)|(0))==-1;
   if ($224) { label = 70; break; } else { label = 72; break; }
  case 70: 
   HEAP32[(($50)>>2)]=0;
   label = 71; break;
  case 71: 
   if ($207) { label = 73; break; } else { label = 74; break; }
  case 72: 
   var $226=(($208)|(0))==0;
   var $tmp8=$207 ^ $226;
   if ($tmp8) { label = 74; break; } else { label = 73; break; }
  case 73: 
   var $228=HEAP32[(($__err)>>2)];
   var $229=$228 | 2;
   HEAP32[(($__err)>>2)]=$229;
   label = 74; break;
  case 74: 
   var $231=(($agg_result)|0);
   HEAP32[(($231)>>2)]=$206;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  case 75: 
   var $_03;
   var $_02;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   var $233$0=$_03;
   var $233$1=0;
   var $234$0=$233$0;
   var $234$1=$_02;
   ___resumeException($234$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $1=(sp)+(16);
   var $2=(sp)+(24);
   var $__nm=(sp)+(32);
   var $3=(($__iob+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4 & 1;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$this;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+24)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($__s)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($1)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=(($__v)&(1));
   FUNCTION_TABLE[$11]($agg_result, $this, $1, $__iob, $__fl, $15);
   label = 29; break;
  case 3: 
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $17=(($2)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $20=HEAP32[((((13320)|0))>>2)];
   var $21=(($20)|(0))==-1;
   if ($21) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $23=(($__p_i_i_i)|0);
   HEAP32[(($23)>>2)]=13320;
   var $24=(($__p_i_i_i+4)|0);
   HEAP32[(($24)>>2)]=(26);
   var $25=(($__p_i_i_i+8)|0);
   HEAP32[(($25)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $19, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   var $26=HEAP32[((((13324)|0))>>2)];
   var $27=((($26)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $28=(($18+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($18+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$29;
   var $33=$31;
   var $34=((($32)-($33))|0);
   var $35=$34 >> 2;
   var $36=(($35)>>>(0)) > (($27)>>>(0));
   if ($36) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $37=(($31+($27<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))==0;
   if ($39) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $40=___cxa_allocate_exception(4);
   var $41=$40;
   __ZNSt8bad_castC2Ev($41);
   (function() { try { __THREW__ = 0; return ___cxa_throw($40, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 26; break; }
  case 8: 
   throw "Reached an unreachable!";
  case 9: 
   var $42=$38;
   var $43=HEAP32[(($17)>>2)];
   var $44=(($43)|0);
   var $45=__ZNSt3__114__shared_count16__release_sharedEv($44);
   var $46=$38;
   var $47=HEAP32[(($46)>>2)];
   if ($__v) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=(($47+24)|0);
   var $50=HEAP32[(($49)>>2)];
   FUNCTION_TABLE[$50]($__nm, $42);
   label = 12; break;
  case 11: 
   var $52=(($47+28)|0);
   var $53=HEAP32[(($52)>>2)];
   FUNCTION_TABLE[$53]($__nm, $42);
   label = 12; break;
  case 12: 
   var $55=$__nm;
   var $56=$__nm;
   var $57=HEAP8[($56)];
   var $58=$57 & 1;
   var $59=(($58 << 24) >> 24)==0;
   if ($59) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $61=(($__nm+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $_pre4=(($55+1)|0);
   var $__i_sroa_0_0_ph = $62;var $_pre_phi = $_pre4;var $_pre_phi6 = $61;label = 15; break;
  case 14: 
   var $64=(($55+1)|0);
   var $_pre5=(($__nm+8)|0);
   var $__i_sroa_0_0_ph = $64;var $_pre_phi = $64;var $_pre_phi6 = $_pre5;label = 15; break;
  case 15: 
   var $_pre_phi6;
   var $_pre_phi;
   var $__i_sroa_0_0_ph;
   var $65=(($__s)|0);
   var $66=(($__nm+4)|0);
   var $__i_sroa_0_0 = $__i_sroa_0_0_ph;var $67 = $57;label = 16; break;
  case 16: 
   var $67;
   var $__i_sroa_0_0;
   var $68=$67 & 1;
   var $69=(($68 << 24) >> 24)==0;
   if ($69) { var $72 = $_pre_phi;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $71=HEAP32[(($_pre_phi6)>>2)];
   var $72 = $71;label = 18; break;
  case 18: 
   var $72;
   var $73=(($67)&(255));
   var $74=$73 & 1;
   var $75=(($74)|(0))==0;
   var $76=HEAP32[(($66)>>2)];
   var $77=$73 >>> 1;
   var $78=$75 ? $77 : $76;
   var $79=(($72+$78)|0);
   var $80=(($__i_sroa_0_0)|(0))==(($79)|(0));
   if ($80) { label = 28; break; } else { label = 19; break; }
  case 19: 
   var $82=HEAP8[($__i_sroa_0_0)];
   var $83=HEAP32[(($65)>>2)];
   var $84=(($83)|(0))==0;
   if ($84) { label = 25; break; } else { label = 20; break; }
  case 20: 
   var $86=(($83+24)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($83+28)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($87)|(0))==(($89)|(0));
   if ($90) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $92=$83;
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+52)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($82)&(255));
   var $97 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($83, $96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 27; break; }
  case 22: 
   var $98=(($87+1)|0);
   HEAP32[(($86)>>2)]=$98;
   HEAP8[($87)]=$82;
   label = 25; break;
  case 23: 
   var $99=(($97)|(0))==-1;
   if ($99) { label = 24; break; } else { label = 25; break; }
  case 24: 
   HEAP32[(($65)>>2)]=0;
   label = 25; break;
  case 25: 
   var $101=(($__i_sroa_0_0+1)|0);
   var $_pre=HEAP8[($56)];
   var $__i_sroa_0_0 = $101;var $67 = $_pre;label = 16; break;
  case 26: 
   var $103$0 = ___cxa_find_matching_catch(-1, -1); $103$1 = tempRet0;
   var $104=$103$0;
   var $105=$103$1;
   var $106=HEAP32[(($17)>>2)];
   var $107=(($106)|0);
   var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
   var $_01 = $105;var $_02 = $104;label = 30; break;
  case 27: 
   var $110$0 = ___cxa_find_matching_catch(-1, -1); $110$1 = tempRet0;
   var $111=$110$0;
   var $112=$110$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
   var $_01 = $112;var $_02 = $111;label = 30; break;
  case 28: 
   var $114=HEAP32[(($65)>>2)];
   var $115=(($agg_result)|0);
   HEAP32[(($115)>>2)]=$114;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
   label = 29; break;
  case 29: 
   STACKTOP = sp;
   return;
  case 30: 
   var $_02;
   var $_01;
   var $118$0=$_02;
   var $118$1=0;
   var $119$0=$118$0;
   var $119$1=$_01;
   ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(24);
   var $__op=(sp)+(48);
   var $__oe=(sp)+(56);
   var $1=(sp)+(64);
   var $2=(sp)+(72);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2328)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2328)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2328)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2328)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2328)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2328)|0))+(5))|0)];
   var $4=(($__fmt+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__fmt+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   HEAP8[($_13_i_ph)]=108;
   var $scevgep=(($_13_i_ph+1)|0);
   var $16=$6 & 74;
   if ((($16)|(0))==64) {
    label = 6; break;
   }
   else if ((($16)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $19=$6 & 16384;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=100;
   label = 11; break;
  case 11: 
   var $24=(($__nar)|0);
   var $25=HEAP8[(14264)];
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $28=___cxa_guard_acquire(14264);
   var $29=(($28)|(0))==0;
   if ($29) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $31 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$31;
   label = 16; break;
  case 15: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   ___resumeException($34$0)
  case 16: 
   var $35=HEAP32[((12160)>>2)];
   var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24, 12, $35, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $37=(($__nar+$36)|0);
   var $38=HEAP32[(($5)>>2)];
   var $39=$38 & 176;
   if ((($39)|(0))==16) {
    label = 17; break;
   }
   else if ((($39)|(0))==32) {
    var $_0_i1 = $37;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $41=HEAP8[($24)];
   if ((($41 << 24) >> 24)==45 | (($41 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $43=(($__nar+1)|0);
   var $_0_i1 = $43;label = 23; break;
  case 19: 
   var $45=(($36)|(0)) > 1;
   var $46=(($41 << 24) >> 24)==48;
   var $or_cond_i=$45 & $46;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $48=(($__nar+1)|0);
   var $49=HEAP8[($48)];
   if ((($49 << 24) >> 24)==120 | (($49 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $51=(($__nar+2)|0);
   var $_0_i1 = $51;label = 23; break;
  case 22: 
   var $_0_i1 = $24;label = 23; break;
  case 23: 
   var $_0_i1;
   var $53=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24, $_0_i1, $37, $53, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $55=(($1)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   var $59=(($__s)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($2)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=HEAP32[(($__op)>>2)];
   var $63=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $53, $62, $63, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=(($1)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__va=sp;
   var $1=(($__va)|0);
   var $2=$__va;
   HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
   var $3=_uselocale($__l);
   var $4=_vsnprintf($__s, $__n, $__format, $1);
   var $5=(($3)|(0))==0;
   if ($5) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $7 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1,0); $9$1 = tempRet0;
   var $10=$9$0;
   ___clang_call_terminate($10);
   throw "Reached an unreachable!";
  case 4: 
   STACKTOP = sp;
   return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i7=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__grouping=(sp)+(32);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13704)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13704;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $3, 256);
   label = 3; break;
  case 3: 
   var $10=HEAP32[((((13708)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   ___cxa_throw($24, 8440, (356));
   throw "Reached an unreachable!";
  case 6: 
   var $26=$22;
   var $27=HEAP32[(($1)>>2)];
   var $28=$__p_i_i_i7;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $29=HEAP32[((((13320)|0))>>2)];
   var $30=(($29)|(0))==-1;
   if ($30) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $32=(($__p_i_i_i7)|0);
   HEAP32[(($32)>>2)]=13320;
   var $33=(($__p_i_i_i7+4)|0);
   HEAP32[(($33)>>2)]=(26);
   var $34=(($__p_i_i_i7+8)|0);
   HEAP32[(($34)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $28, 256);
   label = 8; break;
  case 8: 
   var $35=HEAP32[((((13324)|0))>>2)];
   var $36=((($35)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $37=(($27+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($27+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$38;
   var $42=$40;
   var $43=((($41)-($42))|0);
   var $44=$43 >> 2;
   var $45=(($44)>>>(0)) > (($36)>>>(0));
   if ($45) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=(($40+($36<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=___cxa_allocate_exception(4);
   var $50=$49;
   __ZNSt8bad_castC2Ev($50);
   ___cxa_throw($49, 8440, (356));
   throw "Reached an unreachable!";
  case 11: 
   var $51=$47;
   var $52=$47;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($__grouping, $51);
   var $56=$__grouping;
   var $57=$__grouping;
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$59 & 1;
   var $61=(($60)|(0))==0;
   if ($61) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $63=(($__grouping+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $67 = $64;label = 14; break;
  case 13: 
   var $66=$59 >>> 1;
   var $67 = $66;label = 14; break;
  case 14: 
   var $67;
   var $68=(($67)|(0))==0;
   if ($68) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $70=$22;
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+32)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($26, $__nb, $__ne, $__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $75=$__ne;
   var $76=$__nb;
   var $77=((($75)-($76))|0);
   var $78=(($__ob+$77)|0);
   HEAP32[(($__oe)>>2)]=$78;
   label = 43; break;
  case 17: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 19; break;
  case 18: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 19; break;
  case 19: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 20: 
   HEAP32[(($__oe)>>2)]=$__ob;
   var $81=HEAP8[($__nb)];
   if ((($81 << 24) >> 24)==45 | (($81 << 24) >> 24)==43) {
    label = 21; break;
   }
   else {
   var $__nf_0 = $__nb;label = 23; break;
   }
  case 21: 
   var $83=$22;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+28)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($26, $81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 18; break; }
  case 22: 
   var $88=(($__nb+1)|0);
   var $89=HEAP32[(($__oe)>>2)];
   var $90=(($89+1)|0);
   HEAP32[(($__oe)>>2)]=$90;
   HEAP8[($89)]=$87;
   var $__nf_0 = $88;label = 23; break;
  case 23: 
   var $__nf_0;
   var $92=$__ne;
   var $93=$__nf_0;
   var $94=((($92)-($93))|0);
   var $95=(($94)|(0)) > 1;
   if ($95) { label = 24; break; } else { var $__nf_1 = $__nf_0;label = 29; break; }
  case 24: 
   var $97=HEAP8[($__nf_0)];
   var $98=(($97 << 24) >> 24)==48;
   if ($98) { label = 25; break; } else { var $__nf_1 = $__nf_0;label = 29; break; }
  case 25: 
   var $100=(($__nf_0+1)|0);
   var $101=HEAP8[($100)];
   if ((($101 << 24) >> 24)==120 | (($101 << 24) >> 24)==88) {
    label = 26; break;
   }
   else {
   var $__nf_1 = $__nf_0;label = 29; break;
   }
  case 26: 
   var $103=$22;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+28)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($26, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 18; break; }
  case 27: 
   var $108=HEAP32[(($__oe)>>2)];
   var $109=(($108+1)|0);
   HEAP32[(($__oe)>>2)]=$109;
   HEAP8[($108)]=$107;
   var $110=HEAP8[($100)];
   var $111=HEAP32[(($103)>>2)];
   var $112=(($111+28)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26, $110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 18; break; }
  case 28: 
   var $115=(($__nf_0+2)|0);
   var $116=HEAP32[(($__oe)>>2)];
   var $117=(($116+1)|0);
   HEAP32[(($__oe)>>2)]=$117;
   HEAP8[($116)]=$114;
   var $__nf_1 = $115;label = 29; break;
  case 29: 
   var $__nf_1;
   var $119=(($__nf_1)|(0))==(($__ne)|(0));
   if ($119) { label = 32; break; } else { label = 30; break; }
  case 30: 
   var $120=((($__ne)-(1))|0);
   var $121=(($__nf_1)>>>(0)) < (($120)>>>(0));
   if ($121) { var $_018 = $__nf_1;var $122 = $120;label = 31; break; } else { label = 32; break; }
  case 31: 
   var $122;
   var $_018;
   var $123=HEAP8[($_018)];
   var $124=HEAP8[($122)];
   HEAP8[($_018)]=$124;
   HEAP8[($122)]=$123;
   var $125=(($_018+1)|0);
   var $126=((($122)-(1))|0);
   var $127=(($125)>>>(0)) < (($126)>>>(0));
   if ($127) { var $_018 = $125;var $122 = $126;label = 31; break; } else { label = 32; break; }
  case 32: 
   var $128=$47;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+16)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 18; break; }
  case 33: 
   var $133=(($__nf_1)>>>(0)) < (($__ne)>>>(0));
   if ($133) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $134=(($56+1)|0);
   var $135=$22;
   var $136=(($__grouping+4)|0);
   var $137=(($__grouping+8)|0);
   var $__dc_013 = 0;var $__dg_014 = 0;var $__p_015 = $__nf_1;label = 35; break;
  case 35: 
   var $__p_015;
   var $__dg_014;
   var $__dc_013;
   var $138=HEAP8[($57)];
   var $139=$138 & 1;
   var $140=(($139 << 24) >> 24)==0;
   var $141=HEAP32[(($137)>>2)];
   var $_=$140 ? $134 : $141;
   var $142=(($_+$__dg_014)|0);
   var $143=HEAP8[($142)];
   var $144=(($143 << 24) >> 24)==0;
   if ($144) { var $__dg_1 = $__dg_014;var $__dc_1 = $__dc_013;label = 38; break; } else { label = 36; break; }
  case 36: 
   var $145=HEAP32[(($137)>>2)];
   var $_20=$140 ? $134 : $145;
   var $146=(($_20+$__dg_014)|0);
   var $147=HEAP8[($146)];
   var $148=(($147 << 24) >> 24);
   var $149=(($__dc_013)|(0))==(($148)|(0));
   if ($149) { label = 37; break; } else { var $__dg_1 = $__dg_014;var $__dc_1 = $__dc_013;label = 38; break; }
  case 37: 
   var $150=HEAP32[(($__oe)>>2)];
   var $151=(($150+1)|0);
   HEAP32[(($__oe)>>2)]=$151;
   HEAP8[($150)]=$132;
   var $152=HEAP8[($57)];
   var $153=(($152)&(255));
   var $154=$153 & 1;
   var $155=(($154)|(0))==0;
   var $156=HEAP32[(($136)>>2)];
   var $157=$153 >>> 1;
   var $158=$155 ? $157 : $156;
   var $159=((($158)-(1))|0);
   var $160=(($__dg_014)>>>(0)) < (($159)>>>(0));
   var $161=(($160)&(1));
   var $___dg_0=((($161)+($__dg_014))|0);
   var $__dg_1 = $___dg_0;var $__dc_1 = 0;label = 38; break;
  case 38: 
   var $__dc_1;
   var $__dg_1;
   var $163=HEAP8[($__p_015)];
   var $164=HEAP32[(($135)>>2)];
   var $165=(($164+28)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($26, $163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 17; break; }
  case 39: 
   var $168=HEAP32[(($__oe)>>2)];
   var $169=(($168+1)|0);
   HEAP32[(($__oe)>>2)]=$169;
   HEAP8[($168)]=$167;
   var $170=((($__dc_1)+(1))|0);
   var $171=(($__p_015+1)|0);
   var $172=(($171)>>>(0)) < (($__ne)>>>(0));
   if ($172) { var $__dc_013 = $170;var $__dg_014 = $__dg_1;var $__p_015 = $171;label = 35; break; } else { label = 40; break; }
  case 40: 
   var $173=$__nf_1;
   var $174=$__nb;
   var $175=((($173)-($174))|0);
   var $176=(($__ob+$175)|0);
   var $177=HEAP32[(($__oe)>>2)];
   var $178=(($176)|(0))==(($177)|(0));
   if ($178) { label = 43; break; } else { label = 41; break; }
  case 41: 
   var $179=((($177)-(1))|0);
   var $180=(($176)>>>(0)) < (($179)>>>(0));
   if ($180) { var $_0512 = $176;var $181 = $179;label = 42; break; } else { label = 43; break; }
  case 42: 
   var $181;
   var $_0512;
   var $182=HEAP8[($_0512)];
   var $183=HEAP8[($181)];
   HEAP8[($_0512)]=$183;
   HEAP8[($181)]=$182;
   var $184=(($_0512+1)|0);
   var $185=((($181)-(1))|0);
   var $186=(($184)>>>(0)) < (($185)>>>(0));
   if ($186) { var $_0512 = $184;var $181 = $185;label = 42; break; } else { label = 43; break; }
  case 43: 
   var $187=(($__np)|(0))==(($__ne)|(0));
   if ($187) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $189=HEAP32[(($__oe)>>2)];
   var $storemerge = $189;label = 46; break;
  case 45: 
   var $191=$__np;
   var $192=$__nb;
   var $193=((($191)-($192))|0);
   var $194=(($__ob+$193)|0);
   var $storemerge = $194;label = 46; break;
  case 46: 
   var $storemerge;
   HEAP32[(($__op)>>2)]=$storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(32);
   var $__op=(sp)+(80);
   var $__oe=(sp)+(88);
   var $1=(sp)+(96);
   var $2=(sp)+(104);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $3=$__fmt;
   var $4=(($3+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($3+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   var $16=(($_13_i_ph+1)|0);
   HEAP8[($_13_i_ph)]=108;
   HEAP8[($16)]=108;
   var $scevgep=(($_13_i_ph+2)|0);
   var $17=$6 & 74;
   if ((($17)|(0))==64) {
    label = 6; break;
   }
   else if ((($17)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $20=$6 & 16384;
   var $21=(($20)|(0))==0;
   if ($21) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=100;
   label = 11; break;
  case 11: 
   var $25=(($__nar)|0);
   var $26=HEAP8[(14264)];
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $29=___cxa_guard_acquire(14264);
   var $30=(($29)|(0))==0;
   if ($30) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $32 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$32;
   label = 16; break;
  case 15: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1); $35$1 = tempRet0;
   ___resumeException($35$0)
  case 16: 
   var $36=HEAP32[((12160)>>2)];
   var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25, 22, $36, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
   var $38=(($__nar+$37)|0);
   var $39=HEAP32[(($5)>>2)];
   var $40=$39 & 176;
   if ((($40)|(0))==16) {
    label = 17; break;
   }
   else if ((($40)|(0))==32) {
    var $_0_i1 = $38;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $42=HEAP8[($25)];
   if ((($42 << 24) >> 24)==45 | (($42 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $44=(($__nar+1)|0);
   var $_0_i1 = $44;label = 23; break;
  case 19: 
   var $46=(($37)|(0)) > 1;
   var $47=(($42 << 24) >> 24)==48;
   var $or_cond_i=$46 & $47;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $49=(($__nar+1)|0);
   var $50=HEAP8[($49)];
   if ((($50 << 24) >> 24)==120 | (($50 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $52=(($__nar+2)|0);
   var $_0_i1 = $52;label = 23; break;
  case 22: 
   var $_0_i1 = $25;label = 23; break;
  case 23: 
   var $_0_i1;
   var $54=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25, $_0_i1, $38, $54, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $56=(($1)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   var $60=(($__s)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($2)|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=HEAP32[(($__op)>>2)];
   var $64=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $54, $63, $64, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   var $67=(($1)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|0);
   var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
   ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(24);
   var $__op=(sp)+(48);
   var $__oe=(sp)+(56);
   var $1=(sp)+(64);
   var $2=(sp)+(72);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2328)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2328)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2328)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2328)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2328)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2328)|0))+(5))|0)];
   var $4=(($__fmt+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__fmt+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   HEAP8[($_13_i_ph)]=108;
   var $scevgep=(($_13_i_ph+1)|0);
   var $16=$6 & 74;
   if ((($16)|(0))==64) {
    label = 6; break;
   }
   else if ((($16)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $19=$6 & 16384;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=117;
   label = 11; break;
  case 11: 
   var $24=(($__nar)|0);
   var $25=HEAP8[(14264)];
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $28=___cxa_guard_acquire(14264);
   var $29=(($28)|(0))==0;
   if ($29) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $31 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$31;
   label = 16; break;
  case 15: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   ___resumeException($34$0)
  case 16: 
   var $35=HEAP32[((12160)>>2)];
   var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24, 12, $35, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $37=(($__nar+$36)|0);
   var $38=HEAP32[(($5)>>2)];
   var $39=$38 & 176;
   if ((($39)|(0))==16) {
    label = 17; break;
   }
   else if ((($39)|(0))==32) {
    var $_0_i1 = $37;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $41=HEAP8[($24)];
   if ((($41 << 24) >> 24)==45 | (($41 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $43=(($__nar+1)|0);
   var $_0_i1 = $43;label = 23; break;
  case 19: 
   var $45=(($36)|(0)) > 1;
   var $46=(($41 << 24) >> 24)==48;
   var $or_cond_i=$45 & $46;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $48=(($__nar+1)|0);
   var $49=HEAP8[($48)];
   if ((($49 << 24) >> 24)==120 | (($49 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $51=(($__nar+2)|0);
   var $_0_i1 = $51;label = 23; break;
  case 22: 
   var $_0_i1 = $24;label = 23; break;
  case 23: 
   var $_0_i1;
   var $53=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24, $_0_i1, $37, $53, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $55=(($1)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   var $59=(($__s)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($2)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=HEAP32[(($__op)>>2)];
   var $63=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $53, $62, $63, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=(($1)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(32);
   var $__op=(sp)+(80);
   var $__oe=(sp)+(88);
   var $1=(sp)+(96);
   var $2=(sp)+(104);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $3=$__fmt;
   var $4=(($3+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($3+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   var $16=(($_13_i_ph+1)|0);
   HEAP8[($_13_i_ph)]=108;
   HEAP8[($16)]=108;
   var $scevgep=(($_13_i_ph+2)|0);
   var $17=$6 & 74;
   if ((($17)|(0))==64) {
    label = 6; break;
   }
   else if ((($17)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $20=$6 & 16384;
   var $21=(($20)|(0))==0;
   if ($21) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=117;
   label = 11; break;
  case 11: 
   var $25=(($__nar)|0);
   var $26=HEAP8[(14264)];
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $29=___cxa_guard_acquire(14264);
   var $30=(($29)|(0))==0;
   if ($30) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $32 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$32;
   label = 16; break;
  case 15: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1); $35$1 = tempRet0;
   ___resumeException($35$0)
  case 16: 
   var $36=HEAP32[((12160)>>2)];
   var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25, 23, $36, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
   var $38=(($__nar+$37)|0);
   var $39=HEAP32[(($5)>>2)];
   var $40=$39 & 176;
   if ((($40)|(0))==16) {
    label = 17; break;
   }
   else if ((($40)|(0))==32) {
    var $_0_i1 = $38;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $42=HEAP8[($25)];
   if ((($42 << 24) >> 24)==45 | (($42 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $44=(($__nar+1)|0);
   var $_0_i1 = $44;label = 23; break;
  case 19: 
   var $46=(($37)|(0)) > 1;
   var $47=(($42 << 24) >> 24)==48;
   var $or_cond_i=$46 & $47;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $49=(($__nar+1)|0);
   var $50=HEAP8[($49)];
   if ((($50 << 24) >> 24)==120 | (($50 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $52=(($__nar+2)|0);
   var $_0_i1 = $52;label = 23; break;
  case 22: 
   var $_0_i1 = $25;label = 23; break;
  case 23: 
   var $_0_i1;
   var $54=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25, $_0_i1, $38, $54, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $56=(($1)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   var $60=(($__s)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($2)|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=HEAP32[(($__op)>>2)];
   var $64=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $54, $63, $64, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   var $67=(($1)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|0);
   var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
   ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__nb=(sp)+(40);
   var $__o=(sp)+(48);
   var $__op=(sp)+(112);
   var $__oe=(sp)+(120);
   var $1=(sp)+(128);
   var $2=(sp)+(136);
   var $3=(sp)+(144);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $4=$__fmt;
   var $5=(($4+1)|0);
   var $6=(($__iob+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 2048;
   var $9=(($8)|(0))==0;
   if ($9) { var $_0_i = $5;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($4+2)|0);
   HEAP8[($5)]=43;
   var $_0_i = $11;label = 3; break;
  case 3: 
   var $_0_i;
   var $13=$7 & 1024;
   var $14=(($13)|(0))==0;
   if ($14) { var $_1_i = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_1_i = $16;label = 5; break;
  case 5: 
   var $_1_i;
   var $18=$7 & 260;
   var $19=$7 >>> 14;
   var $20=(($18)|(0))==260;
   if ($20) { label = 13; break; } else { label = 6; break; }
  case 6: 
   var $21=(($_1_i+1)|0);
   HEAP8[($_1_i)]=46;
   var $22=(($_1_i+2)|0);
   HEAP8[($21)]=42;
   if ((($18)|(0))==256) {
    label = 10; break;
   }
   else if ((($18)|(0))==4) {
    label = 7; break;
   }
   else {
   label = 16; break;
   }
  case 7: 
   var $24=$19 & 1;
   var $25=(($24)|(0))==0;
   if ($25) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($22)]=70;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 9: 
   HEAP8[($22)]=102;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 10: 
   var $29=$19 & 1;
   var $30=(($29)|(0))==0;
   if ($30) { label = 12; break; } else { label = 11; break; }
  case 11: 
   HEAP8[($22)]=69;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 12: 
   HEAP8[($22)]=101;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 13: 
   var $34=$19 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP8[($_1_i)]=65;
   var $specify_precision_0_off0_ph_i8 = 0;label = 19; break;
  case 15: 
   HEAP8[($_1_i)]=97;
   var $specify_precision_0_off0_ph_i8 = 0;label = 19; break;
  case 16: 
   var $39=$19 & 1;
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 17; break; }
  case 17: 
   HEAP8[($22)]=71;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 18: 
   HEAP8[($22)]=103;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 19: 
   var $specify_precision_0_off0_ph_i8;
   var $43=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$43;
   var $44=HEAP8[(14264)];
   var $45=(($44 << 24) >> 24)==0;
   if ($45) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $47=___cxa_guard_acquire(14264);
   var $48=(($47)|(0))==0;
   if ($48) { label = 24; break; } else { label = 21; break; }
  case 21: 
   var $50 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[((12160)>>2)]=$50;
   label = 24; break;
  case 23: 
   var $53$0 = ___cxa_find_matching_catch(-1, -1); $53$1 = tempRet0;
   ___resumeException($53$0)
  case 24: 
   var $54=HEAP32[((12160)>>2)];
   if ($specify_precision_0_off0_ph_i8) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $56=(($__iob+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $58;label = 27; break;
  case 26: 
   var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $60;label = 27; break;
  case 27: 
   var $__nc_0;
   var $62=(($__nc_0)|(0)) > 29;
   if ($62) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $_pre15=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_0;var $__nbh_sroa_0_1 = 0;var $102 = $_pre15;label = 47; break;
  case 29: 
   var $64=HEAP8[(14264)];
   var $65=(($64 << 24) >> 24)==0;
   if ($specify_precision_0_off0_ph_i8) { label = 30; break; } else { label = 38; break; }
  case 30: 
   if ($65) { label = 31; break; } else { label = 35; break; }
  case 31: 
   var $68=___cxa_guard_acquire(14264);
   var $69=(($68)|(0))==0;
   if ($69) { label = 35; break; } else { label = 32; break; }
  case 32: 
   var $71 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 34; break; }
  case 33: 
   HEAP32[((12160)>>2)]=$71;
   label = 35; break;
  case 34: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $eh_lpad_body$1 = $74$1;var $eh_lpad_body$0 = $74$0;label = 37; break;
  case 35: 
   var $76=HEAP32[((12160)>>2)];
   var $77=(($__iob+8)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $76, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $79;label = 44; break; } else { label = 36; break; }
  case 36: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1); $81$1 = tempRet0;
   var $eh_lpad_body$1 = $81$1;var $eh_lpad_body$0 = $81$0;label = 37; break;
  case 37: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $82=$eh_lpad_body$0;
   var $83=$eh_lpad_body$1;
   var $_1213 = $83;var $_114 = $82;label = 72; break;
  case 38: 
   if ($65) { label = 39; break; } else { label = 43; break; }
  case 39: 
   var $86=___cxa_guard_acquire(14264);
   var $87=(($86)|(0))==0;
   if ($87) { label = 43; break; } else { label = 40; break; }
  case 40: 
   var $89 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 42; break; }
  case 41: 
   HEAP32[((12160)>>2)]=$89;
   label = 43; break;
  case 42: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1); $92$1 = tempRet0;
   var $eh_lpad_body$1 = $92$1;var $eh_lpad_body$0 = $92$0;label = 37; break;
  case 43: 
   var $94=HEAP32[((12160)>>2)];
   var $95=(($__iob+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $94, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $97;label = 44; break; } else { label = 36; break; }
  case 44: 
   var $__nc_1;
   var $99=HEAP32[(($__nb)>>2)];
   var $100=(($99)|(0))==0;
   if ($100) { label = 45; break; } else { var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $99;var $102 = $99;label = 47; break; }
  case 45: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 36; break; }
  case 46: 
   var $_pre=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $_pre;var $102 = $_pre;label = 47; break;
  case 47: 
   var $102;
   var $__nbh_sroa_0_1;
   var $__nc_2;
   var $103=(($102+$__nc_2)|0);
   var $104=HEAP32[(($6)>>2)];
   var $105=$104 & 176;
   if ((($105)|(0))==16) {
    label = 48; break;
   }
   else if ((($105)|(0))==32) {
    var $_0_i7 = $103;label = 54; break;
   }
   else {
   label = 53; break;
   }
  case 48: 
   var $107=HEAP8[($102)];
   if ((($107 << 24) >> 24)==45 | (($107 << 24) >> 24)==43) {
    label = 49; break;
   }
   else {
   label = 50; break;
   }
  case 49: 
   var $109=(($102+1)|0);
   var $_0_i7 = $109;label = 54; break;
  case 50: 
   var $111=(($__nc_2)|(0)) > 1;
   var $112=(($107 << 24) >> 24)==48;
   var $or_cond_i=$111 & $112;
   if ($or_cond_i) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $114=(($102+1)|0);
   var $115=HEAP8[($114)];
   if ((($115 << 24) >> 24)==120 | (($115 << 24) >> 24)==88) {
    label = 52; break;
   }
   else {
   label = 53; break;
   }
  case 52: 
   var $117=(($102+2)|0);
   var $_0_i7 = $117;label = 54; break;
  case 53: 
   var $_0_i7 = $102;label = 54; break;
  case 54: 
   var $_0_i7;
   var $119=(($__o)|0);
   var $120=(($102)|(0))==(($43)|(0));
   if ($120) { var $__ob_0 = $119;var $__obh_sroa_0_1 = 0;var $130 = $43;label = 59; break; } else { label = 55; break; }
  case 55: 
   var $122=$__nc_2 << 1;
   var $123=_malloc($122);
   var $124=(($123)|(0))==0;
   if ($124) { label = 56; break; } else { var $__ob_0 = $123;var $__obh_sroa_0_1 = $123;var $130 = $102;label = 59; break; }
  case 56: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { var $__obh_sroa_0_0 = 0;label = 58; break; }
  case 57: 
   var $_pre16=HEAP32[(($__nb)>>2)];
   var $__ob_0 = 0;var $__obh_sroa_0_1 = 0;var $130 = $_pre16;label = 59; break;
  case 58: 
   var $__obh_sroa_0_0;
   var $127$0 = ___cxa_find_matching_catch(-1, -1); $127$1 = tempRet0;
   var $128=$127$0;
   var $129=$127$1;
   var $_0 = $128;var $_01 = $129;var $__obh_sroa_0_2 = $__obh_sroa_0_0;label = 68; break;
  case 59: 
   var $130;
   var $__obh_sroa_0_1;
   var $__ob_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 60: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130, $_0_i7, $103, $__ob_0, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 67; break; }
  case 61: 
   var $133=(($1)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($134)|0);
   var $136=__ZNSt3__114__shared_count16__release_sharedEv($135);
   var $137=(($__s)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($3)|0);
   HEAP32[(($139)>>2)]=$138;
   var $140=HEAP32[(($__op)>>2)];
   var $141=HEAP32[(($__oe)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $3, $__ob_0, $140, $141, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 62: 
   var $143=(($2)|0);
   var $144=HEAP32[(($143)>>2)];
   HEAP32[(($137)>>2)]=$144;
   var $145=(($agg_result)|0);
   HEAP32[(($145)>>2)]=$144;
   var $146=(($__obh_sroa_0_1)|(0))==0;
   if ($146) { label = 64; break; } else { label = 63; break; }
  case 63: 
   _free($__obh_sroa_0_1);
   label = 64; break;
  case 64: 
   var $148=(($__nbh_sroa_0_1)|(0))==0;
   if ($148) { label = 66; break; } else { label = 65; break; }
  case 65: 
   _free($__nbh_sroa_0_1);
   label = 66; break;
  case 66: 
   STACKTOP = sp;
   return;
  case 67: 
   var $151$0 = ___cxa_find_matching_catch(-1, -1); $151$1 = tempRet0;
   var $152=$151$0;
   var $153=$151$1;
   var $154=(($1)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|0);
   var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
   var $_0 = $152;var $_01 = $153;var $__obh_sroa_0_2 = $__obh_sroa_0_1;label = 68; break;
  case 68: 
   var $__obh_sroa_0_2;
   var $_01;
   var $_0;
   var $159=(($__obh_sroa_0_2)|(0))==0;
   if ($159) { label = 70; break; } else { label = 69; break; }
  case 69: 
   _free($__obh_sroa_0_2);
   label = 70; break;
  case 70: 
   var $161=(($__nbh_sroa_0_1)|(0))==0;
   if ($161) { var $_1213 = $_01;var $_114 = $_0;label = 72; break; } else { label = 71; break; }
  case 71: 
   _free($__nbh_sroa_0_1);
   var $_1213 = $_01;var $_114 = $_0;label = 72; break;
  case 72: 
   var $_114;
   var $_1213;
   var $163$0=$_114;
   var $163$1=0;
   var $164$0=$163$0;
   var $164$1=$_1213;
   ___resumeException($164$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__va=sp;
   var $1=(($__va)|0);
   var $2=$__va;
   HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
   var $3=_uselocale($__l);
   var $4 = (function() { try { __THREW__ = 0; return _vasprintf($__s, $__format, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=(($3)|(0))==0;
   if ($6) { label = 5; break; } else { label = 3; break; }
  case 3: 
   var $8 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1,0); $10$1 = tempRet0;
   var $11=$10$0;
   ___clang_call_terminate($11);
   throw "Reached an unreachable!";
  case 5: 
   STACKTOP = sp;
   return $4;
  case 6: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1); $13$1 = tempRet0;
   var $14=(($3)|(0))==0;
   if ($14) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $16 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1,0); $18$1 = tempRet0;
   var $19=$18$0;
   ___clang_call_terminate($19);
   throw "Reached an unreachable!";
  case 9: 
   ___resumeException($13$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i7=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__grouping=(sp)+(32);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13704)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13704;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $3, 256);
   label = 3; break;
  case 3: 
   var $10=HEAP32[((((13708)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   ___cxa_throw($24, 8440, (356));
   throw "Reached an unreachable!";
  case 6: 
   var $26=$22;
   var $27=HEAP32[(($1)>>2)];
   var $28=$__p_i_i_i7;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $29=HEAP32[((((13320)|0))>>2)];
   var $30=(($29)|(0))==-1;
   if ($30) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $32=(($__p_i_i_i7)|0);
   HEAP32[(($32)>>2)]=13320;
   var $33=(($__p_i_i_i7+4)|0);
   HEAP32[(($33)>>2)]=(26);
   var $34=(($__p_i_i_i7+8)|0);
   HEAP32[(($34)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $28, 256);
   label = 8; break;
  case 8: 
   var $35=HEAP32[((((13324)|0))>>2)];
   var $36=((($35)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $37=(($27+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($27+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$38;
   var $42=$40;
   var $43=((($41)-($42))|0);
   var $44=$43 >> 2;
   var $45=(($44)>>>(0)) > (($36)>>>(0));
   if ($45) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=(($40+($36<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=___cxa_allocate_exception(4);
   var $50=$49;
   __ZNSt8bad_castC2Ev($50);
   ___cxa_throw($49, 8440, (356));
   throw "Reached an unreachable!";
  case 11: 
   var $51=$47;
   var $52=$47;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($__grouping, $51);
   HEAP32[(($__oe)>>2)]=$__ob;
   var $56=HEAP8[($__nb)];
   if ((($56 << 24) >> 24)==45 | (($56 << 24) >> 24)==43) {
    label = 12; break;
   }
   else {
   var $__nf_0 = $__nb;label = 20; break;
   }
  case 12: 
   var $58=$22;
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+28)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 18; break; }
  case 13: 
   var $63=(($__nb+1)|0);
   var $64=HEAP32[(($__oe)>>2)];
   var $65=(($64+1)|0);
   HEAP32[(($__oe)>>2)]=$65;
   HEAP8[($64)]=$62;
   var $__nf_0 = $63;label = 20; break;
  case 14: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit$1;var $eh_lpad_body$0 = $lpad_loopexit$0;label = 19; break;
  case 15: 
   var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit21$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit21$1;var $eh_lpad_body$0 = $lpad_loopexit21$0;label = 19; break;
  case 16: 
   var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit33$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit33$1;var $eh_lpad_body$0 = $lpad_loopexit33$0;label = 19; break;
  case 17: 
   var $lpad_loopexit41$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit41$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit41$1;var $eh_lpad_body$0 = $lpad_loopexit41$0;label = 19; break;
  case 18: 
   var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit42$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_nonloopexit42$1;var $eh_lpad_body$0 = $lpad_nonloopexit42$0;label = 19; break;
  case 19: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($eh_lpad_body$0)
  case 20: 
   var $__nf_0;
   var $67=$__ne;
   var $68=$__nf_0;
   var $69=((($67)-($68))|0);
   var $70=(($69)|(0)) > 1;
   if ($70) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $71=(($__nf_0)>>>(0)) < (($__ne)>>>(0));
   if ($71) { var $__ns_137 = $__nf_0;label = 36; break; } else { var $__ns_2 = $__nf_0;var $__nf_1 = $__nf_0;label = 43; break; }
  case 22: 
   var $73=HEAP8[($__nf_0)];
   var $74=(($73 << 24) >> 24)==48;
   if ($74) { label = 23; break; } else { label = 21; break; }
  case 23: 
   var $76=(($__nf_0+1)|0);
   var $77=HEAP8[($76)];
   if ((($77 << 24) >> 24)==120 | (($77 << 24) >> 24)==88) {
    label = 24; break;
   }
   else {
   label = 21; break;
   }
  case 24: 
   var $79=$22;
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80+28)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 18; break; }
  case 25: 
   var $84=HEAP32[(($__oe)>>2)];
   var $85=(($84+1)|0);
   HEAP32[(($__oe)>>2)]=$85;
   HEAP8[($84)]=$83;
   var $86=(($__nf_0+2)|0);
   var $87=HEAP8[($76)];
   var $88=HEAP32[(($79)>>2)];
   var $89=(($88+28)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26, $87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 18; break; }
  case 26: 
   var $92=HEAP32[(($__oe)>>2)];
   var $93=(($92+1)|0);
   HEAP32[(($__oe)>>2)]=$93;
   HEAP8[($92)]=$91;
   var $94=(($86)>>>(0)) < (($__ne)>>>(0));
   if ($94) { var $__ns_046 = $86;label = 28; break; } else { var $__ns_2 = $86;var $__nf_1 = $86;label = 43; break; }
  case 27: 
   var $96=(($114)>>>(0)) < (($__ne)>>>(0));
   if ($96) { var $__ns_046 = $114;label = 28; break; } else { var $__ns_2 = $114;var $__nf_1 = $86;label = 43; break; }
  case 28: 
   var $__ns_046;
   var $97=HEAP8[($__ns_046)];
   var $98=HEAP8[(14264)];
   var $99=(($98 << 24) >> 24)==0;
   if ($99) { label = 29; break; } else { label = 33; break; }
  case 29: 
   var $101=___cxa_guard_acquire(14264);
   var $102=(($101)|(0))==0;
   if ($102) { label = 33; break; } else { label = 30; break; }
  case 30: 
   var $104 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   HEAP32[((12160)>>2)]=$104;
   label = 33; break;
  case 32: 
   var $107$0 = ___cxa_find_matching_catch(-1, -1); $107$1 = tempRet0;
   var $eh_lpad_body$1 = $107$1;var $eh_lpad_body$0 = $107$0;label = 19; break;
  case 33: 
   var $109=HEAP32[((12160)>>2)];
   var $110=(($97 << 24) >> 24);
   var $111 = (function() { try { __THREW__ = 0; return _isxdigit($110, $109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 17; break; }
  case 34: 
   var $113=(($111)|(0))==0;
   var $114=(($__ns_046+1)|0);
   if ($113) { var $__ns_2 = $__ns_046;var $__nf_1 = $86;label = 43; break; } else { label = 27; break; }
  case 35: 
   var $116=(($134)>>>(0)) < (($__ne)>>>(0));
   if ($116) { var $__ns_137 = $134;label = 36; break; } else { var $__ns_2 = $134;var $__nf_1 = $__nf_0;label = 43; break; }
  case 36: 
   var $__ns_137;
   var $117=HEAP8[($__ns_137)];
   var $118=HEAP8[(14264)];
   var $119=(($118 << 24) >> 24)==0;
   if ($119) { label = 37; break; } else { label = 41; break; }
  case 37: 
   var $121=___cxa_guard_acquire(14264);
   var $122=(($121)|(0))==0;
   if ($122) { label = 41; break; } else { label = 38; break; }
  case 38: 
   var $124 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   HEAP32[((12160)>>2)]=$124;
   label = 41; break;
  case 40: 
   var $127$0 = ___cxa_find_matching_catch(-1, -1); $127$1 = tempRet0;
   var $eh_lpad_body$1 = $127$1;var $eh_lpad_body$0 = $127$0;label = 19; break;
  case 41: 
   var $129=HEAP32[((12160)>>2)];
   var $130=(($117 << 24) >> 24);
   var $131 = (function() { try { __THREW__ = 0; return _isdigit($130, $129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 16; break; }
  case 42: 
   var $133=(($131)|(0))==0;
   var $134=(($__ns_137+1)|0);
   if ($133) { var $__ns_2 = $__ns_137;var $__nf_1 = $__nf_0;label = 43; break; } else { label = 35; break; }
  case 43: 
   var $__nf_1;
   var $__ns_2;
   var $135=$__grouping;
   var $136=$__grouping;
   var $137=HEAP8[($136)];
   var $138=(($137)&(255));
   var $139=$138 & 1;
   var $140=(($139)|(0))==0;
   if ($140) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $142=(($__grouping+4)|0);
   var $143=HEAP32[(($142)>>2)];
   var $146 = $143;label = 46; break;
  case 45: 
   var $145=$138 >>> 1;
   var $146 = $145;label = 46; break;
  case 46: 
   var $146;
   var $147=(($146)|(0))==0;
   if ($147) { label = 47; break; } else { label = 51; break; }
  case 47: 
   var $149=HEAP32[(($__oe)>>2)];
   var $150=$22;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+32)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($26, $__nf_1, $__ns_2, $149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 18; break; }
  case 48: 
   var $155=$__ns_2;
   var $156=$__nf_1;
   var $157=((($155)-($156))|0);
   var $158=HEAP32[(($__oe)>>2)];
   var $159=(($158+$157)|0);
   HEAP32[(($__oe)>>2)]=$159;
   label = 49; break;
  case 49: 
   var $160=(($__ns_2)>>>(0)) < (($__ne)>>>(0));
   if ($160) { label = 50; break; } else { var $__nf_3 = $__ns_2;label = 70; break; }
  case 50: 
   var $161=$22;
   var $__nf_218 = $__ns_2;label = 65; break;
  case 51: 
   var $163=(($__nf_1)|(0))==(($__ns_2)|(0));
   if ($163) { label = 54; break; } else { label = 52; break; }
  case 52: 
   var $164=((($__ns_2)-(1))|0);
   var $165=(($__nf_1)>>>(0)) < (($164)>>>(0));
   if ($165) { var $_0529 = $__nf_1;var $166 = $164;label = 53; break; } else { label = 54; break; }
  case 53: 
   var $166;
   var $_0529;
   var $167=HEAP8[($_0529)];
   var $168=HEAP8[($166)];
   HEAP8[($_0529)]=$168;
   HEAP8[($166)]=$167;
   var $169=(($_0529+1)|0);
   var $170=((($166)-(1))|0);
   var $171=(($169)>>>(0)) < (($170)>>>(0));
   if ($171) { var $_0529 = $169;var $166 = $170;label = 53; break; } else { label = 54; break; }
  case 54: 
   var $172=$47;
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 18; break; }
  case 55: 
   var $177=(($__nf_1)>>>(0)) < (($__ns_2)>>>(0));
   if ($177) { label = 56; break; } else { label = 62; break; }
  case 56: 
   var $178=(($135+1)|0);
   var $179=(($__grouping+4)|0);
   var $180=(($__grouping+8)|0);
   var $181=$22;
   var $__dc_024 = 0;var $__dg_025 = 0;var $__p_026 = $__nf_1;label = 57; break;
  case 57: 
   var $__p_026;
   var $__dg_025;
   var $__dc_024;
   var $182=HEAP8[($136)];
   var $183=$182 & 1;
   var $184=(($183 << 24) >> 24)==0;
   var $185=HEAP32[(($180)>>2)];
   var $_=$184 ? $178 : $185;
   var $186=(($_+$__dg_025)|0);
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24) > 0;
   if ($188) { label = 58; break; } else { var $__dg_1 = $__dg_025;var $__dc_1 = $__dc_024;label = 60; break; }
  case 58: 
   var $189=HEAP32[(($180)>>2)];
   var $_62=$184 ? $178 : $189;
   var $190=(($_62+$__dg_025)|0);
   var $191=HEAP8[($190)];
   var $192=(($191 << 24) >> 24);
   var $193=(($__dc_024)|(0))==(($192)|(0));
   if ($193) { label = 59; break; } else { var $__dg_1 = $__dg_025;var $__dc_1 = $__dc_024;label = 60; break; }
  case 59: 
   var $194=HEAP32[(($__oe)>>2)];
   var $195=(($194+1)|0);
   HEAP32[(($__oe)>>2)]=$195;
   HEAP8[($194)]=$176;
   var $196=HEAP8[($136)];
   var $197=(($196)&(255));
   var $198=$197 & 1;
   var $199=(($198)|(0))==0;
   var $200=HEAP32[(($179)>>2)];
   var $201=$197 >>> 1;
   var $202=$199 ? $201 : $200;
   var $203=((($202)-(1))|0);
   var $204=(($__dg_025)>>>(0)) < (($203)>>>(0));
   var $205=(($204)&(1));
   var $___dg_0=((($205)+($__dg_025))|0);
   var $__dg_1 = $___dg_0;var $__dc_1 = 0;label = 60; break;
  case 60: 
   var $__dc_1;
   var $__dg_1;
   var $207=HEAP8[($__p_026)];
   var $208=HEAP32[(($181)>>2)];
   var $209=(($208+28)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$210]($26, $207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 15; break; }
  case 61: 
   var $212=HEAP32[(($__oe)>>2)];
   var $213=(($212+1)|0);
   HEAP32[(($__oe)>>2)]=$213;
   HEAP8[($212)]=$211;
   var $214=((($__dc_1)+(1))|0);
   var $215=(($__p_026+1)|0);
   var $216=(($215)>>>(0)) < (($__ns_2)>>>(0));
   if ($216) { var $__dc_024 = $214;var $__dg_025 = $__dg_1;var $__p_026 = $215;label = 57; break; } else { label = 62; break; }
  case 62: 
   var $217=$__nf_1;
   var $218=$__nb;
   var $219=((($217)-($218))|0);
   var $220=(($__ob+$219)|0);
   var $221=HEAP32[(($__oe)>>2)];
   var $222=(($220)|(0))==(($221)|(0));
   if ($222) { label = 49; break; } else { label = 63; break; }
  case 63: 
   var $223=((($221)-(1))|0);
   var $224=(($220)>>>(0)) < (($223)>>>(0));
   if ($224) { var $_019 = $220;var $225 = $223;label = 64; break; } else { label = 49; break; }
  case 64: 
   var $225;
   var $_019;
   var $226=HEAP8[($_019)];
   var $227=HEAP8[($225)];
   HEAP8[($_019)]=$227;
   HEAP8[($225)]=$226;
   var $228=(($_019+1)|0);
   var $229=((($225)-(1))|0);
   var $230=(($228)>>>(0)) < (($229)>>>(0));
   if ($230) { var $_019 = $228;var $225 = $229;label = 64; break; } else { label = 49; break; }
  case 65: 
   var $__nf_218;
   var $232=HEAP8[($__nf_218)];
   var $233=(($232 << 24) >> 24)==46;
   if ($233) { label = 66; break; } else { label = 68; break; }
  case 66: 
   var $235=$47;
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+12)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 18; break; }
  case 67: 
   var $240=HEAP32[(($__oe)>>2)];
   var $241=(($240+1)|0);
   HEAP32[(($__oe)>>2)]=$241;
   HEAP8[($240)]=$239;
   var $242=(($__nf_218+1)|0);
   var $__nf_3 = $242;label = 70; break;
  case 68: 
   var $244=HEAP32[(($161)>>2)];
   var $245=(($244+28)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($26, $232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 14; break; }
  case 69: 
   var $248=HEAP32[(($__oe)>>2)];
   var $249=(($248+1)|0);
   HEAP32[(($__oe)>>2)]=$249;
   HEAP8[($248)]=$247;
   var $250=(($__nf_218+1)|0);
   var $251=(($250)>>>(0)) < (($__ne)>>>(0));
   if ($251) { var $__nf_218 = $250;label = 65; break; } else { var $__nf_3 = $250;label = 70; break; }
  case 70: 
   var $__nf_3;
   var $252=HEAP32[(($__oe)>>2)];
   var $253=$22;
   var $254=HEAP32[(($253)>>2)];
   var $255=(($254+32)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$256]($26, $__nf_3, $__ne, $252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 18; break; }
  case 71: 
   var $258=$__nf_3;
   var $259=((($67)-($258))|0);
   var $260=HEAP32[(($__oe)>>2)];
   var $261=(($260+$259)|0);
   HEAP32[(($__oe)>>2)]=$261;
   var $262=(($__np)|(0))==(($__ne)|(0));
   if ($262) { var $storemerge = $261;label = 73; break; } else { label = 72; break; }
  case 72: 
   var $264=$__np;
   var $265=$__nb;
   var $266=((($264)-($265))|0);
   var $267=(($__ob+$266)|0);
   var $storemerge = $267;label = 73; break;
  case 73: 
   var $storemerge;
   HEAP32[(($__op)>>2)]=$storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__nb=(sp)+(40);
   var $__o=(sp)+(48);
   var $__op=(sp)+(112);
   var $__oe=(sp)+(120);
   var $1=(sp)+(128);
   var $2=(sp)+(136);
   var $3=(sp)+(144);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $4=$__fmt;
   var $5=(($4+1)|0);
   var $6=(($__iob+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 2048;
   var $9=(($8)|(0))==0;
   if ($9) { var $_0_i = $5;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($4+2)|0);
   HEAP8[($5)]=43;
   var $_0_i = $11;label = 3; break;
  case 3: 
   var $_0_i;
   var $13=$7 & 1024;
   var $14=(($13)|(0))==0;
   if ($14) { var $_1_i = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_1_i = $16;label = 5; break;
  case 5: 
   var $_1_i;
   var $18=$7 & 260;
   var $19=$7 >>> 14;
   var $20=(($18)|(0))==260;
   if ($20) { label = 13; break; } else { label = 6; break; }
  case 6: 
   var $21=(($_1_i+1)|0);
   HEAP8[($_1_i)]=46;
   var $22=(($_1_i+2)|0);
   HEAP8[($21)]=42;
   HEAP8[($22)]=76;
   var $scevgep=(($_1_i+3)|0);
   if ((($18)|(0))==256) {
    label = 10; break;
   }
   else if ((($18)|(0))==4) {
    label = 7; break;
   }
   else {
   label = 16; break;
   }
  case 7: 
   var $24=$19 & 1;
   var $25=(($24)|(0))==0;
   if ($25) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=70;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 9: 
   HEAP8[($scevgep)]=102;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 10: 
   var $29=$19 & 1;
   var $30=(($29)|(0))==0;
   if ($30) { label = 12; break; } else { label = 11; break; }
  case 11: 
   HEAP8[($scevgep)]=69;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 12: 
   HEAP8[($scevgep)]=101;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 13: 
   HEAP8[($_1_i)]=76;
   var $scevgep12=(($_1_i+1)|0);
   var $34=$19 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP8[($scevgep12)]=65;
   var $specify_precision_0_off0_ph_i13 = 0;label = 19; break;
  case 15: 
   HEAP8[($scevgep12)]=97;
   var $specify_precision_0_off0_ph_i13 = 0;label = 19; break;
  case 16: 
   var $39=$19 & 1;
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 17; break; }
  case 17: 
   HEAP8[($scevgep)]=71;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 18: 
   HEAP8[($scevgep)]=103;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 19: 
   var $specify_precision_0_off0_ph_i13;
   var $43=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$43;
   var $44=HEAP8[(14264)];
   var $45=(($44 << 24) >> 24)==0;
   if ($45) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $47=___cxa_guard_acquire(14264);
   var $48=(($47)|(0))==0;
   if ($48) { label = 24; break; } else { label = 21; break; }
  case 21: 
   var $50 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[((12160)>>2)]=$50;
   label = 24; break;
  case 23: 
   var $53$0 = ___cxa_find_matching_catch(-1, -1); $53$1 = tempRet0;
   ___resumeException($53$0)
  case 24: 
   var $54=HEAP32[((12160)>>2)];
   if ($specify_precision_0_off0_ph_i13) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $56=(($__iob+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $58;label = 27; break;
  case 26: 
   var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $60;label = 27; break;
  case 27: 
   var $__nc_0;
   var $62=(($__nc_0)|(0)) > 29;
   if ($62) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $_pre10=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_0;var $__nbh_sroa_0_1 = 0;var $100 = $_pre10;label = 47; break;
  case 29: 
   var $64=HEAP8[(14264)];
   var $65=(($64 << 24) >> 24)==0;
   if ($specify_precision_0_off0_ph_i13) { label = 30; break; } else { label = 38; break; }
  case 30: 
   if ($65) { label = 31; break; } else { label = 35; break; }
  case 31: 
   var $68=___cxa_guard_acquire(14264);
   var $69=(($68)|(0))==0;
   if ($69) { label = 35; break; } else { label = 32; break; }
  case 32: 
   var $71 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 34; break; }
  case 33: 
   HEAP32[((12160)>>2)]=$71;
   label = 35; break;
  case 34: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $eh_lpad_body$1 = $74$1;var $eh_lpad_body$0 = $74$0;label = 37; break;
  case 35: 
   var $76=HEAP32[((12160)>>2)];
   var $77=(($__iob+8)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $76, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $79;label = 44; break; } else { label = 36; break; }
  case 36: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1); $81$1 = tempRet0;
   var $eh_lpad_body$1 = $81$1;var $eh_lpad_body$0 = $81$0;label = 37; break;
  case 37: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $82=$eh_lpad_body$0;
   var $83=$eh_lpad_body$1;
   var $_128 = $83;var $_19 = $82;label = 72; break;
  case 38: 
   if ($65) { label = 39; break; } else { label = 43; break; }
  case 39: 
   var $86=___cxa_guard_acquire(14264);
   var $87=(($86)|(0))==0;
   if ($87) { label = 43; break; } else { label = 40; break; }
  case 40: 
   var $89 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 42; break; }
  case 41: 
   HEAP32[((12160)>>2)]=$89;
   label = 43; break;
  case 42: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1); $92$1 = tempRet0;
   var $eh_lpad_body$1 = $92$1;var $eh_lpad_body$0 = $92$0;label = 37; break;
  case 43: 
   var $94=HEAP32[((12160)>>2)];
   var $95 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $94, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $95;label = 44; break; } else { label = 36; break; }
  case 44: 
   var $__nc_1;
   var $97=HEAP32[(($__nb)>>2)];
   var $98=(($97)|(0))==0;
   if ($98) { label = 45; break; } else { var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $97;var $100 = $97;label = 47; break; }
  case 45: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 36; break; }
  case 46: 
   var $_pre=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $_pre;var $100 = $_pre;label = 47; break;
  case 47: 
   var $100;
   var $__nbh_sroa_0_1;
   var $__nc_2;
   var $101=(($100+$__nc_2)|0);
   var $102=HEAP32[(($6)>>2)];
   var $103=$102 & 176;
   if ((($103)|(0))==16) {
    label = 48; break;
   }
   else if ((($103)|(0))==32) {
    var $_0_i7 = $101;label = 54; break;
   }
   else {
   label = 53; break;
   }
  case 48: 
   var $105=HEAP8[($100)];
   if ((($105 << 24) >> 24)==45 | (($105 << 24) >> 24)==43) {
    label = 49; break;
   }
   else {
   label = 50; break;
   }
  case 49: 
   var $107=(($100+1)|0);
   var $_0_i7 = $107;label = 54; break;
  case 50: 
   var $109=(($__nc_2)|(0)) > 1;
   var $110=(($105 << 24) >> 24)==48;
   var $or_cond_i=$109 & $110;
   if ($or_cond_i) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $112=(($100+1)|0);
   var $113=HEAP8[($112)];
   if ((($113 << 24) >> 24)==120 | (($113 << 24) >> 24)==88) {
    label = 52; break;
   }
   else {
   label = 53; break;
   }
  case 52: 
   var $115=(($100+2)|0);
   var $_0_i7 = $115;label = 54; break;
  case 53: 
   var $_0_i7 = $100;label = 54; break;
  case 54: 
   var $_0_i7;
   var $117=(($__o)|0);
   var $118=(($100)|(0))==(($43)|(0));
   if ($118) { var $__ob_0 = $117;var $__obh_sroa_0_1 = 0;var $128 = $43;label = 59; break; } else { label = 55; break; }
  case 55: 
   var $120=$__nc_2 << 1;
   var $121=_malloc($120);
   var $122=(($121)|(0))==0;
   if ($122) { label = 56; break; } else { var $__ob_0 = $121;var $__obh_sroa_0_1 = $121;var $128 = $100;label = 59; break; }
  case 56: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { var $__obh_sroa_0_0 = 0;label = 58; break; }
  case 57: 
   var $_pre11=HEAP32[(($__nb)>>2)];
   var $__ob_0 = 0;var $__obh_sroa_0_1 = 0;var $128 = $_pre11;label = 59; break;
  case 58: 
   var $__obh_sroa_0_0;
   var $125$0 = ___cxa_find_matching_catch(-1, -1); $125$1 = tempRet0;
   var $126=$125$0;
   var $127=$125$1;
   var $_0 = $126;var $_01 = $127;var $__obh_sroa_0_2 = $__obh_sroa_0_0;label = 68; break;
  case 59: 
   var $128;
   var $__obh_sroa_0_1;
   var $__ob_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 60: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($128, $_0_i7, $101, $__ob_0, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 67; break; }
  case 61: 
   var $131=(($1)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132)|0);
   var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
   var $135=(($__s)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($3)|0);
   HEAP32[(($137)>>2)]=$136;
   var $138=HEAP32[(($__op)>>2)];
   var $139=HEAP32[(($__oe)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $3, $__ob_0, $138, $139, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 62: 
   var $141=(($2)|0);
   var $142=HEAP32[(($141)>>2)];
   HEAP32[(($135)>>2)]=$142;
   var $143=(($agg_result)|0);
   HEAP32[(($143)>>2)]=$142;
   var $144=(($__obh_sroa_0_1)|(0))==0;
   if ($144) { label = 64; break; } else { label = 63; break; }
  case 63: 
   _free($__obh_sroa_0_1);
   label = 64; break;
  case 64: 
   var $146=(($__nbh_sroa_0_1)|(0))==0;
   if ($146) { label = 66; break; } else { label = 65; break; }
  case 65: 
   _free($__nbh_sroa_0_1);
   label = 66; break;
  case 66: 
   STACKTOP = sp;
   return;
  case 67: 
   var $149$0 = ___cxa_find_matching_catch(-1, -1); $149$1 = tempRet0;
   var $150=$149$0;
   var $151=$149$1;
   var $152=(($1)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($153)|0);
   var $155=__ZNSt3__114__shared_count16__release_sharedEv($154);
   var $_0 = $150;var $_01 = $151;var $__obh_sroa_0_2 = $__obh_sroa_0_1;label = 68; break;
  case 68: 
   var $__obh_sroa_0_2;
   var $_01;
   var $_0;
   var $157=(($__obh_sroa_0_2)|(0))==0;
   if ($157) { label = 70; break; } else { label = 69; break; }
  case 69: 
   _free($__obh_sroa_0_2);
   label = 70; break;
  case 70: 
   var $159=(($__nbh_sroa_0_1)|(0))==0;
   if ($159) { var $_128 = $_01;var $_19 = $_0;label = 72; break; } else { label = 71; break; }
  case 71: 
   _free($__nbh_sroa_0_1);
   var $_128 = $_01;var $_19 = $_0;label = 72; break;
  case 72: 
   var $_19;
   var $_128;
   var $161$0=$_19;
   var $161$1=0;
   var $162$0=$161$0;
   var $162$1=$_128;
   ___resumeException($162$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__fmt=(sp)+(16);
   var $__nar=(sp)+(24);
   var $__o=(sp)+(48);
   var $1=(sp)+(88);
   var $2=(sp)+(96);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2336)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2336)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2336)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2336)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2336)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2336)|0))+(5))|0)];
   var $4=(($__nar)|0);
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$11;
   label = 6; break;
  case 5: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 6: 
   var $15=HEAP32[((12160)>>2)];
   var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4, 20, $15, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $17=(($__nar+$16)|0);
   var $18=(($__iob+4)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & 176;
   if ((($20)|(0))==32) {
    var $_0_i = $17;label = 13; break;
   }
   else if ((($20)|(0))==16) {
    label = 7; break;
   }
   else {
   label = 12; break;
   }
  case 7: 
   var $22=HEAP8[($4)];
   if ((($22 << 24) >> 24)==45 | (($22 << 24) >> 24)==43) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 8: 
   var $24=(($__nar+1)|0);
   var $_0_i = $24;label = 13; break;
  case 9: 
   var $26=(($16)|(0)) > 1;
   var $27=(($22 << 24) >> 24)==48;
   var $or_cond_i=$26 & $27;
   if ($or_cond_i) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $29=(($__nar+1)|0);
   var $30=HEAP8[($29)];
   if ((($30 << 24) >> 24)==120 | (($30 << 24) >> 24)==88) {
    label = 11; break;
   }
   else {
   label = 12; break;
   }
  case 11: 
   var $32=(($__nar+2)|0);
   var $_0_i = $32;label = 13; break;
  case 12: 
   var $_0_i = $4;label = 13; break;
  case 13: 
   var $_0_i;
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   var $34=(($1)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $37=HEAP32[((((13704)|0))>>2)];
   var $38=(($37)|(0))==-1;
   if ($38) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $40=(($__p_i_i_i)|0);
   HEAP32[(($40)>>2)]=13704;
   var $41=(($__p_i_i_i+4)|0);
   HEAP32[(($41)>>2)]=(26);
   var $42=(($__p_i_i_i+8)|0);
   HEAP32[(($42)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $36, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $43=HEAP32[((((13708)|0))>>2)];
   var $44=((($43)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $45=(($35+12)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($35+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$46;
   var $50=$48;
   var $51=((($49)-($50))|0);
   var $52=$51 >> 2;
   var $53=(($52)>>>(0)) > (($44)>>>(0));
   if ($53) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $54=(($48+($44<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))==0;
   if ($56) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $57=___cxa_allocate_exception(4);
   var $58=$57;
   __ZNSt8bad_castC2Ev($58);
   (function() { try { __THREW__ = 0; return ___cxa_throw($57, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 20; break; }
  case 18: 
   throw "Reached an unreachable!";
  case 19: 
   var $59=$55;
   var $60=HEAP32[(($34)>>2)];
   var $61=(($60)|0);
   var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
   var $63=(($__o)|0);
   var $64=$55;
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+32)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=FUNCTION_TABLE[$67]($59, $4, $17, $63);
   var $69=(($__o+$16)|0);
   var $70=(($_0_i)|(0))==(($17)|(0));
   if ($70) { var $__op_0 = $69;label = 22; break; } else { label = 21; break; }
  case 20: 
   var $72$0 = ___cxa_find_matching_catch(-1, -1); $72$1 = tempRet0;
   var $73=HEAP32[(($34)>>2)];
   var $74=(($73)|0);
   var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
   ___resumeException($72$0)
  case 21: 
   var $77=$__nar;
   var $78=$_0_i;
   var $79=((($78)-($77))|0);
   var $80=(($__o+$79)|0);
   var $__op_0 = $80;label = 22; break;
  case 22: 
   var $__op_0;
   var $82=(($__s)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($2)|0);
   HEAP32[(($84)>>2)]=$83;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $63, $__op_0, $69, $__iob, $__fl);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $1=(sp)+(16);
   var $2=(sp)+(24);
   var $__nm=(sp)+(32);
   var $3=(($__iob+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4 & 1;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$this;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+24)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($__s)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($1)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=(($__v)&(1));
   FUNCTION_TABLE[$11]($agg_result, $this, $1, $__iob, $__fl, $15);
   label = 32; break;
  case 3: 
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $17=(($2)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $20=HEAP32[((((13312)|0))>>2)];
   var $21=(($20)|(0))==-1;
   if ($21) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $23=(($__p_i_i_i)|0);
   HEAP32[(($23)>>2)]=13312;
   var $24=(($__p_i_i_i+4)|0);
   HEAP32[(($24)>>2)]=(26);
   var $25=(($__p_i_i_i+8)|0);
   HEAP32[(($25)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $19, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 29; break; }
  case 5: 
   var $26=HEAP32[((((13316)|0))>>2)];
   var $27=((($26)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $28=(($18+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($18+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$29;
   var $33=$31;
   var $34=((($32)-($33))|0);
   var $35=$34 >> 2;
   var $36=(($35)>>>(0)) > (($27)>>>(0));
   if ($36) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $37=(($31+($27<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))==0;
   if ($39) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $40=___cxa_allocate_exception(4);
   var $41=$40;
   __ZNSt8bad_castC2Ev($41);
   (function() { try { __THREW__ = 0; return ___cxa_throw($40, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 29; break; }
  case 8: 
   throw "Reached an unreachable!";
  case 9: 
   var $42=$38;
   var $43=HEAP32[(($17)>>2)];
   var $44=(($43)|0);
   var $45=__ZNSt3__114__shared_count16__release_sharedEv($44);
   var $46=$38;
   var $47=HEAP32[(($46)>>2)];
   if ($__v) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=(($47+24)|0);
   var $50=HEAP32[(($49)>>2)];
   FUNCTION_TABLE[$50]($__nm, $42);
   label = 12; break;
  case 11: 
   var $52=(($47+28)|0);
   var $53=HEAP32[(($52)>>2)];
   FUNCTION_TABLE[$53]($__nm, $42);
   label = 12; break;
  case 12: 
   var $55=$__nm;
   var $56=HEAP8[($55)];
   var $57=$56 & 1;
   var $58=(($57 << 24) >> 24)==0;
   if ($58) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $60=(($__nm+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $_pre4=(($__nm+4)|0);
   var $__i_sroa_0_0_ph = $61;var $_pre_phi = $_pre4;var $_pre_phi6 = $60;label = 15; break;
  case 14: 
   var $63=(($__nm+4)|0);
   var $_pre5=(($__nm+8)|0);
   var $__i_sroa_0_0_ph = $63;var $_pre_phi = $63;var $_pre_phi6 = $_pre5;label = 15; break;
  case 15: 
   var $_pre_phi6;
   var $_pre_phi;
   var $__i_sroa_0_0_ph;
   var $64=(($__s)|0);
   var $__i_sroa_0_0 = $__i_sroa_0_0_ph;var $65 = $56;label = 16; break;
  case 16: 
   var $65;
   var $__i_sroa_0_0;
   var $66=$65 & 1;
   var $67=(($66 << 24) >> 24)==0;
   if ($67) { var $70 = $_pre_phi;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $69=HEAP32[(($_pre_phi6)>>2)];
   var $70 = $69;label = 18; break;
  case 18: 
   var $70;
   var $71=(($65)&(255));
   var $72=$71 & 1;
   var $73=(($72)|(0))==0;
   if ($73) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $75=HEAP32[(($_pre_phi)>>2)];
   var $78 = $75;label = 21; break;
  case 20: 
   var $77=$71 >>> 1;
   var $78 = $77;label = 21; break;
  case 21: 
   var $78;
   var $79=(($70+($78<<2))|0);
   var $80=(($__i_sroa_0_0)|(0))==(($79)|(0));
   if ($80) { label = 31; break; } else { label = 22; break; }
  case 22: 
   var $82=HEAP32[(($__i_sroa_0_0)>>2)];
   var $83=HEAP32[(($64)>>2)];
   var $84=(($83)|(0))==0;
   if ($84) { label = 28; break; } else { label = 23; break; }
  case 23: 
   var $86=(($83+24)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($83+28)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($87)|(0))==(($89)|(0));
   if ($90) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $92=$83;
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+52)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($83, $82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $96;label = 26; break; } else { label = 30; break; }
  case 25: 
   var $98=(($87+4)|0);
   HEAP32[(($86)>>2)]=$98;
   HEAP32[(($87)>>2)]=$82;
   var $_0 = $82;label = 26; break;
  case 26: 
   var $_0;
   var $99=(($_0)|(0))==-1;
   if ($99) { label = 27; break; } else { label = 28; break; }
  case 27: 
   HEAP32[(($64)>>2)]=0;
   label = 28; break;
  case 28: 
   var $101=(($__i_sroa_0_0+4)|0);
   var $_pre=HEAP8[($55)];
   var $__i_sroa_0_0 = $101;var $65 = $_pre;label = 16; break;
  case 29: 
   var $103$0 = ___cxa_find_matching_catch(-1, -1); $103$1 = tempRet0;
   var $104=$103$0;
   var $105=$103$1;
   var $106=HEAP32[(($17)>>2)];
   var $107=(($106)|0);
   var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
   var $_01 = $105;var $_02 = $104;label = 33; break;
  case 30: 
   var $110$0 = ___cxa_find_matching_catch(-1, -1); $110$1 = tempRet0;
   var $111=$110$0;
   var $112=$110$1;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
   var $_01 = $112;var $_02 = $111;label = 33; break;
  case 31: 
   var $114=HEAP32[(($64)>>2)];
   var $115=(($agg_result)|0);
   HEAP32[(($115)>>2)]=$114;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
   label = 32; break;
  case 32: 
   STACKTOP = sp;
   return;
  case 33: 
   var $_02;
   var $_01;
   var $118$0=$_02;
   var $118$1=0;
   var $119$0=$118$0;
   var $119$1=$_01;
   ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(24);
   var $__op=(sp)+(112);
   var $__oe=(sp)+(120);
   var $1=(sp)+(128);
   var $2=(sp)+(136);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2328)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2328)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2328)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2328)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2328)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2328)|0))+(5))|0)];
   var $4=(($__fmt+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__fmt+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   HEAP8[($_13_i_ph)]=108;
   var $scevgep=(($_13_i_ph+1)|0);
   var $16=$6 & 74;
   if ((($16)|(0))==64) {
    label = 6; break;
   }
   else if ((($16)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $19=$6 & 16384;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=100;
   label = 11; break;
  case 11: 
   var $24=(($__nar)|0);
   var $25=HEAP8[(14264)];
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $28=___cxa_guard_acquire(14264);
   var $29=(($28)|(0))==0;
   if ($29) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $31 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$31;
   label = 16; break;
  case 15: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   ___resumeException($34$0)
  case 16: 
   var $35=HEAP32[((12160)>>2)];
   var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24, 12, $35, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $37=(($__nar+$36)|0);
   var $38=HEAP32[(($5)>>2)];
   var $39=$38 & 176;
   if ((($39)|(0))==16) {
    label = 17; break;
   }
   else if ((($39)|(0))==32) {
    var $_0_i1 = $37;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $41=HEAP8[($24)];
   if ((($41 << 24) >> 24)==45 | (($41 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $43=(($__nar+1)|0);
   var $_0_i1 = $43;label = 23; break;
  case 19: 
   var $45=(($36)|(0)) > 1;
   var $46=(($41 << 24) >> 24)==48;
   var $or_cond_i=$45 & $46;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $48=(($__nar+1)|0);
   var $49=HEAP8[($48)];
   if ((($49 << 24) >> 24)==120 | (($49 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $51=(($__nar+2)|0);
   var $_0_i1 = $51;label = 23; break;
  case 22: 
   var $_0_i1 = $24;label = 23; break;
  case 23: 
   var $_0_i1;
   var $53=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24, $_0_i1, $37, $53, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $55=(($1)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   var $59=(($__s)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($2)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=HEAP32[(($__op)>>2)];
   var $63=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $53, $62, $63, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=(($1)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i7=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__grouping=(sp)+(32);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13696)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13696;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $3, 256);
   label = 3; break;
  case 3: 
   var $10=HEAP32[((((13700)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   ___cxa_throw($24, 8440, (356));
   throw "Reached an unreachable!";
  case 6: 
   var $26=$22;
   var $27=HEAP32[(($1)>>2)];
   var $28=$__p_i_i_i7;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $29=HEAP32[((((13312)|0))>>2)];
   var $30=(($29)|(0))==-1;
   if ($30) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $32=(($__p_i_i_i7)|0);
   HEAP32[(($32)>>2)]=13312;
   var $33=(($__p_i_i_i7+4)|0);
   HEAP32[(($33)>>2)]=(26);
   var $34=(($__p_i_i_i7+8)|0);
   HEAP32[(($34)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $28, 256);
   label = 8; break;
  case 8: 
   var $35=HEAP32[((((13316)|0))>>2)];
   var $36=((($35)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $37=(($27+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($27+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$38;
   var $42=$40;
   var $43=((($41)-($42))|0);
   var $44=$43 >> 2;
   var $45=(($44)>>>(0)) > (($36)>>>(0));
   if ($45) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=(($40+($36<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=___cxa_allocate_exception(4);
   var $50=$49;
   __ZNSt8bad_castC2Ev($50);
   ___cxa_throw($49, 8440, (356));
   throw "Reached an unreachable!";
  case 11: 
   var $51=$47;
   var $52=$47;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($__grouping, $51);
   var $56=$__grouping;
   var $57=$__grouping;
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$59 & 1;
   var $61=(($60)|(0))==0;
   if ($61) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $63=(($__grouping+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $67 = $64;label = 14; break;
  case 13: 
   var $66=$59 >>> 1;
   var $67 = $66;label = 14; break;
  case 14: 
   var $67;
   var $68=(($67)|(0))==0;
   if ($68) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $70=$22;
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+48)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($26, $__nb, $__ne, $__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $75=$__ne;
   var $76=$__nb;
   var $77=((($75)-($76))|0);
   var $78=(($__ob+($77<<2))|0);
   HEAP32[(($__oe)>>2)]=$78;
   label = 43; break;
  case 17: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 19; break;
  case 18: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 19; break;
  case 19: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($lpad_phi$0)
  case 20: 
   HEAP32[(($__oe)>>2)]=$__ob;
   var $81=HEAP8[($__nb)];
   if ((($81 << 24) >> 24)==45 | (($81 << 24) >> 24)==43) {
    label = 21; break;
   }
   else {
   var $__nf_0 = $__nb;label = 23; break;
   }
  case 21: 
   var $83=$22;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+44)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($26, $81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 18; break; }
  case 22: 
   var $88=(($__nb+1)|0);
   var $89=HEAP32[(($__oe)>>2)];
   var $90=(($89+4)|0);
   HEAP32[(($__oe)>>2)]=$90;
   HEAP32[(($89)>>2)]=$87;
   var $__nf_0 = $88;label = 23; break;
  case 23: 
   var $__nf_0;
   var $92=$__ne;
   var $93=$__nf_0;
   var $94=((($92)-($93))|0);
   var $95=(($94)|(0)) > 1;
   if ($95) { label = 24; break; } else { var $__nf_1 = $__nf_0;label = 29; break; }
  case 24: 
   var $97=HEAP8[($__nf_0)];
   var $98=(($97 << 24) >> 24)==48;
   if ($98) { label = 25; break; } else { var $__nf_1 = $__nf_0;label = 29; break; }
  case 25: 
   var $100=(($__nf_0+1)|0);
   var $101=HEAP8[($100)];
   if ((($101 << 24) >> 24)==120 | (($101 << 24) >> 24)==88) {
    label = 26; break;
   }
   else {
   var $__nf_1 = $__nf_0;label = 29; break;
   }
  case 26: 
   var $103=$22;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+44)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($26, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 18; break; }
  case 27: 
   var $108=HEAP32[(($__oe)>>2)];
   var $109=(($108+4)|0);
   HEAP32[(($__oe)>>2)]=$109;
   HEAP32[(($108)>>2)]=$107;
   var $110=HEAP8[($100)];
   var $111=HEAP32[(($103)>>2)];
   var $112=(($111+44)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26, $110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 18; break; }
  case 28: 
   var $115=(($__nf_0+2)|0);
   var $116=HEAP32[(($__oe)>>2)];
   var $117=(($116+4)|0);
   HEAP32[(($__oe)>>2)]=$117;
   HEAP32[(($116)>>2)]=$114;
   var $__nf_1 = $115;label = 29; break;
  case 29: 
   var $__nf_1;
   var $119=(($__nf_1)|(0))==(($__ne)|(0));
   if ($119) { label = 32; break; } else { label = 30; break; }
  case 30: 
   var $120=((($__ne)-(1))|0);
   var $121=(($__nf_1)>>>(0)) < (($120)>>>(0));
   if ($121) { var $_018 = $__nf_1;var $122 = $120;label = 31; break; } else { label = 32; break; }
  case 31: 
   var $122;
   var $_018;
   var $123=HEAP8[($_018)];
   var $124=HEAP8[($122)];
   HEAP8[($_018)]=$124;
   HEAP8[($122)]=$123;
   var $125=(($_018+1)|0);
   var $126=((($122)-(1))|0);
   var $127=(($125)>>>(0)) < (($126)>>>(0));
   if ($127) { var $_018 = $125;var $122 = $126;label = 31; break; } else { label = 32; break; }
  case 32: 
   var $128=$47;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+16)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 18; break; }
  case 33: 
   var $133=(($__nf_1)>>>(0)) < (($__ne)>>>(0));
   if ($133) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $134=(($56+1)|0);
   var $135=$22;
   var $136=(($__grouping+4)|0);
   var $137=(($__grouping+8)|0);
   var $__dc_013 = 0;var $__dg_014 = 0;var $__p_015 = $__nf_1;label = 35; break;
  case 35: 
   var $__p_015;
   var $__dg_014;
   var $__dc_013;
   var $138=HEAP8[($57)];
   var $139=$138 & 1;
   var $140=(($139 << 24) >> 24)==0;
   var $141=HEAP32[(($137)>>2)];
   var $_=$140 ? $134 : $141;
   var $142=(($_+$__dg_014)|0);
   var $143=HEAP8[($142)];
   var $144=(($143 << 24) >> 24)==0;
   if ($144) { var $__dg_1 = $__dg_014;var $__dc_1 = $__dc_013;label = 38; break; } else { label = 36; break; }
  case 36: 
   var $145=HEAP32[(($137)>>2)];
   var $_20=$140 ? $134 : $145;
   var $146=(($_20+$__dg_014)|0);
   var $147=HEAP8[($146)];
   var $148=(($147 << 24) >> 24);
   var $149=(($__dc_013)|(0))==(($148)|(0));
   if ($149) { label = 37; break; } else { var $__dg_1 = $__dg_014;var $__dc_1 = $__dc_013;label = 38; break; }
  case 37: 
   var $150=HEAP32[(($__oe)>>2)];
   var $151=(($150+4)|0);
   HEAP32[(($__oe)>>2)]=$151;
   HEAP32[(($150)>>2)]=$132;
   var $152=HEAP8[($57)];
   var $153=(($152)&(255));
   var $154=$153 & 1;
   var $155=(($154)|(0))==0;
   var $156=HEAP32[(($136)>>2)];
   var $157=$153 >>> 1;
   var $158=$155 ? $157 : $156;
   var $159=((($158)-(1))|0);
   var $160=(($__dg_014)>>>(0)) < (($159)>>>(0));
   var $161=(($160)&(1));
   var $___dg_0=((($161)+($__dg_014))|0);
   var $__dg_1 = $___dg_0;var $__dc_1 = 0;label = 38; break;
  case 38: 
   var $__dc_1;
   var $__dg_1;
   var $163=HEAP8[($__p_015)];
   var $164=HEAP32[(($135)>>2)];
   var $165=(($164+44)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($26, $163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 17; break; }
  case 39: 
   var $168=HEAP32[(($__oe)>>2)];
   var $169=(($168+4)|0);
   HEAP32[(($__oe)>>2)]=$169;
   HEAP32[(($168)>>2)]=$167;
   var $170=((($__dc_1)+(1))|0);
   var $171=(($__p_015+1)|0);
   var $172=(($171)>>>(0)) < (($__ne)>>>(0));
   if ($172) { var $__dc_013 = $170;var $__dg_014 = $__dg_1;var $__p_015 = $171;label = 35; break; } else { label = 40; break; }
  case 40: 
   var $173=$__nf_1;
   var $174=$__nb;
   var $175=((($173)-($174))|0);
   var $176=(($__ob+($175<<2))|0);
   var $177=HEAP32[(($__oe)>>2)];
   var $178=(($176)|(0))==(($177)|(0));
   if ($178) { label = 43; break; } else { label = 41; break; }
  case 41: 
   var $179=((($177)-(4))|0);
   var $180=(($176)>>>(0)) < (($179)>>>(0));
   if ($180) { var $_0512 = $176;var $181 = $179;label = 42; break; } else { label = 43; break; }
  case 42: 
   var $181;
   var $_0512;
   var $182=HEAP32[(($_0512)>>2)];
   var $183=HEAP32[(($181)>>2)];
   HEAP32[(($_0512)>>2)]=$183;
   HEAP32[(($181)>>2)]=$182;
   var $184=(($_0512+4)|0);
   var $185=((($181)-(4))|0);
   var $186=(($184)>>>(0)) < (($185)>>>(0));
   if ($186) { var $_0512 = $184;var $181 = $185;label = 42; break; } else { label = 43; break; }
  case 43: 
   var $187=(($__np)|(0))==(($__ne)|(0));
   if ($187) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $189=HEAP32[(($__oe)>>2)];
   var $storemerge = $189;label = 46; break;
  case 45: 
   var $191=$__np;
   var $192=$__nb;
   var $193=((($191)-($192))|0);
   var $194=(($__ob+($193<<2))|0);
   var $storemerge = $194;label = 46; break;
  case 46: 
   var $storemerge;
   HEAP32[(($__op)>>2)]=$storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__sp=sp;
   var $1=(($__s)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=(($agg_result)|0);
   HEAP32[(($5)>>2)]=0;
   label = 19; break;
  case 3: 
   var $7=$__oe;
   var $8=$__ob;
   var $9=((($7)-($8))|0);
   var $10=$9 >> 2;
   var $11=(($__iob+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0)) > (($10)|(0));
   var $14=((($12)-($10))|0);
   var $__ns_0=$13 ? $14 : 0;
   var $15=$__op;
   var $16=((($15)-($8))|0);
   var $17=$16 >> 2;
   var $18=(($16)|(0)) > 0;
   if ($18) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $20=$2;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+48)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=FUNCTION_TABLE[$23]($2, $__ob, $17);
   var $25=(($24)|(0))==(($17)|(0));
   if ($25) { label = 6; break; } else { label = 5; break; }
  case 5: 
   HEAP32[(($1)>>2)]=0;
   var $27=(($agg_result)|0);
   HEAP32[(($27)>>2)]=0;
   label = 19; break;
  case 6: 
   var $29=(($__ns_0)|(0)) > 0;
   if ($29) { label = 7; break; } else { label = 15; break; }
  case 7: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns_0, $__fl);
   var $31=$__sp;
   var $32=HEAP8[($31)];
   var $33=$32 & 1;
   var $34=(($33 << 24) >> 24)==0;
   if ($34) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $36=(($__sp+8)|0);
   var $37=HEAP32[(($36)>>2)];
   var $40 = $37;label = 10; break;
  case 9: 
   var $39=(($__sp+4)|0);
   var $40 = $39;label = 10; break;
  case 10: 
   var $40;
   var $41=$2;
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42+48)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2, $40, $__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $46=(($45)|(0))==(($__ns_0)|(0));
   if ($46) { label = 14; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($1)>>2)]=0;
   var $47=(($agg_result)|0);
   HEAP32[(($47)>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   label = 19; break;
  case 13: 
   var $49$0 = ___cxa_find_matching_catch(-1, -1); $49$1 = tempRet0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   ___resumeException($49$0)
  case 14: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   label = 15; break;
  case 15: 
   var $52=((($7)-($15))|0);
   var $53=$52 >> 2;
   var $54=(($52)|(0)) > 0;
   if ($54) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $56=$2;
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+48)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=FUNCTION_TABLE[$59]($2, $__op, $53);
   var $61=(($60)|(0))==(($53)|(0));
   if ($61) { label = 18; break; } else { label = 17; break; }
  case 17: 
   HEAP32[(($1)>>2)]=0;
   var $63=(($agg_result)|0);
   HEAP32[(($63)>>2)]=0;
   label = 19; break;
  case 18: 
   HEAP32[(($11)>>2)]=0;
   var $65=(($agg_result)|0);
   HEAP32[(($65)>>2)]=$2;
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(32);
   var $__op=(sp)+(200);
   var $__oe=(sp)+(208);
   var $1=(sp)+(216);
   var $2=(sp)+(224);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $3=$__fmt;
   var $4=(($3+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($3+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   var $16=(($_13_i_ph+1)|0);
   HEAP8[($_13_i_ph)]=108;
   HEAP8[($16)]=108;
   var $scevgep=(($_13_i_ph+2)|0);
   var $17=$6 & 74;
   if ((($17)|(0))==64) {
    label = 6; break;
   }
   else if ((($17)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $20=$6 & 16384;
   var $21=(($20)|(0))==0;
   if ($21) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=100;
   label = 11; break;
  case 11: 
   var $25=(($__nar)|0);
   var $26=HEAP8[(14264)];
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $29=___cxa_guard_acquire(14264);
   var $30=(($29)|(0))==0;
   if ($30) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $32 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$32;
   label = 16; break;
  case 15: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1); $35$1 = tempRet0;
   ___resumeException($35$0)
  case 16: 
   var $36=HEAP32[((12160)>>2)];
   var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25, 22, $36, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
   var $38=(($__nar+$37)|0);
   var $39=HEAP32[(($5)>>2)];
   var $40=$39 & 176;
   if ((($40)|(0))==16) {
    label = 17; break;
   }
   else if ((($40)|(0))==32) {
    var $_0_i1 = $38;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $42=HEAP8[($25)];
   if ((($42 << 24) >> 24)==45 | (($42 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $44=(($__nar+1)|0);
   var $_0_i1 = $44;label = 23; break;
  case 19: 
   var $46=(($37)|(0)) > 1;
   var $47=(($42 << 24) >> 24)==48;
   var $or_cond_i=$46 & $47;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $49=(($__nar+1)|0);
   var $50=HEAP8[($49)];
   if ((($50 << 24) >> 24)==120 | (($50 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $52=(($__nar+2)|0);
   var $_0_i1 = $52;label = 23; break;
  case 22: 
   var $_0_i1 = $25;label = 23; break;
  case 23: 
   var $_0_i1;
   var $54=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25, $_0_i1, $38, $54, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $56=(($1)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   var $60=(($__s)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($2)|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=HEAP32[(($__op)>>2)];
   var $64=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $54, $63, $64, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   var $67=(($1)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|0);
   var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
   ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(24);
   var $__op=(sp)+(112);
   var $__oe=(sp)+(120);
   var $1=(sp)+(128);
   var $2=(sp)+(136);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2328)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2328)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2328)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2328)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2328)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2328)|0))+(5))|0)];
   var $4=(($__fmt+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__fmt+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   HEAP8[($_13_i_ph)]=108;
   var $scevgep=(($_13_i_ph+1)|0);
   var $16=$6 & 74;
   if ((($16)|(0))==64) {
    label = 6; break;
   }
   else if ((($16)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $19=$6 & 16384;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=117;
   label = 11; break;
  case 11: 
   var $24=(($__nar)|0);
   var $25=HEAP8[(14264)];
   var $26=(($25 << 24) >> 24)==0;
   if ($26) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $28=___cxa_guard_acquire(14264);
   var $29=(($28)|(0))==0;
   if ($29) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $31 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$31;
   label = 16; break;
  case 15: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   ___resumeException($34$0)
  case 16: 
   var $35=HEAP32[((12160)>>2)];
   var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24, 12, $35, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $37=(($__nar+$36)|0);
   var $38=HEAP32[(($5)>>2)];
   var $39=$38 & 176;
   if ((($39)|(0))==16) {
    label = 17; break;
   }
   else if ((($39)|(0))==32) {
    var $_0_i1 = $37;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $41=HEAP8[($24)];
   if ((($41 << 24) >> 24)==45 | (($41 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $43=(($__nar+1)|0);
   var $_0_i1 = $43;label = 23; break;
  case 19: 
   var $45=(($36)|(0)) > 1;
   var $46=(($41 << 24) >> 24)==48;
   var $or_cond_i=$45 & $46;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $48=(($__nar+1)|0);
   var $49=HEAP8[($48)];
   if ((($49 << 24) >> 24)==120 | (($49 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $51=(($__nar+2)|0);
   var $_0_i1 = $51;label = 23; break;
  case 22: 
   var $_0_i1 = $24;label = 23; break;
  case 23: 
   var $_0_i1;
   var $53=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24, $_0_i1, $37, $53, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $55=(($1)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   var $59=(($__s)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($2)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=HEAP32[(($__op)>>2)];
   var $63=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $53, $62, $63, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=(($1)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__o=(sp)+(32);
   var $__op=(sp)+(208);
   var $__oe=(sp)+(216);
   var $1=(sp)+(224);
   var $2=(sp)+(232);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $3=$__fmt;
   var $4=(($3+1)|0);
   var $5=(($__iob+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 2048;
   var $8=(($7)|(0))==0;
   if ($8) { var $_0_i = $4;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($3+2)|0);
   HEAP8[($4)]=43;
   var $_0_i = $10;label = 3; break;
  case 3: 
   var $_0_i;
   var $12=$6 & 512;
   var $13=(($12)|(0))==0;
   if ($13) { var $_13_i_ph = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_13_i_ph = $15;label = 5; break;
  case 5: 
   var $_13_i_ph;
   var $16=(($_13_i_ph+1)|0);
   HEAP8[($_13_i_ph)]=108;
   HEAP8[($16)]=108;
   var $scevgep=(($_13_i_ph+2)|0);
   var $17=$6 & 74;
   if ((($17)|(0))==64) {
    label = 6; break;
   }
   else if ((($17)|(0))==8) {
    label = 7; break;
   }
   else {
   label = 10; break;
   }
  case 6: 
   HEAP8[($scevgep)]=111;
   label = 11; break;
  case 7: 
   var $20=$6 & 16384;
   var $21=(($20)|(0))==0;
   if ($21) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=88;
   label = 11; break;
  case 9: 
   HEAP8[($scevgep)]=120;
   label = 11; break;
  case 10: 
   HEAP8[($scevgep)]=117;
   label = 11; break;
  case 11: 
   var $25=(($__nar)|0);
   var $26=HEAP8[(14264)];
   var $27=(($26 << 24) >> 24)==0;
   if ($27) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $29=___cxa_guard_acquire(14264);
   var $30=(($29)|(0))==0;
   if ($30) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $32 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   HEAP32[((12160)>>2)]=$32;
   label = 16; break;
  case 15: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1); $35$1 = tempRet0;
   ___resumeException($35$0)
  case 16: 
   var $36=HEAP32[((12160)>>2)];
   var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25, 23, $36, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
   var $38=(($__nar+$37)|0);
   var $39=HEAP32[(($5)>>2)];
   var $40=$39 & 176;
   if ((($40)|(0))==16) {
    label = 17; break;
   }
   else if ((($40)|(0))==32) {
    var $_0_i1 = $38;label = 23; break;
   }
   else {
   label = 22; break;
   }
  case 17: 
   var $42=HEAP8[($25)];
   if ((($42 << 24) >> 24)==45 | (($42 << 24) >> 24)==43) {
    label = 18; break;
   }
   else {
   label = 19; break;
   }
  case 18: 
   var $44=(($__nar+1)|0);
   var $_0_i1 = $44;label = 23; break;
  case 19: 
   var $46=(($37)|(0)) > 1;
   var $47=(($42 << 24) >> 24)==48;
   var $or_cond_i=$46 & $47;
   if ($or_cond_i) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $49=(($__nar+1)|0);
   var $50=HEAP8[($49)];
   if ((($50 << 24) >> 24)==120 | (($50 << 24) >> 24)==88) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 21: 
   var $52=(($__nar+2)|0);
   var $_0_i1 = $52;label = 23; break;
  case 22: 
   var $_0_i1 = $25;label = 23; break;
  case 23: 
   var $_0_i1;
   var $54=(($__o)|0);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25, $_0_i1, $38, $54, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $56=(($1)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   var $60=(($__s)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($2)|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=HEAP32[(($__op)>>2)];
   var $64=HEAP32[(($__oe)>>2)];
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $54, $63, $64, $__iob, $__fl);
   STACKTOP = sp;
   return;
  case 25: 
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   var $67=(($1)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|0);
   var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
   ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__nb=(sp)+(40);
   var $__o=(sp)+(48);
   var $__op=(sp)+(280);
   var $__oe=(sp)+(288);
   var $1=(sp)+(296);
   var $2=(sp)+(304);
   var $3=(sp)+(312);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $4=$__fmt;
   var $5=(($4+1)|0);
   var $6=(($__iob+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 2048;
   var $9=(($8)|(0))==0;
   if ($9) { var $_0_i = $5;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($4+2)|0);
   HEAP8[($5)]=43;
   var $_0_i = $11;label = 3; break;
  case 3: 
   var $_0_i;
   var $13=$7 & 1024;
   var $14=(($13)|(0))==0;
   if ($14) { var $_1_i = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_1_i = $16;label = 5; break;
  case 5: 
   var $_1_i;
   var $18=$7 & 260;
   var $19=$7 >>> 14;
   var $20=(($18)|(0))==260;
   if ($20) { label = 13; break; } else { label = 6; break; }
  case 6: 
   var $21=(($_1_i+1)|0);
   HEAP8[($_1_i)]=46;
   var $22=(($_1_i+2)|0);
   HEAP8[($21)]=42;
   if ((($18)|(0))==256) {
    label = 10; break;
   }
   else if ((($18)|(0))==4) {
    label = 7; break;
   }
   else {
   label = 16; break;
   }
  case 7: 
   var $24=$19 & 1;
   var $25=(($24)|(0))==0;
   if ($25) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($22)]=70;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 9: 
   HEAP8[($22)]=102;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 10: 
   var $29=$19 & 1;
   var $30=(($29)|(0))==0;
   if ($30) { label = 12; break; } else { label = 11; break; }
  case 11: 
   HEAP8[($22)]=69;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 12: 
   HEAP8[($22)]=101;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 13: 
   var $34=$19 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP8[($_1_i)]=65;
   var $specify_precision_0_off0_ph_i8 = 0;label = 19; break;
  case 15: 
   HEAP8[($_1_i)]=97;
   var $specify_precision_0_off0_ph_i8 = 0;label = 19; break;
  case 16: 
   var $39=$19 & 1;
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 17; break; }
  case 17: 
   HEAP8[($22)]=71;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 18: 
   HEAP8[($22)]=103;
   var $specify_precision_0_off0_ph_i8 = 1;label = 19; break;
  case 19: 
   var $specify_precision_0_off0_ph_i8;
   var $43=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$43;
   var $44=HEAP8[(14264)];
   var $45=(($44 << 24) >> 24)==0;
   if ($45) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $47=___cxa_guard_acquire(14264);
   var $48=(($47)|(0))==0;
   if ($48) { label = 24; break; } else { label = 21; break; }
  case 21: 
   var $50 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[((12160)>>2)]=$50;
   label = 24; break;
  case 23: 
   var $53$0 = ___cxa_find_matching_catch(-1, -1); $53$1 = tempRet0;
   ___resumeException($53$0)
  case 24: 
   var $54=HEAP32[((12160)>>2)];
   if ($specify_precision_0_off0_ph_i8) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $56=(($__iob+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $58;label = 27; break;
  case 26: 
   var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $60;label = 27; break;
  case 27: 
   var $__nc_0;
   var $62=(($__nc_0)|(0)) > 29;
   if ($62) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $_pre15=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_0;var $__nbh_sroa_0_1 = 0;var $102 = $_pre15;label = 47; break;
  case 29: 
   var $64=HEAP8[(14264)];
   var $65=(($64 << 24) >> 24)==0;
   if ($specify_precision_0_off0_ph_i8) { label = 30; break; } else { label = 38; break; }
  case 30: 
   if ($65) { label = 31; break; } else { label = 35; break; }
  case 31: 
   var $68=___cxa_guard_acquire(14264);
   var $69=(($68)|(0))==0;
   if ($69) { label = 35; break; } else { label = 32; break; }
  case 32: 
   var $71 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 34; break; }
  case 33: 
   HEAP32[((12160)>>2)]=$71;
   label = 35; break;
  case 34: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $eh_lpad_body$1 = $74$1;var $eh_lpad_body$0 = $74$0;label = 37; break;
  case 35: 
   var $76=HEAP32[((12160)>>2)];
   var $77=(($__iob+8)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $76, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $79;label = 44; break; } else { label = 36; break; }
  case 36: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1); $81$1 = tempRet0;
   var $eh_lpad_body$1 = $81$1;var $eh_lpad_body$0 = $81$0;label = 37; break;
  case 37: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $82=$eh_lpad_body$0;
   var $83=$eh_lpad_body$1;
   var $_1213 = $83;var $_114 = $82;label = 72; break;
  case 38: 
   if ($65) { label = 39; break; } else { label = 43; break; }
  case 39: 
   var $86=___cxa_guard_acquire(14264);
   var $87=(($86)|(0))==0;
   if ($87) { label = 43; break; } else { label = 40; break; }
  case 40: 
   var $89 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 42; break; }
  case 41: 
   HEAP32[((12160)>>2)]=$89;
   label = 43; break;
  case 42: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1); $92$1 = tempRet0;
   var $eh_lpad_body$1 = $92$1;var $eh_lpad_body$0 = $92$0;label = 37; break;
  case 43: 
   var $94=HEAP32[((12160)>>2)];
   var $95=(($__iob+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $94, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $97;label = 44; break; } else { label = 36; break; }
  case 44: 
   var $__nc_1;
   var $99=HEAP32[(($__nb)>>2)];
   var $100=(($99)|(0))==0;
   if ($100) { label = 45; break; } else { var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $99;var $102 = $99;label = 47; break; }
  case 45: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 36; break; }
  case 46: 
   var $_pre=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $_pre;var $102 = $_pre;label = 47; break;
  case 47: 
   var $102;
   var $__nbh_sroa_0_1;
   var $__nc_2;
   var $103=(($102+$__nc_2)|0);
   var $104=HEAP32[(($6)>>2)];
   var $105=$104 & 176;
   if ((($105)|(0))==16) {
    label = 48; break;
   }
   else if ((($105)|(0))==32) {
    var $_0_i7 = $103;label = 54; break;
   }
   else {
   label = 53; break;
   }
  case 48: 
   var $107=HEAP8[($102)];
   if ((($107 << 24) >> 24)==45 | (($107 << 24) >> 24)==43) {
    label = 49; break;
   }
   else {
   label = 50; break;
   }
  case 49: 
   var $109=(($102+1)|0);
   var $_0_i7 = $109;label = 54; break;
  case 50: 
   var $111=(($__nc_2)|(0)) > 1;
   var $112=(($107 << 24) >> 24)==48;
   var $or_cond_i=$111 & $112;
   if ($or_cond_i) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $114=(($102+1)|0);
   var $115=HEAP8[($114)];
   if ((($115 << 24) >> 24)==120 | (($115 << 24) >> 24)==88) {
    label = 52; break;
   }
   else {
   label = 53; break;
   }
  case 52: 
   var $117=(($102+2)|0);
   var $_0_i7 = $117;label = 54; break;
  case 53: 
   var $_0_i7 = $102;label = 54; break;
  case 54: 
   var $_0_i7;
   var $119=(($__o)|0);
   var $120=(($102)|(0))==(($43)|(0));
   if ($120) { var $__ob_0 = $119;var $__obh_sroa_0_1 = 0;var $131 = $43;label = 59; break; } else { label = 55; break; }
  case 55: 
   var $122=$__nc_2 << 3;
   var $123=_malloc($122);
   var $124=$123;
   var $125=(($123)|(0))==0;
   if ($125) { label = 56; break; } else { var $__ob_0 = $124;var $__obh_sroa_0_1 = $124;var $131 = $102;label = 59; break; }
  case 56: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { var $__obh_sroa_0_0 = 0;label = 58; break; }
  case 57: 
   var $_pre16=HEAP32[(($__nb)>>2)];
   var $__ob_0 = $124;var $__obh_sroa_0_1 = $124;var $131 = $_pre16;label = 59; break;
  case 58: 
   var $__obh_sroa_0_0;
   var $128$0 = ___cxa_find_matching_catch(-1, -1); $128$1 = tempRet0;
   var $129=$128$0;
   var $130=$128$1;
   var $_0 = $129;var $_01 = $130;var $__obh_sroa_0_2 = $__obh_sroa_0_0;label = 68; break;
  case 59: 
   var $131;
   var $__obh_sroa_0_1;
   var $__ob_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 60: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($131, $_0_i7, $103, $__ob_0, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 67; break; }
  case 61: 
   var $134=(($1)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|0);
   var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
   var $138=(($__s)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($3)|0);
   HEAP32[(($140)>>2)]=$139;
   var $141=HEAP32[(($__op)>>2)];
   var $142=HEAP32[(($__oe)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $3, $__ob_0, $141, $142, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 62: 
   var $144=(($2)|0);
   var $145=HEAP32[(($144)>>2)];
   HEAP32[(($138)>>2)]=$145;
   var $146=(($agg_result)|0);
   HEAP32[(($146)>>2)]=$145;
   var $147=(($__obh_sroa_0_1)|(0))==0;
   if ($147) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $149=$__obh_sroa_0_1;
   _free($149);
   label = 64; break;
  case 64: 
   var $150=(($__nbh_sroa_0_1)|(0))==0;
   if ($150) { label = 66; break; } else { label = 65; break; }
  case 65: 
   _free($__nbh_sroa_0_1);
   label = 66; break;
  case 66: 
   STACKTOP = sp;
   return;
  case 67: 
   var $153$0 = ___cxa_find_matching_catch(-1, -1); $153$1 = tempRet0;
   var $154=$153$0;
   var $155=$153$1;
   var $156=(($1)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157)|0);
   var $159=__ZNSt3__114__shared_count16__release_sharedEv($158);
   var $_0 = $154;var $_01 = $155;var $__obh_sroa_0_2 = $__obh_sroa_0_1;label = 68; break;
  case 68: 
   var $__obh_sroa_0_2;
   var $_01;
   var $_0;
   var $161=(($__obh_sroa_0_2)|(0))==0;
   if ($161) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $163=$__obh_sroa_0_2;
   _free($163);
   label = 70; break;
  case 70: 
   var $164=(($__nbh_sroa_0_1)|(0))==0;
   if ($164) { var $_1213 = $_01;var $_114 = $_0;label = 72; break; } else { label = 71; break; }
  case 71: 
   _free($__nbh_sroa_0_1);
   var $_1213 = $_01;var $_114 = $_0;label = 72; break;
  case 72: 
   var $_114;
   var $_1213;
   var $166$0=$_114;
   var $166$1=0;
   var $167$0=$166$0;
   var $167$1=$_1213;
   ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i7=sp;
   var $__p_i_i_i=(sp)+(16);
   var $__grouping=(sp)+(32);
   var $1=(($__loc)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=HEAP32[((((13696)|0))>>2)];
   var $5=(($4)|(0))==-1;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__p_i_i_i)|0);
   HEAP32[(($7)>>2)]=13696;
   var $8=(($__p_i_i_i+4)|0);
   HEAP32[(($8)>>2)]=(26);
   var $9=(($__p_i_i_i+8)|0);
   HEAP32[(($9)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $3, 256);
   label = 3; break;
  case 3: 
   var $10=HEAP32[((((13700)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $12=(($2+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$13;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=$18 >> 2;
   var $20=(($19)>>>(0)) > (($11)>>>(0));
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=(($15+($11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=___cxa_allocate_exception(4);
   var $25=$24;
   __ZNSt8bad_castC2Ev($25);
   ___cxa_throw($24, 8440, (356));
   throw "Reached an unreachable!";
  case 6: 
   var $26=$22;
   var $27=HEAP32[(($1)>>2)];
   var $28=$__p_i_i_i7;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $29=HEAP32[((((13312)|0))>>2)];
   var $30=(($29)|(0))==-1;
   if ($30) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $32=(($__p_i_i_i7)|0);
   HEAP32[(($32)>>2)]=13312;
   var $33=(($__p_i_i_i7+4)|0);
   HEAP32[(($33)>>2)]=(26);
   var $34=(($__p_i_i_i7+8)|0);
   HEAP32[(($34)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $28, 256);
   label = 8; break;
  case 8: 
   var $35=HEAP32[((((13316)|0))>>2)];
   var $36=((($35)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $37=(($27+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($27+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$38;
   var $42=$40;
   var $43=((($41)-($42))|0);
   var $44=$43 >> 2;
   var $45=(($44)>>>(0)) > (($36)>>>(0));
   if ($45) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=(($40+($36<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=___cxa_allocate_exception(4);
   var $50=$49;
   __ZNSt8bad_castC2Ev($50);
   ___cxa_throw($49, 8440, (356));
   throw "Reached an unreachable!";
  case 11: 
   var $51=$47;
   var $52=$47;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($__grouping, $51);
   HEAP32[(($__oe)>>2)]=$__ob;
   var $56=HEAP8[($__nb)];
   if ((($56 << 24) >> 24)==45 | (($56 << 24) >> 24)==43) {
    label = 12; break;
   }
   else {
   var $__nf_0 = $__nb;label = 20; break;
   }
  case 12: 
   var $58=$22;
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+44)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 18; break; }
  case 13: 
   var $63=(($__nb+1)|0);
   var $64=HEAP32[(($__oe)>>2)];
   var $65=(($64+4)|0);
   HEAP32[(($__oe)>>2)]=$65;
   HEAP32[(($64)>>2)]=$62;
   var $__nf_0 = $63;label = 20; break;
  case 14: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit$1;var $eh_lpad_body$0 = $lpad_loopexit$0;label = 19; break;
  case 15: 
   var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit21$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit21$1;var $eh_lpad_body$0 = $lpad_loopexit21$0;label = 19; break;
  case 16: 
   var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit33$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit33$1;var $eh_lpad_body$0 = $lpad_loopexit33$0;label = 19; break;
  case 17: 
   var $lpad_loopexit41$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit41$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit41$1;var $eh_lpad_body$0 = $lpad_loopexit41$0;label = 19; break;
  case 18: 
   var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit42$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_nonloopexit42$1;var $eh_lpad_body$0 = $lpad_nonloopexit42$0;label = 19; break;
  case 19: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($eh_lpad_body$0)
  case 20: 
   var $__nf_0;
   var $67=$__ne;
   var $68=$__nf_0;
   var $69=((($67)-($68))|0);
   var $70=(($69)|(0)) > 1;
   if ($70) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $71=(($__nf_0)>>>(0)) < (($__ne)>>>(0));
   if ($71) { var $__ns_137 = $__nf_0;label = 36; break; } else { var $__ns_2 = $__nf_0;var $__nf_1 = $__nf_0;label = 43; break; }
  case 22: 
   var $73=HEAP8[($__nf_0)];
   var $74=(($73 << 24) >> 24)==48;
   if ($74) { label = 23; break; } else { label = 21; break; }
  case 23: 
   var $76=(($__nf_0+1)|0);
   var $77=HEAP8[($76)];
   if ((($77 << 24) >> 24)==120 | (($77 << 24) >> 24)==88) {
    label = 24; break;
   }
   else {
   label = 21; break;
   }
  case 24: 
   var $79=$22;
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80+44)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 18; break; }
  case 25: 
   var $84=HEAP32[(($__oe)>>2)];
   var $85=(($84+4)|0);
   HEAP32[(($__oe)>>2)]=$85;
   HEAP32[(($84)>>2)]=$83;
   var $86=(($__nf_0+2)|0);
   var $87=HEAP8[($76)];
   var $88=HEAP32[(($79)>>2)];
   var $89=(($88+44)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26, $87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 18; break; }
  case 26: 
   var $92=HEAP32[(($__oe)>>2)];
   var $93=(($92+4)|0);
   HEAP32[(($__oe)>>2)]=$93;
   HEAP32[(($92)>>2)]=$91;
   var $94=(($86)>>>(0)) < (($__ne)>>>(0));
   if ($94) { var $__ns_046 = $86;label = 28; break; } else { var $__ns_2 = $86;var $__nf_1 = $86;label = 43; break; }
  case 27: 
   var $96=(($114)>>>(0)) < (($__ne)>>>(0));
   if ($96) { var $__ns_046 = $114;label = 28; break; } else { var $__ns_2 = $114;var $__nf_1 = $86;label = 43; break; }
  case 28: 
   var $__ns_046;
   var $97=HEAP8[($__ns_046)];
   var $98=HEAP8[(14264)];
   var $99=(($98 << 24) >> 24)==0;
   if ($99) { label = 29; break; } else { label = 33; break; }
  case 29: 
   var $101=___cxa_guard_acquire(14264);
   var $102=(($101)|(0))==0;
   if ($102) { label = 33; break; } else { label = 30; break; }
  case 30: 
   var $104 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   HEAP32[((12160)>>2)]=$104;
   label = 33; break;
  case 32: 
   var $107$0 = ___cxa_find_matching_catch(-1, -1); $107$1 = tempRet0;
   var $eh_lpad_body$1 = $107$1;var $eh_lpad_body$0 = $107$0;label = 19; break;
  case 33: 
   var $109=HEAP32[((12160)>>2)];
   var $110=(($97 << 24) >> 24);
   var $111 = (function() { try { __THREW__ = 0; return _isxdigit($110, $109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 17; break; }
  case 34: 
   var $113=(($111)|(0))==0;
   var $114=(($__ns_046+1)|0);
   if ($113) { var $__ns_2 = $__ns_046;var $__nf_1 = $86;label = 43; break; } else { label = 27; break; }
  case 35: 
   var $116=(($134)>>>(0)) < (($__ne)>>>(0));
   if ($116) { var $__ns_137 = $134;label = 36; break; } else { var $__ns_2 = $134;var $__nf_1 = $__nf_0;label = 43; break; }
  case 36: 
   var $__ns_137;
   var $117=HEAP8[($__ns_137)];
   var $118=HEAP8[(14264)];
   var $119=(($118 << 24) >> 24)==0;
   if ($119) { label = 37; break; } else { label = 41; break; }
  case 37: 
   var $121=___cxa_guard_acquire(14264);
   var $122=(($121)|(0))==0;
   if ($122) { label = 41; break; } else { label = 38; break; }
  case 38: 
   var $124 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   HEAP32[((12160)>>2)]=$124;
   label = 41; break;
  case 40: 
   var $127$0 = ___cxa_find_matching_catch(-1, -1); $127$1 = tempRet0;
   var $eh_lpad_body$1 = $127$1;var $eh_lpad_body$0 = $127$0;label = 19; break;
  case 41: 
   var $129=HEAP32[((12160)>>2)];
   var $130=(($117 << 24) >> 24);
   var $131 = (function() { try { __THREW__ = 0; return _isdigit($130, $129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 16; break; }
  case 42: 
   var $133=(($131)|(0))==0;
   var $134=(($__ns_137+1)|0);
   if ($133) { var $__ns_2 = $__ns_137;var $__nf_1 = $__nf_0;label = 43; break; } else { label = 35; break; }
  case 43: 
   var $__nf_1;
   var $__ns_2;
   var $135=$__grouping;
   var $136=$__grouping;
   var $137=HEAP8[($136)];
   var $138=(($137)&(255));
   var $139=$138 & 1;
   var $140=(($139)|(0))==0;
   if ($140) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $142=(($__grouping+4)|0);
   var $143=HEAP32[(($142)>>2)];
   var $146 = $143;label = 46; break;
  case 45: 
   var $145=$138 >>> 1;
   var $146 = $145;label = 46; break;
  case 46: 
   var $146;
   var $147=(($146)|(0))==0;
   if ($147) { label = 47; break; } else { label = 51; break; }
  case 47: 
   var $149=HEAP32[(($__oe)>>2)];
   var $150=$22;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+48)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($26, $__nf_1, $__ns_2, $149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 18; break; }
  case 48: 
   var $155=$__ns_2;
   var $156=$__nf_1;
   var $157=((($155)-($156))|0);
   var $158=HEAP32[(($__oe)>>2)];
   var $159=(($158+($157<<2))|0);
   HEAP32[(($__oe)>>2)]=$159;
   label = 49; break;
  case 49: 
   var $160=(($__ns_2)>>>(0)) < (($__ne)>>>(0));
   if ($160) { label = 50; break; } else { var $__nf_3 = $__ns_2;label = 70; break; }
  case 50: 
   var $161=$22;
   var $__nf_218 = $__ns_2;label = 65; break;
  case 51: 
   var $163=(($__nf_1)|(0))==(($__ns_2)|(0));
   if ($163) { label = 54; break; } else { label = 52; break; }
  case 52: 
   var $164=((($__ns_2)-(1))|0);
   var $165=(($__nf_1)>>>(0)) < (($164)>>>(0));
   if ($165) { var $_0529 = $__nf_1;var $166 = $164;label = 53; break; } else { label = 54; break; }
  case 53: 
   var $166;
   var $_0529;
   var $167=HEAP8[($_0529)];
   var $168=HEAP8[($166)];
   HEAP8[($_0529)]=$168;
   HEAP8[($166)]=$167;
   var $169=(($_0529+1)|0);
   var $170=((($166)-(1))|0);
   var $171=(($169)>>>(0)) < (($170)>>>(0));
   if ($171) { var $_0529 = $169;var $166 = $170;label = 53; break; } else { label = 54; break; }
  case 54: 
   var $172=$47;
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173+16)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 18; break; }
  case 55: 
   var $177=(($__nf_1)>>>(0)) < (($__ns_2)>>>(0));
   if ($177) { label = 56; break; } else { label = 62; break; }
  case 56: 
   var $178=(($135+1)|0);
   var $179=(($__grouping+4)|0);
   var $180=(($__grouping+8)|0);
   var $181=$22;
   var $__dc_024 = 0;var $__dg_025 = 0;var $__p_026 = $__nf_1;label = 57; break;
  case 57: 
   var $__p_026;
   var $__dg_025;
   var $__dc_024;
   var $182=HEAP8[($136)];
   var $183=$182 & 1;
   var $184=(($183 << 24) >> 24)==0;
   var $185=HEAP32[(($180)>>2)];
   var $_=$184 ? $178 : $185;
   var $186=(($_+$__dg_025)|0);
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24) > 0;
   if ($188) { label = 58; break; } else { var $__dg_1 = $__dg_025;var $__dc_1 = $__dc_024;label = 60; break; }
  case 58: 
   var $189=HEAP32[(($180)>>2)];
   var $_62=$184 ? $178 : $189;
   var $190=(($_62+$__dg_025)|0);
   var $191=HEAP8[($190)];
   var $192=(($191 << 24) >> 24);
   var $193=(($__dc_024)|(0))==(($192)|(0));
   if ($193) { label = 59; break; } else { var $__dg_1 = $__dg_025;var $__dc_1 = $__dc_024;label = 60; break; }
  case 59: 
   var $194=HEAP32[(($__oe)>>2)];
   var $195=(($194+4)|0);
   HEAP32[(($__oe)>>2)]=$195;
   HEAP32[(($194)>>2)]=$176;
   var $196=HEAP8[($136)];
   var $197=(($196)&(255));
   var $198=$197 & 1;
   var $199=(($198)|(0))==0;
   var $200=HEAP32[(($179)>>2)];
   var $201=$197 >>> 1;
   var $202=$199 ? $201 : $200;
   var $203=((($202)-(1))|0);
   var $204=(($__dg_025)>>>(0)) < (($203)>>>(0));
   var $205=(($204)&(1));
   var $___dg_0=((($205)+($__dg_025))|0);
   var $__dg_1 = $___dg_0;var $__dc_1 = 0;label = 60; break;
  case 60: 
   var $__dc_1;
   var $__dg_1;
   var $207=HEAP8[($__p_026)];
   var $208=HEAP32[(($181)>>2)];
   var $209=(($208+44)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$210]($26, $207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 15; break; }
  case 61: 
   var $212=HEAP32[(($__oe)>>2)];
   var $213=(($212+4)|0);
   HEAP32[(($__oe)>>2)]=$213;
   HEAP32[(($212)>>2)]=$211;
   var $214=((($__dc_1)+(1))|0);
   var $215=(($__p_026+1)|0);
   var $216=(($215)>>>(0)) < (($__ns_2)>>>(0));
   if ($216) { var $__dc_024 = $214;var $__dg_025 = $__dg_1;var $__p_026 = $215;label = 57; break; } else { label = 62; break; }
  case 62: 
   var $217=$__nf_1;
   var $218=$__nb;
   var $219=((($217)-($218))|0);
   var $220=(($__ob+($219<<2))|0);
   var $221=HEAP32[(($__oe)>>2)];
   var $222=(($220)|(0))==(($221)|(0));
   if ($222) { label = 49; break; } else { label = 63; break; }
  case 63: 
   var $223=((($221)-(4))|0);
   var $224=(($220)>>>(0)) < (($223)>>>(0));
   if ($224) { var $_019 = $220;var $225 = $223;label = 64; break; } else { label = 49; break; }
  case 64: 
   var $225;
   var $_019;
   var $226=HEAP32[(($_019)>>2)];
   var $227=HEAP32[(($225)>>2)];
   HEAP32[(($_019)>>2)]=$227;
   HEAP32[(($225)>>2)]=$226;
   var $228=(($_019+4)|0);
   var $229=((($225)-(4))|0);
   var $230=(($228)>>>(0)) < (($229)>>>(0));
   if ($230) { var $_019 = $228;var $225 = $229;label = 64; break; } else { label = 49; break; }
  case 65: 
   var $__nf_218;
   var $232=HEAP8[($__nf_218)];
   var $233=(($232 << 24) >> 24)==46;
   if ($233) { label = 66; break; } else { label = 68; break; }
  case 66: 
   var $235=$47;
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+12)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 18; break; }
  case 67: 
   var $240=HEAP32[(($__oe)>>2)];
   var $241=(($240+4)|0);
   HEAP32[(($__oe)>>2)]=$241;
   HEAP32[(($240)>>2)]=$239;
   var $242=(($__nf_218+1)|0);
   var $__nf_3 = $242;label = 70; break;
  case 68: 
   var $244=HEAP32[(($161)>>2)];
   var $245=(($244+44)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($26, $232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 14; break; }
  case 69: 
   var $248=HEAP32[(($__oe)>>2)];
   var $249=(($248+4)|0);
   HEAP32[(($__oe)>>2)]=$249;
   HEAP32[(($248)>>2)]=$247;
   var $250=(($__nf_218+1)|0);
   var $251=(($250)>>>(0)) < (($__ne)>>>(0));
   if ($251) { var $__nf_218 = $250;label = 65; break; } else { var $__nf_3 = $250;label = 70; break; }
  case 70: 
   var $__nf_3;
   var $252=HEAP32[(($__oe)>>2)];
   var $253=$22;
   var $254=HEAP32[(($253)>>2)];
   var $255=(($254+48)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$256]($26, $__nf_3, $__ne, $252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 18; break; }
  case 71: 
   var $258=$__nf_3;
   var $259=((($67)-($258))|0);
   var $260=HEAP32[(($__oe)>>2)];
   var $261=(($260+($259<<2))|0);
   HEAP32[(($__oe)>>2)]=$261;
   var $262=(($__np)|(0))==(($__ne)|(0));
   if ($262) { var $storemerge = $261;label = 73; break; } else { label = 72; break; }
  case 72: 
   var $264=$__np;
   var $265=$__nb;
   var $266=((($264)-($265))|0);
   var $267=(($__ob+($266<<2))|0);
   var $storemerge = $267;label = 73; break;
  case 73: 
   var $storemerge;
   HEAP32[(($__op)>>2)]=$storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__fmt=sp;
   var $__nar=(sp)+(8);
   var $__nb=(sp)+(40);
   var $__o=(sp)+(48);
   var $__op=(sp)+(280);
   var $__oe=(sp)+(288);
   var $1=(sp)+(296);
   var $2=(sp)+(304);
   var $3=(sp)+(312);
   var $$etemp$0$0=37;
   var $$etemp$0$1=0;
   var $st$1$0=(($__fmt)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__fmt+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $4=$__fmt;
   var $5=(($4+1)|0);
   var $6=(($__iob+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 2048;
   var $9=(($8)|(0))==0;
   if ($9) { var $_0_i = $5;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($4+2)|0);
   HEAP8[($5)]=43;
   var $_0_i = $11;label = 3; break;
  case 3: 
   var $_0_i;
   var $13=$7 & 1024;
   var $14=(($13)|(0))==0;
   if ($14) { var $_1_i = $_0_i;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=(($_0_i+1)|0);
   HEAP8[($_0_i)]=35;
   var $_1_i = $16;label = 5; break;
  case 5: 
   var $_1_i;
   var $18=$7 & 260;
   var $19=$7 >>> 14;
   var $20=(($18)|(0))==260;
   if ($20) { label = 13; break; } else { label = 6; break; }
  case 6: 
   var $21=(($_1_i+1)|0);
   HEAP8[($_1_i)]=46;
   var $22=(($_1_i+2)|0);
   HEAP8[($21)]=42;
   HEAP8[($22)]=76;
   var $scevgep=(($_1_i+3)|0);
   if ((($18)|(0))==256) {
    label = 10; break;
   }
   else if ((($18)|(0))==4) {
    label = 7; break;
   }
   else {
   label = 16; break;
   }
  case 7: 
   var $24=$19 & 1;
   var $25=(($24)|(0))==0;
   if ($25) { label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP8[($scevgep)]=70;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 9: 
   HEAP8[($scevgep)]=102;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 10: 
   var $29=$19 & 1;
   var $30=(($29)|(0))==0;
   if ($30) { label = 12; break; } else { label = 11; break; }
  case 11: 
   HEAP8[($scevgep)]=69;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 12: 
   HEAP8[($scevgep)]=101;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 13: 
   HEAP8[($_1_i)]=76;
   var $scevgep12=(($_1_i+1)|0);
   var $34=$19 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP8[($scevgep12)]=65;
   var $specify_precision_0_off0_ph_i13 = 0;label = 19; break;
  case 15: 
   HEAP8[($scevgep12)]=97;
   var $specify_precision_0_off0_ph_i13 = 0;label = 19; break;
  case 16: 
   var $39=$19 & 1;
   var $40=(($39)|(0))==0;
   if ($40) { label = 18; break; } else { label = 17; break; }
  case 17: 
   HEAP8[($scevgep)]=71;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 18: 
   HEAP8[($scevgep)]=103;
   var $specify_precision_0_off0_ph_i13 = 1;label = 19; break;
  case 19: 
   var $specify_precision_0_off0_ph_i13;
   var $43=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$43;
   var $44=HEAP8[(14264)];
   var $45=(($44 << 24) >> 24)==0;
   if ($45) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $47=___cxa_guard_acquire(14264);
   var $48=(($47)|(0))==0;
   if ($48) { label = 24; break; } else { label = 21; break; }
  case 21: 
   var $50 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[((12160)>>2)]=$50;
   label = 24; break;
  case 23: 
   var $53$0 = ___cxa_find_matching_catch(-1, -1); $53$1 = tempRet0;
   ___resumeException($53$0)
  case 24: 
   var $54=HEAP32[((12160)>>2)];
   if ($specify_precision_0_off0_ph_i13) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $56=(($__iob+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $58;label = 27; break;
  case 26: 
   var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43, 30, $54, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $__nc_0 = $60;label = 27; break;
  case 27: 
   var $__nc_0;
   var $62=(($__nc_0)|(0)) > 29;
   if ($62) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $_pre10=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_0;var $__nbh_sroa_0_1 = 0;var $100 = $_pre10;label = 47; break;
  case 29: 
   var $64=HEAP8[(14264)];
   var $65=(($64 << 24) >> 24)==0;
   if ($specify_precision_0_off0_ph_i13) { label = 30; break; } else { label = 38; break; }
  case 30: 
   if ($65) { label = 31; break; } else { label = 35; break; }
  case 31: 
   var $68=___cxa_guard_acquire(14264);
   var $69=(($68)|(0))==0;
   if ($69) { label = 35; break; } else { label = 32; break; }
  case 32: 
   var $71 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 34; break; }
  case 33: 
   HEAP32[((12160)>>2)]=$71;
   label = 35; break;
  case 34: 
   var $74$0 = ___cxa_find_matching_catch(-1, -1); $74$1 = tempRet0;
   var $eh_lpad_body$1 = $74$1;var $eh_lpad_body$0 = $74$0;label = 37; break;
  case 35: 
   var $76=HEAP32[((12160)>>2)];
   var $77=(($__iob+8)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $76, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $79;label = 44; break; } else { label = 36; break; }
  case 36: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1); $81$1 = tempRet0;
   var $eh_lpad_body$1 = $81$1;var $eh_lpad_body$0 = $81$0;label = 37; break;
  case 37: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $82=$eh_lpad_body$0;
   var $83=$eh_lpad_body$1;
   var $_128 = $83;var $_19 = $82;label = 72; break;
  case 38: 
   if ($65) { label = 39; break; } else { label = 43; break; }
  case 39: 
   var $86=___cxa_guard_acquire(14264);
   var $87=(($86)|(0))==0;
   if ($87) { label = 43; break; } else { label = 40; break; }
  case 40: 
   var $89 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 42; break; }
  case 41: 
   HEAP32[((12160)>>2)]=$89;
   label = 43; break;
  case 42: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1); $92$1 = tempRet0;
   var $eh_lpad_body$1 = $92$1;var $eh_lpad_body$0 = $92$0;label = 37; break;
  case 43: 
   var $94=HEAP32[((12160)>>2)];
   var $95 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $94, $4, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1 = $95;label = 44; break; } else { label = 36; break; }
  case 44: 
   var $__nc_1;
   var $97=HEAP32[(($__nb)>>2)];
   var $98=(($97)|(0))==0;
   if ($98) { label = 45; break; } else { var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $97;var $100 = $97;label = 47; break; }
  case 45: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 36; break; }
  case 46: 
   var $_pre=HEAP32[(($__nb)>>2)];
   var $__nc_2 = $__nc_1;var $__nbh_sroa_0_1 = $_pre;var $100 = $_pre;label = 47; break;
  case 47: 
   var $100;
   var $__nbh_sroa_0_1;
   var $__nc_2;
   var $101=(($100+$__nc_2)|0);
   var $102=HEAP32[(($6)>>2)];
   var $103=$102 & 176;
   if ((($103)|(0))==16) {
    label = 48; break;
   }
   else if ((($103)|(0))==32) {
    var $_0_i7 = $101;label = 54; break;
   }
   else {
   label = 53; break;
   }
  case 48: 
   var $105=HEAP8[($100)];
   if ((($105 << 24) >> 24)==45 | (($105 << 24) >> 24)==43) {
    label = 49; break;
   }
   else {
   label = 50; break;
   }
  case 49: 
   var $107=(($100+1)|0);
   var $_0_i7 = $107;label = 54; break;
  case 50: 
   var $109=(($__nc_2)|(0)) > 1;
   var $110=(($105 << 24) >> 24)==48;
   var $or_cond_i=$109 & $110;
   if ($or_cond_i) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $112=(($100+1)|0);
   var $113=HEAP8[($112)];
   if ((($113 << 24) >> 24)==120 | (($113 << 24) >> 24)==88) {
    label = 52; break;
   }
   else {
   label = 53; break;
   }
  case 52: 
   var $115=(($100+2)|0);
   var $_0_i7 = $115;label = 54; break;
  case 53: 
   var $_0_i7 = $100;label = 54; break;
  case 54: 
   var $_0_i7;
   var $117=(($__o)|0);
   var $118=(($100)|(0))==(($43)|(0));
   if ($118) { var $__ob_0 = $117;var $__obh_sroa_0_1 = 0;var $129 = $43;label = 59; break; } else { label = 55; break; }
  case 55: 
   var $120=$__nc_2 << 3;
   var $121=_malloc($120);
   var $122=$121;
   var $123=(($121)|(0))==0;
   if ($123) { label = 56; break; } else { var $__ob_0 = $122;var $__obh_sroa_0_1 = $122;var $129 = $100;label = 59; break; }
  case 56: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { var $__obh_sroa_0_0 = 0;label = 58; break; }
  case 57: 
   var $_pre11=HEAP32[(($__nb)>>2)];
   var $__ob_0 = $122;var $__obh_sroa_0_1 = $122;var $129 = $_pre11;label = 59; break;
  case 58: 
   var $__obh_sroa_0_0;
   var $126$0 = ___cxa_find_matching_catch(-1, -1); $126$1 = tempRet0;
   var $127=$126$0;
   var $128=$126$1;
   var $_0 = $127;var $_01 = $128;var $__obh_sroa_0_2 = $__obh_sroa_0_0;label = 68; break;
  case 59: 
   var $129;
   var $__obh_sroa_0_1;
   var $__ob_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 60: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($129, $_0_i7, $101, $__ob_0, $__op, $__oe, $1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 67; break; }
  case 61: 
   var $132=(($1)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133)|0);
   var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
   var $136=(($__s)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($3)|0);
   HEAP32[(($138)>>2)]=$137;
   var $139=HEAP32[(($__op)>>2)];
   var $140=HEAP32[(($__oe)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $3, $__ob_0, $139, $140, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { var $__obh_sroa_0_0 = $__obh_sroa_0_1;label = 58; break; }
  case 62: 
   var $142=(($2)|0);
   var $143=HEAP32[(($142)>>2)];
   HEAP32[(($136)>>2)]=$143;
   var $144=(($agg_result)|0);
   HEAP32[(($144)>>2)]=$143;
   var $145=(($__obh_sroa_0_1)|(0))==0;
   if ($145) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $147=$__obh_sroa_0_1;
   _free($147);
   label = 64; break;
  case 64: 
   var $148=(($__nbh_sroa_0_1)|(0))==0;
   if ($148) { label = 66; break; } else { label = 65; break; }
  case 65: 
   _free($__nbh_sroa_0_1);
   label = 66; break;
  case 66: 
   STACKTOP = sp;
   return;
  case 67: 
   var $151$0 = ___cxa_find_matching_catch(-1, -1); $151$1 = tempRet0;
   var $152=$151$0;
   var $153=$151$1;
   var $154=(($1)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|0);
   var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
   var $_0 = $152;var $_01 = $153;var $__obh_sroa_0_2 = $__obh_sroa_0_1;label = 68; break;
  case 68: 
   var $__obh_sroa_0_2;
   var $_01;
   var $_0;
   var $159=(($__obh_sroa_0_2)|(0))==0;
   if ($159) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $161=$__obh_sroa_0_2;
   _free($161);
   label = 70; break;
  case 70: 
   var $162=(($__nbh_sroa_0_1)|(0))==0;
   if ($162) { var $_128 = $_01;var $_19 = $_0;label = 72; break; } else { label = 71; break; }
  case 71: 
   _free($__nbh_sroa_0_1);
   var $_128 = $_01;var $_19 = $_0;label = 72; break;
  case 72: 
   var $_19;
   var $_128;
   var $164$0=$_19;
   var $164$1=0;
   var $165$0=$164$0;
   var $165$1=$_128;
   ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__fmt=(sp)+(16);
   var $__nar=(sp)+(24);
   var $__o=(sp)+(48);
   var $1=(sp)+(200);
   var $2=(sp)+(208);
   var $3=(($__fmt)|0);
   assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[((((2336)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((2336)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((2336)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((2336)|0))+(3))|0)];HEAP8[((($3)+(4))|0)]=HEAP8[(((((2336)|0))+(4))|0)];HEAP8[((($3)+(5))|0)]=HEAP8[(((((2336)|0))+(5))|0)];
   var $4=(($__nar)|0);
   var $5=HEAP8[(14264)];
   var $6=(($5 << 24) >> 24)==0;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=___cxa_guard_acquire(14264);
   var $9=(($8)|(0))==0;
   if ($9) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $11 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$11;
   label = 6; break;
  case 5: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   ___resumeException($14$0)
  case 6: 
   var $15=HEAP32[((12160)>>2)];
   var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4, 20, $15, $3, (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $17=(($__nar+$16)|0);
   var $18=(($__iob+4)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & 176;
   if ((($20)|(0))==32) {
    var $_0_i = $17;label = 13; break;
   }
   else if ((($20)|(0))==16) {
    label = 7; break;
   }
   else {
   label = 12; break;
   }
  case 7: 
   var $22=HEAP8[($4)];
   if ((($22 << 24) >> 24)==45 | (($22 << 24) >> 24)==43) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 8: 
   var $24=(($__nar+1)|0);
   var $_0_i = $24;label = 13; break;
  case 9: 
   var $26=(($16)|(0)) > 1;
   var $27=(($22 << 24) >> 24)==48;
   var $or_cond_i=$26 & $27;
   if ($or_cond_i) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $29=(($__nar+1)|0);
   var $30=HEAP8[($29)];
   if ((($30 << 24) >> 24)==120 | (($30 << 24) >> 24)==88) {
    label = 11; break;
   }
   else {
   label = 12; break;
   }
  case 11: 
   var $32=(($__nar+2)|0);
   var $_0_i = $32;label = 13; break;
  case 12: 
   var $_0_i = $4;label = 13; break;
  case 13: 
   var $_0_i;
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   var $34=(($1)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $37=HEAP32[((((13696)|0))>>2)];
   var $38=(($37)|(0))==-1;
   if ($38) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $40=(($__p_i_i_i)|0);
   HEAP32[(($40)>>2)]=13696;
   var $41=(($__p_i_i_i+4)|0);
   HEAP32[(($41)>>2)]=(26);
   var $42=(($__p_i_i_i+8)|0);
   HEAP32[(($42)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $36, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $43=HEAP32[((((13700)|0))>>2)];
   var $44=((($43)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $45=(($35+12)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($35+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$46;
   var $50=$48;
   var $51=((($49)-($50))|0);
   var $52=$51 >> 2;
   var $53=(($52)>>>(0)) > (($44)>>>(0));
   if ($53) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $54=(($48+($44<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))==0;
   if ($56) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $57=___cxa_allocate_exception(4);
   var $58=$57;
   __ZNSt8bad_castC2Ev($58);
   (function() { try { __THREW__ = 0; return ___cxa_throw($57, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 20; break; }
  case 18: 
   throw "Reached an unreachable!";
  case 19: 
   var $59=$55;
   var $60=HEAP32[(($34)>>2)];
   var $61=(($60)|0);
   var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
   var $63=(($__o)|0);
   var $64=$55;
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+48)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=FUNCTION_TABLE[$67]($59, $4, $17, $63);
   var $69=(($__o+($16<<2))|0);
   var $70=(($_0_i)|(0))==(($17)|(0));
   if ($70) { var $__op_0 = $69;label = 22; break; } else { label = 21; break; }
  case 20: 
   var $72$0 = ___cxa_find_matching_catch(-1, -1); $72$1 = tempRet0;
   var $73=HEAP32[(($34)>>2)];
   var $74=(($73)|0);
   var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
   ___resumeException($72$0)
  case 21: 
   var $77=$__nar;
   var $78=$_0_i;
   var $79=((($78)-($77))|0);
   var $80=(($__o+($79<<2))|0);
   var $__op_0 = $80;label = 22; break;
  case 22: 
   var $__op_0;
   var $82=(($__s)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($2)|0);
   HEAP32[(($84)>>2)]=$83;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $2, $63, $__op_0, $69, $__iob, $__fl);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $1=(sp)+(16);
   var $2=(sp)+(24);
   var $3=(sp)+(32);
   var $4=(sp)+(40);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   var $5=(($1)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $8=HEAP32[((((13704)|0))>>2)];
   var $9=(($8)|(0))==-1;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($__p_i_i_i)|0);
   HEAP32[(($11)>>2)]=13704;
   var $12=(($__p_i_i_i+4)|0);
   HEAP32[(($12)>>2)]=(26);
   var $13=(($__p_i_i_i+8)|0);
   HEAP32[(($13)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $7, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 22; break; }
  case 3: 
   var $14=HEAP32[((((13708)|0))>>2)];
   var $15=((($14)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $16=(($6+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($6+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$17;
   var $21=$19;
   var $22=((($20)-($21))|0);
   var $23=$22 >> 2;
   var $24=(($23)>>>(0)) > (($15)>>>(0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=(($19+($15<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=___cxa_allocate_exception(4);
   var $29=$28;
   __ZNSt8bad_castC2Ev($29);
   (function() { try { __THREW__ = 0; return ___cxa_throw($28, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 22; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $30=$26;
   var $31=HEAP32[(($5)>>2)];
   var $32=(($31)|0);
   var $33=__ZNSt3__114__shared_count16__release_sharedEv($32);
   HEAP32[(($__err)>>2)]=0;
   var $34=(($__fmtb)|(0))==(($__fmte)|(0));
   var $_phi_trans_insert_pre_pre=(($__b)|0);
   if ($34) { label = 67; break; } else { label = 8; break; }
  case 8: 
   var $35=(($__e)|0);
   var $36=$26;
   var $37=(($26+8)|0);
   var $38=$37;
   var $39=$26;
   var $40=$this;
   var $41=(($3)|0);
   var $42=(($4)|0);
   var $43=(($2)|0);
   var $_06_ph34 = $__fmtb;var $_pre35 = 0;label = 9; break;
  case 9: 
   var $_pre35;
   var $_06_ph34;
   var $45 = $_pre35;label = 10; break;
  case 10: 
   var $45;
   var $46=(($45)|(0))==0;
   if ($46) { label = 11; break; } else { label = 67; break; }
  case 11: 
   var $48=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
   var $49=(($48)|(0))==0;
   if ($49) { var $63 = 0;label = 15; break; } else { label = 12; break; }
  case 12: 
   var $51=(($48+12)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($48+16)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($52)|(0))==(($54)|(0));
   if ($55) { label = 13; break; } else { var $63 = $48;label = 15; break; }
  case 13: 
   var $56=$48;
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+36)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=FUNCTION_TABLE[$59]($48);
   var $61=(($60)|(0))==-1;
   if ($61) { label = 14; break; } else { var $63 = $48;label = 15; break; }
  case 14: 
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
   var $63 = 0;label = 15; break;
  case 15: 
   var $63;
   var $64=(($63)|(0))==0;
   var $65=HEAP32[(($35)>>2)];
   var $66=(($65)|(0))==0;
   if ($66) { label = 20; break; } else { label = 16; break; }
  case 16: 
   var $68=(($65+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($65+16)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0))==(($71)|(0));
   if ($72) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $73=$65;
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+36)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=FUNCTION_TABLE[$76]($65);
   var $78=(($77)|(0))==-1;
   if ($78) { label = 18; break; } else { label = 19; break; }
  case 18: 
   HEAP32[(($35)>>2)]=0;
   label = 20; break;
  case 19: 
   if ($64) { var $87 = $65;label = 23; break; } else { label = 21; break; }
  case 20: 
   if ($64) { label = 21; break; } else { var $87 = 0;label = 23; break; }
  case 21: 
   HEAP32[(($__err)>>2)]=4;
   var $237 = $63;label = 68; break;
  case 22: 
   var $82$0 = ___cxa_find_matching_catch(-1, -1); $82$1 = tempRet0;
   var $83=HEAP32[(($5)>>2)];
   var $84=(($83)|0);
   var $85=__ZNSt3__114__shared_count16__release_sharedEv($84);
   ___resumeException($82$0)
  case 23: 
   var $87;
   var $88=HEAP8[($_06_ph34)];
   var $89=HEAP32[(($36)>>2)];
   var $90=(($89+36)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=FUNCTION_TABLE[$91]($30, $88, 0);
   var $93=(($92 << 24) >> 24)==37;
   if ($93) { label = 24; break; } else { label = 33; break; }
  case 24: 
   var $95=(($_06_ph34+1)|0);
   var $96=(($95)|(0))==(($__fmte)|(0));
   if ($96) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[(($__err)>>2)]=4;
   var $237 = $63;label = 68; break;
  case 26: 
   var $99=HEAP8[($95)];
   var $100=HEAP32[(($36)>>2)];
   var $101=(($100+36)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=FUNCTION_TABLE[$102]($30, $99, 0);
   if ((($103 << 24) >> 24)==69 | (($103 << 24) >> 24)==48) {
    label = 27; break;
   }
   else {
   var $__opt_0 = 0;var $__cmd_0 = $103;var $_1 = $95;label = 30; break;
   }
  case 27: 
   var $105=(($_06_ph34+2)|0);
   var $106=(($105)|(0))==(($__fmte)|(0));
   if ($106) { label = 28; break; } else { label = 29; break; }
  case 28: 
   HEAP32[(($__err)>>2)]=4;
   var $237 = $63;label = 68; break;
  case 29: 
   var $109=HEAP8[($105)];
   var $110=HEAP32[(($36)>>2)];
   var $111=(($110+36)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=FUNCTION_TABLE[$112]($30, $109, 0);
   var $__opt_0 = $103;var $__cmd_0 = $113;var $_1 = $105;label = 30; break;
  case 30: 
   var $_1;
   var $__cmd_0;
   var $__opt_0;
   var $115=HEAP32[(($40)>>2)];
   var $116=(($115+36)|0);
   var $117=HEAP32[(($116)>>2)];
   HEAP32[(($41)>>2)]=$63;
   HEAP32[(($42)>>2)]=$87;
   FUNCTION_TABLE[$117]($2, $this, $3, $4, $__iob, $__err, $__tm, $__cmd_0, $__opt_0);
   var $118=HEAP32[(($43)>>2)];
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$118;
   var $119=(($_1+1)|0);
   var $_06_ph_be = $119;label = 31; break;
  case 31: 
   var $_06_ph_be;
   var $120=(($_06_ph_be)|(0))==(($__fmte)|(0));
   if ($120) { label = 67; break; } else { label = 32; break; }
  case 32: 
   var $_pre35_pre=HEAP32[(($__err)>>2)];
   var $_06_ph34 = $_06_ph_be;var $_pre35 = $_pre35_pre;label = 9; break;
  case 33: 
   var $122=HEAP8[($_06_ph34)];
   var $isascii14=(($122 << 24) >> 24) > -1;
   if ($isascii14) { label = 34; break; } else { label = 58; break; }
  case 34: 
   var $123=(($122 << 24) >> 24);
   var $124=HEAP32[(($38)>>2)];
   var $125=(($124+($123<<1))|0);
   var $126=HEAP16[(($125)>>1)];
   var $127=$126 & 8192;
   var $phitmp=(($127 << 16) >> 16)==0;
   if ($phitmp) { label = 58; break; } else { var $_06_pn = $_06_ph34;label = 35; break; }
  case 35: 
   var $_06_pn;
   var $_2=(($_06_pn+1)|0);
   var $128=(($_2)|(0))==(($__fmte)|(0));
   if ($128) { var $_2_lcssa = $__fmte;label = 38; break; } else { label = 36; break; }
  case 36: 
   var $130=HEAP8[($_2)];
   var $isascii21=(($130 << 24) >> 24) > -1;
   if ($isascii21) { label = 37; break; } else { var $_2_lcssa = $_2;label = 38; break; }
  case 37: 
   var $131=(($130 << 24) >> 24);
   var $132=(($124+($131<<1))|0);
   var $133=HEAP16[(($132)>>1)];
   var $134=$133 & 8192;
   var $phitmp22=(($134 << 16) >> 16)==0;
   if ($phitmp22) { var $_2_lcssa = $_2;label = 38; break; } else { var $_06_pn = $_2;label = 35; break; }
  case 38: 
   var $_2_lcssa;
   var $136 = $63;var $135 = $87;label = 39; break;
  case 39: 
   var $135;
   var $136;
   var $137=(($136)|(0))==0;
   if ($137) { var $151 = 0;label = 43; break; } else { label = 40; break; }
  case 40: 
   var $139=(($136+12)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($136+16)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($140)|(0))==(($142)|(0));
   if ($143) { label = 41; break; } else { var $151 = $136;label = 43; break; }
  case 41: 
   var $144=$136;
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+36)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=FUNCTION_TABLE[$147]($136);
   var $149=(($148)|(0))==-1;
   if ($149) { label = 42; break; } else { var $151 = $136;label = 43; break; }
  case 42: 
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
   var $151 = 0;label = 43; break;
  case 43: 
   var $151;
   var $152=(($151)|(0))==0;
   var $153=(($135)|(0))==0;
   if ($153) { label = 48; break; } else { label = 44; break; }
  case 44: 
   var $155=(($135+12)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($135+16)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($156)|(0))==(($158)|(0));
   if ($159) { label = 46; break; } else { label = 45; break; }
  case 45: 
   if ($152) { var $170 = $135;label = 50; break; } else { var $_06_ph_be = $_2_lcssa;label = 31; break; }
  case 46: 
   var $160=$135;
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+36)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=FUNCTION_TABLE[$163]($135);
   var $165=(($164)|(0))==-1;
   if ($165) { label = 47; break; } else { label = 49; break; }
  case 47: 
   HEAP32[(($35)>>2)]=0;
   label = 48; break;
  case 48: 
   if ($152) { var $_06_ph_be = $_2_lcssa;label = 31; break; } else { var $170 = 0;label = 50; break; }
  case 49: 
   var $167=(($135)|(0))==0;
   var $168=$152 ^ $167;
   if ($168) { var $170 = $135;label = 50; break; } else { var $_06_ph_be = $_2_lcssa;label = 31; break; }
  case 50: 
   var $170;
   var $171=(($151+12)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($151+16)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($172)|(0))==(($174)|(0));
   if ($175) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $177=$151;
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+36)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=FUNCTION_TABLE[$180]($151);
   var $extract_t17=(($181) & 255);
   var $_08_off0 = $extract_t17;label = 53; break;
  case 52: 
   var $183=HEAP8[($172)];
   var $_08_off0 = $183;label = 53; break;
  case 53: 
   var $_08_off0;
   var $isascii19=(($_08_off0 << 24) >> 24) > -1;
   if ($isascii19) { label = 54; break; } else { var $_06_ph_be = $_2_lcssa;label = 31; break; }
  case 54: 
   var $184=(($_08_off0 << 24) >> 24);
   var $185=HEAP32[(($38)>>2)];
   var $186=(($185+($184<<1))|0);
   var $187=HEAP16[(($186)>>1)];
   var $188=$187 & 8192;
   var $phitmp20=(($188 << 16) >> 16)==0;
   if ($phitmp20) { var $_06_ph_be = $_2_lcssa;label = 31; break; } else { label = 55; break; }
  case 55: 
   var $190=HEAP32[(($171)>>2)];
   var $191=HEAP32[(($173)>>2)];
   var $192=(($190)|(0))==(($191)|(0));
   if ($192) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $194=$151;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=FUNCTION_TABLE[$197]($151);
   var $136 = $151;var $135 = $170;label = 39; break;
  case 57: 
   var $200=(($190+1)|0);
   HEAP32[(($171)>>2)]=$200;
   var $136 = $151;var $135 = $170;label = 39; break;
  case 58: 
   var $201=(($63+12)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($63+16)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($202)|(0))==(($204)|(0));
   if ($205) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $207=$63;
   var $208=HEAP32[(($207)>>2)];
   var $209=(($208+36)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=FUNCTION_TABLE[$210]($63);
   var $extract_t=(($211) & 255);
   var $_05_off0 = $extract_t;label = 61; break;
  case 60: 
   var $213=HEAP8[($202)];
   var $_05_off0 = $213;label = 61; break;
  case 61: 
   var $_05_off0;
   var $214=HEAP32[(($39)>>2)];
   var $215=(($214+12)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=FUNCTION_TABLE[$216]($30, $_05_off0);
   var $218=HEAP8[($_06_ph34)];
   var $219=HEAP32[(($39)>>2)];
   var $220=(($219+12)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=FUNCTION_TABLE[$221]($30, $218);
   var $223=(($217 << 24) >> 24)==(($222 << 24) >> 24);
   if ($223) { label = 62; break; } else { label = 66; break; }
  case 62: 
   var $225=HEAP32[(($201)>>2)];
   var $226=HEAP32[(($203)>>2)];
   var $227=(($225)|(0))==(($226)|(0));
   if ($227) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $229=$63;
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+40)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=FUNCTION_TABLE[$232]($63);
   label = 65; break;
  case 64: 
   var $235=(($225+1)|0);
   HEAP32[(($201)>>2)]=$235;
   label = 65; break;
  case 65: 
   var $236=(($_06_ph34+1)|0);
   var $_06_ph_be = $236;label = 31; break;
  case 66: 
   HEAP32[(($__err)>>2)]=4;
   var $45 = 4;label = 10; break;
  case 67: 
   var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
   var $237 = $_pre;label = 68; break;
  case 68: 
   var $237;
   var $238=(($__b)|0);
   var $239=(($237)|(0))==0;
   if ($239) { label = 72; break; } else { label = 69; break; }
  case 69: 
   var $241=(($237+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($237+16)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(($242)|(0))==(($244)|(0));
   if ($245) { label = 70; break; } else { label = 72; break; }
  case 70: 
   var $246=$237;
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247+36)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=FUNCTION_TABLE[$249]($237);
   var $251=(($250)|(0))==-1;
   if ($251) { label = 71; break; } else { label = 72; break; }
  case 71: 
   HEAP32[(($238)>>2)]=0;
   label = 72; break;
  case 72: 
   var $253=HEAP32[(($238)>>2)];
   var $254=(($253)|(0))==0;
   var $255=(($__e)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257=(($256)|(0))==0;
   if ($257) { label = 77; break; } else { label = 73; break; }
  case 73: 
   var $259=(($256+12)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($256+16)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=(($260)|(0))==(($262)|(0));
   if ($263) { label = 74; break; } else { label = 76; break; }
  case 74: 
   var $264=$256;
   var $265=HEAP32[(($264)>>2)];
   var $266=(($265+36)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=FUNCTION_TABLE[$267]($256);
   var $269=(($268)|(0))==-1;
   if ($269) { label = 75; break; } else { label = 76; break; }
  case 75: 
   HEAP32[(($255)>>2)]=0;
   label = 77; break;
  case 76: 
   if ($254) { label = 79; break; } else { label = 78; break; }
  case 77: 
   if ($254) { label = 78; break; } else { label = 79; break; }
  case 78: 
   var $272=HEAP32[(($__err)>>2)];
   var $273=$272 | 2;
   HEAP32[(($__err)>>2)]=$273;
   label = 79; break;
  case 79: 
   var $275=(($agg_result)|0);
   HEAP32[(($275)>>2)]=$253;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 var label = 0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, $1, $2, $__iob, $__err, $__tm, ((2320)|0), ((2328)|0));
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(sp)+(8);
   var $3=(($this+8)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+20)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=FUNCTION_TABLE[$7]($3);
   var $9=(($__b)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($1)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=(($__e)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=$8;
   var $16=$8;
   var $17=HEAP8[($16)];
   var $18=$17 & 1;
   var $19=(($18 << 24) >> 24)==0;
   if ($19) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $21=(($8+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $27 = $22;var $26 = $22;label = 4; break;
  case 3: 
   var $24=(($15+1)|0);
   var $25=(($15+1)|0);
   var $27 = $25;var $26 = $24;label = 4; break;
  case 4: 
   var $26;
   var $27;
   var $28=(($17)&(255));
   var $29=$28 & 1;
   var $30=(($29)|(0))==0;
   if ($30) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $32=(($8+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $36 = $33;label = 7; break;
  case 6: 
   var $35=$28 >>> 1;
   var $36 = $35;label = 7; break;
  case 7: 
   var $36;
   var $37=(($27+$36)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, $1, $2, $__iob, $__err, $__tm, $26, $37);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13704)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13704;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $12=HEAP32[((((13708)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__e)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $35=(($this+8)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=HEAP32[(($37)>>2)];
   var $39=FUNCTION_TABLE[$38]($35);
   var $40=(($1)|0);
   HEAP32[(($40)>>2)]=$33;
   var $41=(($39+168)|0);
   var $42=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $39, $41, $28, $__err, 0);
   var $43=$42;
   var $44=$39;
   var $45=((($43)-($44))|0);
   var $46=(($45)|(0)) < 168;
   if ($46) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $48=(($__tm+24)|0);
   var $49=((((($45)|(0)))/(12))&-1);
   var $50=((((($49)|(0)))%(7))&-1);
   HEAP32[(($48)>>2)]=$50;
   label = 9; break;
  case 9: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $51=(($__b)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($agg_result)|0);
   HEAP32[(($53)>>2)]=$52;
   STACKTOP = sp;
   return;
  case 10: 
   var $55$0 = ___cxa_find_matching_catch(-1, -1); $55$1 = tempRet0;
   var $56=HEAP32[(($3)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13704)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13704;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $12=HEAP32[((((13708)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__e)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $35=(($this+8)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+4)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=FUNCTION_TABLE[$39]($35);
   var $41=(($1)|0);
   HEAP32[(($41)>>2)]=$33;
   var $42=(($40+288)|0);
   var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $40, $42, $28, $__err, 0);
   var $44=$43;
   var $45=$40;
   var $46=((($44)-($45))|0);
   var $47=(($46)|(0)) < 288;
   if ($47) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $49=(($__tm+16)|0);
   var $50=((((($46)|(0)))/(12))&-1);
   var $51=((((($50)|(0)))%(12))&-1);
   HEAP32[(($49)>>2)]=$51;
   label = 9; break;
  case 9: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $52=(($__b)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($agg_result)|0);
   HEAP32[(($54)>>2)]=$53;
   STACKTOP = sp;
   return;
  case 10: 
   var $56$0 = ___cxa_find_matching_catch(-1, -1); $56$1 = tempRet0;
   var $57=HEAP32[(($3)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13704)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13704;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $12=HEAP32[((((13708)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 13; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__tm+20)|0);
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $36=(($1)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $1, $__err, $28, 4);
   var $38=HEAP32[(($__err)>>2)];
   var $39=$38 & 4;
   var $40=(($39)|(0))==0;
   if ($40) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $42=(($37)|(0)) < 69;
   if ($42) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $44=((($37)+(2000))|0);
   var $__t_0_i = $44;label = 11; break;
  case 10: 
   var $_off_i=((($37)-(69))|0);
   var $46=(($_off_i)>>>(0)) < 31;
   var $47=((($37)+(1900))|0);
   var $__i=$46 ? $47 : $37;
   var $__t_0_i = $__i;label = 11; break;
  case 11: 
   var $__t_0_i;
   var $49=((($__t_0_i)-(1900))|0);
   HEAP32[(($32)>>2)]=$49;
   label = 12; break;
  case 12: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $50=(($__b)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($agg_result)|0);
   HEAP32[(($52)>>2)]=$51;
   STACKTOP = sp;
   return;
  case 13: 
   var $54$0 = ___cxa_find_matching_catch(-1, -1); $54$1 = tempRet0;
   var $55=HEAP32[(($3)>>2)];
   var $56=(($55)|0);
   var $57=__ZNSt3__114__shared_count16__release_sharedEv($56);
   ___resumeException($54$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2=sp;
   var $3=(sp)+(8);
   var $4=(sp)+(16);
   var $5=(sp)+(24);
   var $6=(sp)+(32);
   var $7=(sp)+(40);
   var $8=(sp)+(48);
   var $9=(sp)+(56);
   var $10=(sp)+(64);
   var $11=(sp)+(72);
   var $12=(sp)+(80);
   var $13=(sp)+(88);
   var $__p_i_i_i=(sp)+(96);
   var $14=(sp)+(112);
   var $15=(sp)+(120);
   var $16=(sp)+(128);
   var $17=(sp)+(136);
   var $18=(sp)+(144);
   var $19=(sp)+(152);
   var $20=(sp)+(160);
   var $21=(sp)+(168);
   var $22=(sp)+(176);
   var $23=(sp)+(184);
   var $24=(sp)+(192);
   var $25=(sp)+(200);
   var $26=(sp)+(208);
   var $27=(sp)+(216);
   var $28=(sp)+(224);
   var $29=(sp)+(232);
   var $30=(sp)+(240);
   var $31=(sp)+(248);
   var $32=(sp)+(256);
   var $33=(sp)+(264);
   var $34=(sp)+(272);
   var $35=(sp)+(280);
   var $36=(sp)+(288);
   var $37=(sp)+(296);
   var $38=(sp)+(304);
   var $39=(sp)+(312);
   var $40=(sp)+(320);
   HEAP32[(($__err)>>2)]=0;
   __ZNKSt3__18ios_base6getlocEv($14, $__iob);
   var $41=(($14)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $44=HEAP32[((((13704)|0))>>2)];
   var $45=(($44)|(0))==-1;
   if ($45) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $47=(($__p_i_i_i)|0);
   HEAP32[(($47)>>2)]=13704;
   var $48=(($__p_i_i_i+4)|0);
   HEAP32[(($48)>>2)]=(26);
   var $49=(($__p_i_i_i+8)|0);
   HEAP32[(($49)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $43, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $50=HEAP32[((((13708)|0))>>2)];
   var $51=((($50)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $52=(($42+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($42+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$53;
   var $57=$55;
   var $58=((($56)-($57))|0);
   var $59=$58 >> 2;
   var $60=(($59)>>>(0)) > (($51)>>>(0));
   if ($60) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $61=(($55+($51<<2))|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==0;
   if ($63) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $64=___cxa_allocate_exception(4);
   var $65=$64;
   __ZNSt8bad_castC2Ev($65);
   (function() { try { __THREW__ = 0; return ___cxa_throw($64, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $66=$62;
   var $67=HEAP32[(($41)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   var $70=(($__fmt << 24) >> 24);
   switch((($70)|(0))) {
   case 98: case 66: case 104:{
    label = 11; break;
   }
   case 99:{
    label = 13; break;
   }
   case 100: case 101:{
    label = 20; break;
   }
   case 68:{
    label = 24; break;
   }
   case 70:{
    label = 25; break;
   }
   case 72:{
    label = 26; break;
   }
   case 73:{
    label = 29; break;
   }
   case 106:{
    label = 33; break;
   }
   case 109:{
    label = 36; break;
   }
   case 77:{
    label = 39; break;
   }
   case 110: case 116:{
    label = 42; break;
   }
   case 112:{
    label = 43; break;
   }
   case 114:{
    label = 44; break;
   }
   case 82:{
    label = 45; break;
   }
   case 83:{
    label = 46; break;
   }
   case 84:{
    label = 49; break;
   }
   case 119:{
    label = 50; break;
   }
   case 120:{
    label = 53; break;
   }
   case 88:{
    label = 54; break;
   }
   case 121:{
    label = 61; break;
   }
   case 89:{
    label = 66; break;
   }
   case 37:{
    label = 68; break;
   }
   case 97: case 65:{
    label = 9; break;
   }
   default: {
   label = 69; break;
   }
   } break; 
  case 8: 
   var $72$0 = ___cxa_find_matching_catch(-1, -1); $72$1 = tempRet0;
   var $73=HEAP32[(($41)>>2)];
   var $74=(($73)|0);
   var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
   ___resumeException($72$0)
  case 9: 
   var $77=(($__e)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$13;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $80=(($this+8)|0);
   var $81=$80;
   var $82=HEAP32[(($81)>>2)];
   var $83=HEAP32[(($82)>>2)];
   var $84=FUNCTION_TABLE[$83]($80);
   var $85=(($13)|0);
   HEAP32[(($85)>>2)]=$78;
   var $86=(($84+168)|0);
   var $87=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $13, $84, $86, $66, $__err, 0);
   var $88=$87;
   var $89=$84;
   var $90=((($88)-($89))|0);
   var $91=(($90)|(0)) < 168;
   if ($91) { label = 10; break; } else { label = 70; break; }
  case 10: 
   var $93=(($__tm+24)|0);
   var $94=((((($90)|(0)))/(12))&-1);
   var $95=((((($94)|(0)))%(7))&-1);
   HEAP32[(($93)>>2)]=$95;
   label = 70; break;
  case 11: 
   var $97=(($__e)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$12;
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $100=(($this+8)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=FUNCTION_TABLE[$104]($100);
   var $106=(($12)|0);
   HEAP32[(($106)>>2)]=$98;
   var $107=(($105+288)|0);
   var $108=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $12, $105, $107, $66, $__err, 0);
   var $109=$108;
   var $110=$105;
   var $111=((($109)-($110))|0);
   var $112=(($111)|(0)) < 288;
   if ($112) { label = 12; break; } else { label = 70; break; }
  case 12: 
   var $114=(($__tm+16)|0);
   var $115=((((($111)|(0)))/(12))&-1);
   var $116=((((($115)|(0)))%(12))&-1);
   HEAP32[(($114)>>2)]=$116;
   label = 70; break;
  case 13: 
   var $118=(($this+8)|0);
   var $119=$118;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+12)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=FUNCTION_TABLE[$122]($118);
   var $124=(($__b)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($16)|0);
   HEAP32[(($126)>>2)]=$125;
   var $127=(($__e)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($17)|0);
   HEAP32[(($129)>>2)]=$128;
   var $130=$123;
   var $131=$123;
   var $132=HEAP8[($131)];
   var $133=$132 & 1;
   var $134=(($133 << 24) >> 24)==0;
   if ($134) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $136=(($123+8)|0);
   var $137=HEAP32[(($136)>>2)];
   var $142 = $137;var $141 = $137;label = 16; break;
  case 15: 
   var $139=(($130+1)|0);
   var $140=(($130+1)|0);
   var $142 = $140;var $141 = $139;label = 16; break;
  case 16: 
   var $141;
   var $142;
   var $143=(($132)&(255));
   var $144=$143 & 1;
   var $145=(($144)|(0))==0;
   if ($145) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $147=(($123+4)|0);
   var $148=HEAP32[(($147)>>2)];
   var $151 = $148;label = 19; break;
  case 18: 
   var $150=$143 >>> 1;
   var $151 = $150;label = 19; break;
  case 19: 
   var $151;
   var $152=(($142+$151)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15, $this, $16, $17, $__iob, $__err, $__tm, $141, $152);
   var $153=(($15)|0);
   var $154=HEAP32[(($153)>>2)];
   HEAP32[(($124)>>2)]=$154;
   label = 70; break;
  case 20: 
   var $156=(($__tm+12)|0);
   var $157=(($__e)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=$11;
   var $$etemp$4$0=4;
   var $$etemp$4$1=0;
   var $160=(($11)|0);
   HEAP32[(($160)>>2)]=$158;
   var $161=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $11, $__err, $66, 2);
   var $162=HEAP32[(($__err)>>2)];
   var $163=$162 & 4;
   var $164=(($163)|(0))==0;
   if ($164) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $_off_i=((($161)-(1))|0);
   var $166=(($_off_i)>>>(0)) < 31;
   if ($166) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[(($156)>>2)]=$161;
   label = 70; break;
  case 23: 
   var $169=$162 | 4;
   HEAP32[(($__err)>>2)]=$169;
   label = 70; break;
  case 24: 
   var $171=(($__b)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($19)|0);
   HEAP32[(($173)>>2)]=$172;
   var $174=(($__e)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($20)|0);
   HEAP32[(($176)>>2)]=$175;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18, $this, $19, $20, $__iob, $__err, $__tm, ((2312)|0), ((2320)|0));
   var $177=(($18)|0);
   var $178=HEAP32[(($177)>>2)];
   HEAP32[(($171)>>2)]=$178;
   label = 70; break;
  case 25: 
   var $180=(($__b)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($22)|0);
   HEAP32[(($182)>>2)]=$181;
   var $183=(($__e)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($23)|0);
   HEAP32[(($185)>>2)]=$184;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21, $this, $22, $23, $__iob, $__err, $__tm, ((2304)|0), ((2312)|0));
   var $186=(($21)|0);
   var $187=HEAP32[(($186)>>2)];
   HEAP32[(($180)>>2)]=$187;
   label = 70; break;
  case 26: 
   var $189=(($__e)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=$10;
   var $$etemp$5$0=4;
   var $$etemp$5$1=0;
   var $192=(($10)|0);
   HEAP32[(($192)>>2)]=$190;
   var $193=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $10, $__err, $66, 2);
   var $194=HEAP32[(($__err)>>2)];
   var $195=$194 & 4;
   var $196=(($195)|(0))==0;
   var $197=(($193)|(0)) < 24;
   var $or_cond_i=$196 & $197;
   if ($or_cond_i) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $199=(($__tm+8)|0);
   HEAP32[(($199)>>2)]=$193;
   label = 70; break;
  case 28: 
   var $201=$194 | 4;
   HEAP32[(($__err)>>2)]=$201;
   label = 70; break;
  case 29: 
   var $203=(($__tm+8)|0);
   var $204=(($__e)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=$9;
   var $$etemp$6$0=4;
   var $$etemp$6$1=0;
   var $207=(($9)|0);
   HEAP32[(($207)>>2)]=$205;
   var $208=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $9, $__err, $66, 2);
   var $209=HEAP32[(($__err)>>2)];
   var $210=$209 & 4;
   var $211=(($210)|(0))==0;
   if ($211) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $_off_i11=((($208)-(1))|0);
   var $213=(($_off_i11)>>>(0)) < 12;
   if ($213) { label = 31; break; } else { label = 32; break; }
  case 31: 
   HEAP32[(($203)>>2)]=$208;
   label = 70; break;
  case 32: 
   var $216=$209 | 4;
   HEAP32[(($__err)>>2)]=$216;
   label = 70; break;
  case 33: 
   var $218=(($__e)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=$8;
   var $$etemp$7$0=4;
   var $$etemp$7$1=0;
   var $221=(($8)|0);
   HEAP32[(($221)>>2)]=$219;
   var $222=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $8, $__err, $66, 3);
   var $223=HEAP32[(($__err)>>2)];
   var $224=$223 & 4;
   var $225=(($224)|(0))==0;
   var $226=(($222)|(0)) < 366;
   var $or_cond_i14=$225 & $226;
   if ($or_cond_i14) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $228=(($__tm+28)|0);
   HEAP32[(($228)>>2)]=$222;
   label = 70; break;
  case 35: 
   var $230=$223 | 4;
   HEAP32[(($__err)>>2)]=$230;
   label = 70; break;
  case 36: 
   var $232=(($__e)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=$7;
   var $$etemp$8$0=4;
   var $$etemp$8$1=0;
   var $235=(($7)|0);
   HEAP32[(($235)>>2)]=$233;
   var $236=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $7, $__err, $66, 2);
   var $237=HEAP32[(($__err)>>2)];
   var $238=$237 & 4;
   var $239=(($238)|(0))==0;
   var $240=(($236)|(0)) < 13;
   var $or_cond_i17=$239 & $240;
   if ($or_cond_i17) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $242=(($__tm+16)|0);
   var $243=((($236)-(1))|0);
   HEAP32[(($242)>>2)]=$243;
   label = 70; break;
  case 38: 
   var $245=$237 | 4;
   HEAP32[(($__err)>>2)]=$245;
   label = 70; break;
  case 39: 
   var $247=(($__e)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=$6;
   var $$etemp$9$0=4;
   var $$etemp$9$1=0;
   var $250=(($6)|0);
   HEAP32[(($250)>>2)]=$248;
   var $251=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $6, $__err, $66, 2);
   var $252=HEAP32[(($__err)>>2)];
   var $253=$252 & 4;
   var $254=(($253)|(0))==0;
   var $255=(($251)|(0)) < 60;
   var $or_cond_i20=$254 & $255;
   if ($or_cond_i20) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $257=(($__tm+4)|0);
   HEAP32[(($257)>>2)]=$251;
   label = 70; break;
  case 41: 
   var $259=$252 | 4;
   HEAP32[(($__err)>>2)]=$259;
   label = 70; break;
  case 42: 
   var $261=(($__e)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=(($24)|0);
   HEAP32[(($263)>>2)]=$262;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $24, $__err, $66);
   label = 70; break;
  case 43: 
   var $265=(($__tm+8)|0);
   var $266=(($__e)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($25)|0);
   HEAP32[(($268)>>2)]=$267;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $265, $__b, $25, $__err, $66);
   label = 70; break;
  case 44: 
   var $270=(($__b)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($27)|0);
   HEAP32[(($272)>>2)]=$271;
   var $273=(($__e)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($28)|0);
   HEAP32[(($275)>>2)]=$274;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26, $this, $27, $28, $__iob, $__err, $__tm, ((2288)|0), ((2299)|0));
   var $276=(($26)|0);
   var $277=HEAP32[(($276)>>2)];
   HEAP32[(($270)>>2)]=$277;
   label = 70; break;
  case 45: 
   var $279=(($__b)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($30)|0);
   HEAP32[(($281)>>2)]=$280;
   var $282=(($__e)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=(($31)|0);
   HEAP32[(($284)>>2)]=$283;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29, $this, $30, $31, $__iob, $__err, $__tm, ((2280)|0), ((2285)|0));
   var $285=(($29)|0);
   var $286=HEAP32[(($285)>>2)];
   HEAP32[(($279)>>2)]=$286;
   label = 70; break;
  case 46: 
   var $288=(($__e)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=$5;
   var $$etemp$10$0=4;
   var $$etemp$10$1=0;
   var $291=(($5)|0);
   HEAP32[(($291)>>2)]=$289;
   var $292=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $5, $__err, $66, 2);
   var $293=HEAP32[(($__err)>>2)];
   var $294=$293 & 4;
   var $295=(($294)|(0))==0;
   var $296=(($292)|(0)) < 61;
   var $or_cond_i23=$295 & $296;
   if ($or_cond_i23) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $298=(($__tm)|0);
   HEAP32[(($298)>>2)]=$292;
   label = 70; break;
  case 48: 
   var $300=$293 | 4;
   HEAP32[(($__err)>>2)]=$300;
   label = 70; break;
  case 49: 
   var $302=(($__b)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(($33)|0);
   HEAP32[(($304)>>2)]=$303;
   var $305=(($__e)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($34)|0);
   HEAP32[(($307)>>2)]=$306;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32, $this, $33, $34, $__iob, $__err, $__tm, ((2272)|0), ((2280)|0));
   var $308=(($32)|0);
   var $309=HEAP32[(($308)>>2)];
   HEAP32[(($302)>>2)]=$309;
   label = 70; break;
  case 50: 
   var $311=(($__e)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=$4;
   var $$etemp$11$0=4;
   var $$etemp$11$1=0;
   var $314=(($4)|0);
   HEAP32[(($314)>>2)]=$312;
   var $315=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $4, $__err, $66, 1);
   var $316=HEAP32[(($__err)>>2)];
   var $317=$316 & 4;
   var $318=(($317)|(0))==0;
   var $319=(($315)|(0)) < 7;
   var $or_cond_i26=$318 & $319;
   if ($or_cond_i26) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $321=(($__tm+24)|0);
   HEAP32[(($321)>>2)]=$315;
   label = 70; break;
  case 52: 
   var $323=$316 | 4;
   HEAP32[(($__err)>>2)]=$323;
   label = 70; break;
  case 53: 
   var $325=$this;
   var $326=HEAP32[(($325)>>2)];
   var $327=(($326+20)|0);
   var $328=HEAP32[(($327)>>2)];
   var $329=(($__b)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($35)|0);
   HEAP32[(($331)>>2)]=$330;
   var $332=(($__e)|0);
   var $333=HEAP32[(($332)>>2)];
   var $334=(($36)|0);
   HEAP32[(($334)>>2)]=$333;
   FUNCTION_TABLE[$328]($agg_result, $this, $35, $36, $__iob, $__err, $__tm);
   label = 71; break;
  case 54: 
   var $336=(($this+8)|0);
   var $337=$336;
   var $338=HEAP32[(($337)>>2)];
   var $339=(($338+24)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=FUNCTION_TABLE[$340]($336);
   var $342=(($__b)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=(($38)|0);
   HEAP32[(($344)>>2)]=$343;
   var $345=(($__e)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($39)|0);
   HEAP32[(($347)>>2)]=$346;
   var $348=$341;
   var $349=$341;
   var $350=HEAP8[($349)];
   var $351=$350 & 1;
   var $352=(($351 << 24) >> 24)==0;
   if ($352) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $354=(($341+8)|0);
   var $355=HEAP32[(($354)>>2)];
   var $360 = $355;var $359 = $355;label = 57; break;
  case 56: 
   var $357=(($348+1)|0);
   var $358=(($348+1)|0);
   var $360 = $358;var $359 = $357;label = 57; break;
  case 57: 
   var $359;
   var $360;
   var $361=(($350)&(255));
   var $362=$361 & 1;
   var $363=(($362)|(0))==0;
   if ($363) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $365=(($341+4)|0);
   var $366=HEAP32[(($365)>>2)];
   var $369 = $366;label = 60; break;
  case 59: 
   var $368=$361 >>> 1;
   var $369 = $368;label = 60; break;
  case 60: 
   var $369;
   var $370=(($360+$369)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37, $this, $38, $39, $__iob, $__err, $__tm, $359, $370);
   var $371=(($37)|0);
   var $372=HEAP32[(($371)>>2)];
   HEAP32[(($342)>>2)]=$372;
   label = 70; break;
  case 61: 
   var $374=(($__tm+20)|0);
   var $375=(($__e)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=$3;
   var $$etemp$12$0=4;
   var $$etemp$12$1=0;
   var $378=(($3)|0);
   HEAP32[(($378)>>2)]=$376;
   var $379=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $3, $__err, $66, 4);
   var $380=HEAP32[(($__err)>>2)];
   var $381=$380 & 4;
   var $382=(($381)|(0))==0;
   if ($382) { label = 62; break; } else { label = 70; break; }
  case 62: 
   var $384=(($379)|(0)) < 69;
   if ($384) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $386=((($379)+(2000))|0);
   var $__t_0_i = $386;label = 65; break;
  case 64: 
   var $_off_i29=((($379)-(69))|0);
   var $388=(($_off_i29)>>>(0)) < 31;
   var $389=((($379)+(1900))|0);
   var $__i=$388 ? $389 : $379;
   var $__t_0_i = $__i;label = 65; break;
  case 65: 
   var $__t_0_i;
   var $391=((($__t_0_i)-(1900))|0);
   HEAP32[(($374)>>2)]=$391;
   label = 70; break;
  case 66: 
   var $393=(($__e)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=$2;
   var $$etemp$13$0=4;
   var $$etemp$13$1=0;
   var $396=(($2)|0);
   HEAP32[(($396)>>2)]=$394;
   var $397=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $2, $__err, $66, 4);
   var $398=HEAP32[(($__err)>>2)];
   var $399=$398 & 4;
   var $400=(($399)|(0))==0;
   if ($400) { label = 67; break; } else { label = 70; break; }
  case 67: 
   var $402=(($__tm+20)|0);
   var $403=((($397)-(1900))|0);
   HEAP32[(($402)>>2)]=$403;
   label = 70; break;
  case 68: 
   var $405=(($__e)|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=(($40)|0);
   HEAP32[(($407)>>2)]=$406;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $40, $__err, $66);
   label = 70; break;
  case 69: 
   var $409=HEAP32[(($__err)>>2)];
   var $410=$409 | 4;
   HEAP32[(($__err)>>2)]=$410;
   label = 70; break;
  case 70: 
   var $411=(($__b)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=(($agg_result)|0);
   HEAP32[(($413)>>2)]=$412;
   label = 71; break;
  case 71: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=(($__e)|0);
   var $3=(($__ct+8)|0);
   label = 2; break;
  case 2: 
   var $4=HEAP32[(($1)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { var $19 = 0;label = 7; break; } else { label = 3; break; }
  case 3: 
   var $7=(($4+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($4+16)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($8)|(0))==(($10)|(0));
   if ($11) { label = 4; break; } else { var $19 = $4;label = 7; break; }
  case 4: 
   var $12=$4;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+36)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=FUNCTION_TABLE[$15]($4);
   var $17=(($16)|(0))==-1;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $_pre=HEAP32[(($1)>>2)];
   var $19 = $_pre;label = 7; break;
  case 6: 
   HEAP32[(($1)>>2)]=0;
   var $19 = 0;label = 7; break;
  case 7: 
   var $19;
   var $20=(($19)|(0))==0;
   var $21=HEAP32[(($2)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 12; break; } else { label = 8; break; }
  case 8: 
   var $24=(($21+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($21+16)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0))==(($27)|(0));
   if ($28) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $29=$21;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+36)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=FUNCTION_TABLE[$32]($21);
   var $34=(($33)|(0))==-1;
   if ($34) { label = 10; break; } else { label = 11; break; }
  case 10: 
   HEAP32[(($2)>>2)]=0;
   label = 12; break;
  case 11: 
   if ($20) { var $38 = $21;var $37 = 0;label = 13; break; } else { var $74 = $21;var $73 = 0;label = 21; break; }
  case 12: 
   if ($20) { var $74 = 0;var $73 = 1;label = 21; break; } else { var $38 = 0;var $37 = 1;label = 13; break; }
  case 13: 
   var $37;
   var $38;
   var $39=HEAP32[(($1)>>2)];
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($39+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0))==(($43)|(0));
   if ($44) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $46=$39;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+36)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=FUNCTION_TABLE[$49]($39);
   var $extract_t=(($50) & 255);
   var $_03_off0 = $extract_t;label = 16; break;
  case 15: 
   var $52=HEAP8[($41)];
   var $_03_off0 = $52;label = 16; break;
  case 16: 
   var $_03_off0;
   var $isascii8=(($_03_off0 << 24) >> 24) > -1;
   if ($isascii8) { label = 17; break; } else { var $74 = $38;var $73 = $37;label = 21; break; }
  case 17: 
   var $53=(($_03_off0 << 24) >> 24);
   var $54=HEAP32[(($3)>>2)];
   var $55=(($54+($53<<1))|0);
   var $56=HEAP16[(($55)>>1)];
   var $57=$56 & 8192;
   var $phitmp=(($57 << 16) >> 16)==0;
   if ($phitmp) { var $74 = $38;var $73 = $37;label = 21; break; } else { label = 18; break; }
  case 18: 
   var $59=HEAP32[(($1)>>2)];
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($59+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61)|(0))==(($63)|(0));
   if ($64) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $66=$59;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+40)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=FUNCTION_TABLE[$69]($59);
   label = 2; break;
  case 20: 
   var $72=(($61+1)|0);
   HEAP32[(($60)>>2)]=$72;
   label = 2; break;
  case 21: 
   var $73;
   var $74;
   var $75=HEAP32[(($1)>>2)];
   var $76=(($75)|(0))==0;
   if ($76) { var $90 = 0;label = 26; break; } else { label = 22; break; }
  case 22: 
   var $78=(($75+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($75+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 23; break; } else { var $90 = $75;label = 26; break; }
  case 23: 
   var $83=$75;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+36)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=FUNCTION_TABLE[$86]($75);
   var $88=(($87)|(0))==-1;
   if ($88) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $_pre10=HEAP32[(($1)>>2)];
   var $90 = $_pre10;label = 26; break;
  case 25: 
   HEAP32[(($1)>>2)]=0;
   var $90 = 0;label = 26; break;
  case 26: 
   var $90;
   var $91=(($90)|(0))==0;
   if ($73) { label = 31; break; } else { label = 27; break; }
  case 27: 
   var $93=(($74+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($74+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($94)|(0))==(($96)|(0));
   if ($97) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $98=$74;
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+36)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=FUNCTION_TABLE[$101]($74);
   var $103=(($102)|(0))==-1;
   if ($103) { label = 30; break; } else { label = 29; break; }
  case 29: 
   if ($91) { label = 34; break; } else { label = 33; break; }
  case 30: 
   HEAP32[(($2)>>2)]=0;
   label = 31; break;
  case 31: 
   if ($91) { label = 33; break; } else { label = 34; break; }
  case 32: 
   var $105=(($74)|(0))==0;
   var $tmp6=$91 ^ $105;
   if ($tmp6) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $107=HEAP32[(($__err)>>2)];
   var $108=$107 | 2;
   HEAP32[(($__err)>>2)]=$108;
   label = 34; break;
  case 34: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(($this+8)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=FUNCTION_TABLE[$6]($2);
   var $8=$7;
   var $9=HEAP8[($8)];
   var $10=(($9)&(255));
   var $11=$10 & 1;
   var $12=(($11)|(0))==0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=(($7+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $18 = $15;label = 4; break;
  case 3: 
   var $17=$10 >>> 1;
   var $18 = $17;label = 4; break;
  case 4: 
   var $18;
   var $19=(($7+12)|0);
   var $20=$19;
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$22 & 1;
   var $24=(($23)|(0))==0;
   if ($24) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $26=(($7+16)|0);
   var $27=HEAP32[(($26)>>2)];
   var $30 = $27;label = 7; break;
  case 6: 
   var $29=$22 >>> 1;
   var $30 = $29;label = 7; break;
  case 7: 
   var $30;
   var $31=(((-$30))|0);
   var $32=(($18)|(0))==(($31)|(0));
   if ($32) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $34=HEAP32[(($__err)>>2)];
   var $35=$34 | 4;
   HEAP32[(($__err)>>2)]=$35;
   label = 15; break;
  case 9: 
   var $37=(($__e)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($1)|0);
   HEAP32[(($39)>>2)]=$38;
   var $40=(($7+24)|0);
   var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $7, $40, $__ct, $__err, 0);
   var $42=$41;
   var $43=$7;
   var $44=((($42)-($43))|0);
   var $45=(($41)|(0))==(($7)|(0));
   if ($45) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $47=HEAP32[(($__h)>>2)];
   var $48=(($47)|(0))==12;
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   HEAP32[(($__h)>>2)]=0;
   label = 15; break;
  case 12: 
   var $51=(($44)|(0))==12;
   if ($51) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $53=HEAP32[(($__h)>>2)];
   var $54=(($53)|(0)) < 12;
   if ($54) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $56=((($53)+(12))|0);
   HEAP32[(($__h)>>2)]=$56;
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { var $17 = 0;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $5=(($2+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($2+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($6)|(0))==(($8)|(0));
   if ($9) { label = 3; break; } else { var $17 = $2;label = 6; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+36)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=FUNCTION_TABLE[$13]($2);
   var $15=(($14)|(0))==-1;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $_pre=HEAP32[(($1)>>2)];
   var $17 = $_pre;label = 6; break;
  case 5: 
   HEAP32[(($1)>>2)]=0;
   var $17 = 0;label = 6; break;
  case 6: 
   var $17;
   var $18=(($17)|(0))==0;
   var $19=(($__e)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==0;
   if ($21) { label = 11; break; } else { label = 7; break; }
  case 7: 
   var $23=(($20+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20+16)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($24)|(0))==(($26)|(0));
   if ($27) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $28=$20;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=FUNCTION_TABLE[$31]($20);
   var $33=(($32)|(0))==-1;
   if ($33) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($19)>>2)]=0;
   label = 11; break;
  case 10: 
   if ($18) { var $40 = $20;var $39 = 0;label = 13; break; } else { label = 12; break; }
  case 11: 
   if ($18) { label = 12; break; } else { var $40 = 0;var $39 = 1;label = 13; break; }
  case 12: 
   var $36=HEAP32[(($__err)>>2)];
   var $37=$36 | 6;
   HEAP32[(($__err)>>2)]=$37;
   label = 34; break;
  case 13: 
   var $39;
   var $40;
   var $41=HEAP32[(($1)>>2)];
   var $42=(($41+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $48=$41;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=FUNCTION_TABLE[$51]($41);
   var $extract_t=(($52) & 255);
   var $_03_off0 = $extract_t;label = 16; break;
  case 15: 
   var $54=HEAP8[($43)];
   var $_03_off0 = $54;label = 16; break;
  case 16: 
   var $_03_off0;
   var $55=$__ct;
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+36)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=FUNCTION_TABLE[$58]($__ct, $_03_off0, 0);
   var $60=(($59 << 24) >> 24)==37;
   if ($60) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $62=HEAP32[(($__err)>>2)];
   var $63=$62 | 4;
   HEAP32[(($__err)>>2)]=$63;
   label = 34; break;
  case 18: 
   var $65=HEAP32[(($1)>>2)];
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($65+16)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($67)|(0))==(($69)|(0));
   if ($70) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $72=$65;
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73+40)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=FUNCTION_TABLE[$75]($65);
   label = 21; break;
  case 20: 
   var $78=(($67+1)|0);
   HEAP32[(($66)>>2)]=$78;
   label = 21; break;
  case 21: 
   var $79=HEAP32[(($1)>>2)];
   var $80=(($79)|(0))==0;
   if ($80) { var $94 = 0;label = 26; break; } else { label = 22; break; }
  case 22: 
   var $82=(($79+12)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($79+16)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0))==(($85)|(0));
   if ($86) { label = 23; break; } else { var $94 = $79;label = 26; break; }
  case 23: 
   var $87=$79;
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+36)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=FUNCTION_TABLE[$90]($79);
   var $92=(($91)|(0))==-1;
   if ($92) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $_pre8=HEAP32[(($1)>>2)];
   var $94 = $_pre8;label = 26; break;
  case 25: 
   HEAP32[(($1)>>2)]=0;
   var $94 = 0;label = 26; break;
  case 26: 
   var $94;
   var $95=(($94)|(0))==0;
   if ($39) { label = 31; break; } else { label = 27; break; }
  case 27: 
   var $97=(($40+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($40+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $102=$40;
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+36)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=FUNCTION_TABLE[$105]($40);
   var $107=(($106)|(0))==-1;
   if ($107) { label = 30; break; } else { label = 29; break; }
  case 29: 
   if ($95) { label = 34; break; } else { label = 33; break; }
  case 30: 
   HEAP32[(($19)>>2)]=0;
   label = 31; break;
  case 31: 
   if ($95) { label = 33; break; } else { label = 34; break; }
  case 32: 
   var $109=(($40)|(0))==0;
   var $tmp7=$95 ^ $109;
   if ($tmp7) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $111=HEAP32[(($__err)>>2)];
   var $112=$111 | 2;
   HEAP32[(($__err)>>2)]=$112;
   label = 34; break;
  case 34: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { var $17 = 0;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $5=(($2+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($2+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($6)|(0))==(($8)|(0));
   if ($9) { label = 3; break; } else { var $17 = $2;label = 6; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+36)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=FUNCTION_TABLE[$13]($2);
   var $15=(($14)|(0))==-1;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $_pre=HEAP32[(($1)>>2)];
   var $17 = $_pre;label = 6; break;
  case 5: 
   HEAP32[(($1)>>2)]=0;
   var $17 = 0;label = 6; break;
  case 6: 
   var $17;
   var $18=(($17)|(0))==0;
   var $19=(($__e)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==0;
   if ($21) { label = 11; break; } else { label = 7; break; }
  case 7: 
   var $23=(($20+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20+16)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($24)|(0))==(($26)|(0));
   if ($27) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $28=$20;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+36)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=FUNCTION_TABLE[$31]($20);
   var $33=(($32)|(0))==-1;
   if ($33) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($19)>>2)]=0;
   label = 11; break;
  case 10: 
   if ($18) { var $39 = $20;label = 13; break; } else { label = 12; break; }
  case 11: 
   if ($18) { label = 12; break; } else { var $39 = 0;label = 13; break; }
  case 12: 
   var $36=HEAP32[(($__err)>>2)];
   var $37=$36 | 6;
   HEAP32[(($__err)>>2)]=$37;
   var $_04 = 0;label = 53; break;
  case 13: 
   var $39;
   var $40=HEAP32[(($1)>>2)];
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($40+16)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($42)|(0))==(($44)|(0));
   if ($45) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $47=$40;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+36)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=FUNCTION_TABLE[$50]($40);
   var $extract_t=(($51) & 255);
   var $_09_off0 = $extract_t;label = 16; break;
  case 15: 
   var $53=HEAP8[($42)];
   var $_09_off0 = $53;label = 16; break;
  case 16: 
   var $_09_off0;
   var $isascii13=(($_09_off0 << 24) >> 24) > -1;
   if ($isascii13) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $54=(($_09_off0 << 24) >> 24);
   var $55=(($__ct+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+($54<<1))|0);
   var $58=HEAP16[(($57)>>1)];
   var $59=$58 & 2048;
   var $phitmp=(($59 << 16) >> 16)==0;
   if ($phitmp) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $60=HEAP32[(($__err)>>2)];
   var $61=$60 | 4;
   HEAP32[(($__err)>>2)]=$61;
   var $_04 = 0;label = 53; break;
  case 19: 
   var $63=$__ct;
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+36)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=FUNCTION_TABLE[$66]($__ct, $_09_off0, 0);
   var $68=(($67 << 24) >> 24);
   var $69=HEAP32[(($1)>>2)];
   var $70=(($69+12)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69+16)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71)|(0))==(($73)|(0));
   if ($74) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $76=$69;
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+40)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=FUNCTION_TABLE[$79]($69);
   var $__r_0_in = $68;var $_0_in = $__n;var $83 = $39;label = 22; break;
  case 21: 
   var $82=(($71+1)|0);
   HEAP32[(($70)>>2)]=$82;
   var $__r_0_in = $68;var $_0_in = $__n;var $83 = $39;label = 22; break;
  case 22: 
   var $83;
   var $_0_in;
   var $__r_0_in;
   var $__r_0=((($__r_0_in)-(48))|0);
   var $_0=((($_0_in)-(1))|0);
   var $84=HEAP32[(($1)>>2)];
   var $85=(($84)|(0))==0;
   if ($85) { var $99 = 0;label = 27; break; } else { label = 23; break; }
  case 23: 
   var $87=(($84+12)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($84+16)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($88)|(0))==(($90)|(0));
   if ($91) { label = 24; break; } else { var $99 = $84;label = 27; break; }
  case 24: 
   var $92=$84;
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+36)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=FUNCTION_TABLE[$95]($84);
   var $97=(($96)|(0))==-1;
   if ($97) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $_pre25=HEAP32[(($1)>>2)];
   var $99 = $_pre25;label = 27; break;
  case 26: 
   HEAP32[(($1)>>2)]=0;
   var $99 = 0;label = 27; break;
  case 27: 
   var $99;
   var $100=(($99)|(0))==0;
   var $101=(($83)|(0))==0;
   if ($101) { var $117 = $99;var $116 = 0;label = 32; break; } else { label = 28; break; }
  case 28: 
   var $103=(($83+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($83+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 29; break; } else { var $115 = $83;label = 31; break; }
  case 29: 
   var $108=$83;
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+36)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=FUNCTION_TABLE[$111]($83);
   var $113=(($112)|(0))==-1;
   if ($113) { label = 30; break; } else { var $115 = $83;label = 31; break; }
  case 30: 
   HEAP32[(($19)>>2)]=0;
   var $115 = 0;label = 31; break;
  case 31: 
   var $115;
   var $_pr=HEAP32[(($1)>>2)];
   var $117 = $_pr;var $116 = $115;label = 32; break;
  case 32: 
   var $116;
   var $117;
   var $118=(($116)|(0))==0;
   var $119=$100 ^ $118;
   var $120=(($_0)|(0)) > 0;
   var $_=$119 & $120;
   if ($_) { label = 33; break; } else { label = 41; break; }
  case 33: 
   var $122=(($117+12)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($117+16)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($123)|(0))==(($125)|(0));
   if ($126) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $128=$117;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+36)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=FUNCTION_TABLE[$131]($117);
   var $extract_t16=(($132) & 255);
   var $_05_off0 = $extract_t16;label = 36; break;
  case 35: 
   var $134=HEAP8[($123)];
   var $_05_off0 = $134;label = 36; break;
  case 36: 
   var $_05_off0;
   var $isascii18=(($_05_off0 << 24) >> 24) > -1;
   if ($isascii18) { label = 37; break; } else { var $_04 = $__r_0;label = 53; break; }
  case 37: 
   var $135=(($_05_off0 << 24) >> 24);
   var $136=HEAP32[(($55)>>2)];
   var $137=(($136+($135<<1))|0);
   var $138=HEAP16[(($137)>>1)];
   var $139=$138 & 2048;
   var $phitmp19=(($139 << 16) >> 16)==0;
   if ($phitmp19) { var $_04 = $__r_0;label = 53; break; } else { label = 38; break; }
  case 38: 
   var $141=((($__r_0)*(10))&-1);
   var $142=HEAP32[(($63)>>2)];
   var $143=(($142+36)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=FUNCTION_TABLE[$144]($__ct, $_05_off0, 0);
   var $146=(($145 << 24) >> 24);
   var $147=((($146)+($141))|0);
   var $148=HEAP32[(($1)>>2)];
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+40)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=FUNCTION_TABLE[$158]($148);
   var $__r_0_in = $147;var $_0_in = $_0;var $83 = $116;label = 22; break;
  case 40: 
   var $161=(($150+1)|0);
   HEAP32[(($149)>>2)]=$161;
   var $__r_0_in = $147;var $_0_in = $_0;var $83 = $116;label = 22; break;
  case 41: 
   var $163=(($117)|(0))==0;
   if ($163) { var $177 = 0;label = 46; break; } else { label = 42; break; }
  case 42: 
   var $165=(($117+12)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($117+16)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=(($166)|(0))==(($168)|(0));
   if ($169) { label = 43; break; } else { var $177 = $117;label = 46; break; }
  case 43: 
   var $170=$117;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171+36)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=FUNCTION_TABLE[$173]($117);
   var $175=(($174)|(0))==-1;
   if ($175) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $_pre26=HEAP32[(($1)>>2)];
   var $177 = $_pre26;label = 46; break;
  case 45: 
   HEAP32[(($1)>>2)]=0;
   var $177 = 0;label = 46; break;
  case 46: 
   var $177;
   var $178=(($177)|(0))==0;
   if ($118) { label = 51; break; } else { label = 47; break; }
  case 47: 
   var $180=(($116+12)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($116+16)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181)|(0))==(($183)|(0));
   if ($184) { label = 48; break; } else { label = 50; break; }
  case 48: 
   var $185=$116;
   var $186=HEAP32[(($185)>>2)];
   var $187=(($186+36)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=FUNCTION_TABLE[$188]($116);
   var $190=(($189)|(0))==-1;
   if ($190) { label = 49; break; } else { label = 50; break; }
  case 49: 
   HEAP32[(($19)>>2)]=0;
   label = 51; break;
  case 50: 
   if ($178) { var $_04 = $__r_0;label = 53; break; } else { label = 52; break; }
  case 51: 
   if ($178) { label = 52; break; } else { var $_04 = $__r_0;label = 53; break; }
  case 52: 
   var $193=HEAP32[(($__err)>>2)];
   var $194=$193 | 2;
   HEAP32[(($__err)>>2)]=$194;
   var $_04 = $__r_0;label = 53; break;
  case 53: 
   var $_04;
   STACKTOP = sp;
   return $_04;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $1=(sp)+(16);
   var $2=(sp)+(24);
   var $3=(sp)+(32);
   var $4=(sp)+(40);
   __ZNKSt3__18ios_base6getlocEv($1, $__iob);
   var $5=(($1)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $8=HEAP32[((((13696)|0))>>2)];
   var $9=(($8)|(0))==-1;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($__p_i_i_i)|0);
   HEAP32[(($11)>>2)]=13696;
   var $12=(($__p_i_i_i+4)|0);
   HEAP32[(($12)>>2)]=(26);
   var $13=(($__p_i_i_i+8)|0);
   HEAP32[(($13)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $7, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 26; break; }
  case 3: 
   var $14=HEAP32[((((13700)|0))>>2)];
   var $15=((($14)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $16=(($6+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($6+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$17;
   var $21=$19;
   var $22=((($20)-($21))|0);
   var $23=$22 >> 2;
   var $24=(($23)>>>(0)) > (($15)>>>(0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=(($19+($15<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=___cxa_allocate_exception(4);
   var $29=$28;
   __ZNSt8bad_castC2Ev($29);
   (function() { try { __THREW__ = 0; return ___cxa_throw($28, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 26; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $30=$26;
   var $31=HEAP32[(($5)>>2)];
   var $32=(($31)|0);
   var $33=__ZNSt3__114__shared_count16__release_sharedEv($32);
   HEAP32[(($__err)>>2)]=0;
   var $34=(($__fmtb)|(0))==(($__fmte)|(0));
   var $_phi_trans_insert_pre_pre=(($__b)|0);
   if ($34) { label = 71; break; } else { label = 8; break; }
  case 8: 
   var $35=(($__e)|0);
   var $36=$26;
   var $37=$26;
   var $38=$26;
   var $39=$this;
   var $40=(($3)|0);
   var $41=(($4)|0);
   var $42=(($2)|0);
   var $_06_ph26 = $__fmtb;var $_pre27 = 0;label = 9; break;
  case 9: 
   var $_pre27;
   var $_06_ph26;
   var $44 = $_pre27;label = 10; break;
  case 10: 
   var $44;
   var $45=(($44)|(0))==0;
   if ($45) { label = 11; break; } else { label = 71; break; }
  case 11: 
   var $47=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { var $65 = 0;label = 17; break; } else { label = 12; break; }
  case 12: 
   var $50=(($47+12)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($47+16)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($51)|(0))==(($53)|(0));
   if ($54) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $56=$47;
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+36)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=FUNCTION_TABLE[$59]($47);
   var $_012 = $60;label = 15; break;
  case 14: 
   var $62=HEAP32[(($51)>>2)];
   var $_012 = $62;label = 15; break;
  case 15: 
   var $_012;
   var $63=(($_012)|(0))==-1;
   if ($63) { label = 16; break; } else { var $65 = $47;label = 17; break; }
  case 16: 
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
   var $65 = 0;label = 17; break;
  case 17: 
   var $65;
   var $66=(($65)|(0))==0;
   var $67=HEAP32[(($35)>>2)];
   var $68=(($67)|(0))==0;
   if ($68) { label = 23; break; } else { label = 18; break; }
  case 18: 
   var $70=(($67+12)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($67+16)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71)|(0))==(($73)|(0));
   if ($74) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $76=$67;
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+36)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=FUNCTION_TABLE[$79]($67);
   var $_011 = $80;label = 21; break;
  case 20: 
   var $82=HEAP32[(($71)>>2)];
   var $_011 = $82;label = 21; break;
  case 21: 
   var $_011;
   var $83=(($_011)|(0))==-1;
   if ($83) { label = 22; break; } else { label = 24; break; }
  case 22: 
   HEAP32[(($35)>>2)]=0;
   label = 23; break;
  case 23: 
   if ($66) { label = 25; break; } else { var $93 = 0;label = 27; break; }
  case 24: 
   var $85=(($67)|(0))==0;
   var $tmp13=$66 ^ $85;
   if ($tmp13) { var $93 = $67;label = 27; break; } else { label = 25; break; }
  case 25: 
   HEAP32[(($__err)>>2)]=4;
   var $248 = $65;label = 72; break;
  case 26: 
   var $88$0 = ___cxa_find_matching_catch(-1, -1); $88$1 = tempRet0;
   var $89=HEAP32[(($5)>>2)];
   var $90=(($89)|0);
   var $91=__ZNSt3__114__shared_count16__release_sharedEv($90);
   ___resumeException($88$0)
  case 27: 
   var $93;
   var $94=HEAP32[(($_06_ph26)>>2)];
   var $95=HEAP32[(($36)>>2)];
   var $96=(($95+52)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=FUNCTION_TABLE[$97]($30, $94, 0);
   var $99=(($98 << 24) >> 24)==37;
   if ($99) { label = 28; break; } else { label = 37; break; }
  case 28: 
   var $101=(($_06_ph26+4)|0);
   var $102=(($101)|(0))==(($__fmte)|(0));
   if ($102) { label = 29; break; } else { label = 30; break; }
  case 29: 
   HEAP32[(($__err)>>2)]=4;
   var $248 = $65;label = 72; break;
  case 30: 
   var $105=HEAP32[(($101)>>2)];
   var $106=HEAP32[(($36)>>2)];
   var $107=(($106+52)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=FUNCTION_TABLE[$108]($30, $105, 0);
   if ((($109 << 24) >> 24)==69 | (($109 << 24) >> 24)==48) {
    label = 31; break;
   }
   else {
   var $__opt_0 = 0;var $__cmd_0 = $109;var $_1 = $101;label = 34; break;
   }
  case 31: 
   var $111=(($_06_ph26+8)|0);
   var $112=(($111)|(0))==(($__fmte)|(0));
   if ($112) { label = 32; break; } else { label = 33; break; }
  case 32: 
   HEAP32[(($__err)>>2)]=4;
   var $248 = $65;label = 72; break;
  case 33: 
   var $115=HEAP32[(($111)>>2)];
   var $116=HEAP32[(($36)>>2)];
   var $117=(($116+52)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=FUNCTION_TABLE[$118]($30, $115, 0);
   var $__opt_0 = $109;var $__cmd_0 = $119;var $_1 = $111;label = 34; break;
  case 34: 
   var $_1;
   var $__cmd_0;
   var $__opt_0;
   var $121=HEAP32[(($39)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   HEAP32[(($40)>>2)]=$65;
   HEAP32[(($41)>>2)]=$93;
   FUNCTION_TABLE[$123]($2, $this, $3, $4, $__iob, $__err, $__tm, $__cmd_0, $__opt_0);
   var $124=HEAP32[(($42)>>2)];
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$124;
   var $125=(($_1+4)|0);
   var $_06_ph_be = $125;label = 35; break;
  case 35: 
   var $_06_ph_be;
   var $126=(($_06_ph_be)|(0))==(($__fmte)|(0));
   if ($126) { label = 71; break; } else { label = 36; break; }
  case 36: 
   var $_pre27_pre=HEAP32[(($__err)>>2)];
   var $_06_ph26 = $_06_ph_be;var $_pre27 = $_pre27_pre;label = 9; break;
  case 37: 
   var $128=HEAP32[(($_06_ph26)>>2)];
   var $129=HEAP32[(($37)>>2)];
   var $130=(($129+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=FUNCTION_TABLE[$131]($30, 8192, $128);
   if ($132) { var $_06_pn = $_06_ph26;label = 38; break; } else { label = 62; break; }
  case 38: 
   var $_06_pn;
   var $_2=(($_06_pn+4)|0);
   var $133=(($_2)|(0))==(($__fmte)|(0));
   if ($133) { var $_2_lcssa = $__fmte;label = 40; break; } else { label = 39; break; }
  case 39: 
   var $135=HEAP32[(($_2)>>2)];
   var $136=HEAP32[(($37)>>2)];
   var $137=(($136+12)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=FUNCTION_TABLE[$138]($30, 8192, $135);
   if ($139) { var $_06_pn = $_2;label = 38; break; } else { var $_2_lcssa = $_2;label = 40; break; }
  case 40: 
   var $_2_lcssa;
   var $141 = $65;var $140 = $93;label = 41; break;
  case 41: 
   var $140;
   var $141;
   var $142=(($141)|(0))==0;
   if ($142) { var $159 = 0;label = 47; break; } else { label = 42; break; }
  case 42: 
   var $144=(($141+12)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($141+16)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($145)|(0))==(($147)|(0));
   if ($148) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $150=$141;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+36)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=FUNCTION_TABLE[$153]($141);
   var $_010 = $154;label = 45; break;
  case 44: 
   var $156=HEAP32[(($145)>>2)];
   var $_010 = $156;label = 45; break;
  case 45: 
   var $_010;
   var $157=(($_010)|(0))==-1;
   if ($157) { label = 46; break; } else { var $159 = $141;label = 47; break; }
  case 46: 
   HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
   var $159 = 0;label = 47; break;
  case 47: 
   var $159;
   var $160=(($159)|(0))==0;
   var $161=(($140)|(0))==0;
   if ($161) { label = 53; break; } else { label = 48; break; }
  case 48: 
   var $163=(($140+12)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($140+16)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($164)|(0))==(($166)|(0));
   if ($167) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $169=$140;
   var $170=HEAP32[(($169)>>2)];
   var $171=(($170+36)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=FUNCTION_TABLE[$172]($140);
   var $_09 = $173;label = 51; break;
  case 50: 
   var $175=HEAP32[(($164)>>2)];
   var $_09 = $175;label = 51; break;
  case 51: 
   var $_09;
   var $176=(($_09)|(0))==-1;
   if ($176) { label = 52; break; } else { label = 54; break; }
  case 52: 
   HEAP32[(($35)>>2)]=0;
   label = 53; break;
  case 53: 
   if ($160) { var $_06_ph_be = $_2_lcssa;label = 35; break; } else { var $181 = 0;label = 55; break; }
  case 54: 
   var $178=(($140)|(0))==0;
   var $179=$160 ^ $178;
   if ($179) { var $181 = $140;label = 55; break; } else { var $_06_ph_be = $_2_lcssa;label = 35; break; }
  case 55: 
   var $181;
   var $182=(($159+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($159+16)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)|(0))==(($185)|(0));
   if ($186) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $188=$159;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+36)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=FUNCTION_TABLE[$191]($159);
   var $_08 = $192;label = 58; break;
  case 57: 
   var $194=HEAP32[(($183)>>2)];
   var $_08 = $194;label = 58; break;
  case 58: 
   var $_08;
   var $195=HEAP32[(($37)>>2)];
   var $196=(($195+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=FUNCTION_TABLE[$197]($30, 8192, $_08);
   if ($198) { label = 59; break; } else { var $_06_ph_be = $_2_lcssa;label = 35; break; }
  case 59: 
   var $200=HEAP32[(($182)>>2)];
   var $201=HEAP32[(($184)>>2)];
   var $202=(($200)|(0))==(($201)|(0));
   if ($202) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $204=$159;
   var $205=HEAP32[(($204)>>2)];
   var $206=(($205+40)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=FUNCTION_TABLE[$207]($159);
   var $141 = $159;var $140 = $181;label = 41; break;
  case 61: 
   var $210=(($200+4)|0);
   HEAP32[(($182)>>2)]=$210;
   var $141 = $159;var $140 = $181;label = 41; break;
  case 62: 
   var $212=(($65+12)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=(($65+16)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=(($213)|(0))==(($215)|(0));
   if ($216) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $218=$65;
   var $219=HEAP32[(($218)>>2)];
   var $220=(($219+36)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=FUNCTION_TABLE[$221]($65);
   var $_05 = $222;label = 65; break;
  case 64: 
   var $224=HEAP32[(($213)>>2)];
   var $_05 = $224;label = 65; break;
  case 65: 
   var $_05;
   var $225=HEAP32[(($38)>>2)];
   var $226=(($225+28)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=FUNCTION_TABLE[$227]($30, $_05);
   var $229=HEAP32[(($_06_ph26)>>2)];
   var $230=HEAP32[(($38)>>2)];
   var $231=(($230+28)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=FUNCTION_TABLE[$232]($30, $229);
   var $234=(($228)|(0))==(($233)|(0));
   if ($234) { label = 66; break; } else { label = 70; break; }
  case 66: 
   var $236=HEAP32[(($212)>>2)];
   var $237=HEAP32[(($214)>>2)];
   var $238=(($236)|(0))==(($237)|(0));
   if ($238) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $240=$65;
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241+40)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=FUNCTION_TABLE[$243]($65);
   label = 69; break;
  case 68: 
   var $246=(($236+4)|0);
   HEAP32[(($212)>>2)]=$246;
   label = 69; break;
  case 69: 
   var $247=(($_06_ph26+4)|0);
   var $_06_ph_be = $247;label = 35; break;
  case 70: 
   HEAP32[(($__err)>>2)]=4;
   var $44 = 4;label = 10; break;
  case 71: 
   var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
   var $248 = $_pre;label = 72; break;
  case 72: 
   var $248;
   var $249=(($__b)|0);
   var $250=(($248)|(0))==0;
   if ($250) { label = 78; break; } else { label = 73; break; }
  case 73: 
   var $252=(($248+12)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=(($248+16)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=(($253)|(0))==(($255)|(0));
   if ($256) { label = 74; break; } else { label = 75; break; }
  case 74: 
   var $258=$248;
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259+36)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=FUNCTION_TABLE[$261]($248);
   var $_03 = $262;label = 76; break;
  case 75: 
   var $264=HEAP32[(($253)>>2)];
   var $_03 = $264;label = 76; break;
  case 76: 
   var $_03;
   var $265=(($_03)|(0))==-1;
   if ($265) { label = 77; break; } else { label = 78; break; }
  case 77: 
   HEAP32[(($249)>>2)]=0;
   label = 78; break;
  case 78: 
   var $267=HEAP32[(($249)>>2)];
   var $268=(($267)|(0))==0;
   var $269=(($__e)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=(($270)|(0))==0;
   if ($271) { label = 84; break; } else { label = 79; break; }
  case 79: 
   var $273=(($270+12)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($270+16)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=(($274)|(0))==(($276)|(0));
   if ($277) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $279=$270;
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280+36)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=FUNCTION_TABLE[$282]($270);
   var $_0 = $283;label = 82; break;
  case 81: 
   var $285=HEAP32[(($274)>>2)];
   var $_0 = $285;label = 82; break;
  case 82: 
   var $_0;
   var $286=(($_0)|(0))==-1;
   if ($286) { label = 83; break; } else { label = 85; break; }
  case 83: 
   HEAP32[(($269)>>2)]=0;
   label = 84; break;
  case 84: 
   if ($268) { label = 86; break; } else { label = 87; break; }
  case 85: 
   var $288=(($270)|(0))==0;
   var $tmp=$268 ^ $288;
   if ($tmp) { label = 87; break; } else { label = 86; break; }
  case 86: 
   var $290=HEAP32[(($__err)>>2)];
   var $291=$290 | 2;
   HEAP32[(($__err)>>2)]=$291;
   label = 87; break;
  case 87: 
   var $293=(($agg_result)|0);
   HEAP32[(($293)>>2)]=$267;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 var label = 0;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, $1, $2, $__iob, $__err, $__tm, ((2240)|0), ((2272)|0));
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(sp)+(8);
   var $3=(($this+8)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+20)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=FUNCTION_TABLE[$7]($3);
   var $9=(($__b)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($1)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=(($__e)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($2)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=$8;
   var $16=HEAP8[($15)];
   var $17=$16 & 1;
   var $18=(($17 << 24) >> 24)==0;
   if ($18) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $20=(($8+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $26 = $21;var $25 = $21;label = 4; break;
  case 3: 
   var $23=(($8+4)|0);
   var $24=(($8+4)|0);
   var $26 = $24;var $25 = $23;label = 4; break;
  case 4: 
   var $25;
   var $26;
   var $27=(($16)&(255));
   var $28=$27 & 1;
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $31=(($8+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $35 = $32;label = 7; break;
  case 6: 
   var $34=$27 >>> 1;
   var $35 = $34;label = 7; break;
  case 7: 
   var $35;
   var $36=(($26+($35<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, $1, $2, $__iob, $__err, $__tm, $25, $36);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13696)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13696;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $12=HEAP32[((((13700)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__e)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $35=(($this+8)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=HEAP32[(($37)>>2)];
   var $39=FUNCTION_TABLE[$38]($35);
   var $40=(($1)|0);
   HEAP32[(($40)>>2)]=$33;
   var $41=(($39+168)|0);
   var $42=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $39, $41, $28, $__err, 0);
   var $43=$42;
   var $44=$39;
   var $45=((($43)-($44))|0);
   var $46=(($45)|(0)) < 168;
   if ($46) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $48=(($__tm+24)|0);
   var $49=((((($45)|(0)))/(12))&-1);
   var $50=((((($49)|(0)))%(7))&-1);
   HEAP32[(($48)>>2)]=$50;
   label = 9; break;
  case 9: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $51=(($__b)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($agg_result)|0);
   HEAP32[(($53)>>2)]=$52;
   STACKTOP = sp;
   return;
  case 10: 
   var $55$0 = ___cxa_find_matching_catch(-1, -1); $55$1 = tempRet0;
   var $56=HEAP32[(($3)>>2)];
   var $57=(($56)|0);
   var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
   ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13696)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13696;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $12=HEAP32[((((13700)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__e)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $35=(($this+8)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+4)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=FUNCTION_TABLE[$39]($35);
   var $41=(($1)|0);
   HEAP32[(($41)>>2)]=$33;
   var $42=(($40+288)|0);
   var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $40, $42, $28, $__err, 0);
   var $44=$43;
   var $45=$40;
   var $46=((($44)-($45))|0);
   var $47=(($46)|(0)) < 288;
   if ($47) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $49=(($__tm+16)|0);
   var $50=((((($46)|(0)))/(12))&-1);
   var $51=((((($50)|(0)))%(12))&-1);
   HEAP32[(($49)>>2)]=$51;
   label = 9; break;
  case 9: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $52=(($__b)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($agg_result)|0);
   HEAP32[(($54)>>2)]=$53;
   STACKTOP = sp;
   return;
  case 10: 
   var $56$0 = ___cxa_find_matching_catch(-1, -1); $56$1 = tempRet0;
   var $57=HEAP32[(($3)>>2)];
   var $58=(($57)|0);
   var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
   ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $__p_i_i_i=(sp)+(8);
   var $2=(sp)+(24);
   __ZNKSt3__18ios_base6getlocEv($2, $__iob);
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $6=HEAP32[((((13696)|0))>>2)];
   var $7=(($6)|(0))==-1;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($__p_i_i_i)|0);
   HEAP32[(($9)>>2)]=13696;
   var $10=(($__p_i_i_i+4)|0);
   HEAP32[(($10)>>2)]=(26);
   var $11=(($__p_i_i_i+8)|0);
   HEAP32[(($11)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $5, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $12=HEAP32[((((13700)|0))>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($4+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($4+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   (function() { try { __THREW__ = 0; return ___cxa_throw($26, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 13; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $28=$24;
   var $29=HEAP32[(($3)>>2)];
   var $30=(($29)|0);
   var $31=__ZNSt3__114__shared_count16__release_sharedEv($30);
   var $32=(($__tm+20)|0);
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$1;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $36=(($1)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $1, $__err, $28, 4);
   var $38=HEAP32[(($__err)>>2)];
   var $39=$38 & 4;
   var $40=(($39)|(0))==0;
   if ($40) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $42=(($37)|(0)) < 69;
   if ($42) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $44=((($37)+(2000))|0);
   var $__t_0_i = $44;label = 11; break;
  case 10: 
   var $_off_i=((($37)-(69))|0);
   var $46=(($_off_i)>>>(0)) < 31;
   var $47=((($37)+(1900))|0);
   var $__i=$46 ? $47 : $37;
   var $__t_0_i = $__i;label = 11; break;
  case 11: 
   var $__t_0_i;
   var $49=((($__t_0_i)-(1900))|0);
   HEAP32[(($32)>>2)]=$49;
   label = 12; break;
  case 12: 
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $50=(($__b)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($agg_result)|0);
   HEAP32[(($52)>>2)]=$51;
   STACKTOP = sp;
   return;
  case 13: 
   var $54$0 = ___cxa_find_matching_catch(-1, -1); $54$1 = tempRet0;
   var $55=HEAP32[(($3)>>2)];
   var $56=(($55)|0);
   var $57=__ZNSt3__114__shared_count16__release_sharedEv($56);
   ___resumeException($54$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2=sp;
   var $3=(sp)+(8);
   var $4=(sp)+(16);
   var $5=(sp)+(24);
   var $6=(sp)+(32);
   var $7=(sp)+(40);
   var $8=(sp)+(48);
   var $9=(sp)+(56);
   var $10=(sp)+(64);
   var $11=(sp)+(72);
   var $12=(sp)+(80);
   var $13=(sp)+(88);
   var $__p_i_i_i=(sp)+(96);
   var $14=(sp)+(112);
   var $15=(sp)+(120);
   var $16=(sp)+(128);
   var $17=(sp)+(136);
   var $18=(sp)+(144);
   var $19=(sp)+(152);
   var $20=(sp)+(160);
   var $21=(sp)+(168);
   var $22=(sp)+(176);
   var $23=(sp)+(184);
   var $24=(sp)+(192);
   var $25=(sp)+(200);
   var $26=(sp)+(208);
   var $27=(sp)+(216);
   var $28=(sp)+(224);
   var $29=(sp)+(232);
   var $30=(sp)+(240);
   var $31=(sp)+(248);
   var $32=(sp)+(256);
   var $33=(sp)+(264);
   var $34=(sp)+(272);
   var $35=(sp)+(280);
   var $36=(sp)+(288);
   var $37=(sp)+(296);
   var $38=(sp)+(304);
   var $39=(sp)+(312);
   var $40=(sp)+(320);
   HEAP32[(($__err)>>2)]=0;
   __ZNKSt3__18ios_base6getlocEv($14, $__iob);
   var $41=(($14)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $44=HEAP32[((((13696)|0))>>2)];
   var $45=(($44)|(0))==-1;
   if ($45) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $47=(($__p_i_i_i)|0);
   HEAP32[(($47)>>2)]=13696;
   var $48=(($__p_i_i_i+4)|0);
   HEAP32[(($48)>>2)]=(26);
   var $49=(($__p_i_i_i+8)|0);
   HEAP32[(($49)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $43, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $50=HEAP32[((((13700)|0))>>2)];
   var $51=((($50)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $52=(($42+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($42+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$53;
   var $57=$55;
   var $58=((($56)-($57))|0);
   var $59=$58 >> 2;
   var $60=(($59)>>>(0)) > (($51)>>>(0));
   if ($60) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $61=(($55+($51<<2))|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==0;
   if ($63) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $64=___cxa_allocate_exception(4);
   var $65=$64;
   __ZNSt8bad_castC2Ev($65);
   (function() { try { __THREW__ = 0; return ___cxa_throw($64, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $66=$62;
   var $67=HEAP32[(($41)>>2)];
   var $68=(($67)|0);
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   var $70=(($__fmt << 24) >> 24);
   switch((($70)|(0))) {
   case 98: case 66: case 104:{
    label = 11; break;
   }
   case 99:{
    label = 13; break;
   }
   case 100: case 101:{
    label = 20; break;
   }
   case 68:{
    label = 24; break;
   }
   case 70:{
    label = 25; break;
   }
   case 72:{
    label = 26; break;
   }
   case 73:{
    label = 29; break;
   }
   case 106:{
    label = 33; break;
   }
   case 109:{
    label = 36; break;
   }
   case 77:{
    label = 39; break;
   }
   case 110: case 116:{
    label = 42; break;
   }
   case 112:{
    label = 43; break;
   }
   case 114:{
    label = 44; break;
   }
   case 82:{
    label = 45; break;
   }
   case 83:{
    label = 46; break;
   }
   case 84:{
    label = 49; break;
   }
   case 119:{
    label = 50; break;
   }
   case 120:{
    label = 53; break;
   }
   case 88:{
    label = 54; break;
   }
   case 121:{
    label = 61; break;
   }
   case 89:{
    label = 66; break;
   }
   case 37:{
    label = 68; break;
   }
   case 97: case 65:{
    label = 9; break;
   }
   default: {
   label = 69; break;
   }
   } break; 
  case 8: 
   var $72$0 = ___cxa_find_matching_catch(-1, -1); $72$1 = tempRet0;
   var $73=HEAP32[(($41)>>2)];
   var $74=(($73)|0);
   var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
   ___resumeException($72$0)
  case 9: 
   var $77=(($__e)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$13;
   var $$etemp$2$0=4;
   var $$etemp$2$1=0;
   var $80=(($this+8)|0);
   var $81=$80;
   var $82=HEAP32[(($81)>>2)];
   var $83=HEAP32[(($82)>>2)];
   var $84=FUNCTION_TABLE[$83]($80);
   var $85=(($13)|0);
   HEAP32[(($85)>>2)]=$78;
   var $86=(($84+168)|0);
   var $87=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $13, $84, $86, $66, $__err, 0);
   var $88=$87;
   var $89=$84;
   var $90=((($88)-($89))|0);
   var $91=(($90)|(0)) < 168;
   if ($91) { label = 10; break; } else { label = 70; break; }
  case 10: 
   var $93=(($__tm+24)|0);
   var $94=((((($90)|(0)))/(12))&-1);
   var $95=((((($94)|(0)))%(7))&-1);
   HEAP32[(($93)>>2)]=$95;
   label = 70; break;
  case 11: 
   var $97=(($__e)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$12;
   var $$etemp$3$0=4;
   var $$etemp$3$1=0;
   var $100=(($this+8)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=FUNCTION_TABLE[$104]($100);
   var $106=(($12)|0);
   HEAP32[(($106)>>2)]=$98;
   var $107=(($105+288)|0);
   var $108=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $12, $105, $107, $66, $__err, 0);
   var $109=$108;
   var $110=$105;
   var $111=((($109)-($110))|0);
   var $112=(($111)|(0)) < 288;
   if ($112) { label = 12; break; } else { label = 70; break; }
  case 12: 
   var $114=(($__tm+16)|0);
   var $115=((((($111)|(0)))/(12))&-1);
   var $116=((((($115)|(0)))%(12))&-1);
   HEAP32[(($114)>>2)]=$116;
   label = 70; break;
  case 13: 
   var $118=(($this+8)|0);
   var $119=$118;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+12)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=FUNCTION_TABLE[$122]($118);
   var $124=(($__b)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($16)|0);
   HEAP32[(($126)>>2)]=$125;
   var $127=(($__e)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($17)|0);
   HEAP32[(($129)>>2)]=$128;
   var $130=$123;
   var $131=HEAP8[($130)];
   var $132=$131 & 1;
   var $133=(($132 << 24) >> 24)==0;
   if ($133) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $135=(($123+8)|0);
   var $136=HEAP32[(($135)>>2)];
   var $141 = $136;var $140 = $136;label = 16; break;
  case 15: 
   var $138=(($123+4)|0);
   var $139=(($123+4)|0);
   var $141 = $139;var $140 = $138;label = 16; break;
  case 16: 
   var $140;
   var $141;
   var $142=(($131)&(255));
   var $143=$142 & 1;
   var $144=(($143)|(0))==0;
   if ($144) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $146=(($123+4)|0);
   var $147=HEAP32[(($146)>>2)];
   var $150 = $147;label = 19; break;
  case 18: 
   var $149=$142 >>> 1;
   var $150 = $149;label = 19; break;
  case 19: 
   var $150;
   var $151=(($141+($150<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15, $this, $16, $17, $__iob, $__err, $__tm, $140, $151);
   var $152=(($15)|0);
   var $153=HEAP32[(($152)>>2)];
   HEAP32[(($124)>>2)]=$153;
   label = 70; break;
  case 20: 
   var $155=(($__tm+12)|0);
   var $156=(($__e)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$11;
   var $$etemp$4$0=4;
   var $$etemp$4$1=0;
   var $159=(($11)|0);
   HEAP32[(($159)>>2)]=$157;
   var $160=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $11, $__err, $66, 2);
   var $161=HEAP32[(($__err)>>2)];
   var $162=$161 & 4;
   var $163=(($162)|(0))==0;
   if ($163) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $_off_i=((($160)-(1))|0);
   var $165=(($_off_i)>>>(0)) < 31;
   if ($165) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[(($155)>>2)]=$160;
   label = 70; break;
  case 23: 
   var $168=$161 | 4;
   HEAP32[(($__err)>>2)]=$168;
   label = 70; break;
  case 24: 
   var $170=(($__b)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($19)|0);
   HEAP32[(($172)>>2)]=$171;
   var $173=(($__e)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($20)|0);
   HEAP32[(($175)>>2)]=$174;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18, $this, $19, $20, $__iob, $__err, $__tm, ((2208)|0), ((2240)|0));
   var $176=(($18)|0);
   var $177=HEAP32[(($176)>>2)];
   HEAP32[(($170)>>2)]=$177;
   label = 70; break;
  case 25: 
   var $179=(($__b)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=(($22)|0);
   HEAP32[(($181)>>2)]=$180;
   var $182=(($__e)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($23)|0);
   HEAP32[(($184)>>2)]=$183;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21, $this, $22, $23, $__iob, $__err, $__tm, ((2072)|0), ((2104)|0));
   var $185=(($21)|0);
   var $186=HEAP32[(($185)>>2)];
   HEAP32[(($179)>>2)]=$186;
   label = 70; break;
  case 26: 
   var $188=(($__e)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$10;
   var $$etemp$5$0=4;
   var $$etemp$5$1=0;
   var $191=(($10)|0);
   HEAP32[(($191)>>2)]=$189;
   var $192=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $10, $__err, $66, 2);
   var $193=HEAP32[(($__err)>>2)];
   var $194=$193 & 4;
   var $195=(($194)|(0))==0;
   var $196=(($192)|(0)) < 24;
   var $or_cond_i=$195 & $196;
   if ($or_cond_i) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $198=(($__tm+8)|0);
   HEAP32[(($198)>>2)]=$192;
   label = 70; break;
  case 28: 
   var $200=$193 | 4;
   HEAP32[(($__err)>>2)]=$200;
   label = 70; break;
  case 29: 
   var $202=(($__tm+8)|0);
   var $203=(($__e)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=$9;
   var $$etemp$6$0=4;
   var $$etemp$6$1=0;
   var $206=(($9)|0);
   HEAP32[(($206)>>2)]=$204;
   var $207=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $9, $__err, $66, 2);
   var $208=HEAP32[(($__err)>>2)];
   var $209=$208 & 4;
   var $210=(($209)|(0))==0;
   if ($210) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $_off_i11=((($207)-(1))|0);
   var $212=(($_off_i11)>>>(0)) < 12;
   if ($212) { label = 31; break; } else { label = 32; break; }
  case 31: 
   HEAP32[(($202)>>2)]=$207;
   label = 70; break;
  case 32: 
   var $215=$208 | 4;
   HEAP32[(($__err)>>2)]=$215;
   label = 70; break;
  case 33: 
   var $217=(($__e)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=$8;
   var $$etemp$7$0=4;
   var $$etemp$7$1=0;
   var $220=(($8)|0);
   HEAP32[(($220)>>2)]=$218;
   var $221=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $8, $__err, $66, 3);
   var $222=HEAP32[(($__err)>>2)];
   var $223=$222 & 4;
   var $224=(($223)|(0))==0;
   var $225=(($221)|(0)) < 366;
   var $or_cond_i14=$224 & $225;
   if ($or_cond_i14) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $227=(($__tm+28)|0);
   HEAP32[(($227)>>2)]=$221;
   label = 70; break;
  case 35: 
   var $229=$222 | 4;
   HEAP32[(($__err)>>2)]=$229;
   label = 70; break;
  case 36: 
   var $231=(($__e)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=$7;
   var $$etemp$8$0=4;
   var $$etemp$8$1=0;
   var $234=(($7)|0);
   HEAP32[(($234)>>2)]=$232;
   var $235=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $7, $__err, $66, 2);
   var $236=HEAP32[(($__err)>>2)];
   var $237=$236 & 4;
   var $238=(($237)|(0))==0;
   var $239=(($235)|(0)) < 13;
   var $or_cond_i17=$238 & $239;
   if ($or_cond_i17) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $241=(($__tm+16)|0);
   var $242=((($235)-(1))|0);
   HEAP32[(($241)>>2)]=$242;
   label = 70; break;
  case 38: 
   var $244=$236 | 4;
   HEAP32[(($__err)>>2)]=$244;
   label = 70; break;
  case 39: 
   var $246=(($__e)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=$6;
   var $$etemp$9$0=4;
   var $$etemp$9$1=0;
   var $249=(($6)|0);
   HEAP32[(($249)>>2)]=$247;
   var $250=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $6, $__err, $66, 2);
   var $251=HEAP32[(($__err)>>2)];
   var $252=$251 & 4;
   var $253=(($252)|(0))==0;
   var $254=(($250)|(0)) < 60;
   var $or_cond_i20=$253 & $254;
   if ($or_cond_i20) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $256=(($__tm+4)|0);
   HEAP32[(($256)>>2)]=$250;
   label = 70; break;
  case 41: 
   var $258=$251 | 4;
   HEAP32[(($__err)>>2)]=$258;
   label = 70; break;
  case 42: 
   var $260=(($__e)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=(($24)|0);
   HEAP32[(($262)>>2)]=$261;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $24, $__err, $66);
   label = 70; break;
  case 43: 
   var $264=(($__tm+8)|0);
   var $265=(($__e)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($25)|0);
   HEAP32[(($267)>>2)]=$266;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $264, $__b, $25, $__err, $66);
   label = 70; break;
  case 44: 
   var $269=(($__b)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=(($27)|0);
   HEAP32[(($271)>>2)]=$270;
   var $272=(($__e)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=(($28)|0);
   HEAP32[(($274)>>2)]=$273;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26, $this, $27, $28, $__iob, $__err, $__tm, ((2160)|0), ((2204)|0));
   var $275=(($26)|0);
   var $276=HEAP32[(($275)>>2)];
   HEAP32[(($269)>>2)]=$276;
   label = 70; break;
  case 45: 
   var $278=(($__b)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($30)|0);
   HEAP32[(($280)>>2)]=$279;
   var $281=(($__e)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($31)|0);
   HEAP32[(($283)>>2)]=$282;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29, $this, $30, $31, $__iob, $__err, $__tm, ((2136)|0), ((2156)|0));
   var $284=(($29)|0);
   var $285=HEAP32[(($284)>>2)];
   HEAP32[(($278)>>2)]=$285;
   label = 70; break;
  case 46: 
   var $287=(($__e)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=$5;
   var $$etemp$10$0=4;
   var $$etemp$10$1=0;
   var $290=(($5)|0);
   HEAP32[(($290)>>2)]=$288;
   var $291=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $5, $__err, $66, 2);
   var $292=HEAP32[(($__err)>>2)];
   var $293=$292 & 4;
   var $294=(($293)|(0))==0;
   var $295=(($291)|(0)) < 61;
   var $or_cond_i23=$294 & $295;
   if ($or_cond_i23) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $297=(($__tm)|0);
   HEAP32[(($297)>>2)]=$291;
   label = 70; break;
  case 48: 
   var $299=$292 | 4;
   HEAP32[(($__err)>>2)]=$299;
   label = 70; break;
  case 49: 
   var $301=(($__b)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($33)|0);
   HEAP32[(($303)>>2)]=$302;
   var $304=(($__e)|0);
   var $305=HEAP32[(($304)>>2)];
   var $306=(($34)|0);
   HEAP32[(($306)>>2)]=$305;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32, $this, $33, $34, $__iob, $__err, $__tm, ((2104)|0), ((2136)|0));
   var $307=(($32)|0);
   var $308=HEAP32[(($307)>>2)];
   HEAP32[(($301)>>2)]=$308;
   label = 70; break;
  case 50: 
   var $310=(($__e)|0);
   var $311=HEAP32[(($310)>>2)];
   var $312=$4;
   var $$etemp$11$0=4;
   var $$etemp$11$1=0;
   var $313=(($4)|0);
   HEAP32[(($313)>>2)]=$311;
   var $314=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $4, $__err, $66, 1);
   var $315=HEAP32[(($__err)>>2)];
   var $316=$315 & 4;
   var $317=(($316)|(0))==0;
   var $318=(($314)|(0)) < 7;
   var $or_cond_i26=$317 & $318;
   if ($or_cond_i26) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $320=(($__tm+24)|0);
   HEAP32[(($320)>>2)]=$314;
   label = 70; break;
  case 52: 
   var $322=$315 | 4;
   HEAP32[(($__err)>>2)]=$322;
   label = 70; break;
  case 53: 
   var $324=$this;
   var $325=HEAP32[(($324)>>2)];
   var $326=(($325+20)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328=(($__b)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=(($35)|0);
   HEAP32[(($330)>>2)]=$329;
   var $331=(($__e)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=(($36)|0);
   HEAP32[(($333)>>2)]=$332;
   FUNCTION_TABLE[$327]($agg_result, $this, $35, $36, $__iob, $__err, $__tm);
   label = 71; break;
  case 54: 
   var $335=(($this+8)|0);
   var $336=$335;
   var $337=HEAP32[(($336)>>2)];
   var $338=(($337+24)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=FUNCTION_TABLE[$339]($335);
   var $341=(($__b)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=(($38)|0);
   HEAP32[(($343)>>2)]=$342;
   var $344=(($__e)|0);
   var $345=HEAP32[(($344)>>2)];
   var $346=(($39)|0);
   HEAP32[(($346)>>2)]=$345;
   var $347=$340;
   var $348=HEAP8[($347)];
   var $349=$348 & 1;
   var $350=(($349 << 24) >> 24)==0;
   if ($350) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $352=(($340+8)|0);
   var $353=HEAP32[(($352)>>2)];
   var $358 = $353;var $357 = $353;label = 57; break;
  case 56: 
   var $355=(($340+4)|0);
   var $356=(($340+4)|0);
   var $358 = $356;var $357 = $355;label = 57; break;
  case 57: 
   var $357;
   var $358;
   var $359=(($348)&(255));
   var $360=$359 & 1;
   var $361=(($360)|(0))==0;
   if ($361) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $363=(($340+4)|0);
   var $364=HEAP32[(($363)>>2)];
   var $367 = $364;label = 60; break;
  case 59: 
   var $366=$359 >>> 1;
   var $367 = $366;label = 60; break;
  case 60: 
   var $367;
   var $368=(($358+($367<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37, $this, $38, $39, $__iob, $__err, $__tm, $357, $368);
   var $369=(($37)|0);
   var $370=HEAP32[(($369)>>2)];
   HEAP32[(($341)>>2)]=$370;
   label = 70; break;
  case 61: 
   var $372=(($__tm+20)|0);
   var $373=(($__e)|0);
   var $374=HEAP32[(($373)>>2)];
   var $375=$3;
   var $$etemp$12$0=4;
   var $$etemp$12$1=0;
   var $376=(($3)|0);
   HEAP32[(($376)>>2)]=$374;
   var $377=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $3, $__err, $66, 4);
   var $378=HEAP32[(($__err)>>2)];
   var $379=$378 & 4;
   var $380=(($379)|(0))==0;
   if ($380) { label = 62; break; } else { label = 70; break; }
  case 62: 
   var $382=(($377)|(0)) < 69;
   if ($382) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $384=((($377)+(2000))|0);
   var $__t_0_i = $384;label = 65; break;
  case 64: 
   var $_off_i29=((($377)-(69))|0);
   var $386=(($_off_i29)>>>(0)) < 31;
   var $387=((($377)+(1900))|0);
   var $__i=$386 ? $387 : $377;
   var $__t_0_i = $__i;label = 65; break;
  case 65: 
   var $__t_0_i;
   var $389=((($__t_0_i)-(1900))|0);
   HEAP32[(($372)>>2)]=$389;
   label = 70; break;
  case 66: 
   var $391=(($__e)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=$2;
   var $$etemp$13$0=4;
   var $$etemp$13$1=0;
   var $394=(($2)|0);
   HEAP32[(($394)>>2)]=$392;
   var $395=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $2, $__err, $66, 4);
   var $396=HEAP32[(($__err)>>2)];
   var $397=$396 & 4;
   var $398=(($397)|(0))==0;
   if ($398) { label = 67; break; } else { label = 70; break; }
  case 67: 
   var $400=(($__tm+20)|0);
   var $401=((($395)-(1900))|0);
   HEAP32[(($400)>>2)]=$401;
   label = 70; break;
  case 68: 
   var $403=(($__e)|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=(($40)|0);
   HEAP32[(($405)>>2)]=$404;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $40, $__err, $66);
   label = 70; break;
  case 69: 
   var $407=HEAP32[(($__err)>>2)];
   var $408=$407 | 4;
   HEAP32[(($__err)>>2)]=$408;
   label = 70; break;
  case 70: 
   var $409=(($__b)|0);
   var $410=HEAP32[(($409)>>2)];
   var $411=(($agg_result)|0);
   HEAP32[(($411)>>2)]=$410;
   label = 71; break;
  case 71: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=(($__e)|0);
   var $3=$__ct;
   label = 2; break;
  case 2: 
   var $4=HEAP32[(($1)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { var $22 = 1;label = 9; break; } else { label = 3; break; }
  case 3: 
   var $7=(($4+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($4+16)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($8)|(0))==(($10)|(0));
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $13=$4;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+36)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=FUNCTION_TABLE[$16]($4);
   var $_05 = $17;label = 6; break;
  case 5: 
   var $19=HEAP32[(($8)>>2)];
   var $_05 = $19;label = 6; break;
  case 6: 
   var $_05;
   var $20=(($_05)|(0))==-1;
   if ($20) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $_pre=HEAP32[(($1)>>2)];
   var $phitmp=(($_pre)|(0))==0;
   var $22 = $phitmp;label = 9; break;
  case 8: 
   HEAP32[(($1)>>2)]=0;
   var $22 = 1;label = 9; break;
  case 9: 
   var $22;
   var $23=HEAP32[(($2)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 15; break; } else { label = 10; break; }
  case 10: 
   var $26=(($23+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($23+16)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0))==(($29)|(0));
   if ($30) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $32=$23;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+36)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=FUNCTION_TABLE[$35]($23);
   var $_04 = $36;label = 13; break;
  case 12: 
   var $38=HEAP32[(($27)>>2)];
   var $_04 = $38;label = 13; break;
  case 13: 
   var $_04;
   var $39=(($_04)|(0))==-1;
   if ($39) { label = 14; break; } else { label = 16; break; }
  case 14: 
   HEAP32[(($2)>>2)]=0;
   label = 15; break;
  case 15: 
   if ($22) { var $80 = 0;var $79 = 1;label = 24; break; } else { var $45 = 0;var $44 = 1;label = 17; break; }
  case 16: 
   var $41=(($23)|(0))==0;
   var $42=$22 ^ $41;
   if ($42) { var $45 = $23;var $44 = $41;label = 17; break; } else { var $80 = $23;var $79 = $41;label = 24; break; }
  case 17: 
   var $44;
   var $45;
   var $46=HEAP32[(($1)>>2)];
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($46+16)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($48)|(0))==(($50)|(0));
   if ($51) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $53=$46;
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+36)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=FUNCTION_TABLE[$56]($46);
   var $_03 = $57;label = 20; break;
  case 19: 
   var $59=HEAP32[(($48)>>2)];
   var $_03 = $59;label = 20; break;
  case 20: 
   var $_03;
   var $60=HEAP32[(($3)>>2)];
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=FUNCTION_TABLE[$62]($__ct, 8192, $_03);
   if ($63) { label = 21; break; } else { var $80 = $45;var $79 = $44;label = 24; break; }
  case 21: 
   var $65=HEAP32[(($1)>>2)];
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($65+16)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($67)|(0))==(($69)|(0));
   if ($70) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $72=$65;
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73+40)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=FUNCTION_TABLE[$75]($65);
   label = 2; break;
  case 23: 
   var $78=(($67+4)|0);
   HEAP32[(($66)>>2)]=$78;
   label = 2; break;
  case 24: 
   var $79;
   var $80;
   var $81=HEAP32[(($1)>>2)];
   var $82=(($81)|(0))==0;
   if ($82) { var $99 = 1;label = 31; break; } else { label = 25; break; }
  case 25: 
   var $84=(($81+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($81+16)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($85)|(0))==(($87)|(0));
   if ($88) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $90=$81;
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+36)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=FUNCTION_TABLE[$93]($81);
   var $_01 = $94;label = 28; break;
  case 27: 
   var $96=HEAP32[(($85)>>2)];
   var $_01 = $96;label = 28; break;
  case 28: 
   var $_01;
   var $97=(($_01)|(0))==-1;
   if ($97) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $_pre8=HEAP32[(($1)>>2)];
   var $phitmp9=(($_pre8)|(0))==0;
   var $99 = $phitmp9;label = 31; break;
  case 30: 
   HEAP32[(($1)>>2)]=0;
   var $99 = 1;label = 31; break;
  case 31: 
   var $99;
   if ($79) { label = 37; break; } else { label = 32; break; }
  case 32: 
   var $101=(($80+12)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($80+16)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($102)|(0))==(($104)|(0));
   if ($105) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $107=$80;
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+36)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=FUNCTION_TABLE[$110]($80);
   var $_0 = $111;label = 35; break;
  case 34: 
   var $113=HEAP32[(($102)>>2)];
   var $_0 = $113;label = 35; break;
  case 35: 
   var $_0;
   var $114=(($_0)|(0))==-1;
   if ($114) { label = 36; break; } else { label = 38; break; }
  case 36: 
   HEAP32[(($2)>>2)]=0;
   label = 37; break;
  case 37: 
   if ($99) { label = 39; break; } else { label = 40; break; }
  case 38: 
   var $116=(($80)|(0))==0;
   var $tmp6=$99 ^ $116;
   if ($tmp6) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $118=HEAP32[(($__err)>>2)];
   var $119=$118 | 2;
   HEAP32[(($__err)>>2)]=$119;
   label = 40; break;
  case 40: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2=(($this+8)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=FUNCTION_TABLE[$6]($2);
   var $8=$7;
   var $9=HEAP8[($8)];
   var $10=(($9)&(255));
   var $11=$10 & 1;
   var $12=(($11)|(0))==0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=(($7+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $18 = $15;label = 4; break;
  case 3: 
   var $17=$10 >>> 1;
   var $18 = $17;label = 4; break;
  case 4: 
   var $18;
   var $19=(($7+12)|0);
   var $20=$19;
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$22 & 1;
   var $24=(($23)|(0))==0;
   if ($24) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $26=(($7+16)|0);
   var $27=HEAP32[(($26)>>2)];
   var $30 = $27;label = 7; break;
  case 6: 
   var $29=$22 >>> 1;
   var $30 = $29;label = 7; break;
  case 7: 
   var $30;
   var $31=(((-$30))|0);
   var $32=(($18)|(0))==(($31)|(0));
   if ($32) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $34=HEAP32[(($__err)>>2)];
   var $35=$34 | 4;
   HEAP32[(($__err)>>2)]=$35;
   label = 15; break;
  case 9: 
   var $37=(($__e)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($1)|0);
   HEAP32[(($39)>>2)]=$38;
   var $40=(($7+24)|0);
   var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $1, $7, $40, $__ct, $__err, 0);
   var $42=$41;
   var $43=$7;
   var $44=((($42)-($43))|0);
   var $45=(($41)|(0))==(($7)|(0));
   if ($45) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $47=HEAP32[(($__h)>>2)];
   var $48=(($47)|(0))==12;
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   HEAP32[(($__h)>>2)]=0;
   label = 15; break;
  case 12: 
   var $51=(($44)|(0))==12;
   if ($51) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $53=HEAP32[(($__h)>>2)];
   var $54=(($53)|(0)) < 12;
   if ($54) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $56=((($53)+(12))|0);
   HEAP32[(($__h)>>2)]=$56;
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { var $20 = 1;label = 8; break; } else { label = 2; break; }
  case 2: 
   var $5=(($2+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($2+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($6)|(0))==(($8)|(0));
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($2);
   var $_05 = $15;label = 5; break;
  case 4: 
   var $17=HEAP32[(($6)>>2)];
   var $_05 = $17;label = 5; break;
  case 5: 
   var $_05;
   var $18=(($_05)|(0))==-1;
   if ($18) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $_pre=HEAP32[(($1)>>2)];
   var $phitmp=(($_pre)|(0))==0;
   var $20 = $phitmp;label = 8; break;
  case 7: 
   HEAP32[(($1)>>2)]=0;
   var $20 = 1;label = 8; break;
  case 8: 
   var $20;
   var $21=(($__e)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 14; break; } else { label = 9; break; }
  case 9: 
   var $25=(($22+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($22+16)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0))==(($28)|(0));
   if ($29) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $31=$22;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+36)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=FUNCTION_TABLE[$34]($22);
   var $_04 = $35;label = 12; break;
  case 11: 
   var $37=HEAP32[(($26)>>2)];
   var $_04 = $37;label = 12; break;
  case 12: 
   var $_04;
   var $38=(($_04)|(0))==-1;
   if ($38) { label = 13; break; } else { label = 15; break; }
  case 13: 
   HEAP32[(($21)>>2)]=0;
   label = 14; break;
  case 14: 
   if ($20) { label = 16; break; } else { var $46 = 0;var $45 = 1;label = 17; break; }
  case 15: 
   var $40=(($22)|(0))==0;
   var $tmp=$20 ^ $40;
   if ($tmp) { var $46 = $22;var $45 = $40;label = 17; break; } else { label = 16; break; }
  case 16: 
   var $42=HEAP32[(($__err)>>2)];
   var $43=$42 | 6;
   HEAP32[(($__err)>>2)]=$43;
   label = 41; break;
  case 17: 
   var $45;
   var $46;
   var $47=HEAP32[(($1)>>2)];
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0))==(($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $54=$47;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+36)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=FUNCTION_TABLE[$57]($47);
   var $_03 = $58;label = 20; break;
  case 19: 
   var $60=HEAP32[(($49)>>2)];
   var $_03 = $60;label = 20; break;
  case 20: 
   var $_03;
   var $61=$__ct;
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+52)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=FUNCTION_TABLE[$64]($__ct, $_03, 0);
   var $66=(($65 << 24) >> 24)==37;
   if ($66) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $68=HEAP32[(($__err)>>2)];
   var $69=$68 | 4;
   HEAP32[(($__err)>>2)]=$69;
   label = 41; break;
  case 22: 
   var $71=HEAP32[(($1)>>2)];
   var $72=(($71+12)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71+16)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0))==(($75)|(0));
   if ($76) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $78=$71;
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+40)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=FUNCTION_TABLE[$81]($71);
   label = 25; break;
  case 24: 
   var $84=(($73+4)|0);
   HEAP32[(($72)>>2)]=$84;
   label = 25; break;
  case 25: 
   var $85=HEAP32[(($1)>>2)];
   var $86=(($85)|(0))==0;
   if ($86) { var $103 = 1;label = 32; break; } else { label = 26; break; }
  case 26: 
   var $88=(($85+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85+16)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($89)|(0))==(($91)|(0));
   if ($92) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $94=$85;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95+36)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=FUNCTION_TABLE[$97]($85);
   var $_01 = $98;label = 29; break;
  case 28: 
   var $100=HEAP32[(($89)>>2)];
   var $_01 = $100;label = 29; break;
  case 29: 
   var $_01;
   var $101=(($_01)|(0))==-1;
   if ($101) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $_pre7=HEAP32[(($1)>>2)];
   var $phitmp8=(($_pre7)|(0))==0;
   var $103 = $phitmp8;label = 32; break;
  case 31: 
   HEAP32[(($1)>>2)]=0;
   var $103 = 1;label = 32; break;
  case 32: 
   var $103;
   if ($45) { label = 38; break; } else { label = 33; break; }
  case 33: 
   var $105=(($46+12)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($46+16)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($106)|(0))==(($108)|(0));
   if ($109) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $111=$46;
   var $112=HEAP32[(($111)>>2)];
   var $113=(($112+36)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=FUNCTION_TABLE[$114]($46);
   var $_0 = $115;label = 36; break;
  case 35: 
   var $117=HEAP32[(($106)>>2)];
   var $_0 = $117;label = 36; break;
  case 36: 
   var $_0;
   var $118=(($_0)|(0))==-1;
   if ($118) { label = 37; break; } else { label = 39; break; }
  case 37: 
   HEAP32[(($21)>>2)]=0;
   label = 38; break;
  case 38: 
   if ($103) { label = 40; break; } else { label = 41; break; }
  case 39: 
   var $120=(($46)|(0))==0;
   var $tmp6=$103 ^ $120;
   if ($tmp6) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $122=HEAP32[(($__err)>>2)];
   var $123=$122 | 2;
   HEAP32[(($__err)>>2)]=$123;
   label = 41; break;
  case 41: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { var $20 = 1;label = 8; break; } else { label = 2; break; }
  case 2: 
   var $5=(($2+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($2+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($6)|(0))==(($8)|(0));
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($2);
   var $_011 = $15;label = 5; break;
  case 4: 
   var $17=HEAP32[(($6)>>2)];
   var $_011 = $17;label = 5; break;
  case 5: 
   var $_011;
   var $18=(($_011)|(0))==-1;
   if ($18) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $_pre=HEAP32[(($1)>>2)];
   var $phitmp=(($_pre)|(0))==0;
   var $20 = $phitmp;label = 8; break;
  case 7: 
   HEAP32[(($1)>>2)]=0;
   var $20 = 1;label = 8; break;
  case 8: 
   var $20;
   var $21=(($__e)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { label = 14; break; } else { label = 9; break; }
  case 9: 
   var $25=(($22+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($22+16)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0))==(($28)|(0));
   if ($29) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $31=$22;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+36)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=FUNCTION_TABLE[$34]($22);
   var $_010 = $35;label = 12; break;
  case 11: 
   var $37=HEAP32[(($26)>>2)];
   var $_010 = $37;label = 12; break;
  case 12: 
   var $_010;
   var $38=(($_010)|(0))==-1;
   if ($38) { label = 13; break; } else { label = 15; break; }
  case 13: 
   HEAP32[(($21)>>2)]=0;
   label = 14; break;
  case 14: 
   if ($20) { label = 16; break; } else { var $45 = 0;label = 17; break; }
  case 15: 
   var $40=(($22)|(0))==0;
   var $tmp=$20 ^ $40;
   if ($tmp) { var $45 = $22;label = 17; break; } else { label = 16; break; }
  case 16: 
   var $42=HEAP32[(($__err)>>2)];
   var $43=$42 | 6;
   HEAP32[(($__err)>>2)]=$43;
   var $_04 = 0;label = 63; break;
  case 17: 
   var $45;
   var $46=HEAP32[(($1)>>2)];
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($46+16)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($48)|(0))==(($50)|(0));
   if ($51) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $53=$46;
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+36)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=FUNCTION_TABLE[$56]($46);
   var $_09 = $57;label = 20; break;
  case 19: 
   var $59=HEAP32[(($48)>>2)];
   var $_09 = $59;label = 20; break;
  case 20: 
   var $_09;
   var $60=$__ct;
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=FUNCTION_TABLE[$63]($__ct, 2048, $_09);
   if ($64) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $66=HEAP32[(($__err)>>2)];
   var $67=$66 | 4;
   HEAP32[(($__err)>>2)]=$67;
   var $_04 = 0;label = 63; break;
  case 22: 
   var $69=$__ct;
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+52)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=FUNCTION_TABLE[$72]($__ct, $_09, 0);
   var $74=(($73 << 24) >> 24);
   var $75=HEAP32[(($1)>>2)];
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+40)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=FUNCTION_TABLE[$85]($75);
   var $__r_0_in = $74;var $_0_in = $__n;var $89 = $45;label = 25; break;
  case 24: 
   var $88=(($77+4)|0);
   HEAP32[(($76)>>2)]=$88;
   var $__r_0_in = $74;var $_0_in = $__n;var $89 = $45;label = 25; break;
  case 25: 
   var $89;
   var $_0_in;
   var $__r_0_in;
   var $__r_0=((($__r_0_in)-(48))|0);
   var $_0=((($_0_in)-(1))|0);
   var $90=HEAP32[(($1)>>2)];
   var $91=(($90)|(0))==0;
   if ($91) { var $108 = 0;label = 32; break; } else { label = 26; break; }
  case 26: 
   var $93=(($90+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($90+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($94)|(0))==(($96)|(0));
   if ($97) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $99=$90;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+36)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=FUNCTION_TABLE[$102]($90);
   var $_07 = $103;label = 29; break;
  case 28: 
   var $105=HEAP32[(($94)>>2)];
   var $_07 = $105;label = 29; break;
  case 29: 
   var $_07;
   var $106=(($_07)|(0))==-1;
   if ($106) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $_pre18=HEAP32[(($1)>>2)];
   var $108 = $_pre18;label = 32; break;
  case 31: 
   HEAP32[(($1)>>2)]=0;
   var $108 = 0;label = 32; break;
  case 32: 
   var $108;
   var $109=(($108)|(0))==0;
   var $110=(($89)|(0))==0;
   if ($110) { var $129 = $108;var $128 = 0;label = 39; break; } else { label = 33; break; }
  case 33: 
   var $112=(($89+12)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($89+16)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0))==(($115)|(0));
   if ($116) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $118=$89;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+36)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=FUNCTION_TABLE[$121]($89);
   var $_06 = $122;label = 36; break;
  case 35: 
   var $124=HEAP32[(($113)>>2)];
   var $_06 = $124;label = 36; break;
  case 36: 
   var $_06;
   var $125=(($_06)|(0))==-1;
   if ($125) { label = 37; break; } else { var $127 = $89;label = 38; break; }
  case 37: 
   HEAP32[(($21)>>2)]=0;
   var $127 = 0;label = 38; break;
  case 38: 
   var $127;
   var $_pr=HEAP32[(($1)>>2)];
   var $129 = $_pr;var $128 = $127;label = 39; break;
  case 39: 
   var $128;
   var $129;
   var $130=(($128)|(0))==0;
   var $131=$109 ^ $130;
   var $132=(($_0)|(0)) > 0;
   var $_=$131 & $132;
   if ($_) { label = 40; break; } else { label = 47; break; }
  case 40: 
   var $134=(($129+12)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($129+16)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)|(0))==(($137)|(0));
   if ($138) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $140=$129;
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+36)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=FUNCTION_TABLE[$143]($129);
   var $_05 = $144;label = 43; break;
  case 42: 
   var $146=HEAP32[(($135)>>2)];
   var $_05 = $146;label = 43; break;
  case 43: 
   var $_05;
   var $147=HEAP32[(($60)>>2)];
   var $148=(($147+12)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=FUNCTION_TABLE[$149]($__ct, 2048, $_05);
   if ($150) { label = 44; break; } else { var $_04 = $__r_0;label = 63; break; }
  case 44: 
   var $152=((($__r_0)*(10))&-1);
   var $153=HEAP32[(($69)>>2)];
   var $154=(($153+52)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=FUNCTION_TABLE[$155]($__ct, $_05, 0);
   var $157=(($156 << 24) >> 24);
   var $158=((($157)+($152))|0);
   var $159=HEAP32[(($1)>>2)];
   var $160=(($159+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $166=$159;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+40)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=FUNCTION_TABLE[$169]($159);
   var $__r_0_in = $158;var $_0_in = $_0;var $89 = $128;label = 25; break;
  case 46: 
   var $172=(($161+4)|0);
   HEAP32[(($160)>>2)]=$172;
   var $__r_0_in = $158;var $_0_in = $_0;var $89 = $128;label = 25; break;
  case 47: 
   var $174=(($129)|(0))==0;
   if ($174) { var $191 = 1;label = 54; break; } else { label = 48; break; }
  case 48: 
   var $176=(($129+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($129+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($177)|(0))==(($179)|(0));
   if ($180) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $182=$129;
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183+36)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=FUNCTION_TABLE[$185]($129);
   var $_02 = $186;label = 51; break;
  case 50: 
   var $188=HEAP32[(($177)>>2)];
   var $_02 = $188;label = 51; break;
  case 51: 
   var $_02;
   var $189=(($_02)|(0))==-1;
   if ($189) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $_pre19=HEAP32[(($1)>>2)];
   var $phitmp20=(($_pre19)|(0))==0;
   var $191 = $phitmp20;label = 54; break;
  case 53: 
   HEAP32[(($1)>>2)]=0;
   var $191 = 1;label = 54; break;
  case 54: 
   var $191;
   if ($130) { label = 60; break; } else { label = 55; break; }
  case 55: 
   var $193=(($128+12)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($128+16)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($194)|(0))==(($196)|(0));
   if ($197) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $199=$128;
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200+36)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=FUNCTION_TABLE[$202]($128);
   var $_01 = $203;label = 58; break;
  case 57: 
   var $205=HEAP32[(($194)>>2)];
   var $_01 = $205;label = 58; break;
  case 58: 
   var $_01;
   var $206=(($_01)|(0))==-1;
   if ($206) { label = 59; break; } else { label = 61; break; }
  case 59: 
   HEAP32[(($21)>>2)]=0;
   label = 60; break;
  case 60: 
   if ($191) { label = 62; break; } else { var $_04 = $__r_0;label = 63; break; }
  case 61: 
   var $208=(($128)|(0))==0;
   var $tmp13=$191 ^ $208;
   if ($tmp13) { var $_04 = $__r_0;label = 63; break; } else { label = 62; break; }
  case 62: 
   var $210=HEAP32[(($__err)>>2)];
   var $211=$210 | 2;
   HEAP32[(($__err)>>2)]=$211;
   var $_04 = $__r_0;label = 63; break;
  case 63: 
   var $_04;
   STACKTOP = sp;
   return $_04;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=HEAP8[(14264)];
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $7=___cxa_guard_acquire(14264);
   var $8=(($7)|(0))==0;
   if ($8) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $10 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$10;
   label = 6; break;
  case 5: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1,0); $13$1 = tempRet0;
   var $eh_lpad_body_i$1 = $13$1;var $eh_lpad_body_i$0 = $13$0;label = 9; break;
  case 6: 
   var $15=HEAP32[((12160)>>2)];
   var $16=(($3)|(0))==(($15)|(0));
   if ($16) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $18=HEAP32[(($2)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $20$0 = ___cxa_find_matching_catch(-1, -1,0); $20$1 = tempRet0;
   var $eh_lpad_body_i$1 = $20$1;var $eh_lpad_body_i$0 = $20$0;label = 9; break;
  case 9: 
   var $eh_lpad_body_i$0;
   var $eh_lpad_body_i$1;
   var $21=$eh_lpad_body_i$0;
   ___clang_call_terminate($21);
   throw "Reached an unreachable!";
  case 10: 
   var $22=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($22);
   __ZdlPv($1);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=HEAP8[(14264)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=___cxa_guard_acquire(14264);
   var $7=(($6)|(0))==0;
   if ($7) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $9 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$9;
   label = 6; break;
  case 5: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1,0); $12$1 = tempRet0;
   var $eh_lpad_body_i$1 = $12$1;var $eh_lpad_body_i$0 = $12$0;label = 9; break;
  case 6: 
   var $14=HEAP32[((12160)>>2)];
   var $15=(($2)|(0))==(($14)|(0));
   if ($15) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $17=HEAP32[(($1)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1,0); $19$1 = tempRet0;
   var $eh_lpad_body_i$1 = $19$1;var $eh_lpad_body_i$0 = $19$0;label = 9; break;
  case 9: 
   var $eh_lpad_body_i$0;
   var $eh_lpad_body_i$1;
   var $20=$eh_lpad_body_i$0;
   ___clang_call_terminate($20);
   throw "Reached an unreachable!";
  case 10: 
   var $21=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($21);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $fmt_i=sp;
   var $__nar=(sp)+(8);
   var $3=(($__nar)|0);
   var $4=(($fmt_i)|0);
   var $$etemp$0$0=4;
   var $$etemp$0$1=0;
   HEAP8[($4)]=37;
   var $5=(($fmt_i+1)|0);
   HEAP8[($5)]=$__fmt;
   var $6=(($fmt_i+2)|0);
   HEAP8[($6)]=$__mod;
   var $7=(($fmt_i+3)|0);
   HEAP8[($7)]=0;
   var $8=(($__mod << 24) >> 24)==0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   HEAP8[($5)]=$__mod;
   HEAP8[($6)]=$__fmt;
   label = 3; break;
  case 3: 
   var $10=(($this+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=_strftime($3, 100, $4, $__tm, $11);
   var $13=(($__nar+$12)|0);
   var $$etemp$1$0=4;
   var $$etemp$1$1=0;
   var $14=(($__s)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)|(0))==0;
   if ($16) { var $_sroa_0_0_lcssa = $15;label = 10; break; } else { var $_sroa_0_06 = $15;var $_057 = $3;label = 4; break; }
  case 4: 
   var $_057;
   var $_sroa_0_06;
   var $17=HEAP8[($_057)];
   var $18=(($_sroa_0_06)|(0))==0;
   if ($18) { var $_sroa_0_1 = 0;label = 9; break; } else { label = 5; break; }
  case 5: 
   var $20=(($_sroa_0_06+24)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($_sroa_0_06+28)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($21)|(0))==(($23)|(0));
   if ($24) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $26=$_sroa_0_06;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+52)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($17)&(255));
   var $31=FUNCTION_TABLE[$29]($_sroa_0_06, $30);
   var $_0 = $31;label = 8; break;
  case 7: 
   var $33=(($21+1)|0);
   HEAP32[(($20)>>2)]=$33;
   HEAP8[($21)]=$17;
   var $34=(($17)&(255));
   var $_0 = $34;label = 8; break;
  case 8: 
   var $_0;
   var $35=(($_0)|(0))==-1;
   var $__sroa_0_0=$35 ? 0 : $_sroa_0_06;
   var $_sroa_0_1 = $__sroa_0_0;label = 9; break;
  case 9: 
   var $_sroa_0_1;
   var $36=(($_057+1)|0);
   var $37=(($36)|(0))==(($13)|(0));
   if ($37) { var $_sroa_0_0_lcssa = $_sroa_0_1;label = 10; break; } else { var $_sroa_0_06 = $_sroa_0_1;var $_057 = $36;label = 4; break; }
  case 10: 
   var $_sroa_0_0_lcssa;
   var $38=(($agg_result)|0);
   HEAP32[(($38)>>2)]=$_sroa_0_0_lcssa;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=HEAP8[(14264)];
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $7=___cxa_guard_acquire(14264);
   var $8=(($7)|(0))==0;
   if ($8) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $10 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$10;
   label = 6; break;
  case 5: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1,0); $13$1 = tempRet0;
   var $eh_lpad_body_i$1 = $13$1;var $eh_lpad_body_i$0 = $13$0;label = 9; break;
  case 6: 
   var $15=HEAP32[((12160)>>2)];
   var $16=(($3)|(0))==(($15)|(0));
   if ($16) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $18=HEAP32[(($2)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $20$0 = ___cxa_find_matching_catch(-1, -1,0); $20$1 = tempRet0;
   var $eh_lpad_body_i$1 = $20$1;var $eh_lpad_body_i$0 = $20$0;label = 9; break;
  case 9: 
   var $eh_lpad_body_i$0;
   var $eh_lpad_body_i$1;
   var $21=$eh_lpad_body_i$0;
   ___clang_call_terminate($21);
   throw "Reached an unreachable!";
  case 10: 
   var $22=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($22);
   __ZdlPv($1);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=HEAP8[(14264)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=___cxa_guard_acquire(14264);
   var $7=(($6)|(0))==0;
   if ($7) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $9 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$9;
   label = 6; break;
  case 5: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1,0); $12$1 = tempRet0;
   var $eh_lpad_body_i$1 = $12$1;var $eh_lpad_body_i$0 = $12$0;label = 9; break;
  case 6: 
   var $14=HEAP32[((12160)>>2)];
   var $15=(($2)|(0))==(($14)|(0));
   if ($15) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $17=HEAP32[(($1)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1,0); $19$1 = tempRet0;
   var $eh_lpad_body_i$1 = $19$1;var $eh_lpad_body_i$0 = $19$0;label = 9; break;
  case 9: 
   var $eh_lpad_body_i$0;
   var $eh_lpad_body_i$1;
   var $20=$eh_lpad_body_i$0;
   ___clang_call_terminate($20);
   throw "Reached an unreachable!";
  case 10: 
   var $21=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($21);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__nar=sp;
   var $__ne=(sp)+(400);
   var $3=(($__nar)|0);
   var $4=(($__nar+400)|0);
   HEAP32[(($__ne)>>2)]=$4;
   var $5=(($this+8)|0);
   __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($5, $3, $__ne, $__tm, $__fmt, $__mod);
   var $6=HEAP32[(($__ne)>>2)];
   var $7=(($__s)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($3)|(0))==(($6)|(0));
   if ($9) { var $_sroa_0_0_lcssa = $8;label = 8; break; } else { var $_sroa_0_06 = $8;var $_057 = $3;label = 2; break; }
  case 2: 
   var $_057;
   var $_sroa_0_06;
   var $10=HEAP32[(($_057)>>2)];
   var $11=(($_sroa_0_06)|(0))==0;
   if ($11) { var $_sroa_0_1 = 0;label = 7; break; } else { label = 3; break; }
  case 3: 
   var $13=(($_sroa_0_06+24)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($_sroa_0_06+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($14)|(0))==(($16)|(0));
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$_sroa_0_06;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+52)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=FUNCTION_TABLE[$22]($_sroa_0_06, $10);
   var $_0 = $23;label = 6; break;
  case 5: 
   var $25=(($14+4)|0);
   HEAP32[(($13)>>2)]=$25;
   HEAP32[(($14)>>2)]=$10;
   var $_0 = $10;label = 6; break;
  case 6: 
   var $_0;
   var $26=(($_0)|(0))==-1;
   var $__sroa_0_0=$26 ? 0 : $_sroa_0_06;
   var $_sroa_0_1 = $__sroa_0_0;label = 7; break;
  case 7: 
   var $_sroa_0_1;
   var $27=(($_057+4)|0);
   var $28=(($27)|(0))==(($6)|(0));
   if ($28) { var $_sroa_0_0_lcssa = $_sroa_0_1;label = 8; break; } else { var $_sroa_0_06 = $_sroa_0_1;var $_057 = $27;label = 2; break; }
  case 8: 
   var $_sroa_0_0_lcssa;
   var $29=(($agg_result)|0);
   HEAP32[(($29)>>2)]=$_sroa_0_0_lcssa;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $fmt_i=sp;
   var $__nar=(sp)+(8);
   var $mb=(sp)+(112);
   var $tmpcast=$mb;
   var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__nar)|0);
   var $2=(($fmt_i)|0);
   var $$etemp$0$0=4;
   var $$etemp$0$1=0;
   HEAP8[($2)]=37;
   var $3=(($fmt_i+1)|0);
   HEAP8[($3)]=$__fmt;
   var $4=(($fmt_i+2)|0);
   HEAP8[($4)]=$__mod;
   var $5=(($fmt_i+3)|0);
   HEAP8[($5)]=0;
   var $6=(($__mod << 24) >> 24)==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   HEAP8[($3)]=$__mod;
   HEAP8[($4)]=$__fmt;
   label = 3; break;
  case 3: 
   var $8=(($this)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=_strftime($1, 100, $2, $__tm, $9);
   var $$etemp$1$0=4;
   var $$etemp$1$1=0;
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $st$3$0=(($mb)|0);
   HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
   var $st$4$1=(($mb+4)|0);
   HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
   HEAP32[(($__nb)>>2)]=$1;
   var $11=HEAP32[(($__we)>>2)];
   var $12=$11;
   var $13=$__wb;
   var $14=((($12)-($13))|0);
   var $15=$14 >> 2;
   var $16=HEAP32[(($8)>>2)];
   var $17=_uselocale($16);
   var $18 = (function() { try { __THREW__ = 0; return _mbsrtowcs($__wb, $__nb, $15, $tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $20=(($17)|(0))==0;
   if ($20) { label = 11; break; } else { label = 5; break; }
  case 5: 
   var $22 = (function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
  case 6: 
   var $24$0 = ___cxa_find_matching_catch(-1, -1,0); $24$1 = tempRet0;
   var $25=$24$0;
   ___clang_call_terminate($25);
   throw "Reached an unreachable!";
  case 7: 
   var $27$0 = ___cxa_find_matching_catch(-1, -1); $27$1 = tempRet0;
   var $28=(($17)|(0))==0;
   if ($28) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $30 = (function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $32$0 = ___cxa_find_matching_catch(-1, -1,0); $32$1 = tempRet0;
   var $33=$32$0;
   ___clang_call_terminate($33);
   throw "Reached an unreachable!";
  case 10: 
   ___resumeException($27$0)
  case 11: 
   var $34=(($18)|(0))==-1;
   if ($34) { label = 12; break; } else { label = 13; break; }
  case 12: 
   __ZNSt3__121__throw_runtime_errorEPKc(((904)|0));
   throw "Reached an unreachable!";
  case 13: 
   var $37=(($__wb+($18<<2))|0);
   HEAP32[(($__we)>>2)]=$37;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 var label = 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 var label = 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result, 1, 45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 var label = 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 var label = 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result, 1, 45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 var label = 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 var label = 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result, 1, 45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 var label = 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 var label = 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 var $agg_result2=$agg_result;
 HEAP32[(($agg_result2)>>2)]=0; HEAP32[((($agg_result2)+(4))>>2)]=0; HEAP32[((($agg_result2)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result, 1, 45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__wbuf=(sp)+(16);
   var $__wb=(sp)+(120);
   var $__wn=(sp)+(128);
   var $__loc=(sp)+(136);
   var $__neg=(sp)+(144);
   var $1=(sp)+(152);
   var $__atoms=(sp)+(160);
   var $__nbuf=(sp)+(176);
   var $2=(($__wbuf)|0);
   var $3=(($__wb)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=(($__wb+4)|0);
   HEAP32[(($4)>>2)]=426;
   var $5=(($__wbuf+100)|0);
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $7=(($__loc)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $10=HEAP32[((((13704)|0))>>2)];
   var $11=(($10)|(0))==-1;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=(($__p_i_i_i)|0);
   HEAP32[(($13)>>2)]=13704;
   var $14=(($__p_i_i_i+4)|0);
   HEAP32[(($14)>>2)]=(26);
   var $15=(($__p_i_i_i+8)|0);
   HEAP32[(($15)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $9, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 15; break; }
  case 4: 
   var $16=HEAP32[((((13708)|0))>>2)];
   var $17=((($16)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $18=(($8+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($8+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$19;
   var $23=$21;
   var $24=((($22)-($23))|0);
   var $25=$24 >> 2;
   var $26=(($25)>>>(0)) > (($17)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=(($21+($17<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $30=___cxa_allocate_exception(4);
   var $31=$30;
   __ZNSt8bad_castC2Ev($31);
   (function() { try { __THREW__ = 0; return ___cxa_throw($30, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 15; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $32=$28;
   HEAP8[($__neg)]=0;
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($1)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($__iob+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $1, $__intl, $__loc, $37, $__err, $__neg, $32, $__wb, $__wn, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 15; break; }
  case 9: 
   if ($38) { label = 10; break; } else { label = 34; break; }
  case 10: 
   var $41=(($__atoms)|0);
   var $42=$28;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+32)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($32, ((2056)|0), ((2066)|0), $41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $47=(($__nbuf)|0);
   var $48=HEAP32[(($__wn)>>2)];
   var $49=HEAP32[(($3)>>2)];
   var $50=$48;
   var $51=$49;
   var $52=((($50)-($51))|0);
   var $53=(($52)|(0)) > 98;
   if ($53) { label = 12; break; } else { var $__nc_0 = $47;var $__h_sroa_0_1 = 0;label = 19; break; }
  case 12: 
   var $54=((($52)+(2))|0);
   var $55=_malloc($54);
   var $56=(($55)|(0))==0;
   if ($56) { label = 13; break; } else { var $__nc_0 = $55;var $__h_sroa_0_1 = $55;label = 19; break; }
  case 13: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0 = 0;var $__h_sroa_0_1 = 0;label = 19; break; } else { var $__h_sroa_0_0 = 0;label = 16; break; }
  case 14: 
   var $58$0 = ___cxa_find_matching_catch(-1, -1); $58$1 = tempRet0;
   var $59=$58$0;
   var $60=$58$1;
   HEAP32[(($3)>>2)]=0;
   var $165 = $2;var $_1413 = $59;var $_115 = $60;label = 53; break;
  case 15: 
   var $62$0 = ___cxa_find_matching_catch(-1, -1); $62$1 = tempRet0;
   var $63=$62$0;
   var $64=$62$1;
   var $_02 = $64;var $_03 = $63;label = 52; break;
  case 16: 
   var $__h_sroa_0_0;
   var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
   var $eh_lpad_body$1 = $66$1;var $eh_lpad_body$0 = $66$0;var $__h_sroa_0_0_lpad_body = $__h_sroa_0_0;label = 17; break;
  case 17: 
   var $__h_sroa_0_0_lpad_body;
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $67=$eh_lpad_body$0;
   var $68=$eh_lpad_body$1;
   var $69=(($__h_sroa_0_0_lpad_body)|(0))==0;
   if ($69) { var $_02 = $68;var $_03 = $67;label = 52; break; } else { label = 18; break; }
  case 18: 
   _free($__h_sroa_0_0_lpad_body);
   var $_02 = $68;var $_03 = $67;label = 52; break;
  case 19: 
   var $__h_sroa_0_1;
   var $__nc_0;
   var $72=HEAP8[($__neg)];
   var $73=$72 & 1;
   var $74=(($73 << 24) >> 24)==0;
   if ($74) { var $__nc_1 = $__nc_0;label = 21; break; } else { label = 20; break; }
  case 20: 
   var $76=(($__nc_0+1)|0);
   HEAP8[($__nc_0)]=45;
   var $__nc_1 = $76;label = 21; break;
  case 21: 
   var $__nc_1;
   var $78=(($49)>>>(0)) < (($48)>>>(0));
   if ($78) { label = 22; break; } else { var $__nc_2_lcssa = $__nc_1;label = 27; break; }
  case 22: 
   var $79=(($__atoms+10)|0);
   var $80=$__atoms;
   var $__nc_29 = $__nc_1;var $__w_010 = $49;label = 23; break;
  case 23: 
   var $__w_010;
   var $__nc_29;
   var $82=HEAP8[($__w_010)];
   var $_08 = $41;label = 25; break;
  case 24: 
   var $84=(($88)|(0))==(($79)|(0));
   if ($84) { var $_0_lcssa = $79;label = 26; break; } else { var $_08 = $88;label = 25; break; }
  case 25: 
   var $_08;
   var $86=HEAP8[($_08)];
   var $87=(($86 << 24) >> 24)==(($82 << 24) >> 24);
   var $88=(($_08+1)|0);
   if ($87) { var $_0_lcssa = $_08;label = 26; break; } else { label = 24; break; }
  case 26: 
   var $_0_lcssa;
   var $89=$_0_lcssa;
   var $90=((($89)-($80))|0);
   var $91=((2056+$90)|0);
   var $92=HEAP8[($91)];
   HEAP8[($__nc_29)]=$92;
   var $93=(($__w_010+1)|0);
   var $94=(($__nc_29+1)|0);
   var $95=HEAP32[(($__wn)>>2)];
   var $96=(($93)>>>(0)) < (($95)>>>(0));
   if ($96) { var $__nc_29 = $94;var $__w_010 = $93;label = 23; break; } else { var $__nc_2_lcssa = $94;label = 27; break; }
  case 27: 
   var $__nc_2_lcssa;
   HEAP8[($__nc_2_lcssa)]=0;
   var $97=_sscanf($47, ((1440)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $98=(($97)|(0))==1;
   if ($98) { label = 32; break; } else { label = 28; break; }
  case 28: 
   var $100=___cxa_allocate_exception(8);
   var $101=$100;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($101, ((1400)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 31; break; }
  case 29: 
   (function() { try { __THREW__ = 0; return ___cxa_throw($100, 8456, (44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { var $__h_sroa_0_0 = $__h_sroa_0_1;label = 16; break; }
  case 30: 
   throw "Reached an unreachable!";
  case 31: 
   var $104$0 = ___cxa_find_matching_catch(-1, -1); $104$1 = tempRet0;
   ___cxa_free_exception($100);
   var $eh_lpad_body$1 = $104$1;var $eh_lpad_body$0 = $104$0;var $__h_sroa_0_0_lpad_body = $__h_sroa_0_1;label = 17; break;
  case 32: 
   var $106=(($__h_sroa_0_1)|(0))==0;
   if ($106) { label = 34; break; } else { label = 33; break; }
  case 33: 
   _free($__h_sroa_0_1);
   label = 34; break;
  case 34: 
   var $108=(($__b)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109)|(0))==0;
   if ($110) { var $125 = 0;label = 39; break; } else { label = 35; break; }
  case 35: 
   var $112=(($109+12)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($109+16)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0))==(($115)|(0));
   if ($116) { label = 36; break; } else { var $125 = $109;label = 39; break; }
  case 36: 
   var $118=$109;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+36)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 15; break; }
  case 37: 
   var $123=(($122)|(0))==-1;
   if ($123) { label = 38; break; } else { var $125 = $109;label = 39; break; }
  case 38: 
   HEAP32[(($108)>>2)]=0;
   var $125 = 0;label = 39; break;
  case 39: 
   var $125;
   var $126=(($125)|(0))==0;
   var $127=HEAP32[(($33)>>2)];
   var $128=(($127)|(0))==0;
   if ($128) { label = 45; break; } else { label = 40; break; }
  case 40: 
   var $130=(($127+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($127+16)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($131)|(0))==(($133)|(0));
   if ($134) { label = 42; break; } else { label = 41; break; }
  case 41: 
   if ($126) { label = 48; break; } else { label = 47; break; }
  case 42: 
   var $136=$127;
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137+36)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$139]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 15; break; }
  case 43: 
   var $141=(($140)|(0))==-1;
   if ($141) { label = 44; break; } else { label = 46; break; }
  case 44: 
   HEAP32[(($33)>>2)]=0;
   label = 45; break;
  case 45: 
   if ($126) { label = 47; break; } else { label = 48; break; }
  case 46: 
   var $143=(($127)|(0))==0;
   var $tmp=$126 ^ $143;
   if ($tmp) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $145=HEAP32[(($__err)>>2)];
   var $146=$145 | 2;
   HEAP32[(($__err)>>2)]=$146;
   label = 48; break;
  case 48: 
   var $148=(($agg_result)|0);
   HEAP32[(($148)>>2)]=$125;
   var $149=HEAP32[(($7)>>2)];
   var $150=(($149)|0);
   var $151=__ZNSt3__114__shared_count16__release_sharedEv($150);
   var $152=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $153=(($152)|(0))==0;
   if ($153) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $155=HEAP32[(($4)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $157$0 = ___cxa_find_matching_catch(-1, -1,0); $157$1 = tempRet0;
   var $158=$157$0;
   ___clang_call_terminate($158);
   throw "Reached an unreachable!";
  case 51: 
   STACKTOP = sp;
   return;
  case 52: 
   var $_03;
   var $_02;
   var $160=HEAP32[(($7)>>2)];
   var $161=(($160)|0);
   var $162=__ZNSt3__114__shared_count16__release_sharedEv($161);
   var $_pre=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $163=(($_pre)|(0))==0;
   if ($163) { var $_1414 = $_03;var $_116 = $_02;label = 55; break; } else { var $165 = $_pre;var $_1413 = $_03;var $_115 = $_02;label = 53; break; }
  case 53: 
   var $_115;
   var $_1413;
   var $165;
   var $166=HEAP32[(($4)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1414 = $_1413;var $_116 = $_115;label = 55; break; } else { label = 54; break; }
  case 54: 
   var $168$0 = ___cxa_find_matching_catch(-1, -1,0); $168$1 = tempRet0;
   var $169=$168$0;
   ___clang_call_terminate($169);
   throw "Reached an unreachable!";
  case 55: 
   var $_116;
   var $_1414;
   var $170$0=$_1414;
   var $170$1=0;
   var $171$0=$170$0;
   var $171$1=$_116;
   ___resumeException($171$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 var label = 0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__gbuf=sp;
   var $__pat=(sp)+(400);
   var $__dp=(sp)+(408);
   var $__ts=(sp)+(416);
   var $__grp=(sp)+(424);
   var $0=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($__gbuf)|0);
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $tmpcast=$__pat;
   var $2=$__sym;
   var $3=$__psn;
   var $4=$__nsn;
   var $5=$__spaces;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
   HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 25; break; }
  case 2: 
   var $7=(($__gbuf+400)|0);
   var $8=(($__wb)|0);
   var $9=HEAP32[(($8)>>2)];
   HEAP32[(($__wn)>>2)]=$9;
   var $10=(($__b)|0);
   var $11=(($__e)|0);
   var $12=$__pat;
   var $13=(($__ct+8)|0);
   var $14=$__psn;
   var $15=$__nsn;
   var $16=(($15+1)|0);
   var $17=(($__nsn+4)|0);
   var $18=(($__nsn+8)|0);
   var $19=(($14+1)|0);
   var $20=(($__psn+4)|0);
   var $21=(($__psn+8)|0);
   var $22=$__flags & 512;
   var $23=(($22)|(0))!=0;
   var $24=$__sym;
   var $25=(($24+1)|0);
   var $26=(($__sym+4)|0);
   var $27=(($__sym+8)|0);
   var $28=$__spaces;
   var $29=(($28+1)|0);
   var $30=(($__spaces+4)|0);
   var $31=(($__spaces+8)|0);
   var $32=(($12+3)|0);
   var $33=(($__grp+4)|0);
   var $34=(($__wb+4)|0);
   var $38 = $__we;var $free131268 = 426;var $37 = $1;var $36 = $1;var $35 = $7;var $__trailing_sign_0271 = 0;var $__p_0273 = 0;label = 3; break;
  case 3: 
   var $__p_0273;
   var $__trailing_sign_0271;
   var $35;
   var $36;
   var $37;
   var $free131268;
   var $38;
   var $39=HEAP32[(($10)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { var $55 = 0;label = 9; break; } else { label = 4; break; }
  case 4: 
   var $42=(($39+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 5; break; } else { var $55 = $39;label = 9; break; }
  case 5: 
   var $48=$39;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+36)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 6: 
   var $53=(($52)|(0))==-1;
   if ($53) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $_pre356=HEAP32[(($10)>>2)];
   var $55 = $_pre356;label = 9; break;
  case 8: 
   HEAP32[(($10)>>2)]=0;
   var $55 = 0;label = 9; break;
  case 9: 
   var $55;
   var $56=(($55)|(0))==0;
   var $57=HEAP32[(($11)>>2)];
   var $58=(($57)|(0))==0;
   if ($58) { label = 15; break; } else { label = 10; break; }
  case 10: 
   var $60=(($57+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($57+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61)|(0))==(($63)|(0));
   if ($64) { label = 12; break; } else { label = 11; break; }
  case 11: 
   if ($56) { var $74 = $57;label = 17; break; } else { var $free131_lcssa = $free131268;var $_lcssa209 = $37;var $_lcssa226 = $36;var $__trailing_sign_0_lcssa = $__trailing_sign_0271;label = 274; break; }
  case 12: 
   var $66=$57;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+36)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 13: 
   var $71=(($70)|(0))==-1;
   if ($71) { label = 14; break; } else { label = 16; break; }
  case 14: 
   HEAP32[(($11)>>2)]=0;
   label = 15; break;
  case 15: 
   if ($56) { var $free131_lcssa = $free131268;var $_lcssa209 = $37;var $_lcssa226 = $36;var $__trailing_sign_0_lcssa = $__trailing_sign_0271;label = 274; break; } else { var $74 = 0;label = 17; break; }
  case 16: 
   if ($56) { var $74 = $57;label = 17; break; } else { var $free131_lcssa = $free131268;var $_lcssa209 = $37;var $_lcssa226 = $36;var $__trailing_sign_0_lcssa = $__trailing_sign_0271;label = 274; break; }
  case 17: 
   var $74;
   var $75=(($12+$__p_0273)|0);
   var $76=HEAP8[($75)];
   var $77=(($76 << 24) >> 24);
   switch((($77)|(0))) {
   case 2:{
    label = 111; break;
   }
   case 4:{
    var $__ng_0 = 0;var $559 = $35;var $558 = $36;var $557 = $37;var $free134 = $free131268;var $556 = $38;label = 155; break;
   }
   case 1:{
    label = 29; break;
   }
   case 0:{
    label = 43; break;
   }
   case 3:{
    label = 70; break;
   }
   default: {
   var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
   }
   } break; 
  case 18: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;var $78 = $_lcssa209;var $free141 = $free131_lcssa;label = 26; break;
  case 19: 
   var $free141_ph_ph;
   var $_ph_ph;
   var $lpad_loopexit148$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit148$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit148$1;var $lpad_phi$0 = $lpad_loopexit148$0;var $78 = $_ph_ph;var $free141 = $free141_ph_ph;label = 26; break;
  case 20: 
   var $lpad_loopexit170$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit170$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit170$1;var $lpad_phi$0 = $lpad_loopexit170$0;var $78 = $731;var $free141 = $free133;label = 26; break;
  case 21: 
   var $lpad_loopexit175$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit175$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit175$1;var $lpad_phi$0 = $lpad_loopexit175$0;var $78 = $37;var $free141 = $free131268;label = 26; break;
  case 22: 
   var $lpad_loopexit182$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit182$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit182$1;var $lpad_phi$0 = $lpad_loopexit182$0;var $78 = $37;var $free141 = $free131268;label = 26; break;
  case 23: 
   var $lpad_loopexit186$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit186$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit186$1;var $lpad_phi$0 = $lpad_loopexit186$0;var $78 = $37;var $free141 = $free131268;label = 26; break;
  case 24: 
   var $free141_ph_ph146_ph_ph_ph_ph_ph;
   var $_ph_ph147_ph_ph_ph_ph_ph;
   var $lpad_loopexit189$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit189$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit189$1;var $lpad_phi$0 = $lpad_loopexit189$0;var $78 = $_ph_ph147_ph_ph_ph_ph_ph;var $free141 = $free141_ph_ph146_ph_ph_ph_ph_ph;label = 26; break;
  case 25: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;var $78 = $1;var $free141 = 426;label = 26; break;
  case 26: 
   var $free141;
   var $78;
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $79=(($78)|(0))==0;
   if ($79) { label = 312; break; } else { label = 27; break; }
  case 27: 
   var $81=$78;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free141]($81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 312; break; } else { label = 28; break; }
  case 28: 
   var $83$0 = ___cxa_find_matching_catch(-1, -1,0); $83$1 = tempRet0;
   var $84=$83$0;
   ___clang_call_terminate($84);
   throw "Reached an unreachable!";
  case 29: 
   var $cond=(($__p_0273)|(0))==3;
   if ($cond) { var $free131_lcssa = $free131268;var $_lcssa209 = $37;var $_lcssa226 = $36;var $__trailing_sign_0_lcssa = $__trailing_sign_0271;label = 274; break; } else { label = 30; break; }
  case 30: 
   var $87=HEAP32[(($10)>>2)];
   var $88=(($87+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($87+16)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($89)|(0))==(($91)|(0));
   if ($92) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $94=$87;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95+36)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 32: 
   var $extract_t98=(($98) & 255);
   var $_041_off0 = $extract_t98;label = 34; break;
  case 33: 
   var $100=HEAP8[($89)];
   var $_041_off0 = $100;label = 34; break;
  case 34: 
   var $_041_off0;
   var $101=(($_041_off0 << 24) >> 24);
   var $102 = (function() { try { __THREW__ = 0; return _isascii($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 35: 
   var $103=(($102)|(0))==0;
   if ($103) { label = 42; break; } else { label = 36; break; }
  case 36: 
   var $104=HEAP32[(($13)>>2)];
   var $105=(($104+($101<<1))|0);
   var $106=HEAP16[(($105)>>1)];
   var $107=$106 & 8192;
   var $phitmp100=(($107 << 16) >> 16)==0;
   if ($phitmp100) { label = 42; break; } else { label = 37; break; }
  case 37: 
   var $109=HEAP32[(($10)>>2)];
   var $110=(($109+12)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($109+16)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111)|(0))==(($113)|(0));
   if ($114) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $116=$109;
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117+40)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 39: 
   var $extract_t101=(($120) & 255);
   var $_040_off0 = $extract_t101;label = 41; break;
  case 40: 
   var $122=(($111+1)|0);
   HEAP32[(($110)>>2)]=$122;
   var $123=HEAP8[($111)];
   var $_040_off0 = $123;label = 41; break;
  case 41: 
   var $_040_off0;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $_040_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 42: 
   var $124=HEAP32[(($__err)>>2)];
   var $125=$124 | 4;
   HEAP32[(($__err)>>2)]=$125;
   var $_026 = 0;var $1042 = $37;var $free137 = $free131268;label = 308; break;
  case 43: 
   var $127=(($__p_0273)|(0))==3;
   if ($127) { var $free131_lcssa = $free131268;var $_lcssa209 = $37;var $_lcssa226 = $36;var $__trailing_sign_0_lcssa = $__trailing_sign_0271;label = 274; break; } else { var $128 = $74;label = 44; break; }
  case 44: 
   var $128;
   var $129=HEAP32[(($10)>>2)];
   var $130=(($129)|(0))==0;
   if ($130) { var $145 = 0;label = 50; break; } else { label = 45; break; }
  case 45: 
   var $132=(($129+12)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($129+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($133)|(0))==(($135)|(0));
   if ($136) { label = 46; break; } else { var $145 = $129;label = 50; break; }
  case 46: 
   var $138=$129;
   var $139=HEAP32[(($138)>>2)];
   var $140=(($139+36)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 23; break; }
  case 47: 
   var $143=(($142)|(0))==-1;
   if ($143) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $_pre357=HEAP32[(($10)>>2)];
   var $145 = $_pre357;label = 50; break;
  case 49: 
   HEAP32[(($10)>>2)]=0;
   var $145 = 0;label = 50; break;
  case 50: 
   var $145;
   var $146=(($145)|(0))==0;
   var $147=(($128)|(0))==0;
   if ($147) { label = 56; break; } else { label = 51; break; }
  case 51: 
   var $149=(($128+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($128+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 53; break; } else { label = 52; break; }
  case 52: 
   if ($146) { var $162 = $128;label = 58; break; } else { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; }
  case 53: 
   var $155=$128;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 23; break; }
  case 54: 
   var $160=(($159)|(0))==-1;
   if ($160) { label = 55; break; } else { label = 57; break; }
  case 55: 
   HEAP32[(($11)>>2)]=0;
   label = 56; break;
  case 56: 
   if ($146) { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; } else { var $162 = 0;label = 58; break; }
  case 57: 
   if ($146) { var $162 = $128;label = 58; break; } else { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; }
  case 58: 
   var $162;
   var $163=HEAP32[(($10)>>2)];
   var $164=(($163+12)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($163+16)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165)|(0))==(($167)|(0));
   if ($168) { label = 59; break; } else { label = 61; break; }
  case 59: 
   var $170=$163;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171+36)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 23; break; }
  case 60: 
   var $extract_t93=(($174) & 255);
   var $_037_off0 = $extract_t93;label = 62; break;
  case 61: 
   var $176=HEAP8[($165)];
   var $_037_off0 = $176;label = 62; break;
  case 62: 
   var $_037_off0;
   var $177=(($_037_off0 << 24) >> 24);
   var $178 = (function() { try { __THREW__ = 0; return _isascii($177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 63; break; } else { label = 23; break; }
  case 63: 
   var $179=(($178)|(0))==0;
   if ($179) { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; } else { label = 64; break; }
  case 64: 
   var $180=HEAP32[(($13)>>2)];
   var $181=(($180+($177<<1))|0);
   var $182=HEAP16[(($181)>>1)];
   var $183=$182 & 8192;
   var $phitmp95=(($183 << 16) >> 16)==0;
   if ($phitmp95) { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; } else { label = 65; break; }
  case 65: 
   var $185=HEAP32[(($10)>>2)];
   var $186=(($185+12)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185+16)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0))==(($189)|(0));
   if ($190) { label = 66; break; } else { label = 68; break; }
  case 66: 
   var $192=$185;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 23; break; }
  case 67: 
   var $extract_t96=(($196) & 255);
   var $_036_off0 = $extract_t96;label = 69; break;
  case 68: 
   var $198=(($187+1)|0);
   HEAP32[(($186)>>2)]=$198;
   var $199=HEAP8[($187)];
   var $_036_off0 = $199;label = 69; break;
  case 69: 
   var $_036_off0;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $_036_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $128 = $162;label = 44; break; } else { label = 23; break; }
  case 70: 
   var $200=HEAP8[($3)];
   var $201=(($200)&(255));
   var $202=$201 & 1;
   var $203=(($202)|(0))==0;
   var $204=HEAP32[(($20)>>2)];
   var $205=$201 >>> 1;
   var $206=$203 ? $205 : $204;
   var $207=HEAP8[($4)];
   var $208=(($207)&(255));
   var $209=$208 & 1;
   var $210=(($209)|(0))==0;
   var $211=HEAP32[(($17)>>2)];
   var $212=$208 >>> 1;
   var $213=$210 ? $212 : $211;
   var $214=(((-$213))|0);
   var $215=(($206)|(0))==(($214)|(0));
   if ($215) { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; } else { label = 71; break; }
  case 71: 
   var $216=(($206)|(0))==0;
   var $217=(($213)|(0))==0;
   var $or_cond382=$216 | $217;
   var $218=HEAP32[(($10)>>2)];
   var $219=(($218+12)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($218+16)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=(($220)|(0))==(($222)|(0));
   if ($or_cond382) { label = 72; break; } else { label = 92; break; }
  case 72: 
   if ($216) { label = 83; break; } else { label = 73; break; }
  case 73: 
   if ($223) { label = 74; break; } else { label = 76; break; }
  case 74: 
   var $226=$218;
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+36)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 75; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 75: 
   var $extract_t90=(($230) & 255);
   var $_pre347=HEAP8[($3)];
   var $_033_off0 = $extract_t90;var $233 = $_pre347;label = 77; break;
  case 76: 
   var $232=HEAP8[($220)];
   var $_033_off0 = $232;var $233 = $200;label = 77; break;
  case 77: 
   var $233;
   var $_033_off0;
   var $234=$233 & 1;
   var $235=(($234 << 24) >> 24)==0;
   var $236=HEAP32[(($21)>>2)];
   var $_=$235 ? $19 : $236;
   var $237=HEAP8[($_)];
   var $238=(($_033_off0 << 24) >> 24)==(($237 << 24) >> 24);
   if ($238) { label = 78; break; } else { label = 82; break; }
  case 78: 
   var $240=HEAP32[(($10)>>2)];
   var $241=(($240+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($240+16)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(($242)|(0))==(($244)|(0));
   if ($245) { label = 79; break; } else { label = 80; break; }
  case 79: 
   var $247=$240;
   var $248=HEAP32[(($247)>>2)];
   var $249=(($248+40)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$250]($240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 80: 
   var $253=(($242+1)|0);
   HEAP32[(($241)>>2)]=$253;
   label = 81; break;
  case 81: 
   var $254=HEAP8[($3)];
   var $255=(($254)&(255));
   var $256=$255 & 1;
   var $257=(($256)|(0))==0;
   var $258=HEAP32[(($20)>>2)];
   var $259=$255 >>> 1;
   var $260=$257 ? $259 : $258;
   var $261=(($260)>>>(0)) > 1;
   var $__psn___trailing_sign_0=$261 ? $__psn : $__trailing_sign_0271;
   var $__trailing_sign_1 = $__psn___trailing_sign_0;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
  case 82: 
   HEAP8[($__neg)]=1;
   var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
  case 83: 
   if ($223) { label = 84; break; } else { label = 86; break; }
  case 84: 
   var $265=$218;
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266+36)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$268]($218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 85; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 85: 
   var $extract_t88=(($269) & 255);
   var $_pre=HEAP8[($4)];
   var $_029_off0 = $extract_t88;var $272 = $_pre;label = 87; break;
  case 86: 
   var $271=HEAP8[($220)];
   var $_029_off0 = $271;var $272 = $207;label = 87; break;
  case 87: 
   var $272;
   var $_029_off0;
   var $273=$272 & 1;
   var $274=(($273 << 24) >> 24)==0;
   var $275=HEAP32[(($18)>>2)];
   var $_370=$274 ? $16 : $275;
   var $276=HEAP8[($_370)];
   var $277=(($_029_off0 << 24) >> 24)==(($276 << 24) >> 24);
   if ($277) { label = 88; break; } else { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; }
  case 88: 
   var $279=HEAP32[(($10)>>2)];
   var $280=(($279+12)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=(($279+16)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=(($281)|(0))==(($283)|(0));
   if ($284) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $286=$279;
   var $287=HEAP32[(($286)>>2)];
   var $288=(($287+40)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$289]($279) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 91; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 90: 
   var $292=(($281+1)|0);
   HEAP32[(($280)>>2)]=$292;
   label = 91; break;
  case 91: 
   HEAP8[($__neg)]=1;
   var $293=HEAP8[($4)];
   var $294=(($293)&(255));
   var $295=$294 & 1;
   var $296=(($295)|(0))==0;
   var $297=HEAP32[(($17)>>2)];
   var $298=$294 >>> 1;
   var $299=$296 ? $298 : $297;
   var $300=(($299)>>>(0)) > 1;
   var $__nsn___trailing_sign_0=$300 ? $__nsn : $__trailing_sign_0271;
   var $__trailing_sign_1 = $__nsn___trailing_sign_0;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
  case 92: 
   if ($223) { label = 93; break; } else { label = 95; break; }
  case 93: 
   var $303=$218;
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304+36)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$306]($218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 94; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 94: 
   var $extract_t84=(($307) & 255);
   var $_pre348=HEAP8[($3)];
   var $_pre498=HEAP32[(($10)>>2)];
   var $_phi_trans_insert=(($_pre498+12)|0);
   var $_pre499=HEAP32[(($_phi_trans_insert)>>2)];
   var $_phi_trans_insert500=(($_pre498+16)|0);
   var $_pre501=HEAP32[(($_phi_trans_insert500)>>2)];
   var $_024_off0 = $extract_t84;var $313 = $_pre348;var $312 = $_pre498;var $311 = $_pre499;var $310 = $_pre501;label = 96; break;
  case 95: 
   var $309=HEAP8[($220)];
   var $_024_off0 = $309;var $313 = $200;var $312 = $218;var $311 = $220;var $310 = $222;label = 96; break;
  case 96: 
   var $310;
   var $311;
   var $312;
   var $313;
   var $_024_off0;
   var $314=$313 & 1;
   var $315=(($314 << 24) >> 24)==0;
   var $316=HEAP32[(($21)>>2)];
   var $_371=$315 ? $19 : $316;
   var $317=HEAP8[($_371)];
   var $318=(($_024_off0 << 24) >> 24)==(($317 << 24) >> 24);
   var $319=(($312+12)|0);
   var $320=(($311)|(0))==(($310)|(0));
   if ($318) { label = 97; break; } else { label = 101; break; }
  case 97: 
   if ($320) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $323=$312;
   var $324=HEAP32[(($323)>>2)];
   var $325=(($324+40)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$326]($312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 100; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 99: 
   var $329=(($311+1)|0);
   HEAP32[(($319)>>2)]=$329;
   label = 100; break;
  case 100: 
   var $330=HEAP8[($3)];
   var $331=(($330)&(255));
   var $332=$331 & 1;
   var $333=(($332)|(0))==0;
   var $334=HEAP32[(($20)>>2)];
   var $335=$331 >>> 1;
   var $336=$333 ? $335 : $334;
   var $337=(($336)>>>(0)) > 1;
   var $__psn___trailing_sign_0104=$337 ? $__psn : $__trailing_sign_0271;
   var $__trailing_sign_1 = $__psn___trailing_sign_0104;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
  case 101: 
   if ($320) { label = 102; break; } else { label = 104; break; }
  case 102: 
   var $340=$312;
   var $341=HEAP32[(($340)>>2)];
   var $342=(($341+36)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$343]($312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 103; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 103: 
   var $extract_t86=(($344) & 255);
   var $_020_off0 = $extract_t86;label = 105; break;
  case 104: 
   var $346=HEAP8[($311)];
   var $_020_off0 = $346;label = 105; break;
  case 105: 
   var $_020_off0;
   var $347=HEAP8[($4)];
   var $348=$347 & 1;
   var $349=(($348 << 24) >> 24)==0;
   var $350=HEAP32[(($18)>>2)];
   var $_372=$349 ? $16 : $350;
   var $351=HEAP8[($_372)];
   var $352=(($_020_off0 << 24) >> 24)==(($351 << 24) >> 24);
   if ($352) { label = 106; break; } else { label = 110; break; }
  case 106: 
   var $354=HEAP32[(($10)>>2)];
   var $355=(($354+12)|0);
   var $356=HEAP32[(($355)>>2)];
   var $357=(($354+16)|0);
   var $358=HEAP32[(($357)>>2)];
   var $359=(($356)|(0))==(($358)|(0));
   if ($359) { label = 107; break; } else { label = 108; break; }
  case 107: 
   var $361=$354;
   var $362=HEAP32[(($361)>>2)];
   var $363=(($362+40)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$364]($354) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 109; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $37;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free131268;label = 24; break; }
  case 108: 
   var $367=(($356+1)|0);
   HEAP32[(($355)>>2)]=$367;
   label = 109; break;
  case 109: 
   HEAP8[($__neg)]=1;
   var $368=HEAP8[($4)];
   var $369=(($368)&(255));
   var $370=$369 & 1;
   var $371=(($370)|(0))==0;
   var $372=HEAP32[(($17)>>2)];
   var $373=$369 >>> 1;
   var $374=$371 ? $373 : $372;
   var $375=(($374)>>>(0)) > 1;
   var $__nsn___trailing_sign_0105=$375 ? $__nsn : $__trailing_sign_0271;
   var $__trailing_sign_1 = $__nsn___trailing_sign_0105;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break;
  case 110: 
   var $377=HEAP32[(($__err)>>2)];
   var $378=$377 | 4;
   HEAP32[(($__err)>>2)]=$378;
   var $_026 = 0;var $1042 = $37;var $free137 = $free131268;label = 308; break;
  case 111: 
   var $380=(($__trailing_sign_0271)|(0))!=0;
   var $381=(($__p_0273)>>>(0)) < 2;
   var $or_cond=$380 | $381;
   if ($or_cond) { label = 115; break; } else { label = 112; break; }
  case 112: 
   var $383=(($__p_0273)|(0))==2;
   if ($383) { label = 113; break; } else { var $388 = 0;label = 114; break; }
  case 113: 
   var $385=HEAP8[($32)];
   var $386=(($385 << 24) >> 24)!=0;
   var $388 = $386;label = 114; break;
  case 114: 
   var $388;
   var $brmerge=$23 | $388;
   if ($brmerge) { label = 115; break; } else { var $__trailing_sign_1 = 0;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; }
  case 115: 
   var $389=HEAP8[($2)];
   var $390=$389 & 1;
   var $391=(($390 << 24) >> 24)==0;
   var $392=HEAP32[(($27)>>2)];
   var $_373=$391 ? $25 : $392;
   var $393=(($__p_0273)|(0))==0;
   if ($393) { var $__sym_curr_char_sroa_0_0_ph = $_373;var $_ph = $389;var $452 = $392;label = 128; break; } else { label = 116; break; }
  case 116: 
   var $395=((($__p_0273)-(1))|0);
   var $396=(($12+$395)|0);
   var $397=HEAP8[($396)];
   var $switch=(($397)&(255)) < 2;
   if ($switch) { label = 117; break; } else { var $__sym_curr_char_sroa_0_0_ph = $_373;var $_ph = $389;var $452 = $392;label = 128; break; }
  case 117: 
   var $398=(($389)&(255));
   var $399=$398 & 1;
   var $400=(($399)|(0))==0;
   var $401=HEAP32[(($26)>>2)];
   var $402=$398 >>> 1;
   var $403=$400 ? $402 : $401;
   var $404=(($403)|(0))==0;
   if ($404) { var $__sym_space_end_sroa_0_0_lcssa = $_373;var $426 = $389;var $425 = $392;label = 123; break; } else { var $__sym_space_end_sroa_0_0397 = $_373;label = 118; break; }
  case 118: 
   var $__sym_space_end_sroa_0_0397;
   var $405=HEAP8[($__sym_space_end_sroa_0_0397)];
   var $406=(($405 << 24) >> 24);
   var $407 = (function() { try { __THREW__ = 0; return _isascii($406) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 119; break; } else { label = 21; break; }
  case 119: 
   var $408=(($407)|(0))==0;
   if ($408) { label = 122; break; } else { label = 120; break; }
  case 120: 
   var $409=HEAP32[(($13)>>2)];
   var $410=(($409+($406<<1))|0);
   var $411=HEAP16[(($410)>>1)];
   var $412=$411 & 8192;
   var $phitmp83=(($412 << 16) >> 16)==0;
   if ($phitmp83) { label = 122; break; } else { label = 121; break; }
  case 121: 
   var $413=(($__sym_space_end_sroa_0_0397+1)|0);
   var $_pre358=HEAP8[($2)];
   var $414=$_pre358 & 1;
   var $415=(($414 << 24) >> 24)==0;
   var $416=HEAP32[(($27)>>2)];
   var $_374=$415 ? $25 : $416;
   var $417=(($_pre358)&(255));
   var $418=$417 & 1;
   var $419=(($418)|(0))==0;
   var $420=HEAP32[(($26)>>2)];
   var $421=$417 >>> 1;
   var $422=$419 ? $421 : $420;
   var $423=(($_374+$422)|0);
   var $424=(($413)|(0))==(($423)|(0));
   if ($424) { var $__sym_space_end_sroa_0_0_lcssa = $413;var $426 = $_pre358;var $425 = $416;label = 123; break; } else { var $__sym_space_end_sroa_0_0397 = $413;label = 118; break; }
  case 122: 
   var $_pre502=HEAP8[($2)];
   var $_pre503=HEAP32[(($27)>>2)];
   var $__sym_space_end_sroa_0_0_lcssa = $__sym_space_end_sroa_0_0397;var $426 = $_pre502;var $425 = $_pre503;label = 123; break;
  case 123: 
   var $425;
   var $426;
   var $__sym_space_end_sroa_0_0_lcssa;
   var $427=$426 & 1;
   var $428=(($427 << 24) >> 24)==0;
   var $_375=$428 ? $25 : $425;
   var $429=$__sym_space_end_sroa_0_0_lcssa;
   var $430=$_375;
   var $431=((($429)-($430))|0);
   var $432=HEAP8[($5)];
   var $433=(($432)&(255));
   var $434=$433 & 1;
   var $435=(($434)|(0))==0;
   var $436=HEAP32[(($30)>>2)];
   var $437=$433 >>> 1;
   var $438=$435 ? $437 : $436;
   var $439=(($431)>>>(0)) > (($438)>>>(0));
   if ($439) { var $__sym_curr_char_sroa_0_0_ph = $_375;var $_ph = $426;var $452 = $425;label = 128; break; } else { label = 124; break; }
  case 124: 
   var $440=$432 & 1;
   var $441=(($440 << 24) >> 24)==0;
   var $442=HEAP32[(($31)>>2)];
   var $_376=$441 ? $29 : $442;
   var $443=(($_376+$438)|0);
   var $444=(($__sym_space_end_sroa_0_0_lcssa)|(0))==(($_375)|(0));
   if ($444) { var $__sym_curr_char_sroa_0_0_ph = $__sym_space_end_sroa_0_0_lcssa;var $_ph = $426;var $452 = $425;label = 128; break; } else { label = 125; break; }
  case 125: 
   var $_sum=((($438)-($431))|0);
   var $445=(($_376+$_sum)|0);
   var $_sroa_052_0179 = $445;var $_sroa_051_0180 = $_375;label = 126; break;
  case 126: 
   var $_sroa_051_0180;
   var $_sroa_052_0179;
   var $446=HEAP8[($_sroa_052_0179)];
   var $447=HEAP8[($_sroa_051_0180)];
   var $448=(($446 << 24) >> 24)==(($447 << 24) >> 24);
   if ($448) { label = 127; break; } else { var $__sym_curr_char_sroa_0_0_ph = $_375;var $_ph = $426;var $452 = $425;label = 128; break; }
  case 127: 
   var $449=(($_sroa_052_0179+1)|0);
   var $450=(($_sroa_051_0180+1)|0);
   var $451=(($449)|(0))==(($443)|(0));
   if ($451) { var $__sym_curr_char_sroa_0_0_ph = $__sym_space_end_sroa_0_0_lcssa;var $_ph = $426;var $452 = $425;label = 128; break; } else { var $_sroa_052_0179 = $449;var $_sroa_051_0180 = $450;label = 126; break; }
  case 128: 
   var $452;
   var $_ph;
   var $__sym_curr_char_sroa_0_0_ph;
   var $453=$_ph & 1;
   var $454=(($453 << 24) >> 24)==0;
   var $_380400=$454 ? $25 : $452;
   var $455=(($_ph)&(255));
   var $456=$455 & 1;
   var $457=(($456)|(0))==0;
   var $458=HEAP32[(($26)>>2)];
   var $459=$455 >>> 1;
   var $460=$457 ? $459 : $458;
   var $461=(($_380400+$460)|0);
   var $462=(($__sym_curr_char_sroa_0_0_ph)|(0))==(($461)|(0));
   if ($462) { var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0_ph;label = 152; break; } else { var $463 = $74;var $__sym_curr_char_sroa_0_0401 = $__sym_curr_char_sroa_0_0_ph;label = 129; break; }
  case 129: 
   var $__sym_curr_char_sroa_0_0401;
   var $463;
   var $464=HEAP32[(($10)>>2)];
   var $465=(($464)|(0))==0;
   if ($465) { var $480 = 0;label = 135; break; } else { label = 130; break; }
  case 130: 
   var $467=(($464+12)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=(($464+16)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=(($468)|(0))==(($470)|(0));
   if ($471) { label = 131; break; } else { var $480 = $464;label = 135; break; }
  case 131: 
   var $473=$464;
   var $474=HEAP32[(($473)>>2)];
   var $475=(($474+36)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$476]($464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 132; break; } else { label = 22; break; }
  case 132: 
   var $478=(($477)|(0))==-1;
   if ($478) { label = 134; break; } else { label = 133; break; }
  case 133: 
   var $_pre359=HEAP32[(($10)>>2)];
   var $480 = $_pre359;label = 135; break;
  case 134: 
   HEAP32[(($10)>>2)]=0;
   var $480 = 0;label = 135; break;
  case 135: 
   var $480;
   var $481=(($480)|(0))==0;
   var $482=(($463)|(0))==0;
   if ($482) { label = 141; break; } else { label = 136; break; }
  case 136: 
   var $484=(($463+12)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=(($463+16)|0);
   var $487=HEAP32[(($486)>>2)];
   var $488=(($485)|(0))==(($487)|(0));
   if ($488) { label = 138; break; } else { label = 137; break; }
  case 137: 
   if ($481) { var $497 = $463;label = 143; break; } else { var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0401;label = 152; break; }
  case 138: 
   var $490=$463;
   var $491=HEAP32[(($490)>>2)];
   var $492=(($491+36)|0);
   var $493=HEAP32[(($492)>>2)];
   var $494 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$493]($463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 139; break; } else { label = 22; break; }
  case 139: 
   var $495=(($494)|(0))==-1;
   if ($495) { label = 140; break; } else { label = 142; break; }
  case 140: 
   HEAP32[(($11)>>2)]=0;
   label = 141; break;
  case 141: 
   if ($481) { var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0401;label = 152; break; } else { var $497 = 0;label = 143; break; }
  case 142: 
   if ($481) { var $497 = $463;label = 143; break; } else { var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0401;label = 152; break; }
  case 143: 
   var $497;
   var $498=HEAP32[(($10)>>2)];
   var $499=(($498+12)|0);
   var $500=HEAP32[(($499)>>2)];
   var $501=(($498+16)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=(($500)|(0))==(($502)|(0));
   if ($503) { label = 144; break; } else { label = 146; break; }
  case 144: 
   var $505=$498;
   var $506=HEAP32[(($505)>>2)];
   var $507=(($506+36)|0);
   var $508=HEAP32[(($507)>>2)];
   var $509 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$508]($498) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 145; break; } else { label = 22; break; }
  case 145: 
   var $extract_t81=(($509) & 255);
   var $_013_off0 = $extract_t81;label = 147; break;
  case 146: 
   var $511=HEAP8[($500)];
   var $_013_off0 = $511;label = 147; break;
  case 147: 
   var $_013_off0;
   var $512=HEAP8[($__sym_curr_char_sroa_0_0401)];
   var $513=(($_013_off0 << 24) >> 24)==(($512 << 24) >> 24);
   if ($513) { label = 148; break; } else { var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0401;label = 152; break; }
  case 148: 
   var $515=HEAP32[(($10)>>2)];
   var $516=(($515+12)|0);
   var $517=HEAP32[(($516)>>2)];
   var $518=(($515+16)|0);
   var $519=HEAP32[(($518)>>2)];
   var $520=(($517)|(0))==(($519)|(0));
   if ($520) { label = 149; break; } else { label = 150; break; }
  case 149: 
   var $522=$515;
   var $523=HEAP32[(($522)>>2)];
   var $524=(($523+40)|0);
   var $525=HEAP32[(($524)>>2)];
   var $526 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$525]($515) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 151; break; } else { label = 22; break; }
  case 150: 
   var $528=(($517+1)|0);
   HEAP32[(($516)>>2)]=$528;
   label = 151; break;
  case 151: 
   var $529=(($__sym_curr_char_sroa_0_0401+1)|0);
   var $_pre349=HEAP8[($2)];
   var $530=$_pre349 & 1;
   var $531=(($530 << 24) >> 24)==0;
   var $532=HEAP32[(($27)>>2)];
   var $_380=$531 ? $25 : $532;
   var $533=(($_pre349)&(255));
   var $534=$533 & 1;
   var $535=(($534)|(0))==0;
   var $536=HEAP32[(($26)>>2)];
   var $537=$533 >>> 1;
   var $538=$535 ? $537 : $536;
   var $539=(($_380+$538)|0);
   var $540=(($529)|(0))==(($539)|(0));
   if ($540) { var $__sym_curr_char_sroa_0_0_lcssa = $529;label = 152; break; } else { var $463 = $497;var $__sym_curr_char_sroa_0_0401 = $529;label = 129; break; }
  case 152: 
   var $__sym_curr_char_sroa_0_0_lcssa;
   if ($23) { label = 153; break; } else { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; }
  case 153: 
   var $541=HEAP8[($2)];
   var $542=$541 & 1;
   var $543=(($542 << 24) >> 24)==0;
   var $544=HEAP32[(($27)>>2)];
   var $_381=$543 ? $25 : $544;
   var $545=(($541)&(255));
   var $546=$545 & 1;
   var $547=(($546)|(0))==0;
   var $548=HEAP32[(($26)>>2)];
   var $549=$545 >>> 1;
   var $550=$547 ? $549 : $548;
   var $551=(($_381+$550)|0);
   var $552=(($__sym_curr_char_sroa_0_0_lcssa)|(0))==(($551)|(0));
   if ($552) { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $35;var $937 = $36;var $936 = $37;var $free132 = $free131268;var $935 = $38;label = 273; break; } else { label = 154; break; }
  case 154: 
   var $554=HEAP32[(($__err)>>2)];
   var $555=$554 | 4;
   HEAP32[(($__err)>>2)]=$555;
   var $_026 = 0;var $1042 = $37;var $free137 = $free131268;label = 308; break;
  case 155: 
   var $556;
   var $free134;
   var $557;
   var $558;
   var $559;
   var $__ng_0;
   var $560=HEAP32[(($10)>>2)];
   var $561=(($560)|(0))==0;
   if ($561) { var $576 = 0;label = 161; break; } else { label = 156; break; }
  case 156: 
   var $563=(($560+12)|0);
   var $564=HEAP32[(($563)>>2)];
   var $565=(($560+16)|0);
   var $566=HEAP32[(($565)>>2)];
   var $567=(($564)|(0))==(($566)|(0));
   if ($567) { label = 157; break; } else { var $576 = $560;label = 161; break; }
  case 157: 
   var $569=$560;
   var $570=HEAP32[(($569)>>2)];
   var $571=(($570+36)|0);
   var $572=HEAP32[(($571)>>2)];
   var $573 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$572]($560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 158; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 158: 
   var $574=(($573)|(0))==-1;
   if ($574) { label = 160; break; } else { label = 159; break; }
  case 159: 
   var $_pre360=HEAP32[(($10)>>2)];
   var $576 = $_pre360;label = 161; break;
  case 160: 
   HEAP32[(($10)>>2)]=0;
   var $576 = 0;label = 161; break;
  case 161: 
   var $576;
   var $577=(($576)|(0))==0;
   var $578=HEAP32[(($11)>>2)];
   var $579=(($578)|(0))==0;
   if ($579) { label = 167; break; } else { label = 162; break; }
  case 162: 
   var $581=(($578+12)|0);
   var $582=HEAP32[(($581)>>2)];
   var $583=(($578+16)|0);
   var $584=HEAP32[(($583)>>2)];
   var $585=(($582)|(0))==(($584)|(0));
   if ($585) { label = 164; break; } else { label = 163; break; }
  case 163: 
   if ($577) { label = 169; break; } else { label = 199; break; }
  case 164: 
   var $587=$578;
   var $588=HEAP32[(($587)>>2)];
   var $589=(($588+36)|0);
   var $590=HEAP32[(($589)>>2)];
   var $591 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$590]($578) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 165; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 165: 
   var $592=(($591)|(0))==-1;
   if ($592) { label = 166; break; } else { label = 168; break; }
  case 166: 
   HEAP32[(($11)>>2)]=0;
   label = 167; break;
  case 167: 
   if ($577) { label = 199; break; } else { label = 169; break; }
  case 168: 
   if ($577) { label = 169; break; } else { label = 199; break; }
  case 169: 
   var $594=HEAP32[(($10)>>2)];
   var $595=(($594+12)|0);
   var $596=HEAP32[(($595)>>2)];
   var $597=(($594+16)|0);
   var $598=HEAP32[(($597)>>2)];
   var $599=(($596)|(0))==(($598)|(0));
   if ($599) { label = 170; break; } else { label = 172; break; }
  case 170: 
   var $601=$594;
   var $602=HEAP32[(($601)>>2)];
   var $603=(($602+36)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$604]($594) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 171; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 171: 
   var $extract_t77=(($605) & 255);
   var $_017_off0 = $extract_t77;label = 173; break;
  case 172: 
   var $607=HEAP8[($596)];
   var $_017_off0 = $607;label = 173; break;
  case 173: 
   var $_017_off0;
   var $608=(($_017_off0 << 24) >> 24);
   var $609 = (function() { try { __THREW__ = 0; return _isascii($608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 174; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 174: 
   var $610=(($609)|(0))==0;
   if ($610) { label = 187; break; } else { label = 175; break; }
  case 175: 
   var $611=HEAP32[(($13)>>2)];
   var $612=(($611+($608<<1))|0);
   var $613=HEAP16[(($612)>>1)];
   var $614=$613 & 2048;
   var $phitmp79=(($614 << 16) >> 16)==0;
   if ($phitmp79) { label = 187; break; } else { label = 176; break; }
  case 176: 
   var $616=HEAP32[(($__wn)>>2)];
   var $617=(($616)|(0))==(($556)|(0));
   if ($617) { label = 177; break; } else { var $644 = $556;var $643 = $616;label = 186; break; }
  case 177: 
   var $619=HEAP32[(($34)>>2)];
   var $620=(($619)|(0))!=(((426))|(0));
   var $621=HEAP32[(($8)>>2)];
   var $622=$556;
   var $623=$621;
   var $624=((($622)-($623))|0);
   var $625=(($624)>>>(0)) < 2147483647;
   var $626=$624 << 1;
   var $__i=$625 ? $626 : -1;
   var $627=$620 ? $621 : 0;
   var $628=_realloc($627, $__i);
   var $629=(($628)|(0))==0;
   if ($629) { label = 178; break; } else { label = 179; break; }
  case 178: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 179; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 179: 
   if ($620) { label = 180; break; } else { label = 181; break; }
  case 180: 
   HEAP32[(($8)>>2)]=$628;
   var $638 = $628;label = 185; break;
  case 181: 
   var $_pr_i=HEAP32[(($8)>>2)];
   HEAP32[(($8)>>2)]=$628;
   var $632=(($_pr_i)|(0))==0;
   if ($632) { var $638 = $628;label = 185; break; } else { label = 182; break; }
  case 182: 
   var $634=HEAP32[(($34)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$634]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 183; break; } else { label = 184; break; }
  case 183: 
   var $_pre_i=HEAP32[(($8)>>2)];
   var $638 = $_pre_i;label = 185; break;
  case 184: 
   var $636$0 = ___cxa_find_matching_catch(-1, -1,0); $636$1 = tempRet0;
   var $637=$636$0;
   ___clang_call_terminate($637);
   throw "Reached an unreachable!";
  case 185: 
   var $638;
   HEAP32[(($34)>>2)]=220;
   var $639=(($638+$624)|0);
   HEAP32[(($__wn)>>2)]=$639;
   var $640=HEAP32[(($8)>>2)];
   var $641=(($640+$__i)|0);
   var $644 = $641;var $643 = $639;label = 186; break;
  case 186: 
   var $643;
   var $644;
   var $645=(($643+1)|0);
   HEAP32[(($__wn)>>2)]=$645;
   HEAP8[($643)]=$_017_off0;
   var $646=((($__ng_0)+(1))|0);
   var $__ng_1 = $646;var $688 = $559;var $687 = $558;var $686 = $557;var $free135 = $free134;var $685 = $644;label = 196; break;
  case 187: 
   var $647=HEAP8[($0)];
   var $648=(($647)&(255));
   var $649=$648 & 1;
   var $650=(($649)|(0))==0;
   var $651=HEAP32[(($33)>>2)];
   var $652=$648 >>> 1;
   var $653=$650 ? $652 : $651;
   var $654=(($653)|(0))==0;
   var $655=(($__ng_0)|(0))==0;
   var $or_cond108=$654 | $655;
   if ($or_cond108) { label = 199; break; } else { label = 188; break; }
  case 188: 
   var $657=HEAP8[($__ts)];
   var $658=(($_017_off0 << 24) >> 24)==(($657 << 24) >> 24);
   if ($658) { label = 189; break; } else { label = 199; break; }
  case 189: 
   var $660=(($558)|(0))==(($559)|(0));
   if ($660) { label = 190; break; } else { var $682 = $559;var $681 = $558;var $680 = $557;var $free136 = $free134;label = 195; break; }
  case 190: 
   var $662=(($free134)|(0))==(((426))|(0));
   var $663=$558;
   var $664=$557;
   var $665=((($663)-($664))|0);
   var $666=(($665)>>>(0)) < 2147483647;
   var $667=$665 << 1;
   var $__i111=$666 ? $667 : -1;
   var $668=$665 >> 2;
   if ($662) { var $671 = 0;label = 192; break; } else { label = 191; break; }
  case 191: 
   var $phitmp_i=$557;
   var $671 = $phitmp_i;label = 192; break;
  case 192: 
   var $671;
   var $672=_realloc($671, $__i111);
   var $673=$672;
   var $674=(($672)|(0))==0;
   if ($674) { label = 193; break; } else { label = 194; break; }
  case 193: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 194; break; } else { var $_ph_ph = $557;var $free141_ph_ph = $free134;label = 19; break; }
  case 194: 
   var $676=$__i111 >>> 2;
   var $677=(($673+($668<<2))|0);
   var $678=(($673+($676<<2))|0);
   var $682 = $678;var $681 = $677;var $680 = $673;var $free136 = 220;label = 195; break;
  case 195: 
   var $free136;
   var $680;
   var $681;
   var $682;
   var $683=(($681+4)|0);
   HEAP32[(($681)>>2)]=$__ng_0;
   var $__ng_1 = 0;var $688 = $682;var $687 = $683;var $686 = $680;var $free135 = $free136;var $685 = $556;label = 196; break;
  case 196: 
   var $685;
   var $free135;
   var $686;
   var $687;
   var $688;
   var $__ng_1;
   var $689=HEAP32[(($10)>>2)];
   var $690=(($689+12)|0);
   var $691=HEAP32[(($690)>>2)];
   var $692=(($689+16)|0);
   var $693=HEAP32[(($692)>>2)];
   var $694=(($691)|(0))==(($693)|(0));
   if ($694) { label = 197; break; } else { label = 198; break; }
  case 197: 
   var $696=$689;
   var $697=HEAP32[(($696)>>2)];
   var $698=(($697+40)|0);
   var $699=HEAP32[(($698)>>2)];
   var $700 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$699]($689) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0 = $__ng_1;var $559 = $688;var $558 = $687;var $557 = $686;var $free134 = $free135;var $556 = $685;label = 155; break; } else { var $_ph_ph = $686;var $free141_ph_ph = $free135;label = 19; break; }
  case 198: 
   var $702=(($691+1)|0);
   HEAP32[(($690)>>2)]=$702;
   var $__ng_0 = $__ng_1;var $559 = $688;var $558 = $687;var $557 = $686;var $free134 = $free135;var $556 = $685;label = 155; break;
  case 199: 
   var $704=(($557)|(0))==(($558)|(0));
   var $705=(($__ng_0)|(0))==0;
   var $or_cond109=$704 | $705;
   if ($or_cond109) { var $733 = $559;var $732 = $558;var $731 = $557;var $free133 = $free134;label = 207; break; } else { label = 200; break; }
  case 200: 
   var $707=(($558)|(0))==(($559)|(0));
   if ($707) { label = 201; break; } else { var $729 = $559;var $728 = $558;var $727 = $557;var $free = $free134;label = 206; break; }
  case 201: 
   var $709=(($free134)|(0))==(((426))|(0));
   var $710=$558;
   var $711=$557;
   var $712=((($710)-($711))|0);
   var $713=(($712)>>>(0)) < 2147483647;
   var $714=$712 << 1;
   var $__i116=$713 ? $714 : -1;
   var $715=$712 >> 2;
   if ($709) { var $718 = 0;label = 203; break; } else { label = 202; break; }
  case 202: 
   var $phitmp_i117=$557;
   var $718 = $phitmp_i117;label = 203; break;
  case 203: 
   var $718;
   var $719=_realloc($718, $__i116);
   var $720=$719;
   var $721=(($719)|(0))==0;
   if ($721) { label = 204; break; } else { label = 205; break; }
  case 204: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 205; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $557;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free134;label = 24; break; }
  case 205: 
   var $723=$__i116 >>> 2;
   var $724=(($720+($715<<2))|0);
   var $725=(($720+($723<<2))|0);
   var $729 = $725;var $728 = $724;var $727 = $720;var $free = 220;label = 206; break;
  case 206: 
   var $free;
   var $727;
   var $728;
   var $729;
   var $730=(($728+4)|0);
   HEAP32[(($728)>>2)]=$__ng_0;
   var $733 = $729;var $732 = $730;var $731 = $727;var $free133 = $free;label = 207; break;
  case 207: 
   var $free133;
   var $731;
   var $732;
   var $733;
   var $734=HEAP32[(($__fd)>>2)];
   var $735=(($734)|(0)) > 0;
   if ($735) { label = 208; break; } else { var $928 = $556;label = 271; break; }
  case 208: 
   var $737=HEAP32[(($10)>>2)];
   var $738=(($737)|(0))==0;
   if ($738) { var $753 = 0;label = 214; break; } else { label = 209; break; }
  case 209: 
   var $740=(($737+12)|0);
   var $741=HEAP32[(($740)>>2)];
   var $742=(($737+16)|0);
   var $743=HEAP32[(($742)>>2)];
   var $744=(($741)|(0))==(($743)|(0));
   if ($744) { label = 210; break; } else { var $753 = $737;label = 214; break; }
  case 210: 
   var $746=$737;
   var $747=HEAP32[(($746)>>2)];
   var $748=(($747+36)|0);
   var $749=HEAP32[(($748)>>2)];
   var $750 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$749]($737) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 211; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $731;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free133;label = 24; break; }
  case 211: 
   var $751=(($750)|(0))==-1;
   if ($751) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $_pre361=HEAP32[(($10)>>2)];
   var $753 = $_pre361;label = 214; break;
  case 213: 
   HEAP32[(($10)>>2)]=0;
   var $753 = 0;label = 214; break;
  case 214: 
   var $753;
   var $754=(($753)|(0))==0;
   var $755=HEAP32[(($11)>>2)];
   var $756=(($755)|(0))==0;
   if ($756) { label = 220; break; } else { label = 215; break; }
  case 215: 
   var $758=(($755+12)|0);
   var $759=HEAP32[(($758)>>2)];
   var $760=(($755+16)|0);
   var $761=HEAP32[(($760)>>2)];
   var $762=(($759)|(0))==(($761)|(0));
   if ($762) { label = 217; break; } else { label = 216; break; }
  case 216: 
   if ($754) { var $771 = $755;label = 222; break; } else { label = 227; break; }
  case 217: 
   var $764=$755;
   var $765=HEAP32[(($764)>>2)];
   var $766=(($765+36)|0);
   var $767=HEAP32[(($766)>>2)];
   var $768 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$767]($755) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 218; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $731;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free133;label = 24; break; }
  case 218: 
   var $769=(($768)|(0))==-1;
   if ($769) { label = 219; break; } else { label = 221; break; }
  case 219: 
   HEAP32[(($11)>>2)]=0;
   label = 220; break;
  case 220: 
   if ($754) { label = 227; break; } else { var $771 = 0;label = 222; break; }
  case 221: 
   if ($754) { var $771 = $755;label = 222; break; } else { label = 227; break; }
  case 222: 
   var $771;
   var $772=HEAP32[(($10)>>2)];
   var $773=(($772+12)|0);
   var $774=HEAP32[(($773)>>2)];
   var $775=(($772+16)|0);
   var $776=HEAP32[(($775)>>2)];
   var $777=(($774)|(0))==(($776)|(0));
   if ($777) { label = 223; break; } else { label = 225; break; }
  case 223: 
   var $779=$772;
   var $780=HEAP32[(($779)>>2)];
   var $781=(($780+36)|0);
   var $782=HEAP32[(($781)>>2)];
   var $783 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$782]($772) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 224; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $731;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free133;label = 24; break; }
  case 224: 
   var $extract_t70=(($783) & 255);
   var $_025_off0 = $extract_t70;label = 226; break;
  case 225: 
   var $785=HEAP8[($774)];
   var $_025_off0 = $785;label = 226; break;
  case 226: 
   var $_025_off0;
   var $786=HEAP8[($__dp)];
   var $787=(($_025_off0 << 24) >> 24)==(($786 << 24) >> 24);
   if ($787) { label = 228; break; } else { label = 227; break; }
  case 227: 
   var $789=HEAP32[(($__err)>>2)];
   var $790=$789 | 4;
   HEAP32[(($__err)>>2)]=$790;
   var $_026 = 0;var $1042 = $731;var $free137 = $free133;label = 308; break;
  case 228: 
   var $792=HEAP32[(($10)>>2)];
   var $793=(($792+12)|0);
   var $794=HEAP32[(($793)>>2)];
   var $795=(($792+16)|0);
   var $796=HEAP32[(($795)>>2)];
   var $797=(($794)|(0))==(($796)|(0));
   if ($797) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $799=$792;
   var $800=HEAP32[(($799)>>2)];
   var $801=(($800+40)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$802]($792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $807 = $556;var $806 = $771;label = 231; break; } else { var $_ph_ph147_ph_ph_ph_ph_ph = $731;var $free141_ph_ph146_ph_ph_ph_ph_ph = $free133;label = 24; break; }
  case 230: 
   var $805=(($794+1)|0);
   HEAP32[(($793)>>2)]=$805;
   var $807 = $556;var $806 = $771;label = 231; break;
  case 231: 
   var $806;
   var $807;
   var $808=HEAP32[(($10)>>2)];
   var $809=(($808)|(0))==0;
   if ($809) { var $824 = 0;label = 237; break; } else { label = 232; break; }
  case 232: 
   var $811=(($808+12)|0);
   var $812=HEAP32[(($811)>>2)];
   var $813=(($808+16)|0);
   var $814=HEAP32[(($813)>>2)];
   var $815=(($812)|(0))==(($814)|(0));
   if ($815) { label = 233; break; } else { var $824 = $808;label = 237; break; }
  case 233: 
   var $817=$808;
   var $818=HEAP32[(($817)>>2)];
   var $819=(($818+36)|0);
   var $820=HEAP32[(($819)>>2)];
   var $821 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$820]($808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 234; break; } else { label = 20; break; }
  case 234: 
   var $822=(($821)|(0))==-1;
   if ($822) { label = 236; break; } else { label = 235; break; }
  case 235: 
   var $_pre362=HEAP32[(($10)>>2)];
   var $824 = $_pre362;label = 237; break;
  case 236: 
   HEAP32[(($10)>>2)]=0;
   var $824 = 0;label = 237; break;
  case 237: 
   var $824;
   var $825=(($824)|(0))==0;
   var $826=(($806)|(0))==0;
   if ($826) { label = 243; break; } else { label = 238; break; }
  case 238: 
   var $828=(($806+12)|0);
   var $829=HEAP32[(($828)>>2)];
   var $830=(($806+16)|0);
   var $831=HEAP32[(($830)>>2)];
   var $832=(($829)|(0))==(($831)|(0));
   if ($832) { label = 240; break; } else { label = 239; break; }
  case 239: 
   if ($825) { var $841 = $806;label = 245; break; } else { label = 252; break; }
  case 240: 
   var $834=$806;
   var $835=HEAP32[(($834)>>2)];
   var $836=(($835+36)|0);
   var $837=HEAP32[(($836)>>2)];
   var $838 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$837]($806) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 241; break; } else { label = 20; break; }
  case 241: 
   var $839=(($838)|(0))==-1;
   if ($839) { label = 242; break; } else { label = 244; break; }
  case 242: 
   HEAP32[(($11)>>2)]=0;
   label = 243; break;
  case 243: 
   if ($825) { label = 252; break; } else { var $841 = 0;label = 245; break; }
  case 244: 
   if ($825) { var $841 = $806;label = 245; break; } else { label = 252; break; }
  case 245: 
   var $841;
   var $842=HEAP32[(($10)>>2)];
   var $843=(($842+12)|0);
   var $844=HEAP32[(($843)>>2)];
   var $845=(($842+16)|0);
   var $846=HEAP32[(($845)>>2)];
   var $847=(($844)|(0))==(($846)|(0));
   if ($847) { label = 246; break; } else { label = 248; break; }
  case 246: 
   var $849=$842;
   var $850=HEAP32[(($849)>>2)];
   var $851=(($850+36)|0);
   var $852=HEAP32[(($851)>>2)];
   var $853 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$852]($842) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 247; break; } else { label = 20; break; }
  case 247: 
   var $extract_t73=(($853) & 255);
   var $_034_off0 = $extract_t73;label = 249; break;
  case 248: 
   var $855=HEAP8[($844)];
   var $_034_off0 = $855;label = 249; break;
  case 249: 
   var $_034_off0;
   var $856=(($_034_off0 << 24) >> 24);
   var $857 = (function() { try { __THREW__ = 0; return _isascii($856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 250; break; } else { label = 20; break; }
  case 250: 
   var $858=(($857)|(0))==0;
   if ($858) { label = 252; break; } else { label = 251; break; }
  case 251: 
   var $859=HEAP32[(($13)>>2)];
   var $860=(($859+($856<<1))|0);
   var $861=HEAP16[(($860)>>1)];
   var $862=$861 & 2048;
   var $phitmp=(($862 << 16) >> 16)==0;
   if ($phitmp) { label = 252; break; } else { label = 253; break; }
  case 252: 
   var $863=HEAP32[(($__err)>>2)];
   var $864=$863 | 4;
   HEAP32[(($__err)>>2)]=$864;
   var $_026 = 0;var $1042 = $731;var $free137 = $free133;label = 308; break;
  case 253: 
   var $866=HEAP32[(($__wn)>>2)];
   var $867=(($866)|(0))==(($807)|(0));
   if ($867) { label = 254; break; } else { var $894 = $807;var $893 = $866;label = 263; break; }
  case 254: 
   var $869=HEAP32[(($34)>>2)];
   var $870=(($869)|(0))!=(((426))|(0));
   var $871=HEAP32[(($8)>>2)];
   var $872=$807;
   var $873=$871;
   var $874=((($872)-($873))|0);
   var $875=(($874)>>>(0)) < 2147483647;
   var $876=$874 << 1;
   var $__i124=$875 ? $876 : -1;
   var $877=$870 ? $871 : 0;
   var $878=_realloc($877, $__i124);
   var $879=(($878)|(0))==0;
   if ($879) { label = 255; break; } else { label = 256; break; }
  case 255: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 256; break; } else { label = 20; break; }
  case 256: 
   if ($870) { label = 257; break; } else { label = 258; break; }
  case 257: 
   HEAP32[(($8)>>2)]=$878;
   var $888 = $878;label = 262; break;
  case 258: 
   var $_pr_i126=HEAP32[(($8)>>2)];
   HEAP32[(($8)>>2)]=$878;
   var $882=(($_pr_i126)|(0))==0;
   if ($882) { var $888 = $878;label = 262; break; } else { label = 259; break; }
  case 259: 
   var $884=HEAP32[(($34)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$884]($_pr_i126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 260; break; } else { label = 261; break; }
  case 260: 
   var $_pre_i127=HEAP32[(($8)>>2)];
   var $888 = $_pre_i127;label = 262; break;
  case 261: 
   var $886$0 = ___cxa_find_matching_catch(-1, -1,0); $886$1 = tempRet0;
   var $887=$886$0;
   ___clang_call_terminate($887);
   throw "Reached an unreachable!";
  case 262: 
   var $888;
   HEAP32[(($34)>>2)]=220;
   var $889=(($888+$874)|0);
   HEAP32[(($__wn)>>2)]=$889;
   var $890=HEAP32[(($8)>>2)];
   var $891=(($890+$__i124)|0);
   var $894 = $891;var $893 = $889;label = 263; break;
  case 263: 
   var $893;
   var $894;
   var $895=HEAP32[(($10)>>2)];
   var $896=(($895+12)|0);
   var $897=HEAP32[(($896)>>2)];
   var $898=(($895+16)|0);
   var $899=HEAP32[(($898)>>2)];
   var $900=(($897)|(0))==(($899)|(0));
   if ($900) { label = 264; break; } else { label = 266; break; }
  case 264: 
   var $902=$895;
   var $903=HEAP32[(($902)>>2)];
   var $904=(($903+36)|0);
   var $905=HEAP32[(($904)>>2)];
   var $906 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$905]($895) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 265; break; } else { label = 20; break; }
  case 265: 
   var $extract_t75=(($906) & 255);
   var $_pre350=HEAP32[(($__wn)>>2)];
   var $_035_off0 = $extract_t75;var $909 = $_pre350;label = 267; break;
  case 266: 
   var $908=HEAP8[($897)];
   var $_035_off0 = $908;var $909 = $893;label = 267; break;
  case 267: 
   var $909;
   var $_035_off0;
   var $910=(($909+1)|0);
   HEAP32[(($__wn)>>2)]=$910;
   HEAP8[($909)]=$_035_off0;
   var $911=HEAP32[(($__fd)>>2)];
   var $912=((($911)-(1))|0);
   HEAP32[(($__fd)>>2)]=$912;
   var $913=HEAP32[(($10)>>2)];
   var $914=(($913+12)|0);
   var $915=HEAP32[(($914)>>2)];
   var $916=(($913+16)|0);
   var $917=HEAP32[(($916)>>2)];
   var $918=(($915)|(0))==(($917)|(0));
   if ($918) { label = 268; break; } else { label = 270; break; }
  case 268: 
   var $920=$913;
   var $921=HEAP32[(($920)>>2)];
   var $922=(($921+40)|0);
   var $923=HEAP32[(($922)>>2)];
   var $924 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($913) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 269; break; } else { label = 20; break; }
  case 269: 
   var $925=(($912)|(0)) > 0;
   if ($925) { var $807 = $894;var $806 = $841;label = 231; break; } else { var $928 = $894;label = 271; break; }
  case 270: 
   var $927=(($915+1)|0);
   HEAP32[(($914)>>2)]=$927;
   label = 269; break;
  case 271: 
   var $928;
   var $929=HEAP32[(($__wn)>>2)];
   var $930=HEAP32[(($8)>>2)];
   var $931=(($929)|(0))==(($930)|(0));
   if ($931) { label = 272; break; } else { var $__trailing_sign_1 = $__trailing_sign_0271;var $938 = $733;var $937 = $732;var $936 = $731;var $free132 = $free133;var $935 = $928;label = 273; break; }
  case 272: 
   var $933=HEAP32[(($__err)>>2)];
   var $934=$933 | 4;
   HEAP32[(($__err)>>2)]=$934;
   var $_026 = 0;var $1042 = $731;var $free137 = $free133;label = 308; break;
  case 273: 
   var $935;
   var $free132;
   var $936;
   var $937;
   var $938;
   var $__trailing_sign_1;
   var $939=((($__p_0273)+(1))|0);
   var $940=(($939)>>>(0)) < 4;
   if ($940) { var $38 = $935;var $free131268 = $free132;var $37 = $936;var $36 = $937;var $35 = $938;var $__trailing_sign_0271 = $__trailing_sign_1;var $__p_0273 = $939;label = 3; break; } else { var $free131_lcssa = $free132;var $_lcssa209 = $936;var $_lcssa226 = $937;var $__trailing_sign_0_lcssa = $__trailing_sign_1;label = 274; break; }
  case 274: 
   var $__trailing_sign_0_lcssa;
   var $_lcssa226;
   var $_lcssa209;
   var $free131_lcssa;
   var $941=(($__trailing_sign_0_lcssa)|(0))==0;
   if ($941) { label = 305; break; } else { label = 275; break; }
  case 275: 
   var $942=$__trailing_sign_0_lcssa;
   var $943=$__trailing_sign_0_lcssa;
   var $944=(($942+1)|0);
   var $945=(($__trailing_sign_0_lcssa+8)|0);
   var $946=(($__trailing_sign_0_lcssa+4)|0);
   var $__i_0 = 1;label = 276; break;
  case 276: 
   var $__i_0;
   var $947=HEAP8[($943)];
   var $948=(($947)&(255));
   var $949=$948 & 1;
   var $950=(($949)|(0))==0;
   if ($950) { label = 278; break; } else { label = 277; break; }
  case 277: 
   var $952=HEAP32[(($946)>>2)];
   var $955 = $952;label = 279; break;
  case 278: 
   var $954=$948 >>> 1;
   var $955 = $954;label = 279; break;
  case 279: 
   var $955;
   var $956=(($__i_0)>>>(0)) < (($955)>>>(0));
   if ($956) { label = 280; break; } else { label = 305; break; }
  case 280: 
   var $958=HEAP32[(($10)>>2)];
   var $959=(($958)|(0))==0;
   if ($959) { var $974 = 0;label = 286; break; } else { label = 281; break; }
  case 281: 
   var $961=(($958+12)|0);
   var $962=HEAP32[(($961)>>2)];
   var $963=(($958+16)|0);
   var $964=HEAP32[(($963)>>2)];
   var $965=(($962)|(0))==(($964)|(0));
   if ($965) { label = 282; break; } else { var $974 = $958;label = 286; break; }
  case 282: 
   var $967=$958;
   var $968=HEAP32[(($967)>>2)];
   var $969=(($968+36)|0);
   var $970=HEAP32[(($969)>>2)];
   var $971 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$970]($958) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 283; break; } else { label = 18; break; }
  case 283: 
   var $972=(($971)|(0))==-1;
   if ($972) { label = 285; break; } else { label = 284; break; }
  case 284: 
   var $_pre363=HEAP32[(($10)>>2)];
   var $974 = $_pre363;label = 286; break;
  case 285: 
   HEAP32[(($10)>>2)]=0;
   var $974 = 0;label = 286; break;
  case 286: 
   var $974;
   var $975=(($974)|(0))==0;
   var $976=HEAP32[(($11)>>2)];
   var $977=(($976)|(0))==0;
   if ($977) { label = 292; break; } else { label = 287; break; }
  case 287: 
   var $979=(($976+12)|0);
   var $980=HEAP32[(($979)>>2)];
   var $981=(($976+16)|0);
   var $982=HEAP32[(($981)>>2)];
   var $983=(($980)|(0))==(($982)|(0));
   if ($983) { label = 289; break; } else { label = 288; break; }
  case 288: 
   if ($975) { label = 294; break; } else { label = 301; break; }
  case 289: 
   var $985=$976;
   var $986=HEAP32[(($985)>>2)];
   var $987=(($986+36)|0);
   var $988=HEAP32[(($987)>>2)];
   var $989 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$988]($976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 290; break; } else { label = 18; break; }
  case 290: 
   var $990=(($989)|(0))==-1;
   if ($990) { label = 291; break; } else { label = 293; break; }
  case 291: 
   HEAP32[(($11)>>2)]=0;
   label = 292; break;
  case 292: 
   if ($975) { label = 301; break; } else { label = 294; break; }
  case 293: 
   if ($975) { label = 294; break; } else { label = 301; break; }
  case 294: 
   var $992=HEAP32[(($10)>>2)];
   var $993=(($992+12)|0);
   var $994=HEAP32[(($993)>>2)];
   var $995=(($992+16)|0);
   var $996=HEAP32[(($995)>>2)];
   var $997=(($994)|(0))==(($996)|(0));
   if ($997) { label = 295; break; } else { label = 297; break; }
  case 295: 
   var $999=$992;
   var $1000=HEAP32[(($999)>>2)];
   var $1001=(($1000+36)|0);
   var $1002=HEAP32[(($1001)>>2)];
   var $1003 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1002]($992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 296; break; } else { label = 18; break; }
  case 296: 
   var $extract_t=(($1003) & 255);
   var $_047_off0 = $extract_t;label = 298; break;
  case 297: 
   var $1005=HEAP8[($994)];
   var $_047_off0 = $1005;label = 298; break;
  case 298: 
   var $_047_off0;
   var $1006=HEAP8[($943)];
   var $1007=$1006 & 1;
   var $1008=(($1007 << 24) >> 24)==0;
   if ($1008) { var $1011 = $944;label = 300; break; } else { label = 299; break; }
  case 299: 
   var $1010=HEAP32[(($945)>>2)];
   var $1011 = $1010;label = 300; break;
  case 300: 
   var $1011;
   var $1012=(($1011+$__i_0)|0);
   var $1013=HEAP8[($1012)];
   var $1014=(($_047_off0 << 24) >> 24)==(($1013 << 24) >> 24);
   if ($1014) { label = 302; break; } else { label = 301; break; }
  case 301: 
   var $1016=HEAP32[(($__err)>>2)];
   var $1017=$1016 | 4;
   HEAP32[(($__err)>>2)]=$1017;
   var $_026 = 0;var $1042 = $_lcssa209;var $free137 = $free131_lcssa;label = 308; break;
  case 302: 
   var $1019=((($__i_0)+(1))|0);
   var $1020=HEAP32[(($10)>>2)];
   var $1021=(($1020+12)|0);
   var $1022=HEAP32[(($1021)>>2)];
   var $1023=(($1020+16)|0);
   var $1024=HEAP32[(($1023)>>2)];
   var $1025=(($1022)|(0))==(($1024)|(0));
   if ($1025) { label = 303; break; } else { label = 304; break; }
  case 303: 
   var $1027=$1020;
   var $1028=HEAP32[(($1027)>>2)];
   var $1029=(($1028+40)|0);
   var $1030=HEAP32[(($1029)>>2)];
   var $1031 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1030]($1020) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0 = $1019;label = 276; break; } else { label = 18; break; }
  case 304: 
   var $1033=(($1022+1)|0);
   HEAP32[(($1021)>>2)]=$1033;
   var $__i_0 = $1019;label = 276; break;
  case 305: 
   var $1034=(($_lcssa209)|(0))==(($_lcssa226)|(0));
   if ($1034) { var $_026 = 1;var $1042 = $_lcssa226;var $free137 = $free131_lcssa;label = 308; break; } else { label = 306; break; }
  case 306: 
   HEAP32[(($__et)>>2)]=0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $_lcssa209, $_lcssa226, $__et);
   var $1036=HEAP32[(($__et)>>2)];
   var $1037=(($1036)|(0))==0;
   if ($1037) { var $_026 = 1;var $1042 = $_lcssa209;var $free137 = $free131_lcssa;label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1039=HEAP32[(($__err)>>2)];
   var $1040=$1039 | 4;
   HEAP32[(($__err)>>2)]=$1040;
   var $_026 = 0;var $1042 = $_lcssa209;var $free137 = $free131_lcssa;label = 308; break;
  case 308: 
   var $free137;
   var $1042;
   var $_026;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $1043=(($1042)|(0))==0;
   if ($1043) { label = 311; break; } else { label = 309; break; }
  case 309: 
   var $1045=$1042;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free137]($1045) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 311; break; } else { label = 310; break; }
  case 310: 
   var $1047$0 = ___cxa_find_matching_catch(-1, -1,0); $1047$1 = tempRet0;
   var $1048=$1047$0;
   ___clang_call_terminate($1048);
   throw "Reached an unreachable!";
  case 311: 
   STACKTOP = sp;
   return $_026;
  case 312: 
   ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=___cxa_allocate_exception(8);
   var $2=$1;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2, $msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   ___cxa_throw($1, 8456, (44));
   throw "Reached an unreachable!";
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1); $5$1 = tempRet0;
   ___cxa_free_exception($1);
   ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__wbuf=(sp)+(16);
   var $__wb=(sp)+(120);
   var $__wn=(sp)+(128);
   var $__loc=(sp)+(136);
   var $__neg=(sp)+(144);
   var $1=(sp)+(152);
   var $2=(($__wbuf)|0);
   var $3=(($__wb)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=(($__wb+4)|0);
   HEAP32[(($4)>>2)]=426;
   var $5=(($__wbuf+100)|0);
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 16; break; }
  case 2: 
   var $7=(($__loc)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $10=HEAP32[((((13704)|0))>>2)];
   var $11=(($10)|(0))==-1;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=(($__p_i_i_i)|0);
   HEAP32[(($13)>>2)]=13704;
   var $14=(($__p_i_i_i+4)|0);
   HEAP32[(($14)>>2)]=(26);
   var $15=(($__p_i_i_i+8)|0);
   HEAP32[(($15)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $9, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 40; break; }
  case 4: 
   var $16=HEAP32[((((13708)|0))>>2)];
   var $17=((($16)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $18=(($8+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($8+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$19;
   var $23=$21;
   var $24=((($22)-($23))|0);
   var $25=$24 >> 2;
   var $26=(($25)>>>(0)) > (($17)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=(($21+($17<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $30=___cxa_allocate_exception(4);
   var $31=$30;
   __ZNSt8bad_castC2Ev($31);
   (function() { try { __THREW__ = 0; return ___cxa_throw($30, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 40; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $32=$28;
   HEAP8[($__neg)]=0;
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($1)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($__iob+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $1, $__intl, $__loc, $37, $__err, $__neg, $32, $__wb, $__wn, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 40; break; }
  case 9: 
   if ($38) { label = 10; break; } else { label = 22; break; }
  case 10: 
   var $41=$__v;
   var $42=HEAP8[($41)];
   var $43=$42 & 1;
   var $44=(($43 << 24) >> 24)==0;
   if ($44) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $46=(($__v+8)|0);
   var $47=HEAP32[(($46)>>2)];
   HEAP8[($47)]=0;
   var $48=(($__v+4)|0);
   HEAP32[(($48)>>2)]=0;
   label = 13; break;
  case 12: 
   var $50=$__v;
   var $51=(($50+1)|0);
   HEAP8[($51)]=0;
   HEAP8[($41)]=0;
   label = 13; break;
  case 13: 
   var $52=HEAP8[($__neg)];
   var $53=$52 & 1;
   var $54=(($53 << 24) >> 24)==0;
   var $_pre9=$28;
   if ($54) { label = 17; break; } else { label = 14; break; }
  case 14: 
   var $56=HEAP32[(($_pre9)>>2)];
   var $57=(($56+28)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($32, 45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 40; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, $59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 40; break; }
  case 16: 
   var $60$0 = ___cxa_find_matching_catch(-1, -1); $60$1 = tempRet0;
   var $61=$60$0;
   var $62=$60$1;
   HEAP32[(($3)>>2)]=0;
   var $136 = $2;var $_0312 = $62;var $_0214 = $61;label = 41; break;
  case 17: 
   var $63=HEAP32[(($_pre9)>>2)];
   var $64=(($63+28)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($32, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 40; break; }
  case 18: 
   var $67=HEAP32[(($3)>>2)];
   var $68=HEAP32[(($__wn)>>2)];
   var $69=((($68)-(1))|0);
   var $70=(($67)>>>(0)) < (($69)>>>(0));
   if ($70) { var $__w_05 = $67;label = 20; break; } else { var $__w_0_lcssa = $67;label = 21; break; }
  case 19: 
   var $72=(($75)>>>(0)) < (($69)>>>(0));
   if ($72) { var $__w_05 = $75;label = 20; break; } else { var $__w_0_lcssa = $75;label = 21; break; }
  case 20: 
   var $__w_05;
   var $73=HEAP8[($__w_05)];
   var $74=(($73 << 24) >> 24)==(($66 << 24) >> 24);
   var $75=(($__w_05+1)|0);
   if ($74) { label = 19; break; } else { var $__w_0_lcssa = $__w_05;label = 21; break; }
  case 21: 
   var $__w_0_lcssa;
   var $76 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w_0_lcssa, $68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 40; break; }
  case 22: 
   var $78=(($__b)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))==0;
   if ($80) { var $95 = 0;label = 27; break; } else { label = 23; break; }
  case 23: 
   var $82=(($79+12)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($79+16)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0))==(($85)|(0));
   if ($86) { label = 24; break; } else { var $95 = $79;label = 27; break; }
  case 24: 
   var $88=$79;
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89+36)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 40; break; }
  case 25: 
   var $93=(($92)|(0))==-1;
   if ($93) { label = 26; break; } else { var $95 = $79;label = 27; break; }
  case 26: 
   HEAP32[(($78)>>2)]=0;
   var $95 = 0;label = 27; break;
  case 27: 
   var $95;
   var $96=(($95)|(0))==0;
   var $97=(($34)|(0))==0;
   if ($97) { label = 33; break; } else { label = 28; break; }
  case 28: 
   var $99=(($34+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($34+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($100)|(0))==(($102)|(0));
   if ($103) { label = 30; break; } else { label = 29; break; }
  case 29: 
   if ($96) { label = 36; break; } else { label = 35; break; }
  case 30: 
   var $105=$34;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+36)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 40; break; }
  case 31: 
   var $110=(($109)|(0))==-1;
   if ($110) { label = 32; break; } else { label = 34; break; }
  case 32: 
   HEAP32[(($33)>>2)]=0;
   label = 33; break;
  case 33: 
   if ($96) { label = 35; break; } else { label = 36; break; }
  case 34: 
   var $112=(($34)|(0))==0;
   var $tmp=$96 ^ $112;
   if ($tmp) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $114=HEAP32[(($__err)>>2)];
   var $115=$114 | 2;
   HEAP32[(($__err)>>2)]=$115;
   label = 36; break;
  case 36: 
   var $116=(($agg_result)|0);
   HEAP32[(($116)>>2)]=$95;
   var $117=HEAP32[(($7)>>2)];
   var $118=(($117)|0);
   var $119=__ZNSt3__114__shared_count16__release_sharedEv($118);
   var $120=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $121=(($120)|(0))==0;
   if ($121) { label = 39; break; } else { label = 37; break; }
  case 37: 
   var $123=HEAP32[(($4)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $125$0 = ___cxa_find_matching_catch(-1, -1,0); $125$1 = tempRet0;
   var $126=$125$0;
   ___clang_call_terminate($126);
   throw "Reached an unreachable!";
  case 39: 
   STACKTOP = sp;
   return;
  case 40: 
   var $128$0 = ___cxa_find_matching_catch(-1, -1); $128$1 = tempRet0;
   var $129=$128$0;
   var $130=$128$1;
   var $131=HEAP32[(($7)>>2)];
   var $132=(($131)|0);
   var $133=__ZNSt3__114__shared_count16__release_sharedEv($132);
   var $_pre=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $134=(($_pre)|(0))==0;
   if ($134) { var $_0313 = $130;var $_0215 = $129;label = 43; break; } else { var $136 = $_pre;var $_0312 = $130;var $_0214 = $129;label = 41; break; }
  case 41: 
   var $_0214;
   var $_0312;
   var $136;
   var $137=HEAP32[(($4)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]($136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0313 = $_0312;var $_0215 = $_0214;label = 43; break; } else { label = 42; break; }
  case 42: 
   var $139$0 = ___cxa_find_matching_catch(-1, -1,0); $139$1 = tempRet0;
   var $140=$139$0;
   ___clang_call_terminate($140);
   throw "Reached an unreachable!";
  case 43: 
   var $_0215;
   var $_0313;
   var $141$0=$_0215;
   var $141$1=0;
   var $142$0=$141$0;
   var $142$1=$_0313;
   ___resumeException($142$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=$this;
   var $3=$__first;
   var $4=HEAP8[($2)];
   var $5=(($4)&(255));
   var $6=$5 & 1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=(($this+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $13 = $10;label = 4; break;
  case 3: 
   var $12=$5 >>> 1;
   var $13 = $12;label = 4; break;
  case 4: 
   var $13;
   var $14=$4 & 1;
   var $15=(($14 << 24) >> 24)==0;
   if ($15) { var $22 = 10;var $21 = $4;label = 6; break; } else { label = 5; break; }
  case 5: 
   var $17=(($this)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18 & -2;
   var $phitmp=((($19)-(1))|0);
   var $20=(($18) & 255);
   var $22 = $phitmp;var $21 = $20;label = 6; break;
  case 6: 
   var $21;
   var $22;
   var $23=$__last;
   var $24=((($23)-($3))|0);
   var $25=(($__last)|(0))==(($__first)|(0));
   if ($25) { label = 17; break; } else { label = 7; break; }
  case 7: 
   var $27=((($22)-($13))|0);
   var $28=(($27)>>>(0)) < (($24)>>>(0));
   if ($28) { label = 8; break; } else { var $33 = $21;label = 9; break; }
  case 8: 
   var $30=((($13)+($24))|0);
   var $31=((($30)-($22))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $22, $31, $13, $13, 0, 0);
   var $_pre=HEAP8[($2)];
   var $33 = $_pre;label = 9; break;
  case 9: 
   var $33;
   var $34=$33 & 1;
   var $35=(($34 << 24) >> 24)==0;
   if ($35) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $37=(($this+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $41 = $38;label = 12; break;
  case 11: 
   var $40=(($1+1)|0);
   var $41 = $40;label = 12; break;
  case 12: 
   var $41;
   var $42=(($41+$13)|0);
   var $43=((($13)-($3))|0);
   var $scevgep=(($__last+$43)|0);
   var $scevgep4=$scevgep;
   var $_02 = $__first;var $__p_03 = $42;label = 13; break;
  case 13: 
   var $__p_03;
   var $_02;
   var $45=HEAP8[($_02)];
   HEAP8[($__p_03)]=$45;
   var $46=(($__p_03+1)|0);
   var $47=(($_02+1)|0);
   var $48=(($47)|(0))==(($__last)|(0));
   if ($48) { label = 14; break; } else { var $_02 = $47;var $__p_03 = $46;label = 13; break; }
  case 14: 
   var $scevgep5=(($41+$scevgep4)|0);
   HEAP8[($scevgep5)]=0;
   var $50=((($13)+($24))|0);
   var $51=HEAP8[($2)];
   var $52=$51 & 1;
   var $53=(($52 << 24) >> 24)==0;
   if ($53) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $55=(($this+4)|0);
   HEAP32[(($55)>>2)]=$50;
   label = 17; break;
  case 16: 
   var $57=$50 << 1;
   var $58=(($57) & 255);
   HEAP8[($2)]=$58;
   label = 17; break;
  case 17: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i33=sp;
   var $__p_i_i_i=(sp)+(16);
   var $1=(sp)+(32);
   var $2=(sp)+(40);
   var $3=$2;
   var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $5=$4;
   var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $7=$6;
   var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $9=$8;
   var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $12=$11;
   var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $14=$13;
   var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $16=$15;
   var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $18=$17;
   if ($__intl) { label = 2; break; } else { label = 28; break; }
  case 2: 
   var $tmpcast32=$1;
   var $20=(($__loc)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $23=HEAP32[((((14176)|0))>>2)];
   var $24=(($23)|(0))==-1;
   if ($24) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $26=(($__p_i_i_i)|0);
   HEAP32[(($26)>>2)]=14176;
   var $27=(($__p_i_i_i+4)|0);
   HEAP32[(($27)>>2)]=(26);
   var $28=(($__p_i_i_i+8)|0);
   HEAP32[(($28)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14176)|0), $22, 256);
   label = 4; break;
  case 4: 
   var $29=HEAP32[((((14180)|0))>>2)];
   var $30=((($29)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $31=(($21+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($21+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$32;
   var $36=$34;
   var $37=((($35)-($36))|0);
   var $38=$37 >> 2;
   var $39=(($38)>>>(0)) > (($30)>>>(0));
   if ($39) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $40=(($34+($30<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==0;
   if ($42) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $43=___cxa_allocate_exception(4);
   var $44=$43;
   __ZNSt8bad_castC2Ev($44);
   ___cxa_throw($43, 8440, (356));
   throw "Reached an unreachable!";
  case 7: 
   var $45=$41;
   var $46=$41;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+44)|0);
   var $49=HEAP32[(($48)>>2)];
   FUNCTION_TABLE[$49]($tmpcast32, $45);
   var $50=$__pat;
   var $51=HEAP32[(($1)>>2)];
   tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
   var $52=$41;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+32)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($2, $45);
   var $56=$__nsn;
   var $57=HEAP8[($56)];
   var $58=$57 & 1;
   var $59=(($58 << 24) >> 24)==0;
   if ($59) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $61=(($__nsn+8)|0);
   var $62=HEAP32[(($61)>>2)];
   HEAP8[($62)]=0;
   var $63=(($__nsn+4)|0);
   HEAP32[(($63)>>2)]=0;
   label = 10; break;
  case 9: 
   var $65=$__nsn;
   var $66=(($65+1)|0);
   HEAP8[($66)]=0;
   HEAP8[($56)]=0;
   label = 10; break;
  case 10: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $68$0 = ___cxa_find_matching_catch(-1, -1,0); $68$1 = tempRet0;
   var $69=$68$0;
   ___clang_call_terminate($69);
   throw "Reached an unreachable!";
  case 12: 
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   var $70=HEAP32[(($52)>>2)];
   var $71=(($70+28)|0);
   var $72=HEAP32[(($71)>>2)];
   FUNCTION_TABLE[$72]($4, $45);
   var $73=$__psn;
   var $74=HEAP8[($73)];
   var $75=$74 & 1;
   var $76=(($75 << 24) >> 24)==0;
   if ($76) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $78=(($__psn+8)|0);
   var $79=HEAP32[(($78)>>2)];
   HEAP8[($79)]=0;
   var $80=(($__psn+4)|0);
   HEAP32[(($80)>>2)]=0;
   label = 15; break;
  case 14: 
   var $82=$__psn;
   var $83=(($82+1)|0);
   HEAP8[($83)]=0;
   HEAP8[($73)]=0;
   label = 15; break;
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $85$0 = ___cxa_find_matching_catch(-1, -1,0); $85$1 = tempRet0;
   var $86=$85$0;
   ___clang_call_terminate($86);
   throw "Reached an unreachable!";
  case 17: 
   assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
   HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   var $87=$41;
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+12)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=FUNCTION_TABLE[$90]($45);
   HEAP8[($__dp)]=$91;
   var $92=HEAP32[(($87)>>2)];
   var $93=(($92+16)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=FUNCTION_TABLE[$94]($45);
   HEAP8[($__ts)]=$95;
   var $96=HEAP32[(($52)>>2)];
   var $97=(($96+20)|0);
   var $98=HEAP32[(($97)>>2)];
   FUNCTION_TABLE[$98]($6, $45);
   var $99=$__grp;
   var $100=HEAP8[($99)];
   var $101=$100 & 1;
   var $102=(($101 << 24) >> 24)==0;
   if ($102) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $104=(($__grp+8)|0);
   var $105=HEAP32[(($104)>>2)];
   HEAP8[($105)]=0;
   var $106=(($__grp+4)|0);
   HEAP32[(($106)>>2)]=0;
   label = 20; break;
  case 19: 
   var $108=$__grp;
   var $109=(($108+1)|0);
   HEAP8[($109)]=0;
   HEAP8[($99)]=0;
   label = 20; break;
  case 20: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $111$0 = ___cxa_find_matching_catch(-1, -1,0); $111$1 = tempRet0;
   var $112=$111$0;
   ___clang_call_terminate($112);
   throw "Reached an unreachable!";
  case 22: 
   assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
   var $113=HEAP32[(($52)>>2)];
   var $114=(($113+24)|0);
   var $115=HEAP32[(($114)>>2)];
   FUNCTION_TABLE[$115]($8, $45);
   var $116=$__sym;
   var $117=HEAP8[($116)];
   var $118=$117 & 1;
   var $119=(($118 << 24) >> 24)==0;
   if ($119) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $121=(($__sym+8)|0);
   var $122=HEAP32[(($121)>>2)];
   HEAP8[($122)]=0;
   var $123=(($__sym+4)|0);
   HEAP32[(($123)>>2)]=0;
   label = 25; break;
  case 24: 
   var $125=$__sym;
   var $126=(($125+1)|0);
   HEAP8[($126)]=0;
   HEAP8[($116)]=0;
   label = 25; break;
  case 25: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $128$0 = ___cxa_find_matching_catch(-1, -1,0); $128$1 = tempRet0;
   var $129=$128$0;
   ___clang_call_terminate($129);
   throw "Reached an unreachable!";
  case 27: 
   assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
   var $130=$41;
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+36)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=FUNCTION_TABLE[$133]($45);
   var $storemerge = $134;label = 54; break;
  case 28: 
   var $tmpcast=$10;
   var $136=(($__loc)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$__p_i_i_i33;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $139=HEAP32[((((14184)|0))>>2)];
   var $140=(($139)|(0))==-1;
   if ($140) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $142=(($__p_i_i_i33)|0);
   HEAP32[(($142)>>2)]=14184;
   var $143=(($__p_i_i_i33+4)|0);
   HEAP32[(($143)>>2)]=(26);
   var $144=(($__p_i_i_i33+8)|0);
   HEAP32[(($144)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14184)|0), $138, 256);
   label = 30; break;
  case 30: 
   var $145=HEAP32[((((14188)|0))>>2)];
   var $146=((($145)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $147=(($137+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($137+8)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$148;
   var $152=$150;
   var $153=((($151)-($152))|0);
   var $154=$153 >> 2;
   var $155=(($154)>>>(0)) > (($146)>>>(0));
   if ($155) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $156=(($150+($146<<2))|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157)|(0))==0;
   if ($158) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $159=___cxa_allocate_exception(4);
   var $160=$159;
   __ZNSt8bad_castC2Ev($160);
   ___cxa_throw($159, 8440, (356));
   throw "Reached an unreachable!";
  case 33: 
   var $161=$157;
   var $162=$157;
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+44)|0);
   var $165=HEAP32[(($164)>>2)];
   FUNCTION_TABLE[$165]($tmpcast, $161);
   var $166=$__pat;
   var $167=HEAP32[(($10)>>2)];
   tempBigInt=$167;HEAP8[($166)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))|0)]=tempBigInt&0xff;
   var $168=$157;
   var $169=HEAP32[(($168)>>2)];
   var $170=(($169+32)|0);
   var $171=HEAP32[(($170)>>2)];
   FUNCTION_TABLE[$171]($11, $161);
   var $172=$__nsn;
   var $173=HEAP8[($172)];
   var $174=$173 & 1;
   var $175=(($174 << 24) >> 24)==0;
   if ($175) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $177=(($__nsn+8)|0);
   var $178=HEAP32[(($177)>>2)];
   HEAP8[($178)]=0;
   var $179=(($__nsn+4)|0);
   HEAP32[(($179)>>2)]=0;
   label = 36; break;
  case 35: 
   var $181=$__nsn;
   var $182=(($181+1)|0);
   HEAP8[($182)]=0;
   HEAP8[($172)]=0;
   label = 36; break;
  case 36: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $184$0 = ___cxa_find_matching_catch(-1, -1,0); $184$1 = tempRet0;
   var $185=$184$0;
   ___clang_call_terminate($185);
   throw "Reached an unreachable!";
  case 38: 
   assert(12 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
   var $186=HEAP32[(($168)>>2)];
   var $187=(($186+28)|0);
   var $188=HEAP32[(($187)>>2)];
   FUNCTION_TABLE[$188]($13, $161);
   var $189=$__psn;
   var $190=HEAP8[($189)];
   var $191=$190 & 1;
   var $192=(($191 << 24) >> 24)==0;
   if ($192) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $194=(($__psn+8)|0);
   var $195=HEAP32[(($194)>>2)];
   HEAP8[($195)]=0;
   var $196=(($__psn+4)|0);
   HEAP32[(($196)>>2)]=0;
   label = 41; break;
  case 40: 
   var $198=$__psn;
   var $199=(($198+1)|0);
   HEAP8[($199)]=0;
   HEAP8[($189)]=0;
   label = 41; break;
  case 41: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $201$0 = ___cxa_find_matching_catch(-1, -1,0); $201$1 = tempRet0;
   var $202=$201$0;
   ___clang_call_terminate($202);
   throw "Reached an unreachable!";
  case 43: 
   assert(12 % 1 === 0);HEAP32[(($189)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($189)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($189)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
   var $203=$157;
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+12)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=FUNCTION_TABLE[$206]($161);
   HEAP8[($__dp)]=$207;
   var $208=HEAP32[(($203)>>2)];
   var $209=(($208+16)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=FUNCTION_TABLE[$210]($161);
   HEAP8[($__ts)]=$211;
   var $212=HEAP32[(($168)>>2)];
   var $213=(($212+20)|0);
   var $214=HEAP32[(($213)>>2)];
   FUNCTION_TABLE[$214]($15, $161);
   var $215=$__grp;
   var $216=HEAP8[($215)];
   var $217=$216 & 1;
   var $218=(($217 << 24) >> 24)==0;
   if ($218) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $220=(($__grp+8)|0);
   var $221=HEAP32[(($220)>>2)];
   HEAP8[($221)]=0;
   var $222=(($__grp+4)|0);
   HEAP32[(($222)>>2)]=0;
   label = 46; break;
  case 45: 
   var $224=$__grp;
   var $225=(($224+1)|0);
   HEAP8[($225)]=0;
   HEAP8[($215)]=0;
   label = 46; break;
  case 46: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $227$0 = ___cxa_find_matching_catch(-1, -1,0); $227$1 = tempRet0;
   var $228=$227$0;
   ___clang_call_terminate($228);
   throw "Reached an unreachable!";
  case 48: 
   assert(12 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($215)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
   var $229=HEAP32[(($168)>>2)];
   var $230=(($229+24)|0);
   var $231=HEAP32[(($230)>>2)];
   FUNCTION_TABLE[$231]($17, $161);
   var $232=$__sym;
   var $233=HEAP8[($232)];
   var $234=$233 & 1;
   var $235=(($234 << 24) >> 24)==0;
   if ($235) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $237=(($__sym+8)|0);
   var $238=HEAP32[(($237)>>2)];
   HEAP8[($238)]=0;
   var $239=(($__sym+4)|0);
   HEAP32[(($239)>>2)]=0;
   label = 51; break;
  case 50: 
   var $241=$__sym;
   var $242=(($241+1)|0);
   HEAP8[($242)]=0;
   HEAP8[($232)]=0;
   label = 51; break;
  case 51: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $244$0 = ___cxa_find_matching_catch(-1, -1,0); $244$1 = tempRet0;
   var $245=$244$0;
   ___clang_call_terminate($245);
   throw "Reached an unreachable!";
  case 53: 
   assert(12 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($232)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($232)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
   var $246=$157;
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247+36)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=FUNCTION_TABLE[$249]($161);
   var $storemerge = $250;label = 54; break;
  case 54: 
   var $storemerge;
   HEAP32[(($__fd)>>2)]=$storemerge;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__wbuf=(sp)+(16);
   var $__wb=(sp)+(416);
   var $__wn=(sp)+(424);
   var $__loc=(sp)+(432);
   var $__neg=(sp)+(440);
   var $1=(sp)+(448);
   var $__atoms=(sp)+(456);
   var $__nbuf=(sp)+(496);
   var $2=(($__wbuf)|0);
   var $3=(($__wb)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=(($__wb+4)|0);
   HEAP32[(($4)>>2)]=426;
   var $5=(($__wbuf+400)|0);
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $7=(($__loc)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $10=HEAP32[((((13696)|0))>>2)];
   var $11=(($10)|(0))==-1;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=(($__p_i_i_i)|0);
   HEAP32[(($13)>>2)]=13696;
   var $14=(($__p_i_i_i+4)|0);
   HEAP32[(($14)>>2)]=(26);
   var $15=(($__p_i_i_i+8)|0);
   HEAP32[(($15)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $9, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 15; break; }
  case 4: 
   var $16=HEAP32[((((13700)|0))>>2)];
   var $17=((($16)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $18=(($8+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($8+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$19;
   var $23=$21;
   var $24=((($22)-($23))|0);
   var $25=$24 >> 2;
   var $26=(($25)>>>(0)) > (($17)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=(($21+($17<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $30=___cxa_allocate_exception(4);
   var $31=$30;
   __ZNSt8bad_castC2Ev($31);
   (function() { try { __THREW__ = 0; return ___cxa_throw($30, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 15; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $32=$28;
   HEAP8[($__neg)]=0;
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($1)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($__iob+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $1, $__intl, $__loc, $37, $__err, $__neg, $32, $__wb, $__wn, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 15; break; }
  case 9: 
   if ($38) { label = 10; break; } else { label = 34; break; }
  case 10: 
   var $41=(($__atoms)|0);
   var $42=$28;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+48)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($32, ((2040)|0), ((2050)|0), $41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $47=(($__nbuf)|0);
   var $48=HEAP32[(($__wn)>>2)];
   var $49=HEAP32[(($3)>>2)];
   var $50=$48;
   var $51=$49;
   var $52=((($50)-($51))|0);
   var $53=(($52)|(0)) > 392;
   if ($53) { label = 12; break; } else { var $__nc_0 = $47;var $__h_sroa_0_1 = 0;label = 19; break; }
  case 12: 
   var $54=$52 >> 2;
   var $55=((($54)+(2))|0);
   var $56=_malloc($55);
   var $57=(($56)|(0))==0;
   if ($57) { label = 13; break; } else { var $__nc_0 = $56;var $__h_sroa_0_1 = $56;label = 19; break; }
  case 13: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0 = 0;var $__h_sroa_0_1 = 0;label = 19; break; } else { var $__h_sroa_0_0 = 0;label = 16; break; }
  case 14: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   var $61=$59$1;
   HEAP32[(($3)>>2)]=0;
   var $172 = $2;var $_1412 = $60;var $_114 = $61;label = 54; break;
  case 15: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1); $63$1 = tempRet0;
   var $64=$63$0;
   var $65=$63$1;
   var $_02 = $65;var $_03 = $64;label = 53; break;
  case 16: 
   var $__h_sroa_0_0;
   var $67$0 = ___cxa_find_matching_catch(-1, -1); $67$1 = tempRet0;
   var $eh_lpad_body$1 = $67$1;var $eh_lpad_body$0 = $67$0;var $__h_sroa_0_0_lpad_body = $__h_sroa_0_0;label = 17; break;
  case 17: 
   var $__h_sroa_0_0_lpad_body;
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $68=$eh_lpad_body$0;
   var $69=$eh_lpad_body$1;
   var $70=(($__h_sroa_0_0_lpad_body)|(0))==0;
   if ($70) { var $_02 = $69;var $_03 = $68;label = 53; break; } else { label = 18; break; }
  case 18: 
   _free($__h_sroa_0_0_lpad_body);
   var $_02 = $69;var $_03 = $68;label = 53; break;
  case 19: 
   var $__h_sroa_0_1;
   var $__nc_0;
   var $73=HEAP8[($__neg)];
   var $74=$73 & 1;
   var $75=(($74 << 24) >> 24)==0;
   if ($75) { var $__nc_1 = $__nc_0;label = 21; break; } else { label = 20; break; }
  case 20: 
   var $77=(($__nc_0+1)|0);
   HEAP8[($__nc_0)]=45;
   var $__nc_1 = $77;label = 21; break;
  case 21: 
   var $__nc_1;
   var $79=(($49)>>>(0)) < (($48)>>>(0));
   if ($79) { label = 22; break; } else { var $__nc_2_lcssa = $__nc_1;label = 27; break; }
  case 22: 
   var $80=(($__atoms+40)|0);
   var $81=$__atoms;
   var $__nc_29 = $__nc_1;var $__w_010 = $49;label = 23; break;
  case 23: 
   var $__w_010;
   var $__nc_29;
   var $83=HEAP32[(($__w_010)>>2)];
   var $_08 = $41;label = 25; break;
  case 24: 
   var $85=(($89)|(0))==(($80)|(0));
   if ($85) { var $_0_lcssa = $80;label = 26; break; } else { var $_08 = $89;label = 25; break; }
  case 25: 
   var $_08;
   var $87=HEAP32[(($_08)>>2)];
   var $88=(($87)|(0))==(($83)|(0));
   var $89=(($_08+4)|0);
   if ($88) { var $_0_lcssa = $_08;label = 26; break; } else { label = 24; break; }
  case 26: 
   var $_0_lcssa;
   var $90=$_0_lcssa;
   var $91=((($90)-($81))|0);
   var $92=$91 >> 2;
   var $93=((2040+$92)|0);
   var $94=HEAP8[($93)];
   HEAP8[($__nc_29)]=$94;
   var $95=(($__w_010+4)|0);
   var $96=(($__nc_29+1)|0);
   var $97=HEAP32[(($__wn)>>2)];
   var $98=(($95)>>>(0)) < (($97)>>>(0));
   if ($98) { var $__nc_29 = $96;var $__w_010 = $95;label = 23; break; } else { var $__nc_2_lcssa = $96;label = 27; break; }
  case 27: 
   var $__nc_2_lcssa;
   HEAP8[($__nc_2_lcssa)]=0;
   var $99=_sscanf($47, ((1440)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
   var $100=(($99)|(0))==1;
   if ($100) { label = 32; break; } else { label = 28; break; }
  case 28: 
   var $102=___cxa_allocate_exception(8);
   var $103=$102;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($103, ((1400)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 31; break; }
  case 29: 
   (function() { try { __THREW__ = 0; return ___cxa_throw($102, 8456, (44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { var $__h_sroa_0_0 = $__h_sroa_0_1;label = 16; break; }
  case 30: 
   throw "Reached an unreachable!";
  case 31: 
   var $106$0 = ___cxa_find_matching_catch(-1, -1); $106$1 = tempRet0;
   ___cxa_free_exception($102);
   var $eh_lpad_body$1 = $106$1;var $eh_lpad_body$0 = $106$0;var $__h_sroa_0_0_lpad_body = $__h_sroa_0_1;label = 17; break;
  case 32: 
   var $108=(($__h_sroa_0_1)|(0))==0;
   if ($108) { label = 34; break; } else { label = 33; break; }
  case 33: 
   _free($__h_sroa_0_1);
   label = 34; break;
  case 34: 
   var $110=(($__b)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111)|(0))==0;
   if ($112) { var $129 = 0;label = 40; break; } else { label = 35; break; }
  case 35: 
   var $114=(($111+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($111+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $120=$111;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_05 = $124;label = 38; break; } else { label = 15; break; }
  case 37: 
   var $126=HEAP32[(($115)>>2)];
   var $_05 = $126;label = 38; break;
  case 38: 
   var $_05;
   var $127=(($_05)|(0))==-1;
   if ($127) { label = 39; break; } else { var $129 = $111;label = 40; break; }
  case 39: 
   HEAP32[(($110)>>2)]=0;
   var $129 = 0;label = 40; break;
  case 40: 
   var $129;
   var $130=(($129)|(0))==0;
   var $131=HEAP32[(($33)>>2)];
   var $132=(($131)|(0))==0;
   if ($132) { label = 46; break; } else { label = 41; break; }
  case 41: 
   var $134=(($131+12)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($131+16)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)|(0))==(($137)|(0));
   if ($138) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $140=$131;
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+36)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01 = $144;label = 44; break; } else { label = 15; break; }
  case 43: 
   var $146=HEAP32[(($135)>>2)];
   var $_01 = $146;label = 44; break;
  case 44: 
   var $_01;
   var $147=(($_01)|(0))==-1;
   if ($147) { label = 45; break; } else { label = 47; break; }
  case 45: 
   HEAP32[(($33)>>2)]=0;
   label = 46; break;
  case 46: 
   if ($130) { label = 48; break; } else { label = 49; break; }
  case 47: 
   var $149=(($131)|(0))==0;
   var $tmp=$130 ^ $149;
   if ($tmp) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $151=HEAP32[(($__err)>>2)];
   var $152=$151 | 2;
   HEAP32[(($__err)>>2)]=$152;
   label = 49; break;
  case 49: 
   var $154=(($agg_result)|0);
   HEAP32[(($154)>>2)]=$129;
   var $155=HEAP32[(($7)>>2)];
   var $156=(($155)|0);
   var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
   var $158=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $159=(($158)|(0))==0;
   if ($159) { label = 52; break; } else { label = 50; break; }
  case 50: 
   var $161=HEAP32[(($4)>>2)];
   var $162=$158;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $164$0 = ___cxa_find_matching_catch(-1, -1,0); $164$1 = tempRet0;
   var $165=$164$0;
   ___clang_call_terminate($165);
   throw "Reached an unreachable!";
  case 52: 
   STACKTOP = sp;
   return;
  case 53: 
   var $_03;
   var $_02;
   var $167=HEAP32[(($7)>>2)];
   var $168=(($167)|0);
   var $169=__ZNSt3__114__shared_count16__release_sharedEv($168);
   var $_pre=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $170=(($_pre)|(0))==0;
   if ($170) { var $_1413 = $_03;var $_115 = $_02;label = 56; break; } else { var $172 = $_pre;var $_1412 = $_03;var $_114 = $_02;label = 54; break; }
  case 54: 
   var $_114;
   var $_1412;
   var $172;
   var $173=HEAP32[(($4)>>2)];
   var $174=$172;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1413 = $_1412;var $_115 = $_114;label = 56; break; } else { label = 55; break; }
  case 55: 
   var $176$0 = ___cxa_find_matching_catch(-1, -1,0); $176$1 = tempRet0;
   var $177=$176$0;
   ___clang_call_terminate($177);
   throw "Reached an unreachable!";
  case 56: 
   var $_115;
   var $_1413;
   var $178$0=$_1413;
   var $178$1=0;
   var $179$0=$178$0;
   var $179$1=$_115;
   ___resumeException($179$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $0=sp;
   var $__gbuf=(sp)+(8);
   var $__pat=(sp)+(408);
   var $__dp=(sp)+(416);
   var $__ts=(sp)+(424);
   var $__grp=(sp)+(432);
   var $1=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   HEAP32[(($0)>>2)]=$__we;
   var $2=(($__gbuf)|0);
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   var $tmpcast=$__pat;
   var $3=$__sym;
   var $4=$__psn;
   var $5=$__nsn;
   var $6=$__spaces;
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
   HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
   HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 26; break; }
  case 2: 
   var $8=(($__gbuf+400)|0);
   var $9=(($__wb)|0);
   var $10=HEAP32[(($9)>>2)];
   HEAP32[(($__wn)>>2)]=$10;
   var $11=(($__b)|0);
   var $12=(($__e)|0);
   var $13=$__pat;
   var $14=$__ct;
   var $15=(($__nsn+4)|0);
   var $16=(($__nsn+8)|0);
   var $17=(($__psn+4)|0);
   var $18=(($__psn+8)|0);
   var $19=$__flags & 512;
   var $20=(($19)|(0))!=0;
   var $21=(($__sym+4)|0);
   var $22=(($__sym+8)|0);
   var $23=(($__spaces+4)|0);
   var $24=(($__spaces+8)|0);
   var $25=(($13+3)|0);
   var $26=(($__grp+4)|0);
   var $free85200 = 426;var $29 = $2;var $28 = $2;var $27 = $8;var $__trailing_sign_0203 = 0;var $__p_0205 = 0;label = 3; break;
  case 3: 
   var $__p_0205;
   var $__trailing_sign_0203;
   var $27;
   var $28;
   var $29;
   var $free85200;
   var $30=HEAP32[(($11)>>2)];
   var $31=(($30)|(0))==0;
   if ($31) { var $48 = 1;label = 10; break; } else { label = 4; break; }
  case 4: 
   var $33=(($30+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($30+16)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($34)|(0))==(($36)|(0));
   if ($37) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $39=$30;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+36)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_043 = $43;label = 7; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 6: 
   var $45=HEAP32[(($34)>>2)];
   var $_043 = $45;label = 7; break;
  case 7: 
   var $_043;
   var $46=(($_043)|(0))==-1;
   if ($46) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $_pre266=HEAP32[(($11)>>2)];
   var $phitmp=(($_pre266)|(0))==0;
   var $48 = $phitmp;label = 10; break;
  case 9: 
   HEAP32[(($11)>>2)]=0;
   var $48 = 1;label = 10; break;
  case 10: 
   var $48;
   var $49=HEAP32[(($12)>>2)];
   var $50=(($49)|(0))==0;
   if ($50) { label = 16; break; } else { label = 11; break; }
  case 11: 
   var $52=(($49+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($49+16)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($53)|(0))==(($55)|(0));
   if ($56) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $58=$49;
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+36)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_042 = $62;label = 14; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 13: 
   var $64=HEAP32[(($53)>>2)];
   var $_042 = $64;label = 14; break;
  case 14: 
   var $_042;
   var $65=(($_042)|(0))==-1;
   if ($65) { label = 15; break; } else { label = 17; break; }
  case 15: 
   HEAP32[(($12)>>2)]=0;
   label = 16; break;
  case 16: 
   if ($48) { var $free85_lcssa = $free85200;var $_lcssa = $29;var $_lcssa164 = $28;var $__trailing_sign_0_lcssa = $__trailing_sign_0203;label = 256; break; } else { var $70 = 0;label = 18; break; }
  case 17: 
   var $67=(($49)|(0))==0;
   var $68=$48 ^ $67;
   if ($68) { var $70 = $49;label = 18; break; } else { var $free85_lcssa = $free85200;var $_lcssa = $29;var $_lcssa164 = $28;var $__trailing_sign_0_lcssa = $__trailing_sign_0203;label = 256; break; }
  case 18: 
   var $70;
   var $71=(($13+$__p_0205)|0);
   var $72=HEAP8[($71)];
   var $73=(($72 << 24) >> 24);
   switch((($73)|(0))) {
   case 2:{
    label = 107; break;
   }
   case 4:{
    var $__ng_0 = 0;var $571 = $27;var $570 = $28;var $569 = $29;var $free88 = $free85200;label = 151; break;
   }
   case 1:{
    label = 30; break;
   }
   case 0:{
    label = 41; break;
   }
   case 3:{
    label = 66; break;
   }
   default: {
   var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
   }
   } break; 
  case 19: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;var $74 = $_lcssa;var $free95 = $free85_lcssa;label = 27; break;
  case 20: 
   var $free95_ph_ph;
   var $_ph_ph;
   var $lpad_loopexit102$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit102$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit102$1;var $lpad_phi$0 = $lpad_loopexit102$0;var $74 = $_ph_ph;var $free95 = $free95_ph_ph;label = 27; break;
  case 21: 
   var $lpad_loopexit116$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit116$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit116$1;var $lpad_phi$0 = $lpad_loopexit116$0;var $74 = $726;var $free95 = $free87;label = 27; break;
  case 22: 
   var $lpad_loopexit118$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit118$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit118$1;var $lpad_phi$0 = $lpad_loopexit118$0;var $74 = $29;var $free95 = $free85200;label = 27; break;
  case 23: 
   var $lpad_loopexit125$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit125$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit125$1;var $lpad_phi$0 = $lpad_loopexit125$0;var $74 = $29;var $free95 = $free85200;label = 27; break;
  case 24: 
   var $lpad_loopexit129$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit129$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit129$1;var $lpad_phi$0 = $lpad_loopexit129$0;var $74 = $29;var $free95 = $free85200;label = 27; break;
  case 25: 
   var $free95_ph_ph100_ph_ph_ph_ph_ph;
   var $_ph_ph101_ph_ph_ph_ph_ph;
   var $lpad_loopexit132$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit132$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit132$1;var $lpad_phi$0 = $lpad_loopexit132$0;var $74 = $_ph_ph101_ph_ph_ph_ph_ph;var $free95 = $free95_ph_ph100_ph_ph_ph_ph_ph;label = 27; break;
  case 26: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;var $74 = $2;var $free95 = 426;label = 27; break;
  case 27: 
   var $free95;
   var $74;
   var $lpad_phi$0;
   var $lpad_phi$1;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $75=(($74)|(0))==0;
   if ($75) { label = 294; break; } else { label = 28; break; }
  case 28: 
   var $77=$74;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free95]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 294; break; } else { label = 29; break; }
  case 29: 
   var $79$0 = ___cxa_find_matching_catch(-1, -1,0); $79$1 = tempRet0;
   var $80=$79$0;
   ___clang_call_terminate($80);
   throw "Reached an unreachable!";
  case 30: 
   var $cond=(($__p_0205)|(0))==3;
   if ($cond) { var $free85_lcssa = $free85200;var $_lcssa = $29;var $_lcssa164 = $28;var $__trailing_sign_0_lcssa = $__trailing_sign_0203;label = 256; break; } else { label = 31; break; }
  case 31: 
   var $83=HEAP32[(($11)>>2)];
   var $84=(($83+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83+16)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($85)|(0))==(($87)|(0));
   if ($88) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $90=$83;
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+36)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_041 = $94;label = 34; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 33: 
   var $96=HEAP32[(($85)>>2)];
   var $_041 = $96;label = 34; break;
  case 34: 
   var $_041;
   var $97=HEAP32[(($14)>>2)];
   var $98=(($97+12)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($__ct, 8192, $_041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 35: 
   if ($100) { label = 36; break; } else { label = 40; break; }
  case 36: 
   var $102=HEAP32[(($11)>>2)];
   var $103=(($102+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($102+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $109=$102;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+40)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_040 = $113;label = 39; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 38: 
   var $115=(($104+4)|0);
   HEAP32[(($103)>>2)]=$115;
   var $116=HEAP32[(($104)>>2)];
   var $_040 = $116;label = 39; break;
  case 39: 
   var $_040;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $_040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 40: 
   var $118=HEAP32[(($__err)>>2)];
   var $119=$118 | 4;
   HEAP32[(($__err)>>2)]=$119;
   var $_026 = 0;var $1021 = $29;var $free91 = $free85200;label = 290; break;
  case 41: 
   var $121=(($__p_0205)|(0))==3;
   if ($121) { var $free85_lcssa = $free85200;var $_lcssa = $29;var $_lcssa164 = $28;var $__trailing_sign_0_lcssa = $__trailing_sign_0203;label = 256; break; } else { var $122 = $70;label = 42; break; }
  case 42: 
   var $122;
   var $123=HEAP32[(($11)>>2)];
   var $124=(($123)|(0))==0;
   if ($124) { var $141 = 1;label = 49; break; } else { label = 43; break; }
  case 43: 
   var $126=(($123+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($123+16)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($127)|(0))==(($129)|(0));
   if ($130) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $132=$123;
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+36)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_039 = $136;label = 46; break; } else { label = 24; break; }
  case 45: 
   var $138=HEAP32[(($127)>>2)];
   var $_039 = $138;label = 46; break;
  case 46: 
   var $_039;
   var $139=(($_039)|(0))==-1;
   if ($139) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $_pre267=HEAP32[(($11)>>2)];
   var $phitmp284=(($_pre267)|(0))==0;
   var $141 = $phitmp284;label = 49; break;
  case 48: 
   HEAP32[(($11)>>2)]=0;
   var $141 = 1;label = 49; break;
  case 49: 
   var $141;
   var $142=(($122)|(0))==0;
   if ($142) { label = 55; break; } else { label = 50; break; }
  case 50: 
   var $144=(($122+12)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($122+16)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($145)|(0))==(($147)|(0));
   if ($148) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $150=$122;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+36)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_038 = $154;label = 53; break; } else { label = 24; break; }
  case 52: 
   var $156=HEAP32[(($145)>>2)];
   var $_038 = $156;label = 53; break;
  case 53: 
   var $_038;
   var $157=(($_038)|(0))==-1;
   if ($157) { label = 54; break; } else { label = 56; break; }
  case 54: 
   HEAP32[(($12)>>2)]=0;
   label = 55; break;
  case 55: 
   if ($141) { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; } else { var $162 = 0;label = 57; break; }
  case 56: 
   var $159=(($122)|(0))==0;
   var $160=$141 ^ $159;
   if ($160) { var $162 = $122;label = 57; break; } else { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; }
  case 57: 
   var $162;
   var $163=HEAP32[(($11)>>2)];
   var $164=(($163+12)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($163+16)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165)|(0))==(($167)|(0));
   if ($168) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $170=$163;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171+36)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_037 = $174;label = 60; break; } else { label = 24; break; }
  case 59: 
   var $176=HEAP32[(($165)>>2)];
   var $_037 = $176;label = 60; break;
  case 60: 
   var $_037;
   var $177=HEAP32[(($14)>>2)];
   var $178=(($177+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($__ct, 8192, $_037) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 24; break; }
  case 61: 
   if ($180) { label = 62; break; } else { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; }
  case 62: 
   var $182=HEAP32[(($11)>>2)];
   var $183=(($182+12)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($182+16)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($184)|(0))==(($186)|(0));
   if ($187) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $189=$182;
   var $190=HEAP32[(($189)>>2)];
   var $191=(($190+40)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$192]($182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_036 = $193;label = 65; break; } else { label = 24; break; }
  case 64: 
   var $195=(($184+4)|0);
   HEAP32[(($183)>>2)]=$195;
   var $196=HEAP32[(($184)>>2)];
   var $_036 = $196;label = 65; break;
  case 65: 
   var $_036;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $_036) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $122 = $162;label = 42; break; } else { label = 24; break; }
  case 66: 
   var $197=HEAP8[($4)];
   var $198=(($197)&(255));
   var $199=$198 & 1;
   var $200=(($199)|(0))==0;
   var $201=HEAP32[(($17)>>2)];
   var $202=$198 >>> 1;
   var $203=$200 ? $202 : $201;
   var $204=HEAP8[($5)];
   var $205=(($204)&(255));
   var $206=$205 & 1;
   var $207=(($206)|(0))==0;
   var $208=HEAP32[(($15)>>2)];
   var $209=$205 >>> 1;
   var $210=$207 ? $209 : $208;
   var $211=(((-$210))|0);
   var $212=(($203)|(0))==(($211)|(0));
   if ($212) { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; } else { label = 67; break; }
  case 67: 
   var $213=HEAP32[(($17)>>2)];
   var $214=$198 >>> 1;
   var $215=$200 ? $214 : $213;
   var $216=(($215)|(0))==0;
   if ($216) { label = 69; break; } else { label = 68; break; }
  case 68: 
   var $217=HEAP32[(($15)>>2)];
   var $218=$205 >>> 1;
   var $219=$207 ? $218 : $217;
   var $220=(($219)|(0))==0;
   if ($220) { label = 69; break; } else { label = 89; break; }
  case 69: 
   var $221=HEAP32[(($17)>>2)];
   var $222=$198 >>> 1;
   var $223=$200 ? $222 : $221;
   var $224=(($223)|(0))==0;
   var $225=HEAP32[(($11)>>2)];
   var $226=(($225+12)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=(($225+16)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($227)|(0))==(($229)|(0));
   if ($224) { label = 80; break; } else { label = 70; break; }
  case 70: 
   if ($230) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $233=$225;
   var $234=HEAP32[(($233)>>2)];
   var $235=(($234+36)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 72: 
   var $_pre269=HEAP8[($4)];
   var $_033 = $237;var $240 = $_pre269;label = 74; break;
  case 73: 
   var $239=HEAP32[(($227)>>2)];
   var $_033 = $239;var $240 = $197;label = 74; break;
  case 74: 
   var $240;
   var $_033;
   var $241=$240 & 1;
   var $242=(($241 << 24) >> 24)==0;
   var $243=HEAP32[(($18)>>2)];
   var $_=$242 ? $17 : $243;
   var $244=HEAP32[(($_)>>2)];
   var $245=(($_033)|(0))==(($244)|(0));
   if ($245) { label = 75; break; } else { label = 79; break; }
  case 75: 
   var $247=HEAP32[(($11)>>2)];
   var $248=(($247+12)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($247+16)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=(($249)|(0))==(($251)|(0));
   if ($252) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $254=$247;
   var $255=HEAP32[(($254)>>2)];
   var $256=(($255+40)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$257]($247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 78; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 77: 
   var $260=(($249+4)|0);
   HEAP32[(($248)>>2)]=$260;
   label = 78; break;
  case 78: 
   var $261=HEAP8[($4)];
   var $262=(($261)&(255));
   var $263=$262 & 1;
   var $264=(($263)|(0))==0;
   var $265=HEAP32[(($17)>>2)];
   var $266=$262 >>> 1;
   var $267=$264 ? $266 : $265;
   var $268=(($267)>>>(0)) > 1;
   var $__psn___trailing_sign_0=$268 ? $__psn : $__trailing_sign_0203;
   var $__trailing_sign_1 = $__psn___trailing_sign_0;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
  case 79: 
   HEAP8[($__neg)]=1;
   var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
  case 80: 
   if ($230) { label = 81; break; } else { label = 83; break; }
  case 81: 
   var $272=$225;
   var $273=HEAP32[(($272)>>2)];
   var $274=(($273+36)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$275]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 82; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 82: 
   var $_pre268=HEAP8[($5)];
   var $_029 = $276;var $279 = $_pre268;label = 84; break;
  case 83: 
   var $278=HEAP32[(($227)>>2)];
   var $_029 = $278;var $279 = $204;label = 84; break;
  case 84: 
   var $279;
   var $_029;
   var $280=$279 & 1;
   var $281=(($280 << 24) >> 24)==0;
   var $282=HEAP32[(($16)>>2)];
   var $_288=$281 ? $15 : $282;
   var $283=HEAP32[(($_288)>>2)];
   var $284=(($_029)|(0))==(($283)|(0));
   if ($284) { label = 85; break; } else { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; }
  case 85: 
   var $286=HEAP32[(($11)>>2)];
   var $287=(($286+12)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($286+16)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=(($288)|(0))==(($290)|(0));
   if ($291) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $293=$286;
   var $294=HEAP32[(($293)>>2)];
   var $295=(($294+40)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$296]($286) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 88; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 87: 
   var $299=(($288+4)|0);
   HEAP32[(($287)>>2)]=$299;
   label = 88; break;
  case 88: 
   HEAP8[($__neg)]=1;
   var $300=HEAP8[($5)];
   var $301=(($300)&(255));
   var $302=$301 & 1;
   var $303=(($302)|(0))==0;
   var $304=HEAP32[(($15)>>2)];
   var $305=$301 >>> 1;
   var $306=$303 ? $305 : $304;
   var $307=(($306)>>>(0)) > 1;
   var $__nsn___trailing_sign_0=$307 ? $__nsn : $__trailing_sign_0203;
   var $__trailing_sign_1 = $__nsn___trailing_sign_0;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
  case 89: 
   var $309=HEAP32[(($11)>>2)];
   var $310=(($309+12)|0);
   var $311=HEAP32[(($310)>>2)];
   var $312=(($309+16)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($311)|(0))==(($313)|(0));
   if ($314) { label = 90; break; } else { label = 92; break; }
  case 90: 
   var $316=$309;
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317+36)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$319]($309) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 91; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 91: 
   var $_pre270=HEAP8[($4)];
   var $_024 = $320;var $323 = $_pre270;label = 93; break;
  case 92: 
   var $322=HEAP32[(($311)>>2)];
   var $_024 = $322;var $323 = $197;label = 93; break;
  case 93: 
   var $323;
   var $_024;
   var $324=$323 & 1;
   var $325=(($324 << 24) >> 24)==0;
   var $326=HEAP32[(($18)>>2)];
   var $_289=$325 ? $17 : $326;
   var $327=HEAP32[(($_289)>>2)];
   var $328=(($_024)|(0))==(($327)|(0));
   var $329=HEAP32[(($11)>>2)];
   var $330=(($329+12)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=(($329+16)|0);
   var $333=HEAP32[(($332)>>2)];
   var $334=(($331)|(0))==(($333)|(0));
   if ($328) { label = 94; break; } else { label = 98; break; }
  case 94: 
   if ($334) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $337=$329;
   var $338=HEAP32[(($337)>>2)];
   var $339=(($338+40)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$340]($329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 97; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 96: 
   var $343=(($331+4)|0);
   HEAP32[(($330)>>2)]=$343;
   label = 97; break;
  case 97: 
   var $344=HEAP8[($4)];
   var $345=(($344)&(255));
   var $346=$345 & 1;
   var $347=(($346)|(0))==0;
   var $348=HEAP32[(($17)>>2)];
   var $349=$345 >>> 1;
   var $350=$347 ? $349 : $348;
   var $351=(($350)>>>(0)) > 1;
   var $__psn___trailing_sign_072=$351 ? $__psn : $__trailing_sign_0203;
   var $__trailing_sign_1 = $__psn___trailing_sign_072;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
  case 98: 
   if ($334) { label = 99; break; } else { label = 100; break; }
  case 99: 
   var $354=$329;
   var $355=HEAP32[(($354)>>2)];
   var $356=(($355+36)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$357]($329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_020 = $358;label = 101; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 100: 
   var $360=HEAP32[(($331)>>2)];
   var $_020 = $360;label = 101; break;
  case 101: 
   var $_020;
   var $361=HEAP8[($5)];
   var $362=$361 & 1;
   var $363=(($362 << 24) >> 24)==0;
   var $364=HEAP32[(($16)>>2)];
   var $_290=$363 ? $15 : $364;
   var $365=HEAP32[(($_290)>>2)];
   var $366=(($_020)|(0))==(($365)|(0));
   if ($366) { label = 102; break; } else { label = 106; break; }
  case 102: 
   var $368=HEAP32[(($11)>>2)];
   var $369=(($368+12)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=(($368+16)|0);
   var $372=HEAP32[(($371)>>2)];
   var $373=(($370)|(0))==(($372)|(0));
   if ($373) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $375=$368;
   var $376=HEAP32[(($375)>>2)];
   var $377=(($376+40)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$378]($368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 105; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $29;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free85200;label = 25; break; }
  case 104: 
   var $381=(($370+4)|0);
   HEAP32[(($369)>>2)]=$381;
   label = 105; break;
  case 105: 
   HEAP8[($__neg)]=1;
   var $382=HEAP8[($5)];
   var $383=(($382)&(255));
   var $384=$383 & 1;
   var $385=(($384)|(0))==0;
   var $386=HEAP32[(($15)>>2)];
   var $387=$383 >>> 1;
   var $388=$385 ? $387 : $386;
   var $389=(($388)>>>(0)) > 1;
   var $__nsn___trailing_sign_073=$389 ? $__nsn : $__trailing_sign_0203;
   var $__trailing_sign_1 = $__nsn___trailing_sign_073;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break;
  case 106: 
   var $391=HEAP32[(($__err)>>2)];
   var $392=$391 | 4;
   HEAP32[(($__err)>>2)]=$392;
   var $_026 = 0;var $1021 = $29;var $free91 = $free85200;label = 290; break;
  case 107: 
   var $394=(($__trailing_sign_0203)|(0))!=0;
   var $395=(($__p_0205)>>>(0)) < 2;
   var $or_cond=$394 | $395;
   if ($or_cond) { label = 111; break; } else { label = 108; break; }
  case 108: 
   var $397=(($__p_0205)|(0))==2;
   if ($397) { label = 109; break; } else { var $402 = 0;label = 110; break; }
  case 109: 
   var $399=HEAP8[($25)];
   var $400=(($399 << 24) >> 24)!=0;
   var $402 = $400;label = 110; break;
  case 110: 
   var $402;
   var $brmerge=$20 | $402;
   if ($brmerge) { label = 111; break; } else { var $__trailing_sign_1 = 0;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; }
  case 111: 
   var $403=HEAP8[($3)];
   var $404=$403 & 1;
   var $405=(($404 << 24) >> 24)==0;
   var $406=HEAP32[(($22)>>2)];
   var $_291=$405 ? $21 : $406;
   var $407=(($__p_0205)|(0))==0;
   if ($407) { var $__sym_curr_char_sroa_0_0 = $_291;var $469 = $403;var $468 = $70;label = 124; break; } else { label = 112; break; }
  case 112: 
   var $409=((($__p_0205)-(1))|0);
   var $410=(($13+$409)|0);
   var $411=HEAP8[($410)];
   var $switch=(($411)&(255)) < 2;
   if ($switch) { var $__sym_space_end_sroa_0_0 = $_291;var $412 = $403;label = 113; break; } else { var $__sym_curr_char_sroa_0_0 = $_291;var $469 = $403;var $468 = $70;label = 124; break; }
  case 113: 
   var $412;
   var $__sym_space_end_sroa_0_0;
   var $413=$412 & 1;
   var $414=(($413 << 24) >> 24)==0;
   var $415=HEAP32[(($22)>>2)];
   var $_292=$414 ? $21 : $415;
   var $416=(($412)&(255));
   var $417=$416 & 1;
   var $418=(($417)|(0))==0;
   var $419=HEAP32[(($21)>>2)];
   var $420=$416 >>> 1;
   var $421=$418 ? $420 : $419;
   var $422=(($_292+($421<<2))|0);
   var $423=(($__sym_space_end_sroa_0_0)|(0))==(($422)|(0));
   if ($423) { var $431 = $412;label = 118; break; } else { label = 114; break; }
  case 114: 
   var $425=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
   var $426=HEAP32[(($14)>>2)];
   var $427=(($426+12)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$428]($__ct, 8192, $425) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 115; break; } else { label = 22; break; }
  case 115: 
   if ($429) { label = 116; break; } else { label = 117; break; }
  case 116: 
   var $430=(($__sym_space_end_sroa_0_0+4)|0);
   var $_pre271=HEAP8[($3)];
   var $__sym_space_end_sroa_0_0 = $430;var $412 = $_pre271;label = 113; break;
  case 117: 
   var $_pre272=HEAP8[($3)];
   var $431 = $_pre272;label = 118; break;
  case 118: 
   var $431;
   var $432=$431 & 1;
   var $433=(($432 << 24) >> 24)==0;
   var $434=HEAP32[(($22)>>2)];
   var $_293=$433 ? $21 : $434;
   var $435=$__sym_space_end_sroa_0_0;
   var $436=$_293;
   var $437=((($435)-($436))|0);
   var $438=$437 >> 2;
   var $439=HEAP8[($6)];
   var $440=(($439)&(255));
   var $441=$440 & 1;
   var $442=(($441)|(0))==0;
   var $443=HEAP32[(($23)>>2)];
   var $444=$440 >>> 1;
   var $445=$442 ? $444 : $443;
   var $446=(($438)>>>(0)) > (($445)>>>(0));
   if ($446) { label = 123; break; } else { label = 119; break; }
  case 119: 
   var $447=$439 & 1;
   var $448=(($447 << 24) >> 24)==0;
   var $449=HEAP32[(($24)>>2)];
   var $_294=$448 ? $23 : $449;
   var $450=HEAP32[(($23)>>2)];
   var $451=$440 >>> 1;
   var $452=$442 ? $451 : $450;
   var $_sum=((($452)-($438))|0);
   var $453=(($_294+($_sum<<2))|0);
   var $454=HEAP32[(($24)>>2)];
   var $_295=$448 ? $23 : $454;
   var $455=HEAP32[(($23)>>2)];
   var $456=$440 >>> 1;
   var $457=$442 ? $456 : $455;
   var $458=(($_295+($457<<2))|0);
   var $459=HEAP32[(($22)>>2)];
   var $_296=$433 ? $21 : $459;
   var $460=(($453)|(0))==(($458)|(0));
   if ($460) { var $__sym_curr_char_sroa_0_0 = $__sym_space_end_sroa_0_0;var $469 = $431;var $468 = $70;label = 124; break; } else { var $_sroa_052_0122 = $453;var $_sroa_051_0123 = $_296;label = 120; break; }
  case 120: 
   var $_sroa_051_0123;
   var $_sroa_052_0122;
   var $461=HEAP32[(($_sroa_052_0122)>>2)];
   var $462=HEAP32[(($_sroa_051_0123)>>2)];
   var $463=(($461)|(0))==(($462)|(0));
   if ($463) { label = 121; break; } else { label = 123; break; }
  case 121: 
   var $464=(($_sroa_052_0122+4)|0);
   var $465=(($464)|(0))==(($458)|(0));
   if ($465) { var $__sym_curr_char_sroa_0_0 = $__sym_space_end_sroa_0_0;var $469 = $431;var $468 = $70;label = 124; break; } else { label = 122; break; }
  case 122: 
   var $466=(($_sroa_051_0123+4)|0);
   var $_sroa_052_0122 = $464;var $_sroa_051_0123 = $466;label = 120; break;
  case 123: 
   var $467=HEAP32[(($22)>>2)];
   var $_297=$433 ? $21 : $467;
   var $__sym_curr_char_sroa_0_0 = $_297;var $469 = $431;var $468 = $70;label = 124; break;
  case 124: 
   var $468;
   var $469;
   var $__sym_curr_char_sroa_0_0;
   var $470=$469 & 1;
   var $471=(($470 << 24) >> 24)==0;
   var $472=HEAP32[(($22)>>2)];
   var $_298=$471 ? $21 : $472;
   var $473=(($469)&(255));
   var $474=$473 & 1;
   var $475=(($474)|(0))==0;
   var $476=HEAP32[(($21)>>2)];
   var $477=$473 >>> 1;
   var $478=$475 ? $477 : $476;
   var $479=(($_298+($478<<2))|0);
   var $480=(($__sym_curr_char_sroa_0_0)|(0))==(($479)|(0));
   if ($480) { label = 148; break; } else { label = 125; break; }
  case 125: 
   var $482=HEAP32[(($11)>>2)];
   var $483=(($482)|(0))==0;
   if ($483) { var $500 = 1;label = 132; break; } else { label = 126; break; }
  case 126: 
   var $485=(($482+12)|0);
   var $486=HEAP32[(($485)>>2)];
   var $487=(($482+16)|0);
   var $488=HEAP32[(($487)>>2)];
   var $489=(($486)|(0))==(($488)|(0));
   if ($489) { label = 127; break; } else { label = 128; break; }
  case 127: 
   var $491=$482;
   var $492=HEAP32[(($491)>>2)];
   var $493=(($492+36)|0);
   var $494=HEAP32[(($493)>>2)];
   var $495 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$494]($482) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_012 = $495;label = 129; break; } else { label = 23; break; }
  case 128: 
   var $497=HEAP32[(($486)>>2)];
   var $_012 = $497;label = 129; break;
  case 129: 
   var $_012;
   var $498=(($_012)|(0))==-1;
   if ($498) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $_pre273=HEAP32[(($11)>>2)];
   var $phitmp283=(($_pre273)|(0))==0;
   var $500 = $phitmp283;label = 132; break;
  case 131: 
   HEAP32[(($11)>>2)]=0;
   var $500 = 1;label = 132; break;
  case 132: 
   var $500;
   var $501=(($468)|(0))==0;
   if ($501) { label = 138; break; } else { label = 133; break; }
  case 133: 
   var $503=(($468+12)|0);
   var $504=HEAP32[(($503)>>2)];
   var $505=(($468+16)|0);
   var $506=HEAP32[(($505)>>2)];
   var $507=(($504)|(0))==(($506)|(0));
   if ($507) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $509=$468;
   var $510=HEAP32[(($509)>>2)];
   var $511=(($510+36)|0);
   var $512=HEAP32[(($511)>>2)];
   var $513 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$512]($468) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_011 = $513;label = 136; break; } else { label = 23; break; }
  case 135: 
   var $515=HEAP32[(($504)>>2)];
   var $_011 = $515;label = 136; break;
  case 136: 
   var $_011;
   var $516=(($_011)|(0))==-1;
   if ($516) { label = 137; break; } else { label = 139; break; }
  case 137: 
   HEAP32[(($12)>>2)]=0;
   label = 138; break;
  case 138: 
   if ($500) { label = 148; break; } else { var $521 = 0;label = 140; break; }
  case 139: 
   var $518=(($468)|(0))==0;
   var $519=$500 ^ $518;
   if ($519) { var $521 = $468;label = 140; break; } else { label = 148; break; }
  case 140: 
   var $521;
   var $522=HEAP32[(($11)>>2)];
   var $523=(($522+12)|0);
   var $524=HEAP32[(($523)>>2)];
   var $525=(($522+16)|0);
   var $526=HEAP32[(($525)>>2)];
   var $527=(($524)|(0))==(($526)|(0));
   if ($527) { label = 141; break; } else { label = 142; break; }
  case 141: 
   var $529=$522;
   var $530=HEAP32[(($529)>>2)];
   var $531=(($530+36)|0);
   var $532=HEAP32[(($531)>>2)];
   var $533 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$532]($522) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_013 = $533;label = 143; break; } else { label = 23; break; }
  case 142: 
   var $535=HEAP32[(($524)>>2)];
   var $_013 = $535;label = 143; break;
  case 143: 
   var $_013;
   var $536=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
   var $537=(($_013)|(0))==(($536)|(0));
   if ($537) { label = 144; break; } else { label = 148; break; }
  case 144: 
   var $539=HEAP32[(($11)>>2)];
   var $540=(($539+12)|0);
   var $541=HEAP32[(($540)>>2)];
   var $542=(($539+16)|0);
   var $543=HEAP32[(($542)>>2)];
   var $544=(($541)|(0))==(($543)|(0));
   if ($544) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $546=$539;
   var $547=HEAP32[(($546)>>2)];
   var $548=(($547+40)|0);
   var $549=HEAP32[(($548)>>2)];
   var $550 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$549]($539) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 147; break; } else { label = 23; break; }
  case 146: 
   var $552=(($541+4)|0);
   HEAP32[(($540)>>2)]=$552;
   label = 147; break;
  case 147: 
   var $553=(($__sym_curr_char_sroa_0_0+4)|0);
   var $_pre=HEAP8[($3)];
   var $__sym_curr_char_sroa_0_0 = $553;var $469 = $_pre;var $468 = $521;label = 124; break;
  case 148: 
   if ($20) { label = 149; break; } else { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; }
  case 149: 
   var $554=HEAP8[($3)];
   var $555=$554 & 1;
   var $556=(($555 << 24) >> 24)==0;
   var $557=HEAP32[(($22)>>2)];
   var $_299=$556 ? $21 : $557;
   var $558=(($554)&(255));
   var $559=$558 & 1;
   var $560=(($559)|(0))==0;
   var $561=HEAP32[(($21)>>2)];
   var $562=$558 >>> 1;
   var $563=$560 ? $562 : $561;
   var $564=(($_299+($563<<2))|0);
   var $565=(($__sym_curr_char_sroa_0_0)|(0))==(($564)|(0));
   if ($565) { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $27;var $913 = $28;var $912 = $29;var $free86 = $free85200;label = 255; break; } else { label = 150; break; }
  case 150: 
   var $567=HEAP32[(($__err)>>2)];
   var $568=$567 | 4;
   HEAP32[(($__err)>>2)]=$568;
   var $_026 = 0;var $1021 = $29;var $free91 = $free85200;label = 290; break;
  case 151: 
   var $free88;
   var $569;
   var $570;
   var $571;
   var $__ng_0;
   var $572=HEAP32[(($11)>>2)];
   var $573=(($572)|(0))==0;
   if ($573) { var $590 = 1;label = 158; break; } else { label = 152; break; }
  case 152: 
   var $575=(($572+12)|0);
   var $576=HEAP32[(($575)>>2)];
   var $577=(($572+16)|0);
   var $578=HEAP32[(($577)>>2)];
   var $579=(($576)|(0))==(($578)|(0));
   if ($579) { label = 153; break; } else { label = 154; break; }
  case 153: 
   var $581=$572;
   var $582=HEAP32[(($581)>>2)];
   var $583=(($582+36)|0);
   var $584=HEAP32[(($583)>>2)];
   var $585 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$584]($572) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_016 = $585;label = 155; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 154: 
   var $587=HEAP32[(($576)>>2)];
   var $_016 = $587;label = 155; break;
  case 155: 
   var $_016;
   var $588=(($_016)|(0))==-1;
   if ($588) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $_pre274=HEAP32[(($11)>>2)];
   var $phitmp280=(($_pre274)|(0))==0;
   var $590 = $phitmp280;label = 158; break;
  case 157: 
   HEAP32[(($11)>>2)]=0;
   var $590 = 1;label = 158; break;
  case 158: 
   var $590;
   var $591=HEAP32[(($12)>>2)];
   var $592=(($591)|(0))==0;
   if ($592) { label = 164; break; } else { label = 159; break; }
  case 159: 
   var $594=(($591+12)|0);
   var $595=HEAP32[(($594)>>2)];
   var $596=(($591+16)|0);
   var $597=HEAP32[(($596)>>2)];
   var $598=(($595)|(0))==(($597)|(0));
   if ($598) { label = 160; break; } else { label = 161; break; }
  case 160: 
   var $600=$591;
   var $601=HEAP32[(($600)>>2)];
   var $602=(($601+36)|0);
   var $603=HEAP32[(($602)>>2)];
   var $604 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$603]($591) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_015 = $604;label = 162; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 161: 
   var $606=HEAP32[(($595)>>2)];
   var $_015 = $606;label = 162; break;
  case 162: 
   var $_015;
   var $607=(($_015)|(0))==-1;
   if ($607) { label = 163; break; } else { label = 165; break; }
  case 163: 
   HEAP32[(($12)>>2)]=0;
   label = 164; break;
  case 164: 
   if ($590) { label = 189; break; } else { label = 166; break; }
  case 165: 
   var $609=(($591)|(0))==0;
   var $610=$590 ^ $609;
   if ($610) { label = 166; break; } else { label = 189; break; }
  case 166: 
   var $612=HEAP32[(($11)>>2)];
   var $613=(($612+12)|0);
   var $614=HEAP32[(($613)>>2)];
   var $615=(($612+16)|0);
   var $616=HEAP32[(($615)>>2)];
   var $617=(($614)|(0))==(($616)|(0));
   if ($617) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $619=$612;
   var $620=HEAP32[(($619)>>2)];
   var $621=(($620+36)|0);
   var $622=HEAP32[(($621)>>2)];
   var $623 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$622]($612) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_017 = $623;label = 169; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 168: 
   var $625=HEAP32[(($614)>>2)];
   var $_017 = $625;label = 169; break;
  case 169: 
   var $_017;
   var $626=HEAP32[(($14)>>2)];
   var $627=(($626+12)|0);
   var $628=HEAP32[(($627)>>2)];
   var $629 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$628]($__ct, 2048, $_017) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 170; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 170: 
   if ($629) { label = 171; break; } else { label = 175; break; }
  case 171: 
   var $631=HEAP32[(($__wn)>>2)];
   var $632=HEAP32[(($0)>>2)];
   var $633=(($631)|(0))==(($632)|(0));
   if ($633) { label = 172; break; } else { var $636 = $631;label = 174; break; }
  case 172: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 173; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 173: 
   var $_pre275=HEAP32[(($__wn)>>2)];
   var $636 = $_pre275;label = 174; break;
  case 174: 
   var $636;
   var $637=(($636+4)|0);
   HEAP32[(($__wn)>>2)]=$637;
   HEAP32[(($636)>>2)]=$_017;
   var $638=((($__ng_0)+(1))|0);
   var $__ng_1 = $638;var $681 = $571;var $680 = $570;var $679 = $569;var $free89 = $free88;label = 186; break;
  case 175: 
   var $639=HEAP8[($1)];
   var $640=(($639)&(255));
   var $641=$640 & 1;
   var $642=(($641)|(0))==0;
   var $643=HEAP32[(($26)>>2)];
   var $644=$640 >>> 1;
   var $645=$642 ? $644 : $643;
   var $646=(($645)|(0))==0;
   var $647=(($__ng_0)|(0))==0;
   var $or_cond75=$646 | $647;
   if ($or_cond75) { label = 189; break; } else { label = 176; break; }
  case 176: 
   var $649=HEAP32[(($__ts)>>2)];
   var $650=(($_017)|(0))==(($649)|(0));
   if ($650) { label = 177; break; } else { label = 189; break; }
  case 177: 
   var $652=(($570)|(0))==(($571)|(0));
   if ($652) { label = 178; break; } else { var $676 = $571;var $675 = $570;var $674 = $569;var $free90 = $free88;label = 185; break; }
  case 178: 
   var $654=(($free88)|(0))!=(((426))|(0));
   var $655=$570;
   var $656=$569;
   var $657=((($655)-($656))|0);
   var $658=(($657)>>>(0)) < 2147483647;
   var $659=$657 << 1;
   var $__i=$658 ? $659 : -1;
   var $660=$657 >> 2;
   if ($654) { label = 179; break; } else { var $663 = 0;label = 180; break; }
  case 179: 
   var $phitmp_i=$569;
   var $663 = $phitmp_i;label = 180; break;
  case 180: 
   var $663;
   var $664=_realloc($663, $__i);
   var $665=$664;
   var $666=(($664)|(0))==0;
   if ($666) { label = 181; break; } else { label = 182; break; }
  case 181: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 182; break; } else { var $_ph_ph = $569;var $free95_ph_ph = $free88;label = 20; break; }
  case 182: 
   var $668=(($569)|(0))==0;
   var $or_cond97=$654 | $668;
   if ($or_cond97) { label = 184; break; } else { label = 183; break; }
  case 183: 
   label = 184; break;
  case 184: 
   var $670=$__i >>> 2;
   var $671=(($665+($660<<2))|0);
   var $672=(($665+($670<<2))|0);
   var $676 = $672;var $675 = $671;var $674 = $665;var $free90 = 220;label = 185; break;
  case 185: 
   var $free90;
   var $674;
   var $675;
   var $676;
   var $677=(($675+4)|0);
   HEAP32[(($675)>>2)]=$__ng_0;
   var $__ng_1 = 0;var $681 = $676;var $680 = $677;var $679 = $674;var $free89 = $free90;label = 186; break;
  case 186: 
   var $free89;
   var $679;
   var $680;
   var $681;
   var $__ng_1;
   var $682=HEAP32[(($11)>>2)];
   var $683=(($682+12)|0);
   var $684=HEAP32[(($683)>>2)];
   var $685=(($682+16)|0);
   var $686=HEAP32[(($685)>>2)];
   var $687=(($684)|(0))==(($686)|(0));
   if ($687) { label = 187; break; } else { label = 188; break; }
  case 187: 
   var $689=$682;
   var $690=HEAP32[(($689)>>2)];
   var $691=(($690+40)|0);
   var $692=HEAP32[(($691)>>2)];
   var $693 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$692]($682) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0 = $__ng_1;var $571 = $681;var $570 = $680;var $569 = $679;var $free88 = $free89;label = 151; break; } else { var $_ph_ph = $679;var $free95_ph_ph = $free89;label = 20; break; }
  case 188: 
   var $695=(($684+4)|0);
   HEAP32[(($683)>>2)]=$695;
   var $__ng_0 = $__ng_1;var $571 = $681;var $570 = $680;var $569 = $679;var $free88 = $free89;label = 151; break;
  case 189: 
   var $697=(($569)|(0))==(($570)|(0));
   var $698=(($__ng_0)|(0))==0;
   var $or_cond76=$697 | $698;
   if ($or_cond76) { var $728 = $571;var $727 = $570;var $726 = $569;var $free87 = $free88;label = 199; break; } else { label = 190; break; }
  case 190: 
   var $700=(($570)|(0))==(($571)|(0));
   if ($700) { label = 191; break; } else { var $724 = $571;var $723 = $570;var $722 = $569;var $free = $free88;label = 198; break; }
  case 191: 
   var $702=(($free88)|(0))!=(((426))|(0));
   var $703=$570;
   var $704=$569;
   var $705=((($703)-($704))|0);
   var $706=(($705)>>>(0)) < 2147483647;
   var $707=$705 << 1;
   var $__i77=$706 ? $707 : -1;
   var $708=$705 >> 2;
   if ($702) { label = 192; break; } else { var $711 = 0;label = 193; break; }
  case 192: 
   var $phitmp_i78=$569;
   var $711 = $phitmp_i78;label = 193; break;
  case 193: 
   var $711;
   var $712=_realloc($711, $__i77);
   var $713=$712;
   var $714=(($712)|(0))==0;
   if ($714) { label = 194; break; } else { label = 195; break; }
  case 194: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 195; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $569;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free88;label = 25; break; }
  case 195: 
   var $716=(($569)|(0))==0;
   var $or_cond98=$702 | $716;
   if ($or_cond98) { label = 197; break; } else { label = 196; break; }
  case 196: 
   label = 197; break;
  case 197: 
   var $718=$__i77 >>> 2;
   var $719=(($713+($708<<2))|0);
   var $720=(($713+($718<<2))|0);
   var $724 = $720;var $723 = $719;var $722 = $713;var $free = 220;label = 198; break;
  case 198: 
   var $free;
   var $722;
   var $723;
   var $724;
   var $725=(($723+4)|0);
   HEAP32[(($723)>>2)]=$__ng_0;
   var $728 = $724;var $727 = $725;var $726 = $722;var $free87 = $free;label = 199; break;
  case 199: 
   var $free87;
   var $726;
   var $727;
   var $728;
   var $729=HEAP32[(($__fd)>>2)];
   var $730=(($729)|(0)) > 0;
   if ($730) { label = 200; break; } else { label = 253; break; }
  case 200: 
   var $732=HEAP32[(($11)>>2)];
   var $733=(($732)|(0))==0;
   if ($733) { var $750 = 1;label = 207; break; } else { label = 201; break; }
  case 201: 
   var $735=(($732+12)|0);
   var $736=HEAP32[(($735)>>2)];
   var $737=(($732+16)|0);
   var $738=HEAP32[(($737)>>2)];
   var $739=(($736)|(0))==(($738)|(0));
   if ($739) { label = 202; break; } else { label = 203; break; }
  case 202: 
   var $741=$732;
   var $742=HEAP32[(($741)>>2)];
   var $743=(($742+36)|0);
   var $744=HEAP32[(($743)>>2)];
   var $745 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$744]($732) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_023 = $745;label = 204; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $726;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free87;label = 25; break; }
  case 203: 
   var $747=HEAP32[(($736)>>2)];
   var $_023 = $747;label = 204; break;
  case 204: 
   var $_023;
   var $748=(($_023)|(0))==-1;
   if ($748) { label = 206; break; } else { label = 205; break; }
  case 205: 
   var $_pre276=HEAP32[(($11)>>2)];
   var $phitmp281=(($_pre276)|(0))==0;
   var $750 = $phitmp281;label = 207; break;
  case 206: 
   HEAP32[(($11)>>2)]=0;
   var $750 = 1;label = 207; break;
  case 207: 
   var $750;
   var $751=HEAP32[(($12)>>2)];
   var $752=(($751)|(0))==0;
   if ($752) { label = 213; break; } else { label = 208; break; }
  case 208: 
   var $754=(($751+12)|0);
   var $755=HEAP32[(($754)>>2)];
   var $756=(($751+16)|0);
   var $757=HEAP32[(($756)>>2)];
   var $758=(($755)|(0))==(($757)|(0));
   if ($758) { label = 209; break; } else { label = 210; break; }
  case 209: 
   var $760=$751;
   var $761=HEAP32[(($760)>>2)];
   var $762=(($761+36)|0);
   var $763=HEAP32[(($762)>>2)];
   var $764 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$763]($751) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_022 = $764;label = 211; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $726;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free87;label = 25; break; }
  case 210: 
   var $766=HEAP32[(($755)>>2)];
   var $_022 = $766;label = 211; break;
  case 211: 
   var $_022;
   var $767=(($_022)|(0))==-1;
   if ($767) { label = 212; break; } else { label = 214; break; }
  case 212: 
   HEAP32[(($12)>>2)]=0;
   label = 213; break;
  case 213: 
   if ($750) { label = 219; break; } else { var $771 = 0;label = 215; break; }
  case 214: 
   var $769=(($751)|(0))==0;
   var $tmp68=$750 ^ $769;
   if ($tmp68) { var $771 = $751;label = 215; break; } else { label = 219; break; }
  case 215: 
   var $771;
   var $772=HEAP32[(($11)>>2)];
   var $773=(($772+12)|0);
   var $774=HEAP32[(($773)>>2)];
   var $775=(($772+16)|0);
   var $776=HEAP32[(($775)>>2)];
   var $777=(($774)|(0))==(($776)|(0));
   if ($777) { label = 216; break; } else { label = 217; break; }
  case 216: 
   var $779=$772;
   var $780=HEAP32[(($779)>>2)];
   var $781=(($780+36)|0);
   var $782=HEAP32[(($781)>>2)];
   var $783 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$782]($772) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_025 = $783;label = 218; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $726;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free87;label = 25; break; }
  case 217: 
   var $785=HEAP32[(($774)>>2)];
   var $_025 = $785;label = 218; break;
  case 218: 
   var $_025;
   var $786=HEAP32[(($__dp)>>2)];
   var $787=(($_025)|(0))==(($786)|(0));
   if ($787) { label = 220; break; } else { label = 219; break; }
  case 219: 
   var $789=HEAP32[(($__err)>>2)];
   var $790=$789 | 4;
   HEAP32[(($__err)>>2)]=$790;
   var $_026 = 0;var $1021 = $726;var $free91 = $free87;label = 290; break;
  case 220: 
   var $792=HEAP32[(($11)>>2)];
   var $793=(($792+12)|0);
   var $794=HEAP32[(($793)>>2)];
   var $795=(($792+16)|0);
   var $796=HEAP32[(($795)>>2)];
   var $797=(($794)|(0))==(($796)|(0));
   if ($797) { label = 221; break; } else { label = 222; break; }
  case 221: 
   var $799=$792;
   var $800=HEAP32[(($799)>>2)];
   var $801=(($800+40)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$802]($792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $807 = $771;var $806 = $729;label = 223; break; } else { var $_ph_ph101_ph_ph_ph_ph_ph = $726;var $free95_ph_ph100_ph_ph_ph_ph_ph = $free87;label = 25; break; }
  case 222: 
   var $805=(($794+4)|0);
   HEAP32[(($793)>>2)]=$805;
   var $807 = $771;var $806 = $729;label = 223; break;
  case 223: 
   var $806;
   var $807;
   var $808=HEAP32[(($11)>>2)];
   var $809=(($808)|(0))==0;
   if ($809) { var $826 = 1;label = 230; break; } else { label = 224; break; }
  case 224: 
   var $811=(($808+12)|0);
   var $812=HEAP32[(($811)>>2)];
   var $813=(($808+16)|0);
   var $814=HEAP32[(($813)>>2)];
   var $815=(($812)|(0))==(($814)|(0));
   if ($815) { label = 225; break; } else { label = 226; break; }
  case 225: 
   var $817=$808;
   var $818=HEAP32[(($817)>>2)];
   var $819=(($818+36)|0);
   var $820=HEAP32[(($819)>>2)];
   var $821 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$820]($808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_032 = $821;label = 227; break; } else { label = 21; break; }
  case 226: 
   var $823=HEAP32[(($812)>>2)];
   var $_032 = $823;label = 227; break;
  case 227: 
   var $_032;
   var $824=(($_032)|(0))==-1;
   if ($824) { label = 229; break; } else { label = 228; break; }
  case 228: 
   var $_pre277=HEAP32[(($11)>>2)];
   var $phitmp282=(($_pre277)|(0))==0;
   var $826 = $phitmp282;label = 230; break;
  case 229: 
   HEAP32[(($11)>>2)]=0;
   var $826 = 1;label = 230; break;
  case 230: 
   var $826;
   var $827=(($807)|(0))==0;
   if ($827) { label = 236; break; } else { label = 231; break; }
  case 231: 
   var $829=(($807+12)|0);
   var $830=HEAP32[(($829)>>2)];
   var $831=(($807+16)|0);
   var $832=HEAP32[(($831)>>2)];
   var $833=(($830)|(0))==(($832)|(0));
   if ($833) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $835=$807;
   var $836=HEAP32[(($835)>>2)];
   var $837=(($836+36)|0);
   var $838=HEAP32[(($837)>>2)];
   var $839 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$838]($807) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_031 = $839;label = 234; break; } else { label = 21; break; }
  case 233: 
   var $841=HEAP32[(($830)>>2)];
   var $_031 = $841;label = 234; break;
  case 234: 
   var $_031;
   var $842=(($_031)|(0))==-1;
   if ($842) { label = 235; break; } else { label = 237; break; }
  case 235: 
   HEAP32[(($12)>>2)]=0;
   label = 236; break;
  case 236: 
   if ($826) { label = 243; break; } else { var $846 = 0;label = 238; break; }
  case 237: 
   var $844=(($807)|(0))==0;
   var $tmp69=$826 ^ $844;
   if ($tmp69) { var $846 = $807;label = 238; break; } else { label = 243; break; }
  case 238: 
   var $846;
   var $847=HEAP32[(($11)>>2)];
   var $848=(($847+12)|0);
   var $849=HEAP32[(($848)>>2)];
   var $850=(($847+16)|0);
   var $851=HEAP32[(($850)>>2)];
   var $852=(($849)|(0))==(($851)|(0));
   if ($852) { label = 239; break; } else { label = 240; break; }
  case 239: 
   var $854=$847;
   var $855=HEAP32[(($854)>>2)];
   var $856=(($855+36)|0);
   var $857=HEAP32[(($856)>>2)];
   var $858 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$857]($847) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_034 = $858;label = 241; break; } else { label = 21; break; }
  case 240: 
   var $860=HEAP32[(($849)>>2)];
   var $_034 = $860;label = 241; break;
  case 241: 
   var $_034;
   var $861=HEAP32[(($14)>>2)];
   var $862=(($861+12)|0);
   var $863=HEAP32[(($862)>>2)];
   var $864 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$863]($__ct, 2048, $_034) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 242; break; } else { label = 21; break; }
  case 242: 
   if ($864) { label = 244; break; } else { label = 243; break; }
  case 243: 
   var $866=HEAP32[(($__err)>>2)];
   var $867=$866 | 4;
   HEAP32[(($__err)>>2)]=$867;
   var $_026 = 0;var $1021 = $726;var $free91 = $free87;label = 290; break;
  case 244: 
   var $869=HEAP32[(($__wn)>>2)];
   var $870=HEAP32[(($0)>>2)];
   var $871=(($869)|(0))==(($870)|(0));
   if ($871) { label = 245; break; } else { label = 246; break; }
  case 245: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 246; break; } else { label = 21; break; }
  case 246: 
   var $874=HEAP32[(($11)>>2)];
   var $875=(($874+12)|0);
   var $876=HEAP32[(($875)>>2)];
   var $877=(($874+16)|0);
   var $878=HEAP32[(($877)>>2)];
   var $879=(($876)|(0))==(($878)|(0));
   if ($879) { label = 247; break; } else { label = 248; break; }
  case 247: 
   var $881=$874;
   var $882=HEAP32[(($881)>>2)];
   var $883=(($882+36)|0);
   var $884=HEAP32[(($883)>>2)];
   var $885 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$884]($874) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_035 = $885;label = 249; break; } else { label = 21; break; }
  case 248: 
   var $887=HEAP32[(($876)>>2)];
   var $_035 = $887;label = 249; break;
  case 249: 
   var $_035;
   var $888=HEAP32[(($__wn)>>2)];
   var $889=(($888+4)|0);
   HEAP32[(($__wn)>>2)]=$889;
   HEAP32[(($888)>>2)]=$_035;
   var $890=((($806)-(1))|0);
   HEAP32[(($__fd)>>2)]=$890;
   var $891=HEAP32[(($11)>>2)];
   var $892=(($891+12)|0);
   var $893=HEAP32[(($892)>>2)];
   var $894=(($891+16)|0);
   var $895=HEAP32[(($894)>>2)];
   var $896=(($893)|(0))==(($895)|(0));
   if ($896) { label = 250; break; } else { label = 252; break; }
  case 250: 
   var $898=$891;
   var $899=HEAP32[(($898)>>2)];
   var $900=(($899+40)|0);
   var $901=HEAP32[(($900)>>2)];
   var $902 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$901]($891) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 251; break; } else { label = 21; break; }
  case 251: 
   var $903=(($890)|(0)) > 0;
   if ($903) { var $807 = $846;var $806 = $890;label = 223; break; } else { label = 253; break; }
  case 252: 
   var $905=(($893+4)|0);
   HEAP32[(($892)>>2)]=$905;
   label = 251; break;
  case 253: 
   var $906=HEAP32[(($__wn)>>2)];
   var $907=HEAP32[(($9)>>2)];
   var $908=(($906)|(0))==(($907)|(0));
   if ($908) { label = 254; break; } else { var $__trailing_sign_1 = $__trailing_sign_0203;var $914 = $728;var $913 = $727;var $912 = $726;var $free86 = $free87;label = 255; break; }
  case 254: 
   var $910=HEAP32[(($__err)>>2)];
   var $911=$910 | 4;
   HEAP32[(($__err)>>2)]=$911;
   var $_026 = 0;var $1021 = $726;var $free91 = $free87;label = 290; break;
  case 255: 
   var $free86;
   var $912;
   var $913;
   var $914;
   var $__trailing_sign_1;
   var $915=((($__p_0205)+(1))|0);
   var $916=(($915)>>>(0)) < 4;
   if ($916) { var $free85200 = $free86;var $29 = $912;var $28 = $913;var $27 = $914;var $__trailing_sign_0203 = $__trailing_sign_1;var $__p_0205 = $915;label = 3; break; } else { var $free85_lcssa = $free86;var $_lcssa = $912;var $_lcssa164 = $913;var $__trailing_sign_0_lcssa = $__trailing_sign_1;label = 256; break; }
  case 256: 
   var $__trailing_sign_0_lcssa;
   var $_lcssa164;
   var $_lcssa;
   var $free85_lcssa;
   var $917=(($__trailing_sign_0_lcssa)|(0))==0;
   if ($917) { label = 287; break; } else { label = 257; break; }
  case 257: 
   var $918=$__trailing_sign_0_lcssa;
   var $919=(($__trailing_sign_0_lcssa+4)|0);
   var $920=(($__trailing_sign_0_lcssa+8)|0);
   var $__i_0 = 1;label = 258; break;
  case 258: 
   var $__i_0;
   var $921=HEAP8[($918)];
   var $922=(($921)&(255));
   var $923=$922 & 1;
   var $924=(($923)|(0))==0;
   if ($924) { label = 260; break; } else { label = 259; break; }
  case 259: 
   var $926=HEAP32[(($919)>>2)];
   var $929 = $926;label = 261; break;
  case 260: 
   var $928=$922 >>> 1;
   var $929 = $928;label = 261; break;
  case 261: 
   var $929;
   var $930=(($__i_0)>>>(0)) < (($929)>>>(0));
   if ($930) { label = 262; break; } else { label = 287; break; }
  case 262: 
   var $932=HEAP32[(($11)>>2)];
   var $933=(($932)|(0))==0;
   if ($933) { var $950 = 1;label = 269; break; } else { label = 263; break; }
  case 263: 
   var $935=(($932+12)|0);
   var $936=HEAP32[(($935)>>2)];
   var $937=(($932+16)|0);
   var $938=HEAP32[(($937)>>2)];
   var $939=(($936)|(0))==(($938)|(0));
   if ($939) { label = 264; break; } else { label = 265; break; }
  case 264: 
   var $941=$932;
   var $942=HEAP32[(($941)>>2)];
   var $943=(($942+36)|0);
   var $944=HEAP32[(($943)>>2)];
   var $945 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$944]($932) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_046 = $945;label = 266; break; } else { label = 19; break; }
  case 265: 
   var $947=HEAP32[(($936)>>2)];
   var $_046 = $947;label = 266; break;
  case 266: 
   var $_046;
   var $948=(($_046)|(0))==-1;
   if ($948) { label = 268; break; } else { label = 267; break; }
  case 267: 
   var $_pre278=HEAP32[(($11)>>2)];
   var $phitmp279=(($_pre278)|(0))==0;
   var $950 = $phitmp279;label = 269; break;
  case 268: 
   HEAP32[(($11)>>2)]=0;
   var $950 = 1;label = 269; break;
  case 269: 
   var $950;
   var $951=HEAP32[(($12)>>2)];
   var $952=(($951)|(0))==0;
   if ($952) { label = 275; break; } else { label = 270; break; }
  case 270: 
   var $954=(($951+12)|0);
   var $955=HEAP32[(($954)>>2)];
   var $956=(($951+16)|0);
   var $957=HEAP32[(($956)>>2)];
   var $958=(($955)|(0))==(($957)|(0));
   if ($958) { label = 271; break; } else { label = 272; break; }
  case 271: 
   var $960=$951;
   var $961=HEAP32[(($960)>>2)];
   var $962=(($961+36)|0);
   var $963=HEAP32[(($962)>>2)];
   var $964 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$963]($951) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_045 = $964;label = 273; break; } else { label = 19; break; }
  case 272: 
   var $966=HEAP32[(($955)>>2)];
   var $_045 = $966;label = 273; break;
  case 273: 
   var $_045;
   var $967=(($_045)|(0))==-1;
   if ($967) { label = 274; break; } else { label = 276; break; }
  case 274: 
   HEAP32[(($12)>>2)]=0;
   label = 275; break;
  case 275: 
   if ($950) { label = 283; break; } else { label = 277; break; }
  case 276: 
   var $969=(($951)|(0))==0;
   var $tmp=$950 ^ $969;
   if ($tmp) { label = 277; break; } else { label = 283; break; }
  case 277: 
   var $971=HEAP32[(($11)>>2)];
   var $972=(($971+12)|0);
   var $973=HEAP32[(($972)>>2)];
   var $974=(($971+16)|0);
   var $975=HEAP32[(($974)>>2)];
   var $976=(($973)|(0))==(($975)|(0));
   if ($976) { label = 278; break; } else { label = 279; break; }
  case 278: 
   var $978=$971;
   var $979=HEAP32[(($978)>>2)];
   var $980=(($979+36)|0);
   var $981=HEAP32[(($980)>>2)];
   var $982 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$981]($971) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_047 = $982;label = 280; break; } else { label = 19; break; }
  case 279: 
   var $984=HEAP32[(($973)>>2)];
   var $_047 = $984;label = 280; break;
  case 280: 
   var $_047;
   var $985=HEAP8[($918)];
   var $986=$985 & 1;
   var $987=(($986 << 24) >> 24)==0;
   if ($987) { var $990 = $919;label = 282; break; } else { label = 281; break; }
  case 281: 
   var $989=HEAP32[(($920)>>2)];
   var $990 = $989;label = 282; break;
  case 282: 
   var $990;
   var $991=(($990+($__i_0<<2))|0);
   var $992=HEAP32[(($991)>>2)];
   var $993=(($_047)|(0))==(($992)|(0));
   if ($993) { label = 284; break; } else { label = 283; break; }
  case 283: 
   var $995=HEAP32[(($__err)>>2)];
   var $996=$995 | 4;
   HEAP32[(($__err)>>2)]=$996;
   var $_026 = 0;var $1021 = $_lcssa;var $free91 = $free85_lcssa;label = 290; break;
  case 284: 
   var $998=((($__i_0)+(1))|0);
   var $999=HEAP32[(($11)>>2)];
   var $1000=(($999+12)|0);
   var $1001=HEAP32[(($1000)>>2)];
   var $1002=(($999+16)|0);
   var $1003=HEAP32[(($1002)>>2)];
   var $1004=(($1001)|(0))==(($1003)|(0));
   if ($1004) { label = 285; break; } else { label = 286; break; }
  case 285: 
   var $1006=$999;
   var $1007=HEAP32[(($1006)>>2)];
   var $1008=(($1007+40)|0);
   var $1009=HEAP32[(($1008)>>2)];
   var $1010 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1009]($999) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0 = $998;label = 258; break; } else { label = 19; break; }
  case 286: 
   var $1012=(($1001+4)|0);
   HEAP32[(($1000)>>2)]=$1012;
   var $__i_0 = $998;label = 258; break;
  case 287: 
   var $1013=(($_lcssa)|(0))==(($_lcssa164)|(0));
   if ($1013) { var $_026 = 1;var $1021 = $_lcssa164;var $free91 = $free85_lcssa;label = 290; break; } else { label = 288; break; }
  case 288: 
   HEAP32[(($__et)>>2)]=0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $_lcssa, $_lcssa164, $__et);
   var $1015=HEAP32[(($__et)>>2)];
   var $1016=(($1015)|(0))==0;
   if ($1016) { var $_026 = 1;var $1021 = $_lcssa;var $free91 = $free85_lcssa;label = 290; break; } else { label = 289; break; }
  case 289: 
   var $1018=HEAP32[(($__err)>>2)];
   var $1019=$1018 | 4;
   HEAP32[(($__err)>>2)]=$1019;
   var $_026 = 0;var $1021 = $_lcssa;var $free91 = $free85_lcssa;label = 290; break;
  case 290: 
   var $free91;
   var $1021;
   var $_026;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $1022=(($1021)|(0))==0;
   if ($1022) { label = 293; break; } else { label = 291; break; }
  case 291: 
   var $1024=$1021;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free91]($1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 293; break; } else { label = 292; break; }
  case 292: 
   var $1026$0 = ___cxa_find_matching_catch(-1, -1,0); $1026$1 = tempRet0;
   var $1027=$1026$0;
   ___clang_call_terminate($1027);
   throw "Reached an unreachable!";
  case 293: 
   STACKTOP = sp;
   return $_026;
  case 294: 
   ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__wbuf=(sp)+(16);
   var $__wb=(sp)+(416);
   var $__wn=(sp)+(424);
   var $__loc=(sp)+(432);
   var $__neg=(sp)+(440);
   var $1=(sp)+(448);
   var $2=(($__wbuf)|0);
   var $3=(($__wb)|0);
   HEAP32[(($3)>>2)]=$2;
   var $4=(($__wb+4)|0);
   HEAP32[(($4)>>2)]=426;
   var $5=(($__wbuf+400)|0);
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 16; break; }
  case 2: 
   var $7=(($__loc)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $10=HEAP32[((((13696)|0))>>2)];
   var $11=(($10)|(0))==-1;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=(($__p_i_i_i)|0);
   HEAP32[(($13)>>2)]=13696;
   var $14=(($__p_i_i_i+4)|0);
   HEAP32[(($14)>>2)]=(26);
   var $15=(($__p_i_i_i+8)|0);
   HEAP32[(($15)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $9, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 41; break; }
  case 4: 
   var $16=HEAP32[((((13700)|0))>>2)];
   var $17=((($16)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $18=(($8+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($8+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$19;
   var $23=$21;
   var $24=((($22)-($23))|0);
   var $25=$24 >> 2;
   var $26=(($25)>>>(0)) > (($17)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=(($21+($17<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $30=___cxa_allocate_exception(4);
   var $31=$30;
   __ZNSt8bad_castC2Ev($31);
   (function() { try { __THREW__ = 0; return ___cxa_throw($30, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 41; break; }
  case 7: 
   throw "Reached an unreachable!";
  case 8: 
   var $32=$28;
   HEAP8[($__neg)]=0;
   var $33=(($__e)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($1)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($__iob+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $1, $__intl, $__loc, $37, $__err, $__neg, $32, $__wb, $__wn, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 41; break; }
  case 9: 
   if ($38) { label = 10; break; } else { label = 22; break; }
  case 10: 
   var $41=$__v;
   var $42=HEAP8[($41)];
   var $43=$42 & 1;
   var $44=(($43 << 24) >> 24)==0;
   if ($44) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $46=(($__v+8)|0);
   var $47=HEAP32[(($46)>>2)];
   HEAP32[(($47)>>2)]=0;
   var $48=(($__v+4)|0);
   HEAP32[(($48)>>2)]=0;
   label = 13; break;
  case 12: 
   var $50=(($__v+4)|0);
   HEAP32[(($50)>>2)]=0;
   HEAP8[($41)]=0;
   label = 13; break;
  case 13: 
   var $51=HEAP8[($__neg)];
   var $52=$51 & 1;
   var $53=(($52 << 24) >> 24)==0;
   var $_pre9=$28;
   if ($53) { label = 17; break; } else { label = 14; break; }
  case 14: 
   var $55=HEAP32[(($_pre9)>>2)];
   var $56=(($55+44)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($32, 45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 41; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, $58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 41; break; }
  case 16: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   var $61=$59$1;
   HEAP32[(($3)>>2)]=0;
   var $140 = $2;var $_0311 = $61;var $_0213 = $60;label = 42; break;
  case 17: 
   var $62=HEAP32[(($_pre9)>>2)];
   var $63=(($62+44)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($32, 48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 41; break; }
  case 18: 
   var $66=HEAP32[(($3)>>2)];
   var $67=HEAP32[(($__wn)>>2)];
   var $68=((($67)-(4))|0);
   var $69=(($66)>>>(0)) < (($68)>>>(0));
   if ($69) { var $__w_05 = $66;label = 20; break; } else { var $__w_0_lcssa = $66;label = 21; break; }
  case 19: 
   var $71=(($74)>>>(0)) < (($68)>>>(0));
   if ($71) { var $__w_05 = $74;label = 20; break; } else { var $__w_0_lcssa = $74;label = 21; break; }
  case 20: 
   var $__w_05;
   var $72=HEAP32[(($__w_05)>>2)];
   var $73=(($72)|(0))==(($65)|(0));
   var $74=(($__w_05+4)|0);
   if ($73) { label = 19; break; } else { var $__w_0_lcssa = $__w_05;label = 21; break; }
  case 21: 
   var $__w_0_lcssa;
   var $75 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w_0_lcssa, $67) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 41; break; }
  case 22: 
   var $77=(($__b)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)|(0))==0;
   if ($79) { var $96 = 0;label = 28; break; } else { label = 23; break; }
  case 23: 
   var $81=(($78+12)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($78+16)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($82)|(0))==(($84)|(0));
   if ($85) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $87=$78;
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+36)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_01 = $91;label = 26; break; } else { label = 41; break; }
  case 25: 
   var $93=HEAP32[(($82)>>2)];
   var $_01 = $93;label = 26; break;
  case 26: 
   var $_01;
   var $94=(($_01)|(0))==-1;
   if ($94) { label = 27; break; } else { var $96 = $78;label = 28; break; }
  case 27: 
   HEAP32[(($77)>>2)]=0;
   var $96 = 0;label = 28; break;
  case 28: 
   var $96;
   var $97=(($96)|(0))==0;
   var $98=(($34)|(0))==0;
   if ($98) { label = 34; break; } else { label = 29; break; }
  case 29: 
   var $100=(($34+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($34+16)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($101)|(0))==(($103)|(0));
   if ($104) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $106=$34;
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+36)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = $110;label = 32; break; } else { label = 41; break; }
  case 31: 
   var $112=HEAP32[(($101)>>2)];
   var $_0 = $112;label = 32; break;
  case 32: 
   var $_0;
   var $113=(($_0)|(0))==-1;
   if ($113) { label = 33; break; } else { label = 35; break; }
  case 33: 
   HEAP32[(($33)>>2)]=0;
   label = 34; break;
  case 34: 
   if ($97) { label = 36; break; } else { label = 37; break; }
  case 35: 
   var $115=(($34)|(0))==0;
   var $tmp=$97 ^ $115;
   if ($tmp) { label = 37; break; } else { label = 36; break; }
  case 36: 
   var $117=HEAP32[(($__err)>>2)];
   var $118=$117 | 2;
   HEAP32[(($__err)>>2)]=$118;
   label = 37; break;
  case 37: 
   var $119=(($agg_result)|0);
   HEAP32[(($119)>>2)]=$96;
   var $120=HEAP32[(($7)>>2)];
   var $121=(($120)|0);
   var $122=__ZNSt3__114__shared_count16__release_sharedEv($121);
   var $123=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $124=(($123)|(0))==0;
   if ($124) { label = 40; break; } else { label = 38; break; }
  case 38: 
   var $126=HEAP32[(($4)>>2)];
   var $127=$123;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$126]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $129$0 = ___cxa_find_matching_catch(-1, -1,0); $129$1 = tempRet0;
   var $130=$129$0;
   ___clang_call_terminate($130);
   throw "Reached an unreachable!";
  case 40: 
   STACKTOP = sp;
   return;
  case 41: 
   var $132$0 = ___cxa_find_matching_catch(-1, -1); $132$1 = tempRet0;
   var $133=$132$0;
   var $134=$132$1;
   var $135=HEAP32[(($7)>>2)];
   var $136=(($135)|0);
   var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
   var $_pre=HEAP32[(($3)>>2)];
   HEAP32[(($3)>>2)]=0;
   var $138=(($_pre)|(0))==0;
   if ($138) { var $_0312 = $134;var $_0214 = $133;label = 44; break; } else { var $140 = $_pre;var $_0311 = $134;var $_0213 = $133;label = 42; break; }
  case 42: 
   var $_0213;
   var $_0311;
   var $140;
   var $141=HEAP32[(($4)>>2)];
   var $142=$140;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0312 = $_0311;var $_0214 = $_0213;label = 44; break; } else { label = 43; break; }
  case 43: 
   var $144$0 = ___cxa_find_matching_catch(-1, -1,0); $144$1 = tempRet0;
   var $145=$144$0;
   ___clang_call_terminate($145);
   throw "Reached an unreachable!";
  case 44: 
   var $_0214;
   var $_0312;
   var $146$0=$_0214;
   var $146$1=0;
   var $147$0=$146$0;
   var $147$1=$_0312;
   ___resumeException($147$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$this;
   var $2=$__first;
   var $3=HEAP8[($1)];
   var $4=(($3)&(255));
   var $5=$4 & 1;
   var $6=(($5)|(0))==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($this+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $12 = $9;label = 4; break;
  case 3: 
   var $11=$4 >>> 1;
   var $12 = $11;label = 4; break;
  case 4: 
   var $12;
   var $13=$3 & 1;
   var $14=(($13 << 24) >> 24)==0;
   if ($14) { var $21 = 1;var $20 = $3;label = 6; break; } else { label = 5; break; }
  case 5: 
   var $16=(($this)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 & -2;
   var $phitmp=((($18)-(1))|0);
   var $19=(($17) & 255);
   var $21 = $phitmp;var $20 = $19;label = 6; break;
  case 6: 
   var $20;
   var $21;
   var $22=$__last;
   var $23=((($22)-($2))|0);
   var $24=$23 >> 2;
   var $25=(($24)|(0))==0;
   if ($25) { label = 19; break; } else { label = 7; break; }
  case 7: 
   var $27=((($21)-($12))|0);
   var $28=(($27)>>>(0)) < (($24)>>>(0));
   if ($28) { label = 8; break; } else { var $33 = $20;label = 9; break; }
  case 8: 
   var $30=((($12)+($24))|0);
   var $31=((($30)-($21))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $21, $31, $12, $12, 0, 0);
   var $_pre=HEAP8[($1)];
   var $33 = $_pre;label = 9; break;
  case 9: 
   var $33;
   var $34=$33 & 1;
   var $35=(($34 << 24) >> 24)==0;
   if ($35) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $37=(($this+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $41 = $38;label = 12; break;
  case 11: 
   var $40=(($this+4)|0);
   var $41 = $40;label = 12; break;
  case 12: 
   var $41;
   var $42=(($41+($12<<2))|0);
   var $43=(($__first)|(0))==(($__last)|(0));
   if ($43) { var $__p_0_lcssa = $42;label = 16; break; } else { label = 13; break; }
  case 13: 
   var $scevgep=((($__last)-(4))|0);
   var $scevgep4=$scevgep;
   var $44=(((-$2))|0);
   var $uglygep=(($scevgep4+$44)|0);
   var $uglygep5=$uglygep;
   var $45=$uglygep5 >>> 2;
   var $46=((($12)+($45))|0);
   var $47=((($46)+(1))|0);
   var $_02 = $__first;var $__p_03 = $42;label = 14; break;
  case 14: 
   var $__p_03;
   var $_02;
   var $49=HEAP32[(($_02)>>2)];
   HEAP32[(($__p_03)>>2)]=$49;
   var $50=(($__p_03+4)|0);
   var $51=(($_02+4)|0);
   var $52=(($51)|(0))==(($__last)|(0));
   if ($52) { label = 15; break; } else { var $_02 = $51;var $__p_03 = $50;label = 14; break; }
  case 15: 
   var $scevgep6=(($41+($47<<2))|0);
   var $__p_0_lcssa = $scevgep6;label = 16; break;
  case 16: 
   var $__p_0_lcssa;
   HEAP32[(($__p_0_lcssa)>>2)]=0;
   var $54=((($12)+($24))|0);
   var $55=HEAP8[($1)];
   var $56=$55 & 1;
   var $57=(($56 << 24) >> 24)==0;
   if ($57) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $59=(($this+4)|0);
   HEAP32[(($59)>>2)]=$54;
   label = 19; break;
  case 18: 
   var $61=$54 << 1;
   var $62=(($61) & 255);
   HEAP8[($1)]=$62;
   label = 19; break;
  case 19: 
   return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i33=sp;
   var $__p_i_i_i=(sp)+(16);
   var $1=(sp)+(32);
   var $2=(sp)+(40);
   var $3=$2;
   var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $5=$4;
   var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $7=$6;
   var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $9=$8;
   var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $12=$11;
   var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $14=$13;
   var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $16=$15;
   var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $18=$17;
   if ($__intl) { label = 2; break; } else { label = 28; break; }
  case 2: 
   var $tmpcast32=$1;
   var $20=(($__loc)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $23=HEAP32[((((14160)|0))>>2)];
   var $24=(($23)|(0))==-1;
   if ($24) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $26=(($__p_i_i_i)|0);
   HEAP32[(($26)>>2)]=14160;
   var $27=(($__p_i_i_i+4)|0);
   HEAP32[(($27)>>2)]=(26);
   var $28=(($__p_i_i_i+8)|0);
   HEAP32[(($28)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14160)|0), $22, 256);
   label = 4; break;
  case 4: 
   var $29=HEAP32[((((14164)|0))>>2)];
   var $30=((($29)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $31=(($21+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($21+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$32;
   var $36=$34;
   var $37=((($35)-($36))|0);
   var $38=$37 >> 2;
   var $39=(($38)>>>(0)) > (($30)>>>(0));
   if ($39) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $40=(($34+($30<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==0;
   if ($42) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $43=___cxa_allocate_exception(4);
   var $44=$43;
   __ZNSt8bad_castC2Ev($44);
   ___cxa_throw($43, 8440, (356));
   throw "Reached an unreachable!";
  case 7: 
   var $45=$41;
   var $46=$41;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+44)|0);
   var $49=HEAP32[(($48)>>2)];
   FUNCTION_TABLE[$49]($tmpcast32, $45);
   var $50=$__pat;
   var $51=HEAP32[(($1)>>2)];
   tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
   var $52=$41;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+32)|0);
   var $55=HEAP32[(($54)>>2)];
   FUNCTION_TABLE[$55]($2, $45);
   var $56=$__nsn;
   var $57=HEAP8[($56)];
   var $58=$57 & 1;
   var $59=(($58 << 24) >> 24)==0;
   if ($59) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $61=(($__nsn+8)|0);
   var $62=HEAP32[(($61)>>2)];
   HEAP32[(($62)>>2)]=0;
   var $63=(($__nsn+4)|0);
   HEAP32[(($63)>>2)]=0;
   label = 10; break;
  case 9: 
   var $65=(($__nsn+4)|0);
   HEAP32[(($65)>>2)]=0;
   HEAP8[($56)]=0;
   label = 10; break;
  case 10: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $67$0 = ___cxa_find_matching_catch(-1, -1,0); $67$1 = tempRet0;
   var $68=$67$0;
   ___clang_call_terminate($68);
   throw "Reached an unreachable!";
  case 12: 
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
   var $69=HEAP32[(($52)>>2)];
   var $70=(($69+28)|0);
   var $71=HEAP32[(($70)>>2)];
   FUNCTION_TABLE[$71]($4, $45);
   var $72=$__psn;
   var $73=HEAP8[($72)];
   var $74=$73 & 1;
   var $75=(($74 << 24) >> 24)==0;
   if ($75) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $77=(($__psn+8)|0);
   var $78=HEAP32[(($77)>>2)];
   HEAP32[(($78)>>2)]=0;
   var $79=(($__psn+4)|0);
   HEAP32[(($79)>>2)]=0;
   label = 15; break;
  case 14: 
   var $81=(($__psn+4)|0);
   HEAP32[(($81)>>2)]=0;
   HEAP8[($72)]=0;
   label = 15; break;
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $83$0 = ___cxa_find_matching_catch(-1, -1,0); $83$1 = tempRet0;
   var $84=$83$0;
   ___clang_call_terminate($84);
   throw "Reached an unreachable!";
  case 17: 
   assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
   HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
   var $85=$41;
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+12)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=FUNCTION_TABLE[$88]($45);
   HEAP32[(($__dp)>>2)]=$89;
   var $90=HEAP32[(($85)>>2)];
   var $91=(($90+16)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=FUNCTION_TABLE[$92]($45);
   HEAP32[(($__ts)>>2)]=$93;
   var $94=$41;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95+20)|0);
   var $97=HEAP32[(($96)>>2)];
   FUNCTION_TABLE[$97]($6, $45);
   var $98=$__grp;
   var $99=HEAP8[($98)];
   var $100=$99 & 1;
   var $101=(($100 << 24) >> 24)==0;
   if ($101) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $103=(($__grp+8)|0);
   var $104=HEAP32[(($103)>>2)];
   HEAP8[($104)]=0;
   var $105=(($__grp+4)|0);
   HEAP32[(($105)>>2)]=0;
   label = 20; break;
  case 19: 
   var $107=$__grp;
   var $108=(($107+1)|0);
   HEAP8[($108)]=0;
   HEAP8[($98)]=0;
   label = 20; break;
  case 20: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $110$0 = ___cxa_find_matching_catch(-1, -1,0); $110$1 = tempRet0;
   var $111=$110$0;
   ___clang_call_terminate($111);
   throw "Reached an unreachable!";
  case 22: 
   assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
   var $112=HEAP32[(($52)>>2)];
   var $113=(($112+24)|0);
   var $114=HEAP32[(($113)>>2)];
   FUNCTION_TABLE[$114]($8, $45);
   var $115=$__sym;
   var $116=HEAP8[($115)];
   var $117=$116 & 1;
   var $118=(($117 << 24) >> 24)==0;
   if ($118) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $120=(($__sym+8)|0);
   var $121=HEAP32[(($120)>>2)];
   HEAP32[(($121)>>2)]=0;
   var $122=(($__sym+4)|0);
   HEAP32[(($122)>>2)]=0;
   label = 25; break;
  case 24: 
   var $124=(($__sym+4)|0);
   HEAP32[(($124)>>2)]=0;
   HEAP8[($115)]=0;
   label = 25; break;
  case 25: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $126$0 = ___cxa_find_matching_catch(-1, -1,0); $126$1 = tempRet0;
   var $127=$126$0;
   ___clang_call_terminate($127);
   throw "Reached an unreachable!";
  case 27: 
   assert(12 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($115)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
   var $128=HEAP32[(($85)>>2)];
   var $129=(($128+36)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=FUNCTION_TABLE[$130]($45);
   var $storemerge = $131;label = 54; break;
  case 28: 
   var $tmpcast=$10;
   var $133=(($__loc)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$__p_i_i_i33;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $136=HEAP32[((((14168)|0))>>2)];
   var $137=(($136)|(0))==-1;
   if ($137) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $139=(($__p_i_i_i33)|0);
   HEAP32[(($139)>>2)]=14168;
   var $140=(($__p_i_i_i33+4)|0);
   HEAP32[(($140)>>2)]=(26);
   var $141=(($__p_i_i_i33+8)|0);
   HEAP32[(($141)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14168)|0), $135, 256);
   label = 30; break;
  case 30: 
   var $142=HEAP32[((((14172)|0))>>2)];
   var $143=((($142)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $144=(($134+12)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($134+8)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=$145;
   var $149=$147;
   var $150=((($148)-($149))|0);
   var $151=$150 >> 2;
   var $152=(($151)>>>(0)) > (($143)>>>(0));
   if ($152) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $153=(($147+($143<<2))|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154)|(0))==0;
   if ($155) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $156=___cxa_allocate_exception(4);
   var $157=$156;
   __ZNSt8bad_castC2Ev($157);
   ___cxa_throw($156, 8440, (356));
   throw "Reached an unreachable!";
  case 33: 
   var $158=$154;
   var $159=$154;
   var $160=HEAP32[(($159)>>2)];
   var $161=(($160+44)|0);
   var $162=HEAP32[(($161)>>2)];
   FUNCTION_TABLE[$162]($tmpcast, $158);
   var $163=$__pat;
   var $164=HEAP32[(($10)>>2)];
   tempBigInt=$164;HEAP8[($163)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(3))|0)]=tempBigInt&0xff;
   var $165=$154;
   var $166=HEAP32[(($165)>>2)];
   var $167=(($166+32)|0);
   var $168=HEAP32[(($167)>>2)];
   FUNCTION_TABLE[$168]($11, $158);
   var $169=$__nsn;
   var $170=HEAP8[($169)];
   var $171=$170 & 1;
   var $172=(($171 << 24) >> 24)==0;
   if ($172) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $174=(($__nsn+8)|0);
   var $175=HEAP32[(($174)>>2)];
   HEAP32[(($175)>>2)]=0;
   var $176=(($__nsn+4)|0);
   HEAP32[(($176)>>2)]=0;
   label = 36; break;
  case 35: 
   var $178=(($__nsn+4)|0);
   HEAP32[(($178)>>2)]=0;
   HEAP8[($169)]=0;
   label = 36; break;
  case 36: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $180$0 = ___cxa_find_matching_catch(-1, -1,0); $180$1 = tempRet0;
   var $181=$180$0;
   ___clang_call_terminate($181);
   throw "Reached an unreachable!";
  case 38: 
   assert(12 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($169)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
   var $182=HEAP32[(($165)>>2)];
   var $183=(($182+28)|0);
   var $184=HEAP32[(($183)>>2)];
   FUNCTION_TABLE[$184]($13, $158);
   var $185=$__psn;
   var $186=HEAP8[($185)];
   var $187=$186 & 1;
   var $188=(($187 << 24) >> 24)==0;
   if ($188) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $190=(($__psn+8)|0);
   var $191=HEAP32[(($190)>>2)];
   HEAP32[(($191)>>2)]=0;
   var $192=(($__psn+4)|0);
   HEAP32[(($192)>>2)]=0;
   label = 41; break;
  case 40: 
   var $194=(($__psn+4)|0);
   HEAP32[(($194)>>2)]=0;
   HEAP8[($185)]=0;
   label = 41; break;
  case 41: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $196$0 = ___cxa_find_matching_catch(-1, -1,0); $196$1 = tempRet0;
   var $197=$196$0;
   ___clang_call_terminate($197);
   throw "Reached an unreachable!";
  case 43: 
   assert(12 % 1 === 0);HEAP32[(($185)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($185)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($185)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($13);
   var $198=$154;
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=FUNCTION_TABLE[$201]($158);
   HEAP32[(($__dp)>>2)]=$202;
   var $203=HEAP32[(($198)>>2)];
   var $204=(($203+16)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=FUNCTION_TABLE[$205]($158);
   HEAP32[(($__ts)>>2)]=$206;
   var $207=$154;
   var $208=HEAP32[(($207)>>2)];
   var $209=(($208+20)|0);
   var $210=HEAP32[(($209)>>2)];
   FUNCTION_TABLE[$210]($15, $158);
   var $211=$__grp;
   var $212=HEAP8[($211)];
   var $213=$212 & 1;
   var $214=(($213 << 24) >> 24)==0;
   if ($214) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $216=(($__grp+8)|0);
   var $217=HEAP32[(($216)>>2)];
   HEAP8[($217)]=0;
   var $218=(($__grp+4)|0);
   HEAP32[(($218)>>2)]=0;
   label = 46; break;
  case 45: 
   var $220=$__grp;
   var $221=(($220+1)|0);
   HEAP8[($221)]=0;
   HEAP8[($211)]=0;
   label = 46; break;
  case 46: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $223$0 = ___cxa_find_matching_catch(-1, -1,0); $223$1 = tempRet0;
   var $224=$223$0;
   ___clang_call_terminate($224);
   throw "Reached an unreachable!";
  case 48: 
   assert(12 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($211)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
   var $225=HEAP32[(($165)>>2)];
   var $226=(($225+24)|0);
   var $227=HEAP32[(($226)>>2)];
   FUNCTION_TABLE[$227]($17, $158);
   var $228=$__sym;
   var $229=HEAP8[($228)];
   var $230=$229 & 1;
   var $231=(($230 << 24) >> 24)==0;
   if ($231) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $233=(($__sym+8)|0);
   var $234=HEAP32[(($233)>>2)];
   HEAP32[(($234)>>2)]=0;
   var $235=(($__sym+4)|0);
   HEAP32[(($235)>>2)]=0;
   label = 51; break;
  case 50: 
   var $237=(($__sym+4)|0);
   HEAP32[(($237)>>2)]=0;
   HEAP8[($228)]=0;
   label = 51; break;
  case 51: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $239$0 = ___cxa_find_matching_catch(-1, -1,0); $239$1 = tempRet0;
   var $240=$239$0;
   ___clang_call_terminate($240);
   throw "Reached an unreachable!";
  case 53: 
   assert(12 % 1 === 0);HEAP32[(($228)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($228)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($228)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($17);
   var $241=HEAP32[(($198)>>2)];
   var $242=(($241+36)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=FUNCTION_TABLE[$243]($158);
   var $storemerge = $244;label = 54; break;
  case 54: 
   var $storemerge;
   HEAP32[(($__fd)>>2)]=$storemerge;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($__b+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))!=(((426))|(0));
   var $4=HEAP32[(($__e)>>2)];
   var $5=(($__b)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$4;
   var $8=$6;
   var $9=((($7)-($8))|0);
   var $10=(($9)>>>(0)) < 2147483647;
   var $11=$9 << 1;
   var $_=$10 ? $11 : -1;
   var $12=HEAP32[(($__n)>>2)];
   var $13=$12;
   var $14=((($13)-($8))|0);
   var $15=$14 >> 2;
   if ($3) { label = 2; break; } else { var $18 = 0;label = 3; break; }
  case 2: 
   var $phitmp=$6;
   var $18 = $phitmp;label = 3; break;
  case 3: 
   var $18;
   var $19=_realloc($18, $_);
   var $20=$19;
   var $21=(($19)|(0))==0;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   __ZSt17__throw_bad_allocv();
   label = 5; break;
  case 5: 
   if ($3) { label = 6; break; } else { label = 7; break; }
  case 6: 
   HEAP32[(($5)>>2)]=$20;
   var $32 = $20;label = 11; break;
  case 7: 
   var $_pr=HEAP32[(($5)>>2)];
   HEAP32[(($5)>>2)]=$20;
   var $25=(($_pr)|(0))==0;
   if ($25) { var $32 = $20;label = 11; break; } else { label = 8; break; }
  case 8: 
   var $27=HEAP32[(($1)>>2)];
   var $28=$_pr;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $_pre=HEAP32[(($5)>>2)];
   var $32 = $_pre;label = 11; break;
  case 10: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1,0); $30$1 = tempRet0;
   var $31=$30$0;
   ___clang_call_terminate($31);
   throw "Reached an unreachable!";
  case 11: 
   var $32;
   HEAP32[(($1)>>2)]=220;
   var $33=$_ >>> 2;
   var $34=(($32+($15<<2))|0);
   HEAP32[(($__n)>>2)]=$34;
   var $35=HEAP32[(($5)>>2)];
   var $36=(($35+($33<<2))|0);
   HEAP32[(($__e)>>2)]=$36;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__buf=(sp)+(16);
   var $__bb=(sp)+(120);
   var $__digits=(sp)+(128);
   var $__loc=(sp)+(232);
   var $__pat=(sp)+(240);
   var $tmpcast=$__pat;
   var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp8=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=$__sym;
   var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=$__sn;
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $4=(($__buf)|0);
   HEAP32[(($__bb)>>2)]=$4;
   var $5=(($__digits)|0);
   var $6=_snprintf($4, 100, ((1392)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
   var $7=(($6)>>>(0)) > 99;
   if ($7) { label = 2; break; } else { var $__db_0 = $5;var $__n_0 = $6;var $__hn_sroa_0_1 = 0;var $__hd_sroa_0_1 = 0;label = 15; break; }
  case 2: 
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$15;
   label = 7; break;
  case 6: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   var $eh_lpad_body$1 = $18$1;var $eh_lpad_body$0 = $18$0;var $__hn_sroa_0_0_lpad_body = 0;var $__hd_sroa_0_0_lpad_body = 0;label = 12; break;
  case 7: 
   var $20=HEAP32[((12160)>>2)];
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $20, ((1392)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label = 8; break; } else { var $__hn_sroa_0_0 = 0;var $__hd_sroa_0_0 = 0;label = 11; break; }
  case 8: 
   var $23=HEAP32[(($__bb)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 9; break; } else { var $30 = $23;label = 13; break; }
  case 9: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { var $__hn_sroa_0_0 = 0;var $__hd_sroa_0_0 = 0;label = 11; break; }
  case 10: 
   var $_pre=HEAP32[(($__bb)>>2)];
   var $30 = $_pre;label = 13; break;
  case 11: 
   var $__hd_sroa_0_0;
   var $__hn_sroa_0_0;
   var $27$0 = ___cxa_find_matching_catch(-1, -1); $27$1 = tempRet0;
   var $eh_lpad_body$1 = $27$1;var $eh_lpad_body$0 = $27$0;var $__hn_sroa_0_0_lpad_body = $__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body = $__hd_sroa_0_0;label = 12; break;
  case 12: 
   var $__hd_sroa_0_0_lpad_body;
   var $__hn_sroa_0_0_lpad_body;
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $28=$eh_lpad_body$0;
   var $29=$eh_lpad_body$1;
   var $_2 = $29;var $_23 = $28;var $__hn_sroa_0_2 = $__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2 = $__hd_sroa_0_0_lpad_body;label = 60; break;
  case 13: 
   var $30;
   var $31=_malloc($21);
   var $32=(($31)|(0))==0;
   if ($32) { label = 14; break; } else { var $__db_0 = $31;var $__n_0 = $21;var $__hn_sroa_0_1 = $30;var $__hd_sroa_0_1 = $31;label = 15; break; }
  case 14: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0 = 0;var $__n_0 = $21;var $__hn_sroa_0_1 = $30;var $__hd_sroa_0_1 = 0;label = 15; break; } else { var $__hn_sroa_0_0 = $30;var $__hd_sroa_0_0 = 0;label = 11; break; }
  case 15: 
   var $__hd_sroa_0_1;
   var $__hn_sroa_0_1;
   var $__n_0;
   var $__db_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { var $__hn_sroa_0_0 = $__hn_sroa_0_1;var $__hd_sroa_0_0 = $__hd_sroa_0_1;label = 11; break; }
  case 16: 
   var $36=(($__loc)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $39=HEAP32[((((13704)|0))>>2)];
   var $40=(($39)|(0))==-1;
   if ($40) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $42=(($__p_i_i_i)|0);
   HEAP32[(($42)>>2)]=13704;
   var $43=(($__p_i_i_i+4)|0);
   HEAP32[(($43)>>2)]=(26);
   var $44=(($__p_i_i_i+8)|0);
   HEAP32[(($44)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $38, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 45; break; }
  case 18: 
   var $45=HEAP32[((((13708)|0))>>2)];
   var $46=((($45)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $47=(($37+12)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($37+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$48;
   var $52=$50;
   var $53=((($51)-($52))|0);
   var $54=$53 >> 2;
   var $55=(($54)>>>(0)) > (($46)>>>(0));
   if ($55) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $56=(($50+($46<<2))|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==0;
   if ($58) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $59=___cxa_allocate_exception(4);
   var $60=$59;
   __ZNSt8bad_castC2Ev($60);
   (function() { try { __THREW__ = 0; return ___cxa_throw($59, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 45; break; }
  case 21: 
   throw "Reached an unreachable!";
  case 22: 
   var $61=$57;
   var $62=HEAP32[(($__bb)>>2)];
   var $63=(($62+$__n_0)|0);
   var $64=$57;
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+32)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($61, $62, $63, $__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 45; break; }
  case 23: 
   var $69=(($__n_0)|(0))==0;
   if ($69) { var $74 = 0;label = 25; break; } else { label = 24; break; }
  case 24: 
   var $71=HEAP32[(($__bb)>>2)];
   var $72=HEAP8[($71)];
   var $73=(($72 << 24) >> 24)==45;
   var $74 = $73;label = 25; break;
  case 25: 
   var $74;
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($__grp8)>>2)]=0; HEAP32[((($__grp8)+(4))>>2)]=0; HEAP32[((($__grp8)+(8))>>2)]=0;
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $74, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 46; break; }
  case 26: 
   var $76=(($__mbuf)|0);
   var $77=HEAP32[(($__fd)>>2)];
   var $78=(($__n_0)|(0)) > (($77)|(0));
   if ($78) { label = 27; break; } else { label = 34; break; }
  case 27: 
   var $80=((($__n_0)-($77))|0);
   var $81=$80 << 1;
   var $82=HEAP8[($2)];
   var $83=(($82)&(255));
   var $84=$83 & 1;
   var $85=(($84)|(0))==0;
   if ($85) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $87=(($__sn+4)|0);
   var $88=HEAP32[(($87)>>2)];
   var $91 = $88;label = 30; break;
  case 29: 
   var $90=$83 >>> 1;
   var $91 = $90;label = 30; break;
  case 30: 
   var $91;
   var $92=HEAP8[($1)];
   var $93=(($92)&(255));
   var $94=$93 & 1;
   var $95=(($94)|(0))==0;
   if ($95) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $97=(($__sym+4)|0);
   var $98=HEAP32[(($97)>>2)];
   var $101 = $98;label = 33; break;
  case 32: 
   var $100=$93 >>> 1;
   var $101 = $100;label = 33; break;
  case 33: 
   var $101;
   var $102=$81 | 1;
   var $103=((($102)+($91))|0);
   var $104=((($103)+($101))|0);
   var $_pn = $104;label = 41; break;
  case 34: 
   var $106=HEAP8[($2)];
   var $107=(($106)&(255));
   var $108=$107 & 1;
   var $109=(($108)|(0))==0;
   if ($109) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $111=(($__sn+4)|0);
   var $112=HEAP32[(($111)>>2)];
   var $115 = $112;label = 37; break;
  case 36: 
   var $114=$107 >>> 1;
   var $115 = $114;label = 37; break;
  case 37: 
   var $115;
   var $116=HEAP8[($1)];
   var $117=(($116)&(255));
   var $118=$117 & 1;
   var $119=(($118)|(0))==0;
   if ($119) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $121=(($__sym+4)|0);
   var $122=HEAP32[(($121)>>2)];
   var $125 = $122;label = 40; break;
  case 39: 
   var $124=$117 >>> 1;
   var $125 = $124;label = 40; break;
  case 40: 
   var $125;
   var $126=((($115)+(2))|0);
   var $127=((($126)+($125))|0);
   var $_pn = $127;label = 41; break;
  case 41: 
   var $_pn;
   var $129=((($_pn)+($77))|0);
   var $130=(($129)>>>(0)) > 100;
   if ($130) { label = 42; break; } else { var $__mb_0 = $76;var $__hw_sroa_0_1 = 0;label = 49; break; }
  case 42: 
   var $131=_malloc($129);
   var $132=(($131)|(0))==0;
   if ($132) { label = 43; break; } else { var $__mb_0 = $131;var $__hw_sroa_0_1 = $131;label = 49; break; }
  case 43: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0 = 0;var $__hw_sroa_0_1 = 0;label = 49; break; } else { label = 44; break; }
  case 44: 
   var $134$0 = ___cxa_find_matching_catch(-1, -1); $134$1 = tempRet0;
   var $135=$134$0;
   var $136=$134$1;
   var $_0 = $136;var $_01 = $135;label = 58; break;
  case 45: 
   var $138$0 = ___cxa_find_matching_catch(-1, -1); $138$1 = tempRet0;
   var $139=$138$0;
   var $140=$138$1;
   var $_1 = $140;var $_12 = $139;label = 59; break;
  case 46: 
   var $142$0 = ___cxa_find_matching_catch(-1, -1); $142$1 = tempRet0;
   var $143=$142$0;
   var $144=$142$1;
   var $_0 = $144;var $_01 = $143;label = 58; break;
  case 47: 
   var $146$0 = ___cxa_find_matching_catch(-1, -1); $146$1 = tempRet0;
   var $147=$146$0;
   var $148=$146$1;
   var $149=(($__hw_sroa_0_1)|(0))==0;
   if ($149) { var $_0 = $148;var $_01 = $147;label = 58; break; } else { label = 48; break; }
  case 48: 
   _free($__hw_sroa_0_1);
   var $_0 = $148;var $_01 = $147;label = 58; break;
  case 49: 
   var $__hw_sroa_0_1;
   var $__mb_0;
   var $152=(($__iob+4)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($__db_0+$__n_0)|0);
   var $155=HEAP8[($__dp)];
   var $156=HEAP8[($__ts)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0, $__mi, $__me, $153, $__db_0, $154, $61, $74, $tmpcast, $155, $156, $__grp, $__sym, $__sn, $77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 47; break; }
  case 50: 
   var $158=(($__s)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($3)|0);
   HEAP32[(($160)>>2)]=$159;
   var $161=HEAP32[(($__mi)>>2)];
   var $162=HEAP32[(($__me)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $3, $__mb_0, $161, $162, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 47; break; }
  case 51: 
   var $164=(($__hw_sroa_0_1)|(0))==0;
   if ($164) { label = 53; break; } else { label = 52; break; }
  case 52: 
   _free($__hw_sroa_0_1);
   label = 53; break;
  case 53: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $166=HEAP32[(($36)>>2)];
   var $167=(($166)|0);
   var $168=__ZNSt3__114__shared_count16__release_sharedEv($167);
   var $169=(($__hd_sroa_0_1)|(0))==0;
   if ($169) { label = 55; break; } else { label = 54; break; }
  case 54: 
   _free($__hd_sroa_0_1);
   label = 55; break;
  case 55: 
   var $171=(($__hn_sroa_0_1)|(0))==0;
   if ($171) { label = 57; break; } else { label = 56; break; }
  case 56: 
   _free($__hn_sroa_0_1);
   label = 57; break;
  case 57: 
   STACKTOP = sp;
   return;
  case 58: 
   var $_01;
   var $_0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $_1 = $_0;var $_12 = $_01;label = 59; break;
  case 59: 
   var $_12;
   var $_1;
   var $174=HEAP32[(($36)>>2)];
   var $175=(($174)|0);
   var $176=__ZNSt3__114__shared_count16__release_sharedEv($175);
   var $_2 = $_1;var $_23 = $_12;var $__hn_sroa_0_2 = $__hn_sroa_0_1;var $__hd_sroa_0_2 = $__hd_sroa_0_1;label = 60; break;
  case 60: 
   var $__hd_sroa_0_2;
   var $__hn_sroa_0_2;
   var $_23;
   var $_2;
   var $178=(($__hd_sroa_0_2)|(0))==0;
   if ($178) { label = 62; break; } else { label = 61; break; }
  case 61: 
   _free($__hd_sroa_0_2);
   label = 62; break;
  case 62: 
   var $180=(($__hn_sroa_0_2)|(0))==0;
   if ($180) { label = 64; break; } else { label = 63; break; }
  case 63: 
   _free($__hn_sroa_0_2);
   label = 64; break;
  case 64: 
   var $182$0=$_23;
   var $182$1=0;
   var $183$0=$182$0;
   var $183$1=$_2;
   ___resumeException($183$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i35=sp;
   var $__p_i_i_i=(sp)+(16);
   var $1=(sp)+(32);
   var $tmpcast34=$1;
   var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=$2;
   var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast33=$4;
   var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $6=$5;
   var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $8=$7;
   var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $10=$9;
   var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast32=$11;
   var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $13=$12;
   var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast=$14;
   var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $16=$15;
   var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $18=$17;
   var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $20=$19;
   var $21=(($__loc)|0);
   var $22=HEAP32[(($21)>>2)];
   if ($__intl) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $24=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $25=HEAP32[((((14176)|0))>>2)];
   var $26=(($25)|(0))==-1;
   if ($26) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $28=(($__p_i_i_i)|0);
   HEAP32[(($28)>>2)]=14176;
   var $29=(($__p_i_i_i+4)|0);
   HEAP32[(($29)>>2)]=(26);
   var $30=(($__p_i_i_i+8)|0);
   HEAP32[(($30)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14176)|0), $24, 256);
   label = 4; break;
  case 4: 
   var $31=HEAP32[((((14180)|0))>>2)];
   var $32=((($31)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $33=(($22+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($22+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$34;
   var $38=$36;
   var $39=((($37)-($38))|0);
   var $40=$39 >> 2;
   var $41=(($40)>>>(0)) > (($32)>>>(0));
   if ($41) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $42=(($36+($32<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $45=___cxa_allocate_exception(4);
   var $46=$45;
   __ZNSt8bad_castC2Ev($46);
   ___cxa_throw($45, 8440, (356));
   throw "Reached an unreachable!";
  case 7: 
   var $47=$43;
   var $48=$43;
   var $49=HEAP32[(($48)>>2)];
   if ($__neg) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $51=(($49+44)|0);
   var $52=HEAP32[(($51)>>2)];
   FUNCTION_TABLE[$52]($tmpcast34, $47);
   var $53=$__pat;
   var $54=HEAP32[(($1)>>2)];
   tempBigInt=$54;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
   var $55=$43;
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+32)|0);
   var $58=HEAP32[(($57)>>2)];
   FUNCTION_TABLE[$58]($2, $47);
   var $59=$__sn;
   var $60=HEAP8[($59)];
   var $61=$60 & 1;
   var $62=(($61 << 24) >> 24)==0;
   if ($62) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $64=(($__sn+8)|0);
   var $65=HEAP32[(($64)>>2)];
   HEAP8[($65)]=0;
   var $66=(($__sn+4)|0);
   HEAP32[(($66)>>2)]=0;
   label = 11; break;
  case 10: 
   var $68=$__sn;
   var $69=(($68+1)|0);
   HEAP8[($69)]=0;
   HEAP8[($59)]=0;
   label = 11; break;
  case 11: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $71$0 = ___cxa_find_matching_catch(-1, -1,0); $71$1 = tempRet0;
   var $72=$71$0;
   ___clang_call_terminate($72);
   throw "Reached an unreachable!";
  case 13: 
   assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   label = 20; break;
  case 14: 
   var $74=(($49+40)|0);
   var $75=HEAP32[(($74)>>2)];
   FUNCTION_TABLE[$75]($tmpcast33, $47);
   var $76=$__pat;
   var $77=HEAP32[(($4)>>2)];
   tempBigInt=$77;HEAP8[($76)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($76)+(3))|0)]=tempBigInt&0xff;
   var $78=$43;
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+28)|0);
   var $81=HEAP32[(($80)>>2)];
   FUNCTION_TABLE[$81]($5, $47);
   var $82=$__sn;
   var $83=HEAP8[($82)];
   var $84=$83 & 1;
   var $85=(($84 << 24) >> 24)==0;
   if ($85) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $87=(($__sn+8)|0);
   var $88=HEAP32[(($87)>>2)];
   HEAP8[($88)]=0;
   var $89=(($__sn+4)|0);
   HEAP32[(($89)>>2)]=0;
   label = 17; break;
  case 16: 
   var $91=$__sn;
   var $92=(($91+1)|0);
   HEAP8[($92)]=0;
   HEAP8[($82)]=0;
   label = 17; break;
  case 17: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $94$0 = ___cxa_find_matching_catch(-1, -1,0); $94$1 = tempRet0;
   var $95=$94$0;
   ___clang_call_terminate($95);
   throw "Reached an unreachable!";
  case 19: 
   assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   label = 20; break;
  case 20: 
   var $97=$43;
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=FUNCTION_TABLE[$100]($47);
   HEAP8[($__dp)]=$101;
   var $102=HEAP32[(($97)>>2)];
   var $103=(($102+16)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=FUNCTION_TABLE[$104]($47);
   HEAP8[($__ts)]=$105;
   var $106=$43;
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+20)|0);
   var $109=HEAP32[(($108)>>2)];
   FUNCTION_TABLE[$109]($7, $47);
   var $110=$__grp;
   var $111=HEAP8[($110)];
   var $112=$111 & 1;
   var $113=(($112 << 24) >> 24)==0;
   if ($113) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $115=(($__grp+8)|0);
   var $116=HEAP32[(($115)>>2)];
   HEAP8[($116)]=0;
   var $117=(($__grp+4)|0);
   HEAP32[(($117)>>2)]=0;
   label = 23; break;
  case 22: 
   var $119=$__grp;
   var $120=(($119+1)|0);
   HEAP8[($120)]=0;
   HEAP8[($110)]=0;
   label = 23; break;
  case 23: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $122$0 = ___cxa_find_matching_catch(-1, -1,0); $122$1 = tempRet0;
   var $123=$122$0;
   ___clang_call_terminate($123);
   throw "Reached an unreachable!";
  case 25: 
   assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
   var $124=HEAP32[(($106)>>2)];
   var $125=(($124+24)|0);
   var $126=HEAP32[(($125)>>2)];
   FUNCTION_TABLE[$126]($9, $47);
   var $127=$__sym;
   var $128=HEAP8[($127)];
   var $129=$128 & 1;
   var $130=(($129 << 24) >> 24)==0;
   if ($130) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $132=(($__sym+8)|0);
   var $133=HEAP32[(($132)>>2)];
   HEAP8[($133)]=0;
   var $134=(($__sym+4)|0);
   HEAP32[(($134)>>2)]=0;
   label = 28; break;
  case 27: 
   var $136=$__sym;
   var $137=(($136+1)|0);
   HEAP8[($137)]=0;
   HEAP8[($127)]=0;
   label = 28; break;
  case 28: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $139$0 = ___cxa_find_matching_catch(-1, -1,0); $139$1 = tempRet0;
   var $140=$139$0;
   ___clang_call_terminate($140);
   throw "Reached an unreachable!";
  case 30: 
   assert(12 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($127)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
   var $141=$43;
   var $142=HEAP32[(($141)>>2)];
   var $143=(($142+36)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=FUNCTION_TABLE[$144]($47);
   var $storemerge = $145;label = 60; break;
  case 31: 
   var $147=$__p_i_i_i35;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $148=HEAP32[((((14184)|0))>>2)];
   var $149=(($148)|(0))==-1;
   if ($149) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $151=(($__p_i_i_i35)|0);
   HEAP32[(($151)>>2)]=14184;
   var $152=(($__p_i_i_i35+4)|0);
   HEAP32[(($152)>>2)]=(26);
   var $153=(($__p_i_i_i35+8)|0);
   HEAP32[(($153)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14184)|0), $147, 256);
   label = 33; break;
  case 33: 
   var $154=HEAP32[((((14188)|0))>>2)];
   var $155=((($154)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $156=(($22+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($22+8)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$157;
   var $161=$159;
   var $162=((($160)-($161))|0);
   var $163=$162 >> 2;
   var $164=(($163)>>>(0)) > (($155)>>>(0));
   if ($164) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $165=(($159+($155<<2))|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($166)|(0))==0;
   if ($167) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $168=___cxa_allocate_exception(4);
   var $169=$168;
   __ZNSt8bad_castC2Ev($169);
   ___cxa_throw($168, 8440, (356));
   throw "Reached an unreachable!";
  case 36: 
   var $170=$166;
   var $171=$166;
   var $172=HEAP32[(($171)>>2)];
   if ($__neg) { label = 37; break; } else { label = 43; break; }
  case 37: 
   var $174=(($172+44)|0);
   var $175=HEAP32[(($174)>>2)];
   FUNCTION_TABLE[$175]($tmpcast32, $170);
   var $176=$__pat;
   var $177=HEAP32[(($11)>>2)];
   tempBigInt=$177;HEAP8[($176)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($176)+(3))|0)]=tempBigInt&0xff;
   var $178=$166;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+32)|0);
   var $181=HEAP32[(($180)>>2)];
   FUNCTION_TABLE[$181]($12, $170);
   var $182=$__sn;
   var $183=HEAP8[($182)];
   var $184=$183 & 1;
   var $185=(($184 << 24) >> 24)==0;
   if ($185) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $187=(($__sn+8)|0);
   var $188=HEAP32[(($187)>>2)];
   HEAP8[($188)]=0;
   var $189=(($__sn+4)|0);
   HEAP32[(($189)>>2)]=0;
   label = 40; break;
  case 39: 
   var $191=$__sn;
   var $192=(($191+1)|0);
   HEAP8[($192)]=0;
   HEAP8[($182)]=0;
   label = 40; break;
  case 40: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $194$0 = ___cxa_find_matching_catch(-1, -1,0); $194$1 = tempRet0;
   var $195=$194$0;
   ___clang_call_terminate($195);
   throw "Reached an unreachable!";
  case 42: 
   assert(12 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
   label = 49; break;
  case 43: 
   var $197=(($172+40)|0);
   var $198=HEAP32[(($197)>>2)];
   FUNCTION_TABLE[$198]($tmpcast, $170);
   var $199=$__pat;
   var $200=HEAP32[(($14)>>2)];
   tempBigInt=$200;HEAP8[($199)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($199)+(3))|0)]=tempBigInt&0xff;
   var $201=$166;
   var $202=HEAP32[(($201)>>2)];
   var $203=(($202+28)|0);
   var $204=HEAP32[(($203)>>2)];
   FUNCTION_TABLE[$204]($15, $170);
   var $205=$__sn;
   var $206=HEAP8[($205)];
   var $207=$206 & 1;
   var $208=(($207 << 24) >> 24)==0;
   if ($208) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $210=(($__sn+8)|0);
   var $211=HEAP32[(($210)>>2)];
   HEAP8[($211)]=0;
   var $212=(($__sn+4)|0);
   HEAP32[(($212)>>2)]=0;
   label = 46; break;
  case 45: 
   var $214=$__sn;
   var $215=(($214+1)|0);
   HEAP8[($215)]=0;
   HEAP8[($205)]=0;
   label = 46; break;
  case 46: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $217$0 = ___cxa_find_matching_catch(-1, -1,0); $217$1 = tempRet0;
   var $218=$217$0;
   ___clang_call_terminate($218);
   throw "Reached an unreachable!";
  case 48: 
   assert(12 % 1 === 0);HEAP32[(($205)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($205)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($205)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
   label = 49; break;
  case 49: 
   var $220=$166;
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221+12)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=FUNCTION_TABLE[$223]($170);
   HEAP8[($__dp)]=$224;
   var $225=HEAP32[(($220)>>2)];
   var $226=(($225+16)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=FUNCTION_TABLE[$227]($170);
   HEAP8[($__ts)]=$228;
   var $229=$166;
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+20)|0);
   var $232=HEAP32[(($231)>>2)];
   FUNCTION_TABLE[$232]($17, $170);
   var $233=$__grp;
   var $234=HEAP8[($233)];
   var $235=$234 & 1;
   var $236=(($235 << 24) >> 24)==0;
   if ($236) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $238=(($__grp+8)|0);
   var $239=HEAP32[(($238)>>2)];
   HEAP8[($239)]=0;
   var $240=(($__grp+4)|0);
   HEAP32[(($240)>>2)]=0;
   label = 52; break;
  case 51: 
   var $242=$__grp;
   var $243=(($242+1)|0);
   HEAP8[($243)]=0;
   HEAP8[($233)]=0;
   label = 52; break;
  case 52: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $245$0 = ___cxa_find_matching_catch(-1, -1,0); $245$1 = tempRet0;
   var $246=$245$0;
   ___clang_call_terminate($246);
   throw "Reached an unreachable!";
  case 54: 
   assert(12 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($233)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
   var $247=HEAP32[(($229)>>2)];
   var $248=(($247+24)|0);
   var $249=HEAP32[(($248)>>2)];
   FUNCTION_TABLE[$249]($19, $170);
   var $250=$__sym;
   var $251=HEAP8[($250)];
   var $252=$251 & 1;
   var $253=(($252 << 24) >> 24)==0;
   if ($253) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $255=(($__sym+8)|0);
   var $256=HEAP32[(($255)>>2)];
   HEAP8[($256)]=0;
   var $257=(($__sym+4)|0);
   HEAP32[(($257)>>2)]=0;
   label = 57; break;
  case 56: 
   var $259=$__sym;
   var $260=(($259+1)|0);
   HEAP8[($260)]=0;
   HEAP8[($250)]=0;
   label = 57; break;
  case 57: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $262$0 = ___cxa_find_matching_catch(-1, -1,0); $262$1 = tempRet0;
   var $263=$262$0;
   ___clang_call_terminate($263);
   throw "Reached an unreachable!";
  case 59: 
   assert(12 % 1 === 0);HEAP32[(($250)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($250)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($250)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
   var $264=$166;
   var $265=HEAP32[(($264)>>2)];
   var $266=(($265+36)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=FUNCTION_TABLE[$267]($170);
   var $storemerge = $268;label = 60; break;
  case 60: 
   var $storemerge;
   HEAP32[(($__fd)>>2)]=$storemerge;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($__me)>>2)]=$__mb;
   var $1=$__ct;
   var $2=$__sn;
   var $3=$__sn;
   var $4=(($2+1)|0);
   var $5=(($__sn+8)|0);
   var $6=(($__sn+4)|0);
   var $7=$__sym;
   var $8=$__sym;
   var $9=$__flags & 512;
   var $10=(($9)|(0))==0;
   var $11=(($7+1)|0);
   var $12=(($__sym+4)|0);
   var $13=(($__sym+8)|0);
   var $14=(($__fd)|(0)) > 0;
   var $15=$__grp;
   var $16=$__grp;
   var $17=(($15+1)|0);
   var $18=(($__grp+8)|0);
   var $19=(($__grp+4)|0);
   var $20=(($__ct+8)|0);
   var $21=(((-$__fd))|0);
   var $_02162 = $__db;var $__p_063 = 0;label = 2; break;
  case 2: 
   var $__p_063;
   var $_02162;
   var $23=(($__pat+$__p_063)|0);
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   switch((($25)|(0))) {
   case 2:{
    label = 12; break;
   }
   case 4:{
    label = 24; break;
   }
   case 0:{
    label = 3; break;
   }
   case 1:{
    label = 4; break;
   }
   case 3:{
    label = 5; break;
   }
   default: {
   var $_2 = $_02162;label = 62; break;
   }
   } break; 
  case 3: 
   var $27=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$27;
   var $_2 = $_02162;label = 62; break;
  case 4: 
   var $29=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$29;
   var $30=HEAP32[(($1)>>2)];
   var $31=(($30+28)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=FUNCTION_TABLE[$32]($__ct, 32);
   var $34=HEAP32[(($__me)>>2)];
   var $35=(($34+1)|0);
   HEAP32[(($__me)>>2)]=$35;
   HEAP8[($34)]=$33;
   var $_2 = $_02162;label = 62; break;
  case 5: 
   var $37=HEAP8[($3)];
   var $38=(($37)&(255));
   var $39=$38 & 1;
   var $40=(($39)|(0))==0;
   if ($40) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $42=HEAP32[(($6)>>2)];
   var $45 = $42;label = 8; break;
  case 7: 
   var $44=$38 >>> 1;
   var $45 = $44;label = 8; break;
  case 8: 
   var $45;
   var $46=(($45)|(0))==0;
   if ($46) { var $_2 = $_02162;label = 62; break; } else { label = 9; break; }
  case 9: 
   var $48=$37 & 1;
   var $49=(($48 << 24) >> 24)==0;
   if ($49) { var $52 = $4;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $51=HEAP32[(($5)>>2)];
   var $52 = $51;label = 11; break;
  case 11: 
   var $52;
   var $53=HEAP8[($52)];
   var $54=HEAP32[(($__me)>>2)];
   var $55=(($54+1)|0);
   HEAP32[(($__me)>>2)]=$55;
   HEAP8[($54)]=$53;
   var $_2 = $_02162;label = 62; break;
  case 12: 
   var $57=HEAP8[($8)];
   var $58=(($57)&(255));
   var $59=$58 & 1;
   var $60=(($59)|(0))==0;
   if ($60) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $62=HEAP32[(($12)>>2)];
   var $65 = $62;label = 15; break;
  case 14: 
   var $64=$58 >>> 1;
   var $65 = $64;label = 15; break;
  case 15: 
   var $65;
   var $66=(($65)|(0))==0;
   var $brmerge=$66 | $10;
   if ($brmerge) { var $_2 = $_02162;label = 62; break; } else { label = 16; break; }
  case 16: 
   var $68=$57 & 1;
   var $69=(($68 << 24) >> 24)==0;
   if ($69) { var $73 = $11;var $72 = $11;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $71=HEAP32[(($13)>>2)];
   var $73 = $71;var $72 = $71;label = 18; break;
  case 18: 
   var $72;
   var $73;
   if ($60) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $75=HEAP32[(($12)>>2)];
   var $78 = $75;label = 21; break;
  case 20: 
   var $77=$58 >>> 1;
   var $78 = $77;label = 21; break;
  case 21: 
   var $78;
   var $79=(($73+$78)|0);
   var $80=HEAP32[(($__me)>>2)];
   var $81=(($72)|(0))==(($79)|(0));
   if ($81) { var $_0_lcssa = $80;label = 23; break; } else { var $_sroa_022_058 = $72;var $_059 = $80;label = 22; break; }
  case 22: 
   var $_059;
   var $_sroa_022_058;
   var $82=HEAP8[($_sroa_022_058)];
   HEAP8[($_059)]=$82;
   var $83=(($_sroa_022_058+1)|0);
   var $84=(($_059+1)|0);
   var $85=(($83)|(0))==(($79)|(0));
   if ($85) { var $_0_lcssa = $84;label = 23; break; } else { var $_sroa_022_058 = $83;var $_059 = $84;label = 22; break; }
  case 23: 
   var $_0_lcssa;
   HEAP32[(($__me)>>2)]=$_0_lcssa;
   var $_2 = $_02162;label = 62; break;
  case 24: 
   var $87=HEAP32[(($__me)>>2)];
   var $88=(($_02162+1)|0);
   var $__021=$__neg ? $88 : $_02162;
   var $89=(($__021)>>>(0)) < (($__de)>>>(0));
   if ($89) { var $__d_035 = $__021;label = 26; break; } else { var $__d_0_lcssa = $__021;label = 28; break; }
  case 25: 
   var $91=(($98)>>>(0)) < (($__de)>>>(0));
   if ($91) { var $__d_035 = $98;label = 26; break; } else { var $__d_0_lcssa = $98;label = 28; break; }
  case 26: 
   var $__d_035;
   var $92=HEAP8[($__d_035)];
   var $isascii30=(($92 << 24) >> 24) > -1;
   if ($isascii30) { label = 27; break; } else { var $__d_0_lcssa = $__d_035;label = 28; break; }
  case 27: 
   var $93=(($92 << 24) >> 24);
   var $94=HEAP32[(($20)>>2)];
   var $95=(($94+($93<<1))|0);
   var $96=HEAP16[(($95)>>1)];
   var $97=$96 & 2048;
   var $phitmp=(($97 << 16) >> 16)==0;
   var $98=(($__d_035+1)|0);
   if ($phitmp) { var $__d_0_lcssa = $__d_035;label = 28; break; } else { label = 25; break; }
  case 28: 
   var $__d_0_lcssa;
   var $__d_0_lcssa72=$__d_0_lcssa;
   if ($14) { label = 29; break; } else { var $__d_2 = $__d_0_lcssa;label = 38; break; }
  case 29: 
   var $99=(($__d_0_lcssa)>>>(0)) > (($__021)>>>(0));
   if ($99) { label = 30; break; } else { var $__f_0_lcssa86 = $__fd;var $__d_1_lcssa88 = $__d_0_lcssa;label = 34; break; }
  case 30: 
   var $100=(((-$__d_0_lcssa72))|0);
   var $scevgep=(($__021+$100)|0);
   var $scevgep73=$scevgep;
   var $101=(($scevgep73)>>>(0)) < (($21)>>>(0));
   var $umax=$101 ? $21 : $scevgep73;
   var $umax74=$umax;
   var $scevgep75=(($umax74+$__fd)|0);
   var $scevgep7576=$scevgep75;
   var $__d_139 = $__d_0_lcssa;var $__f_040 = $__fd;var $103 = $87;label = 31; break;
  case 31: 
   var $103;
   var $__f_040;
   var $__d_139;
   var $104=((($__d_139)-(1))|0);
   var $105=HEAP8[($104)];
   var $106=(($103+1)|0);
   HEAP32[(($__me)>>2)]=$106;
   HEAP8[($103)]=$105;
   var $107=((($__f_040)-(1))|0);
   var $108=(($104)>>>(0)) > (($__021)>>>(0));
   var $109=(($107)|(0)) > 0;
   var $or_cond=$108 & $109;
   if ($or_cond) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $_pre=HEAP32[(($__me)>>2)];
   var $__d_139 = $104;var $__f_040 = $107;var $103 = $_pre;label = 31; break;
  case 33: 
   var $scevgep77=(($__d_0_lcssa+$umax)|0);
   if ($109) { var $__f_0_lcssa86 = $scevgep7576;var $__d_1_lcssa88 = $scevgep77;label = 34; break; } else { var $114 = 0;var $__f_0_lcssa85 = $scevgep7576;var $__d_1_lcssa87 = $scevgep77;label = 35; break; }
  case 34: 
   var $__d_1_lcssa88;
   var $__f_0_lcssa86;
   var $110=HEAP32[(($1)>>2)];
   var $111=(($110+28)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=FUNCTION_TABLE[$112]($__ct, 48);
   var $114 = $113;var $__f_0_lcssa85 = $__f_0_lcssa86;var $__d_1_lcssa87 = $__d_1_lcssa88;label = 35; break;
  case 35: 
   var $__d_1_lcssa87;
   var $__f_0_lcssa85;
   var $114;
   var $115=(($__f_0_lcssa85)|(0)) > 0;
   var $116=HEAP32[(($__me)>>2)];
   var $117=(($116+1)|0);
   HEAP32[(($__me)>>2)]=$117;
   if ($115) { var $__f_146 = $__f_0_lcssa85;var $118 = $116;label = 36; break; } else { var $_lcssa45 = $116;label = 37; break; }
  case 36: 
   var $118;
   var $__f_146;
   HEAP8[($118)]=$114;
   var $119=((($__f_146)-(1))|0);
   var $120=(($119)|(0)) > 0;
   var $121=HEAP32[(($__me)>>2)];
   var $122=(($121+1)|0);
   HEAP32[(($__me)>>2)]=$122;
   if ($120) { var $__f_146 = $119;var $118 = $121;label = 36; break; } else { var $_lcssa45 = $121;label = 37; break; }
  case 37: 
   var $_lcssa45;
   HEAP8[($_lcssa45)]=$__dp;
   var $__d_2 = $__d_1_lcssa87;label = 38; break;
  case 38: 
   var $__d_2;
   var $124=(($__d_2)|(0))==(($__021)|(0));
   if ($124) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $126=HEAP32[(($1)>>2)];
   var $127=(($126+28)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=FUNCTION_TABLE[$128]($__ct, 48);
   var $130=HEAP32[(($__me)>>2)];
   var $131=(($130+1)|0);
   HEAP32[(($__me)>>2)]=$131;
   HEAP8[($130)]=$129;
   label = 59; break;
  case 40: 
   var $133=HEAP8[($16)];
   var $134=(($133)&(255));
   var $135=$134 & 1;
   var $136=(($135)|(0))==0;
   if ($136) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $138=HEAP32[(($19)>>2)];
   var $141 = $138;label = 43; break;
  case 42: 
   var $140=$134 >>> 1;
   var $141 = $140;label = 43; break;
  case 43: 
   var $141;
   var $142=(($141)|(0))==0;
   if ($142) { var $__d_350 = $__d_2;var $__ng_051 = 0;var $__ig_052 = 0;var $__gl_053 = -1;label = 47; break; } else { label = 44; break; }
  case 44: 
   var $144=$133 & 1;
   var $145=(($144 << 24) >> 24)==0;
   if ($145) { var $148 = $17;label = 46; break; } else { label = 45; break; }
  case 45: 
   var $147=HEAP32[(($18)>>2)];
   var $148 = $147;label = 46; break;
  case 46: 
   var $148;
   var $149=HEAP8[($148)];
   var $150=(($149 << 24) >> 24);
   var $__d_350 = $__d_2;var $__ng_051 = 0;var $__ig_052 = 0;var $__gl_053 = $150;label = 47; break;
  case 47: 
   var $__gl_053;
   var $__ig_052;
   var $__ng_051;
   var $__d_350;
   var $151=(($__ng_051)|(0))==(($__gl_053)|(0));
   if ($151) { label = 48; break; } else { var $__gl_1 = $__gl_053;var $__ig_1 = $__ig_052;var $__ng_1 = $__ng_051;label = 58; break; }
  case 48: 
   var $153=HEAP32[(($__me)>>2)];
   var $154=(($153+1)|0);
   HEAP32[(($__me)>>2)]=$154;
   HEAP8[($153)]=$__ts;
   var $155=((($__ig_052)+(1))|0);
   var $156=HEAP8[($16)];
   var $157=(($156)&(255));
   var $158=$157 & 1;
   var $159=(($158)|(0))==0;
   if ($159) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $161=HEAP32[(($19)>>2)];
   var $164 = $161;label = 51; break;
  case 50: 
   var $163=$157 >>> 1;
   var $164 = $163;label = 51; break;
  case 51: 
   var $164;
   var $165=(($155)>>>(0)) < (($164)>>>(0));
   if ($165) { label = 52; break; } else { var $__gl_1 = $__gl_053;var $__ig_1 = $155;var $__ng_1 = 0;label = 58; break; }
  case 52: 
   var $167=$156 & 1;
   var $168=(($167 << 24) >> 24)==0;
   if ($168) { var $171 = $17;label = 54; break; } else { label = 53; break; }
  case 53: 
   var $170=HEAP32[(($18)>>2)];
   var $171 = $170;label = 54; break;
  case 54: 
   var $171;
   var $172=(($171+$155)|0);
   var $173=HEAP8[($172)];
   var $174=(($173 << 24) >> 24)==127;
   if ($174) { var $__gl_1 = -1;var $__ig_1 = $155;var $__ng_1 = 0;label = 58; break; } else { label = 55; break; }
  case 55: 
   if ($168) { var $178 = $17;label = 57; break; } else { label = 56; break; }
  case 56: 
   var $177=HEAP32[(($18)>>2)];
   var $178 = $177;label = 57; break;
  case 57: 
   var $178;
   var $179=(($178+$155)|0);
   var $180=HEAP8[($179)];
   var $181=(($180 << 24) >> 24);
   var $__gl_1 = $181;var $__ig_1 = $155;var $__ng_1 = 0;label = 58; break;
  case 58: 
   var $__ng_1;
   var $__ig_1;
   var $__gl_1;
   var $182=((($__d_350)-(1))|0);
   var $183=HEAP8[($182)];
   var $184=HEAP32[(($__me)>>2)];
   var $185=(($184+1)|0);
   HEAP32[(($__me)>>2)]=$185;
   HEAP8[($184)]=$183;
   var $186=((($__ng_1)+(1))|0);
   var $187=(($182)|(0))==(($__021)|(0));
   if ($187) { label = 59; break; } else { var $__d_350 = $182;var $__ng_051 = $186;var $__ig_052 = $__ig_1;var $__gl_053 = $__gl_1;label = 47; break; }
  case 59: 
   var $188=HEAP32[(($__me)>>2)];
   var $189=(($87)|(0))==(($188)|(0));
   if ($189) { var $_2 = $__021;label = 62; break; } else { label = 60; break; }
  case 60: 
   var $190=((($188)-(1))|0);
   var $191=(($87)>>>(0)) < (($190)>>>(0));
   if ($191) { var $_01856 = $87;var $192 = $190;label = 61; break; } else { var $_2 = $__021;label = 62; break; }
  case 61: 
   var $192;
   var $_01856;
   var $193=HEAP8[($_01856)];
   var $194=HEAP8[($192)];
   HEAP8[($_01856)]=$194;
   HEAP8[($192)]=$193;
   var $195=(($_01856+1)|0);
   var $196=((($192)-(1))|0);
   var $197=(($195)>>>(0)) < (($196)>>>(0));
   if ($197) { var $_01856 = $195;var $192 = $196;label = 61; break; } else { var $_2 = $__021;label = 62; break; }
  case 62: 
   var $_2;
   var $198=((($__p_063)+(1))|0);
   var $199=(($198)>>>(0)) < 4;
   if ($199) { var $_02162 = $_2;var $__p_063 = $198;label = 2; break; } else { label = 63; break; }
  case 63: 
   var $201=HEAP8[($3)];
   var $202=(($201)&(255));
   var $203=$202 & 1;
   var $204=(($203)|(0))==0;
   if ($204) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $206=HEAP32[(($6)>>2)];
   var $209 = $206;label = 66; break;
  case 65: 
   var $208=$202 >>> 1;
   var $209 = $208;label = 66; break;
  case 66: 
   var $209;
   var $210=(($209)>>>(0)) > 1;
   if ($210) { label = 67; break; } else { label = 75; break; }
  case 67: 
   var $212=$201 & 1;
   var $213=(($212 << 24) >> 24)==0;
   if ($213) { var $217 = $4;var $216 = $4;label = 69; break; } else { label = 68; break; }
  case 68: 
   var $215=HEAP32[(($5)>>2)];
   var $217 = $215;var $216 = $215;label = 69; break;
  case 69: 
   var $216;
   var $217;
   if ($204) { label = 71; break; } else { label = 70; break; }
  case 70: 
   var $219=HEAP32[(($6)>>2)];
   var $222 = $219;label = 72; break;
  case 71: 
   var $221=$202 >>> 1;
   var $222 = $221;label = 72; break;
  case 72: 
   var $222;
   var $223=(($217+$222)|0);
   var $224=HEAP32[(($__me)>>2)];
   var $_sroa_028_032=(($216+1)|0);
   var $225=(($_sroa_028_032)|(0))==(($223)|(0));
   if ($225) { var $_020_lcssa = $224;label = 74; break; } else { var $_02033 = $224;var $_sroa_028_034 = $_sroa_028_032;label = 73; break; }
  case 73: 
   var $_sroa_028_034;
   var $_02033;
   var $226=HEAP8[($_sroa_028_034)];
   HEAP8[($_02033)]=$226;
   var $227=(($_02033+1)|0);
   var $_sroa_028_0=(($_sroa_028_034+1)|0);
   var $228=(($_sroa_028_0)|(0))==(($223)|(0));
   if ($228) { var $_020_lcssa = $227;label = 74; break; } else { var $_02033 = $227;var $_sroa_028_034 = $_sroa_028_0;label = 73; break; }
  case 74: 
   var $_020_lcssa;
   HEAP32[(($__me)>>2)]=$_020_lcssa;
   label = 75; break;
  case 75: 
   var $230=$__flags & 176;
   if ((($230)|(0))==32) {
    label = 76; break;
   }
   else if ((($230)|(0))==16) {
    label = 78; break;
   }
   else {
   label = 77; break;
   }
  case 76: 
   var $232=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$232;
   label = 78; break;
  case 77: 
   HEAP32[(($__mi)>>2)]=$__mb;
   label = 78; break;
  case 78: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__loc=(sp)+(16);
   var $__pat=(sp)+(24);
   var $tmpcast=$__pat;
   var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp7=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=$__sym;
   var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=$__sn;
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $4=(($__loc)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $7=HEAP32[((((13704)|0))>>2)];
   var $8=(($7)|(0))==-1;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__p_i_i_i)|0);
   HEAP32[(($10)>>2)]=13704;
   var $11=(($__p_i_i_i+4)|0);
   HEAP32[(($11)>>2)]=(26);
   var $12=(($__p_i_i_i+8)|0);
   HEAP32[(($12)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $6, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 43; break; }
  case 3: 
   var $13=HEAP32[((((13708)|0))>>2)];
   var $14=((($13)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $15=(($5+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($5+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$16;
   var $20=$18;
   var $21=((($19)-($20))|0);
   var $22=$21 >> 2;
   var $23=(($22)>>>(0)) > (($14)>>>(0));
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $24=(($18+($14<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=___cxa_allocate_exception(4);
   var $28=$27;
   __ZNSt8bad_castC2Ev($28);
   (function() { try { __THREW__ = 0; return ___cxa_throw($27, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 43; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $29=$25;
   var $30=$__digits;
   var $31=$__digits;
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $37=(($__digits+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $41 = $38;label = 10; break;
  case 9: 
   var $40=$33 >>> 1;
   var $41 = $40;label = 10; break;
  case 10: 
   var $41;
   var $42=(($41)|(0))==0;
   if ($42) { var $59 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $44=$32 & 1;
   var $45=(($44 << 24) >> 24)==0;
   if ($45) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $47=(($__digits+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $51 = $48;label = 14; break;
  case 13: 
   var $50=(($30+1)|0);
   var $51 = $50;label = 14; break;
  case 14: 
   var $51;
   var $52=HEAP8[($51)];
   var $53=$25;
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+28)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($29, 45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 43; break; }
  case 15: 
   var $58=(($52 << 24) >> 24)==(($57 << 24) >> 24);
   var $59 = $58;label = 16; break;
  case 16: 
   var $59;
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($__grp7)>>2)]=0; HEAP32[((($__grp7)+(4))>>2)]=0; HEAP32[((($__grp7)+(8))>>2)]=0;
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $59, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 44; break; }
  case 17: 
   var $61=(($__mbuf)|0);
   var $62=HEAP8[($31)];
   var $63=(($62)&(255));
   var $64=$63 & 1;
   var $65=(($64)|(0))==0;
   if ($65) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $67=(($__digits+4)|0);
   var $68=HEAP32[(($67)>>2)];
   var $71 = $68;label = 20; break;
  case 19: 
   var $70=$63 >>> 1;
   var $71 = $70;label = 20; break;
  case 20: 
   var $71;
   var $72=HEAP32[(($__fd)>>2)];
   var $73=(($71)|(0)) > (($72)|(0));
   if ($73) { label = 21; break; } else { label = 31; break; }
  case 21: 
   if ($65) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $76=(($__digits+4)|0);
   var $77=HEAP32[(($76)>>2)];
   var $80 = $77;label = 24; break;
  case 23: 
   var $79=$63 >>> 1;
   var $80 = $79;label = 24; break;
  case 24: 
   var $80;
   var $81=((($80)-($72))|0);
   var $82=$81 << 1;
   var $83=HEAP8[($2)];
   var $84=(($83)&(255));
   var $85=$84 & 1;
   var $86=(($85)|(0))==0;
   if ($86) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $88=(($__sn+4)|0);
   var $89=HEAP32[(($88)>>2)];
   var $92 = $89;label = 27; break;
  case 26: 
   var $91=$84 >>> 1;
   var $92 = $91;label = 27; break;
  case 27: 
   var $92;
   var $93=HEAP8[($1)];
   var $94=(($93)&(255));
   var $95=$94 & 1;
   var $96=(($95)|(0))==0;
   if ($96) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $98=(($__sym+4)|0);
   var $99=HEAP32[(($98)>>2)];
   var $102 = $99;label = 30; break;
  case 29: 
   var $101=$94 >>> 1;
   var $102 = $101;label = 30; break;
  case 30: 
   var $102;
   var $103=$82 | 1;
   var $104=((($103)+($92))|0);
   var $105=((($104)+($102))|0);
   var $_pn = $105;label = 38; break;
  case 31: 
   var $107=HEAP8[($2)];
   var $108=(($107)&(255));
   var $109=$108 & 1;
   var $110=(($109)|(0))==0;
   if ($110) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $112=(($__sn+4)|0);
   var $113=HEAP32[(($112)>>2)];
   var $116 = $113;label = 34; break;
  case 33: 
   var $115=$108 >>> 1;
   var $116 = $115;label = 34; break;
  case 34: 
   var $116;
   var $117=HEAP8[($1)];
   var $118=(($117)&(255));
   var $119=$118 & 1;
   var $120=(($119)|(0))==0;
   if ($120) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $122=(($__sym+4)|0);
   var $123=HEAP32[(($122)>>2)];
   var $126 = $123;label = 37; break;
  case 36: 
   var $125=$118 >>> 1;
   var $126 = $125;label = 37; break;
  case 37: 
   var $126;
   var $127=((($116)+(2))|0);
   var $128=((($127)+($126))|0);
   var $_pn = $128;label = 38; break;
  case 38: 
   var $_pn;
   var $130=((($_pn)+($72))|0);
   var $131=(($130)>>>(0)) > 100;
   if ($131) { label = 39; break; } else { var $__mb_0 = $61;var $__h_sroa_0_1 = 0;var $153 = $62;label = 47; break; }
  case 39: 
   var $132=_malloc($130);
   var $133=(($132)|(0))==0;
   if ($133) { label = 40; break; } else { var $__mb_0 = $132;var $__h_sroa_0_1 = $132;var $153 = $62;label = 47; break; }
  case 40: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $_pre=HEAP8[($31)];
   var $__mb_0 = 0;var $__h_sroa_0_1 = 0;var $153 = $_pre;label = 47; break;
  case 42: 
   var $135$0 = ___cxa_find_matching_catch(-1, -1); $135$1 = tempRet0;
   var $136=$135$0;
   var $137=$135$1;
   var $_0 = $137;var $_01 = $136;label = 58; break;
  case 43: 
   var $139$0 = ___cxa_find_matching_catch(-1, -1); $139$1 = tempRet0;
   var $140=$139$0;
   var $141=$139$1;
   var $_1 = $141;var $_12 = $140;label = 59; break;
  case 44: 
   var $143$0 = ___cxa_find_matching_catch(-1, -1); $143$1 = tempRet0;
   var $144=$143$0;
   var $145=$143$1;
   var $_0 = $145;var $_01 = $144;label = 58; break;
  case 45: 
   var $147$0 = ___cxa_find_matching_catch(-1, -1); $147$1 = tempRet0;
   var $148=$147$0;
   var $149=$147$1;
   var $150=(($__h_sroa_0_1)|(0))==0;
   if ($150) { var $_0 = $149;var $_01 = $148;label = 58; break; } else { label = 46; break; }
  case 46: 
   _free($__h_sroa_0_1);
   var $_0 = $149;var $_01 = $148;label = 58; break;
  case 47: 
   var $153;
   var $__h_sroa_0_1;
   var $__mb_0;
   var $154=(($__iob+4)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$153 & 1;
   var $157=(($156 << 24) >> 24)==0;
   if ($157) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $159=(($__digits+8)|0);
   var $160=HEAP32[(($159)>>2)];
   var $165 = $160;var $164 = $160;label = 50; break;
  case 49: 
   var $162=(($30+1)|0);
   var $163=(($30+1)|0);
   var $165 = $163;var $164 = $162;label = 50; break;
  case 50: 
   var $164;
   var $165;
   var $166=(($153)&(255));
   var $167=$166 & 1;
   var $168=(($167)|(0))==0;
   if ($168) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $170=(($__digits+4)|0);
   var $171=HEAP32[(($170)>>2)];
   var $174 = $171;label = 53; break;
  case 52: 
   var $173=$166 >>> 1;
   var $174 = $173;label = 53; break;
  case 53: 
   var $174;
   var $175=(($165+$174)|0);
   var $176=HEAP8[($__dp)];
   var $177=HEAP8[($__ts)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0, $__mi, $__me, $155, $164, $175, $29, $59, $tmpcast, $176, $177, $__grp, $__sym, $__sn, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 45; break; }
  case 54: 
   var $179=(($__s)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=(($3)|0);
   HEAP32[(($181)>>2)]=$180;
   var $182=HEAP32[(($__mi)>>2)];
   var $183=HEAP32[(($__me)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $3, $__mb_0, $182, $183, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 45; break; }
  case 55: 
   var $185=(($__h_sroa_0_1)|(0))==0;
   if ($185) { label = 57; break; } else { label = 56; break; }
  case 56: 
   _free($__h_sroa_0_1);
   label = 57; break;
  case 57: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $187=HEAP32[(($4)>>2)];
   var $188=(($187)|0);
   var $189=__ZNSt3__114__shared_count16__release_sharedEv($188);
   STACKTOP = sp;
   return;
  case 58: 
   var $_01;
   var $_0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $_1 = $_0;var $_12 = $_01;label = 59; break;
  case 59: 
   var $_12;
   var $_1;
   var $191=HEAP32[(($4)>>2)];
   var $192=(($191)|0);
   var $193=__ZNSt3__114__shared_count16__release_sharedEv($192);
   var $194$0=$_12;
   var $194$1=0;
   var $195$0=$194$0;
   var $195$1=$_1;
   ___resumeException($195$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var label = 0;
 var tempVarArgs = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__buf=(sp)+(16);
   var $__bb=(sp)+(120);
   var $__digits=(sp)+(128);
   var $__loc=(sp)+(528);
   var $__pat=(sp)+(536);
   var $tmpcast=$__pat;
   var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp8=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=$__sym;
   var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=$__sn;
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $4=(($__buf)|0);
   HEAP32[(($__bb)>>2)]=$4;
   var $5=(($__digits)|0);
   var $6=_snprintf($4, 100, ((1392)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
   var $7=(($6)>>>(0)) > 99;
   if ($7) { label = 2; break; } else { var $__db_0 = $5;var $__n_0 = $6;var $__hn_sroa_0_1 = 0;var $__hd_sroa_0_1 = 0;label = 15; break; }
  case 2: 
   var $9=HEAP8[(14264)];
   var $10=(($9 << 24) >> 24)==0;
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=___cxa_guard_acquire(14264);
   var $13=(($12)|(0))==0;
   if ($13) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $15 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   HEAP32[((12160)>>2)]=$15;
   label = 7; break;
  case 6: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   var $eh_lpad_body$1 = $18$1;var $eh_lpad_body$0 = $18$0;var $__hn_sroa_0_0_lpad_body = 0;var $__hd_sroa_0_0_lpad_body = 0;label = 12; break;
  case 7: 
   var $20=HEAP32[((12160)>>2)];
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $20, ((1392)|0), (tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label = 8; break; } else { var $__hn_sroa_0_0 = 0;var $__hd_sroa_0_0 = 0;label = 11; break; }
  case 8: 
   var $23=HEAP32[(($__bb)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 9; break; } else { var $30 = $23;label = 13; break; }
  case 9: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { var $__hn_sroa_0_0 = 0;var $__hd_sroa_0_0 = 0;label = 11; break; }
  case 10: 
   var $_pre=HEAP32[(($__bb)>>2)];
   var $30 = $_pre;label = 13; break;
  case 11: 
   var $__hd_sroa_0_0;
   var $__hn_sroa_0_0;
   var $27$0 = ___cxa_find_matching_catch(-1, -1); $27$1 = tempRet0;
   var $eh_lpad_body$1 = $27$1;var $eh_lpad_body$0 = $27$0;var $__hn_sroa_0_0_lpad_body = $__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body = $__hd_sroa_0_0;label = 12; break;
  case 12: 
   var $__hd_sroa_0_0_lpad_body;
   var $__hn_sroa_0_0_lpad_body;
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $28=$eh_lpad_body$0;
   var $29=$eh_lpad_body$1;
   var $_2 = $29;var $_23 = $28;var $__hn_sroa_0_2 = $__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2 = $__hd_sroa_0_0_lpad_body;label = 59; break;
  case 13: 
   var $30;
   var $31=$21 << 2;
   var $32=_malloc($31);
   var $33=$32;
   var $34=(($32)|(0))==0;
   if ($34) { label = 14; break; } else { var $__db_0 = $33;var $__n_0 = $21;var $__hn_sroa_0_1 = $30;var $__hd_sroa_0_1 = $33;label = 15; break; }
  case 14: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0 = $33;var $__n_0 = $21;var $__hn_sroa_0_1 = $30;var $__hd_sroa_0_1 = $33;label = 15; break; } else { var $__hn_sroa_0_0 = $30;var $__hd_sroa_0_0 = $33;label = 11; break; }
  case 15: 
   var $__hd_sroa_0_1;
   var $__hn_sroa_0_1;
   var $__n_0;
   var $__db_0;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { var $__hn_sroa_0_0 = $__hn_sroa_0_1;var $__hd_sroa_0_0 = $__hd_sroa_0_1;label = 11; break; }
  case 16: 
   var $38=(($__loc)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $41=HEAP32[((((13696)|0))>>2)];
   var $42=(($41)|(0))==-1;
   if ($42) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $44=(($__p_i_i_i)|0);
   HEAP32[(($44)>>2)]=13696;
   var $45=(($__p_i_i_i+4)|0);
   HEAP32[(($45)>>2)]=(26);
   var $46=(($__p_i_i_i+8)|0);
   HEAP32[(($46)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $40, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 44; break; }
  case 18: 
   var $47=HEAP32[((((13700)|0))>>2)];
   var $48=((($47)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $49=(($39+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($39+8)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$50;
   var $54=$52;
   var $55=((($53)-($54))|0);
   var $56=$55 >> 2;
   var $57=(($56)>>>(0)) > (($48)>>>(0));
   if ($57) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $58=(($52+($48<<2))|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59)|(0))==0;
   if ($60) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $61=___cxa_allocate_exception(4);
   var $62=$61;
   __ZNSt8bad_castC2Ev($62);
   (function() { try { __THREW__ = 0; return ___cxa_throw($61, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 44; break; }
  case 21: 
   throw "Reached an unreachable!";
  case 22: 
   var $63=$59;
   var $64=HEAP32[(($__bb)>>2)];
   var $65=(($64+$__n_0)|0);
   var $66=$59;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+48)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($63, $64, $65, $__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 44; break; }
  case 23: 
   var $71=(($__n_0)|(0))==0;
   if ($71) { var $76 = 0;label = 25; break; } else { label = 24; break; }
  case 24: 
   var $73=HEAP32[(($__bb)>>2)];
   var $74=HEAP8[($73)];
   var $75=(($74 << 24) >> 24)==45;
   var $76 = $75;label = 25; break;
  case 25: 
   var $76;
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($__grp8)>>2)]=0; HEAP32[((($__grp8)+(4))>>2)]=0; HEAP32[((($__grp8)+(8))>>2)]=0;
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $76, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 45; break; }
  case 26: 
   var $78=(($__mbuf)|0);
   var $79=HEAP32[(($__fd)>>2)];
   var $80=(($__n_0)|(0)) > (($79)|(0));
   if ($80) { label = 27; break; } else { label = 34; break; }
  case 27: 
   var $82=((($__n_0)-($79))|0);
   var $83=$82 << 1;
   var $84=HEAP8[($2)];
   var $85=(($84)&(255));
   var $86=$85 & 1;
   var $87=(($86)|(0))==0;
   if ($87) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $89=(($__sn+4)|0);
   var $90=HEAP32[(($89)>>2)];
   var $93 = $90;label = 30; break;
  case 29: 
   var $92=$85 >>> 1;
   var $93 = $92;label = 30; break;
  case 30: 
   var $93;
   var $94=HEAP8[($1)];
   var $95=(($94)&(255));
   var $96=$95 & 1;
   var $97=(($96)|(0))==0;
   if ($97) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $99=(($__sym+4)|0);
   var $100=HEAP32[(($99)>>2)];
   var $103 = $100;label = 33; break;
  case 32: 
   var $102=$95 >>> 1;
   var $103 = $102;label = 33; break;
  case 33: 
   var $103;
   var $104=$83 | 1;
   var $105=((($104)+($93))|0);
   var $106=((($105)+($103))|0);
   var $_pn = $106;label = 41; break;
  case 34: 
   var $108=HEAP8[($2)];
   var $109=(($108)&(255));
   var $110=$109 & 1;
   var $111=(($110)|(0))==0;
   if ($111) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $113=(($__sn+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $117 = $114;label = 37; break;
  case 36: 
   var $116=$109 >>> 1;
   var $117 = $116;label = 37; break;
  case 37: 
   var $117;
   var $118=HEAP8[($1)];
   var $119=(($118)&(255));
   var $120=$119 & 1;
   var $121=(($120)|(0))==0;
   if ($121) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $123=(($__sym+4)|0);
   var $124=HEAP32[(($123)>>2)];
   var $127 = $124;label = 40; break;
  case 39: 
   var $126=$119 >>> 1;
   var $127 = $126;label = 40; break;
  case 40: 
   var $127;
   var $128=((($117)+(2))|0);
   var $129=((($128)+($127))|0);
   var $_pn = $129;label = 41; break;
  case 41: 
   var $_pn;
   var $131=((($_pn)+($79))|0);
   var $132=(($131)>>>(0)) > 100;
   if ($132) { label = 42; break; } else { var $__mb_0 = $78;var $__hw_sroa_0_1 = 0;label = 48; break; }
  case 42: 
   var $133=$131 << 2;
   var $134=_malloc($133);
   var $135=$134;
   var $136=(($134)|(0))==0;
   if ($136) { label = 43; break; } else { var $__mb_0 = $135;var $__hw_sroa_0_1 = $135;label = 48; break; }
  case 43: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0 = $135;var $__hw_sroa_0_1 = $135;label = 48; break; } else { var $__hw_sroa_0_0 = $135;label = 46; break; }
  case 44: 
   var $139$0 = ___cxa_find_matching_catch(-1, -1); $139$1 = tempRet0;
   var $140=$139$0;
   var $141=$139$1;
   var $_1 = $141;var $_12 = $140;label = 58; break;
  case 45: 
   var $143$0 = ___cxa_find_matching_catch(-1, -1); $143$1 = tempRet0;
   var $144=$143$0;
   var $145=$143$1;
   var $_0 = $145;var $_01 = $144;label = 57; break;
  case 46: 
   var $__hw_sroa_0_0;
   var $147$0 = ___cxa_find_matching_catch(-1, -1); $147$1 = tempRet0;
   var $148=$147$0;
   var $149=$147$1;
   var $150=(($__hw_sroa_0_0)|(0))==0;
   if ($150) { var $_0 = $149;var $_01 = $148;label = 57; break; } else { label = 47; break; }
  case 47: 
   var $152=$__hw_sroa_0_0;
   _free($152);
   var $_0 = $149;var $_01 = $148;label = 57; break;
  case 48: 
   var $__hw_sroa_0_1;
   var $__mb_0;
   var $154=(($__iob+4)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($__db_0+($__n_0<<2))|0);
   var $157=HEAP32[(($__dp)>>2)];
   var $158=HEAP32[(($__ts)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0, $__mi, $__me, $155, $__db_0, $156, $63, $76, $tmpcast, $157, $158, $__grp, $__sym, $__sn, $79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { var $__hw_sroa_0_0 = $__hw_sroa_0_1;label = 46; break; }
  case 49: 
   var $160=(($__s)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($3)|0);
   HEAP32[(($162)>>2)]=$161;
   var $163=HEAP32[(($__mi)>>2)];
   var $164=HEAP32[(($__me)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $3, $__mb_0, $163, $164, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { var $__hw_sroa_0_0 = $__hw_sroa_0_1;label = 46; break; }
  case 50: 
   var $166=(($__hw_sroa_0_1)|(0))==0;
   if ($166) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $168=$__hw_sroa_0_1;
   _free($168);
   label = 52; break;
  case 52: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $169=HEAP32[(($38)>>2)];
   var $170=(($169)|0);
   var $171=__ZNSt3__114__shared_count16__release_sharedEv($170);
   var $172=(($__hd_sroa_0_1)|(0))==0;
   if ($172) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $174=$__hd_sroa_0_1;
   _free($174);
   label = 54; break;
  case 54: 
   var $175=(($__hn_sroa_0_1)|(0))==0;
   if ($175) { label = 56; break; } else { label = 55; break; }
  case 55: 
   _free($__hn_sroa_0_1);
   label = 56; break;
  case 56: 
   STACKTOP = sp;
   return;
  case 57: 
   var $_01;
   var $_0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $_1 = $_0;var $_12 = $_01;label = 58; break;
  case 58: 
   var $_12;
   var $_1;
   var $178=HEAP32[(($38)>>2)];
   var $179=(($178)|0);
   var $180=__ZNSt3__114__shared_count16__release_sharedEv($179);
   var $_2 = $_1;var $_23 = $_12;var $__hn_sroa_0_2 = $__hn_sroa_0_1;var $__hd_sroa_0_2 = $__hd_sroa_0_1;label = 59; break;
  case 59: 
   var $__hd_sroa_0_2;
   var $__hn_sroa_0_2;
   var $_23;
   var $_2;
   var $182=(($__hd_sroa_0_2)|(0))==0;
   if ($182) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $184=$__hd_sroa_0_2;
   _free($184);
   label = 61; break;
  case 61: 
   var $185=(($__hn_sroa_0_2)|(0))==0;
   if ($185) { label = 63; break; } else { label = 62; break; }
  case 62: 
   _free($__hn_sroa_0_2);
   label = 63; break;
  case 63: 
   var $187$0=$_23;
   var $187$1=0;
   var $188$0=$187$0;
   var $188$1=$_2;
   ___resumeException($188$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i35=sp;
   var $__p_i_i_i=(sp)+(16);
   var $1=(sp)+(32);
   var $tmpcast34=$1;
   var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=$2;
   var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast33=$4;
   var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $6=$5;
   var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $8=$7;
   var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $10=$9;
   var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast32=$11;
   var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $13=$12;
   var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $tmpcast=$14;
   var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $16=$15;
   var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $18=$17;
   var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $20=$19;
   var $21=(($__loc)|0);
   var $22=HEAP32[(($21)>>2)];
   if ($__intl) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $24=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $25=HEAP32[((((14160)|0))>>2)];
   var $26=(($25)|(0))==-1;
   if ($26) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $28=(($__p_i_i_i)|0);
   HEAP32[(($28)>>2)]=14160;
   var $29=(($__p_i_i_i+4)|0);
   HEAP32[(($29)>>2)]=(26);
   var $30=(($__p_i_i_i+8)|0);
   HEAP32[(($30)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14160)|0), $24, 256);
   label = 4; break;
  case 4: 
   var $31=HEAP32[((((14164)|0))>>2)];
   var $32=((($31)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $33=(($22+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($22+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$34;
   var $38=$36;
   var $39=((($37)-($38))|0);
   var $40=$39 >> 2;
   var $41=(($40)>>>(0)) > (($32)>>>(0));
   if ($41) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $42=(($36+($32<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $45=___cxa_allocate_exception(4);
   var $46=$45;
   __ZNSt8bad_castC2Ev($46);
   ___cxa_throw($45, 8440, (356));
   throw "Reached an unreachable!";
  case 7: 
   var $47=$43;
   var $48=$43;
   var $49=HEAP32[(($48)>>2)];
   if ($__neg) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $51=(($49+44)|0);
   var $52=HEAP32[(($51)>>2)];
   FUNCTION_TABLE[$52]($tmpcast34, $47);
   var $53=$__pat;
   var $54=HEAP32[(($1)>>2)];
   tempBigInt=$54;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
   var $55=$43;
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+32)|0);
   var $58=HEAP32[(($57)>>2)];
   FUNCTION_TABLE[$58]($2, $47);
   var $59=$__sn;
   var $60=HEAP8[($59)];
   var $61=$60 & 1;
   var $62=(($61 << 24) >> 24)==0;
   if ($62) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $64=(($__sn+8)|0);
   var $65=HEAP32[(($64)>>2)];
   HEAP32[(($65)>>2)]=0;
   var $66=(($__sn+4)|0);
   HEAP32[(($66)>>2)]=0;
   label = 11; break;
  case 10: 
   var $68=(($__sn+4)|0);
   HEAP32[(($68)>>2)]=0;
   HEAP8[($59)]=0;
   label = 11; break;
  case 11: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $70$0 = ___cxa_find_matching_catch(-1, -1,0); $70$1 = tempRet0;
   var $71=$70$0;
   ___clang_call_terminate($71);
   throw "Reached an unreachable!";
  case 13: 
   assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
   HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
   label = 20; break;
  case 14: 
   var $73=(($49+40)|0);
   var $74=HEAP32[(($73)>>2)];
   FUNCTION_TABLE[$74]($tmpcast33, $47);
   var $75=$__pat;
   var $76=HEAP32[(($4)>>2)];
   tempBigInt=$76;HEAP8[($75)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($75)+(3))|0)]=tempBigInt&0xff;
   var $77=$43;
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78+28)|0);
   var $80=HEAP32[(($79)>>2)];
   FUNCTION_TABLE[$80]($5, $47);
   var $81=$__sn;
   var $82=HEAP8[($81)];
   var $83=$82 & 1;
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $86=(($__sn+8)|0);
   var $87=HEAP32[(($86)>>2)];
   HEAP32[(($87)>>2)]=0;
   var $88=(($__sn+4)|0);
   HEAP32[(($88)>>2)]=0;
   label = 17; break;
  case 16: 
   var $90=(($__sn+4)|0);
   HEAP32[(($90)>>2)]=0;
   HEAP8[($81)]=0;
   label = 17; break;
  case 17: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1,0); $92$1 = tempRet0;
   var $93=$92$0;
   ___clang_call_terminate($93);
   throw "Reached an unreachable!";
  case 19: 
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
   label = 20; break;
  case 20: 
   var $95=$43;
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=FUNCTION_TABLE[$98]($47);
   HEAP32[(($__dp)>>2)]=$99;
   var $100=HEAP32[(($95)>>2)];
   var $101=(($100+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=FUNCTION_TABLE[$102]($47);
   HEAP32[(($__ts)>>2)]=$103;
   var $104=$43;
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+20)|0);
   var $107=HEAP32[(($106)>>2)];
   FUNCTION_TABLE[$107]($7, $47);
   var $108=$__grp;
   var $109=HEAP8[($108)];
   var $110=$109 & 1;
   var $111=(($110 << 24) >> 24)==0;
   if ($111) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $113=(($__grp+8)|0);
   var $114=HEAP32[(($113)>>2)];
   HEAP8[($114)]=0;
   var $115=(($__grp+4)|0);
   HEAP32[(($115)>>2)]=0;
   label = 23; break;
  case 22: 
   var $117=$__grp;
   var $118=(($117+1)|0);
   HEAP8[($118)]=0;
   HEAP8[($108)]=0;
   label = 23; break;
  case 23: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $120$0 = ___cxa_find_matching_catch(-1, -1,0); $120$1 = tempRet0;
   var $121=$120$0;
   ___clang_call_terminate($121);
   throw "Reached an unreachable!";
  case 25: 
   assert(12 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($108)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
   var $122=$43;
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123+24)|0);
   var $125=HEAP32[(($124)>>2)];
   FUNCTION_TABLE[$125]($9, $47);
   var $126=$__sym;
   var $127=HEAP8[($126)];
   var $128=$127 & 1;
   var $129=(($128 << 24) >> 24)==0;
   if ($129) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $131=(($__sym+8)|0);
   var $132=HEAP32[(($131)>>2)];
   HEAP32[(($132)>>2)]=0;
   var $133=(($__sym+4)|0);
   HEAP32[(($133)>>2)]=0;
   label = 28; break;
  case 27: 
   var $135=(($__sym+4)|0);
   HEAP32[(($135)>>2)]=0;
   HEAP8[($126)]=0;
   label = 28; break;
  case 28: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $137$0 = ___cxa_find_matching_catch(-1, -1,0); $137$1 = tempRet0;
   var $138=$137$0;
   ___clang_call_terminate($138);
   throw "Reached an unreachable!";
  case 30: 
   assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
   var $139=HEAP32[(($95)>>2)];
   var $140=(($139+36)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=FUNCTION_TABLE[$141]($47);
   var $storemerge = $142;label = 60; break;
  case 31: 
   var $144=$__p_i_i_i35;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $145=HEAP32[((((14168)|0))>>2)];
   var $146=(($145)|(0))==-1;
   if ($146) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $148=(($__p_i_i_i35)|0);
   HEAP32[(($148)>>2)]=14168;
   var $149=(($__p_i_i_i35+4)|0);
   HEAP32[(($149)>>2)]=(26);
   var $150=(($__p_i_i_i35+8)|0);
   HEAP32[(($150)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((14168)|0), $144, 256);
   label = 33; break;
  case 33: 
   var $151=HEAP32[((((14172)|0))>>2)];
   var $152=((($151)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   var $153=(($22+12)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($22+8)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=$154;
   var $158=$156;
   var $159=((($157)-($158))|0);
   var $160=$159 >> 2;
   var $161=(($160)>>>(0)) > (($152)>>>(0));
   if ($161) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $162=(($156+($152<<2))|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163)|(0))==0;
   if ($164) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $165=___cxa_allocate_exception(4);
   var $166=$165;
   __ZNSt8bad_castC2Ev($166);
   ___cxa_throw($165, 8440, (356));
   throw "Reached an unreachable!";
  case 36: 
   var $167=$163;
   var $168=$163;
   var $169=HEAP32[(($168)>>2)];
   if ($__neg) { label = 37; break; } else { label = 43; break; }
  case 37: 
   var $171=(($169+44)|0);
   var $172=HEAP32[(($171)>>2)];
   FUNCTION_TABLE[$172]($tmpcast32, $167);
   var $173=$__pat;
   var $174=HEAP32[(($11)>>2)];
   tempBigInt=$174;HEAP8[($173)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($173)+(3))|0)]=tempBigInt&0xff;
   var $175=$163;
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176+32)|0);
   var $178=HEAP32[(($177)>>2)];
   FUNCTION_TABLE[$178]($12, $167);
   var $179=$__sn;
   var $180=HEAP8[($179)];
   var $181=$180 & 1;
   var $182=(($181 << 24) >> 24)==0;
   if ($182) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $184=(($__sn+8)|0);
   var $185=HEAP32[(($184)>>2)];
   HEAP32[(($185)>>2)]=0;
   var $186=(($__sn+4)|0);
   HEAP32[(($186)>>2)]=0;
   label = 40; break;
  case 39: 
   var $188=(($__sn+4)|0);
   HEAP32[(($188)>>2)]=0;
   HEAP8[($179)]=0;
   label = 40; break;
  case 40: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $190$0 = ___cxa_find_matching_catch(-1, -1,0); $190$1 = tempRet0;
   var $191=$190$0;
   ___clang_call_terminate($191);
   throw "Reached an unreachable!";
  case 42: 
   assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
   label = 49; break;
  case 43: 
   var $193=(($169+40)|0);
   var $194=HEAP32[(($193)>>2)];
   FUNCTION_TABLE[$194]($tmpcast, $167);
   var $195=$__pat;
   var $196=HEAP32[(($14)>>2)];
   tempBigInt=$196;HEAP8[($195)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($195)+(3))|0)]=tempBigInt&0xff;
   var $197=$163;
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198+28)|0);
   var $200=HEAP32[(($199)>>2)];
   FUNCTION_TABLE[$200]($15, $167);
   var $201=$__sn;
   var $202=HEAP8[($201)];
   var $203=$202 & 1;
   var $204=(($203 << 24) >> 24)==0;
   if ($204) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $206=(($__sn+8)|0);
   var $207=HEAP32[(($206)>>2)];
   HEAP32[(($207)>>2)]=0;
   var $208=(($__sn+4)|0);
   HEAP32[(($208)>>2)]=0;
   label = 46; break;
  case 45: 
   var $210=(($__sn+4)|0);
   HEAP32[(($210)>>2)]=0;
   HEAP8[($201)]=0;
   label = 46; break;
  case 46: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $212$0 = ___cxa_find_matching_catch(-1, -1,0); $212$1 = tempRet0;
   var $213=$212$0;
   ___clang_call_terminate($213);
   throw "Reached an unreachable!";
  case 48: 
   assert(12 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($201)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($15);
   label = 49; break;
  case 49: 
   var $215=$163;
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216+12)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=FUNCTION_TABLE[$218]($167);
   HEAP32[(($__dp)>>2)]=$219;
   var $220=HEAP32[(($215)>>2)];
   var $221=(($220+16)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=FUNCTION_TABLE[$222]($167);
   HEAP32[(($__ts)>>2)]=$223;
   var $224=$163;
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225+20)|0);
   var $227=HEAP32[(($226)>>2)];
   FUNCTION_TABLE[$227]($17, $167);
   var $228=$__grp;
   var $229=HEAP8[($228)];
   var $230=$229 & 1;
   var $231=(($230 << 24) >> 24)==0;
   if ($231) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $233=(($__grp+8)|0);
   var $234=HEAP32[(($233)>>2)];
   HEAP8[($234)]=0;
   var $235=(($__grp+4)|0);
   HEAP32[(($235)>>2)]=0;
   label = 52; break;
  case 51: 
   var $237=$__grp;
   var $238=(($237+1)|0);
   HEAP8[($238)]=0;
   HEAP8[($228)]=0;
   label = 52; break;
  case 52: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $240$0 = ___cxa_find_matching_catch(-1, -1,0); $240$1 = tempRet0;
   var $241=$240$0;
   ___clang_call_terminate($241);
   throw "Reached an unreachable!";
  case 54: 
   assert(12 % 1 === 0);HEAP32[(($228)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($228)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($228)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
   var $242=$163;
   var $243=HEAP32[(($242)>>2)];
   var $244=(($243+24)|0);
   var $245=HEAP32[(($244)>>2)];
   FUNCTION_TABLE[$245]($19, $167);
   var $246=$__sym;
   var $247=HEAP8[($246)];
   var $248=$247 & 1;
   var $249=(($248 << 24) >> 24)==0;
   if ($249) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $251=(($__sym+8)|0);
   var $252=HEAP32[(($251)>>2)];
   HEAP32[(($252)>>2)]=0;
   var $253=(($__sym+4)|0);
   HEAP32[(($253)>>2)]=0;
   label = 57; break;
  case 56: 
   var $255=(($__sym+4)|0);
   HEAP32[(($255)>>2)]=0;
   HEAP8[($246)]=0;
   label = 57; break;
  case 57: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $257$0 = ___cxa_find_matching_catch(-1, -1,0); $257$1 = tempRet0;
   var $258=$257$0;
   ___clang_call_terminate($258);
   throw "Reached an unreachable!";
  case 59: 
   assert(12 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($246)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($19);
   var $259=HEAP32[(($215)>>2)];
   var $260=(($259+36)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=FUNCTION_TABLE[$261]($167);
   var $storemerge = $262;label = 60; break;
  case 60: 
   var $storemerge;
   HEAP32[(($__fd)>>2)]=$storemerge;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($__me)>>2)]=$__mb;
   var $1=$__ct;
   var $2=$__sn;
   var $3=(($__sn+4)|0);
   var $4=(($__sn+8)|0);
   var $5=$__sym;
   var $6=$__flags & 512;
   var $7=(($6)|(0))==0;
   var $8=(($__sym+4)|0);
   var $9=(($__sym+8)|0);
   var $10=(($__fd)|(0)) > 0;
   var $11=$__grp;
   var $12=$__grp;
   var $13=(($11+1)|0);
   var $14=(($__grp+8)|0);
   var $15=(($__grp+4)|0);
   var $16=$__ct;
   var $_02163 = $__db;var $__p_064 = 0;label = 2; break;
  case 2: 
   var $__p_064;
   var $_02163;
   var $18=(($__pat+$__p_064)|0);
   var $19=HEAP8[($18)];
   var $20=(($19 << 24) >> 24);
   switch((($20)|(0))) {
   case 2:{
    label = 12; break;
   }
   case 4:{
    label = 28; break;
   }
   case 0:{
    label = 3; break;
   }
   case 1:{
    label = 4; break;
   }
   case 3:{
    label = 5; break;
   }
   default: {
   var $_2 = $_02163;label = 63; break;
   }
   } break; 
  case 3: 
   var $22=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$22;
   var $_2 = $_02163;label = 63; break;
  case 4: 
   var $24=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$24;
   var $25=HEAP32[(($1)>>2)];
   var $26=(($25+44)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($__ct, 32);
   var $29=HEAP32[(($__me)>>2)];
   var $30=(($29+4)|0);
   HEAP32[(($__me)>>2)]=$30;
   HEAP32[(($29)>>2)]=$28;
   var $_2 = $_02163;label = 63; break;
  case 5: 
   var $32=HEAP8[($2)];
   var $33=(($32)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))==0;
   if ($35) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $37=HEAP32[(($3)>>2)];
   var $40 = $37;label = 8; break;
  case 7: 
   var $39=$33 >>> 1;
   var $40 = $39;label = 8; break;
  case 8: 
   var $40;
   var $41=(($40)|(0))==0;
   if ($41) { var $_2 = $_02163;label = 63; break; } else { label = 9; break; }
  case 9: 
   var $43=$32 & 1;
   var $44=(($43 << 24) >> 24)==0;
   if ($44) { var $47 = $3;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $46=HEAP32[(($4)>>2)];
   var $47 = $46;label = 11; break;
  case 11: 
   var $47;
   var $48=HEAP32[(($47)>>2)];
   var $49=HEAP32[(($__me)>>2)];
   var $50=(($49+4)|0);
   HEAP32[(($__me)>>2)]=$50;
   HEAP32[(($49)>>2)]=$48;
   var $_2 = $_02163;label = 63; break;
  case 12: 
   var $52=HEAP8[($5)];
   var $53=(($52)&(255));
   var $54=$53 & 1;
   var $55=(($54)|(0))==0;
   if ($55) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $57=HEAP32[(($8)>>2)];
   var $60 = $57;label = 15; break;
  case 14: 
   var $59=$53 >>> 1;
   var $60 = $59;label = 15; break;
  case 15: 
   var $60;
   var $61=(($60)|(0))==0;
   var $brmerge=$61 | $7;
   if ($brmerge) { var $_2 = $_02163;label = 63; break; } else { label = 16; break; }
  case 16: 
   var $63=$52 & 1;
   var $64=(($63 << 24) >> 24)==0;
   if ($64) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $66=HEAP32[(($9)>>2)];
   var $69 = $66;var $68 = $66;var $_in91 = $66;label = 19; break;
  case 18: 
   var $69 = $8;var $68 = $8;var $_in91 = $8;label = 19; break;
  case 19: 
   var $_in91;
   var $68;
   var $69;
   var $70=$_in91;
   if ($55) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $72=HEAP32[(($8)>>2)];
   var $75 = $72;label = 22; break;
  case 21: 
   var $74=$53 >>> 1;
   var $75 = $74;label = 22; break;
  case 22: 
   var $75;
   var $76=(($69+($75<<2))|0);
   var $77=HEAP32[(($__me)>>2)];
   var $78=(($68)|(0))==(($76)|(0));
   if ($78) { var $_0_lcssa = $77;label = 27; break; } else { label = 23; break; }
  case 23: 
   var $scevgep78_sum=((($75)-(1))|0);
   var $scevgep79=(($69+($scevgep78_sum<<2))|0);
   var $scevgep7980=$scevgep79;
   var $79=(((-$70))|0);
   var $uglygep81=(($scevgep7980+$79)|0);
   var $uglygep8182=$uglygep81;
   var $80=$uglygep8182 >>> 2;
   var $_sroa_022_059 = $68;var $_060 = $77;label = 24; break;
  case 24: 
   var $_060;
   var $_sroa_022_059;
   var $82=HEAP32[(($_sroa_022_059)>>2)];
   HEAP32[(($_060)>>2)]=$82;
   var $83=(($_sroa_022_059+4)|0);
   var $84=(($83)|(0))==(($76)|(0));
   if ($84) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $85=(($_060+4)|0);
   var $_sroa_022_059 = $83;var $_060 = $85;label = 24; break;
  case 26: 
   var $scevgep77_sum=((($80)+(1))|0);
   var $scevgep83=(($77+($scevgep77_sum<<2))|0);
   var $_0_lcssa = $scevgep83;label = 27; break;
  case 27: 
   var $_0_lcssa;
   HEAP32[(($__me)>>2)]=$_0_lcssa;
   var $_2 = $_02163;label = 63; break;
  case 28: 
   var $87=HEAP32[(($__me)>>2)];
   var $88=(($_02163+4)|0);
   var $__021=$__neg ? $88 : $_02163;
   var $89=(($__021)>>>(0)) < (($__de)>>>(0));
   if ($89) { var $__d_033 = $__021;label = 30; break; } else { var $__d_0_lcssa = $__021;label = 31; break; }
  case 29: 
   var $91=(($97)>>>(0)) < (($__de)>>>(0));
   if ($91) { var $__d_033 = $97;label = 30; break; } else { var $__d_0_lcssa = $97;label = 31; break; }
  case 30: 
   var $__d_033;
   var $92=HEAP32[(($__d_033)>>2)];
   var $93=HEAP32[(($16)>>2)];
   var $94=(($93+12)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=FUNCTION_TABLE[$95]($__ct, 2048, $92);
   var $97=(($__d_033+4)|0);
   if ($96) { label = 29; break; } else { var $__d_0_lcssa = $__d_033;label = 31; break; }
  case 31: 
   var $__d_0_lcssa;
   if ($10) { label = 32; break; } else { var $__d_2 = $__d_0_lcssa;label = 39; break; }
  case 32: 
   var $98=(($__d_0_lcssa)>>>(0)) > (($__021)>>>(0));
   if ($98) { var $__d_138 = $__d_0_lcssa;var $__f_039 = $__fd;label = 33; break; } else { var $__f_0_lcssa88 = $__fd;var $__d_1_lcssa90 = $__d_0_lcssa;label = 35; break; }
  case 33: 
   var $__f_039;
   var $__d_138;
   var $99=((($__d_138)-(4))|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=HEAP32[(($__me)>>2)];
   var $102=(($101+4)|0);
   HEAP32[(($__me)>>2)]=$102;
   HEAP32[(($101)>>2)]=$100;
   var $103=((($__f_039)-(1))|0);
   var $104=(($99)>>>(0)) > (($__021)>>>(0));
   var $105=(($103)|(0)) > 0;
   var $or_cond=$104 & $105;
   if ($or_cond) { var $__d_138 = $99;var $__f_039 = $103;label = 33; break; } else { label = 34; break; }
  case 34: 
   if ($105) { var $__f_0_lcssa88 = $103;var $__d_1_lcssa90 = $99;label = 35; break; } else { var $110 = 0;var $__f_0_lcssa87 = $103;var $__d_1_lcssa89 = $99;label = 36; break; }
  case 35: 
   var $__d_1_lcssa90;
   var $__f_0_lcssa88;
   var $106=HEAP32[(($1)>>2)];
   var $107=(($106+44)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=FUNCTION_TABLE[$108]($__ct, 48);
   var $110 = $109;var $__f_0_lcssa87 = $__f_0_lcssa88;var $__d_1_lcssa89 = $__d_1_lcssa90;label = 36; break;
  case 36: 
   var $__d_1_lcssa89;
   var $__f_0_lcssa87;
   var $110;
   var $111=(($__f_0_lcssa87)|(0)) > 0;
   var $112=HEAP32[(($__me)>>2)];
   var $113=(($112+4)|0);
   HEAP32[(($__me)>>2)]=$113;
   if ($111) { var $__f_145 = $__f_0_lcssa87;var $114 = $112;label = 37; break; } else { var $_lcssa44 = $112;label = 38; break; }
  case 37: 
   var $114;
   var $__f_145;
   HEAP32[(($114)>>2)]=$110;
   var $115=((($__f_145)-(1))|0);
   var $116=(($115)|(0)) > 0;
   var $117=HEAP32[(($__me)>>2)];
   var $118=(($117+4)|0);
   HEAP32[(($__me)>>2)]=$118;
   if ($116) { var $__f_145 = $115;var $114 = $117;label = 37; break; } else { var $_lcssa44 = $117;label = 38; break; }
  case 38: 
   var $_lcssa44;
   HEAP32[(($_lcssa44)>>2)]=$__dp;
   var $__d_2 = $__d_1_lcssa89;label = 39; break;
  case 39: 
   var $__d_2;
   var $120=(($__d_2)|(0))==(($__021)|(0));
   if ($120) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $122=HEAP32[(($1)>>2)];
   var $123=(($122+44)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=FUNCTION_TABLE[$124]($__ct, 48);
   var $126=HEAP32[(($__me)>>2)];
   var $127=(($126+4)|0);
   HEAP32[(($__me)>>2)]=$127;
   HEAP32[(($126)>>2)]=$125;
   label = 60; break;
  case 41: 
   var $129=HEAP8[($12)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))==0;
   if ($132) { label = 43; break; } else { label = 42; break; }
  case 42: 
   var $134=HEAP32[(($15)>>2)];
   var $137 = $134;label = 44; break;
  case 43: 
   var $136=$130 >>> 1;
   var $137 = $136;label = 44; break;
  case 44: 
   var $137;
   var $138=(($137)|(0))==0;
   if ($138) { var $__d_351 = $__d_2;var $__ng_052 = 0;var $__ig_053 = 0;var $__gl_054 = -1;label = 48; break; } else { label = 45; break; }
  case 45: 
   var $140=$129 & 1;
   var $141=(($140 << 24) >> 24)==0;
   if ($141) { var $144 = $13;label = 47; break; } else { label = 46; break; }
  case 46: 
   var $143=HEAP32[(($14)>>2)];
   var $144 = $143;label = 47; break;
  case 47: 
   var $144;
   var $145=HEAP8[($144)];
   var $146=(($145 << 24) >> 24);
   var $__d_351 = $__d_2;var $__ng_052 = 0;var $__ig_053 = 0;var $__gl_054 = $146;label = 48; break;
  case 48: 
   var $__gl_054;
   var $__ig_053;
   var $__ng_052;
   var $__d_351;
   var $147=(($__ng_052)|(0))==(($__gl_054)|(0));
   if ($147) { label = 49; break; } else { var $__gl_1 = $__gl_054;var $__ig_1 = $__ig_053;var $__ng_1 = $__ng_052;label = 59; break; }
  case 49: 
   var $149=HEAP32[(($__me)>>2)];
   var $150=(($149+4)|0);
   HEAP32[(($__me)>>2)]=$150;
   HEAP32[(($149)>>2)]=$__ts;
   var $151=((($__ig_053)+(1))|0);
   var $152=HEAP8[($12)];
   var $153=(($152)&(255));
   var $154=$153 & 1;
   var $155=(($154)|(0))==0;
   if ($155) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $157=HEAP32[(($15)>>2)];
   var $160 = $157;label = 52; break;
  case 51: 
   var $159=$153 >>> 1;
   var $160 = $159;label = 52; break;
  case 52: 
   var $160;
   var $161=(($151)>>>(0)) < (($160)>>>(0));
   if ($161) { label = 53; break; } else { var $__gl_1 = $__gl_054;var $__ig_1 = $151;var $__ng_1 = 0;label = 59; break; }
  case 53: 
   var $163=$152 & 1;
   var $164=(($163 << 24) >> 24)==0;
   if ($164) { var $167 = $13;label = 55; break; } else { label = 54; break; }
  case 54: 
   var $166=HEAP32[(($14)>>2)];
   var $167 = $166;label = 55; break;
  case 55: 
   var $167;
   var $168=(($167+$151)|0);
   var $169=HEAP8[($168)];
   var $170=(($169 << 24) >> 24)==127;
   if ($170) { var $__gl_1 = -1;var $__ig_1 = $151;var $__ng_1 = 0;label = 59; break; } else { label = 56; break; }
  case 56: 
   if ($164) { var $174 = $13;label = 58; break; } else { label = 57; break; }
  case 57: 
   var $173=HEAP32[(($14)>>2)];
   var $174 = $173;label = 58; break;
  case 58: 
   var $174;
   var $175=(($174+$151)|0);
   var $176=HEAP8[($175)];
   var $177=(($176 << 24) >> 24);
   var $__gl_1 = $177;var $__ig_1 = $151;var $__ng_1 = 0;label = 59; break;
  case 59: 
   var $__ng_1;
   var $__ig_1;
   var $__gl_1;
   var $178=((($__d_351)-(4))|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=HEAP32[(($__me)>>2)];
   var $181=(($180+4)|0);
   HEAP32[(($__me)>>2)]=$181;
   HEAP32[(($180)>>2)]=$179;
   var $182=((($__ng_1)+(1))|0);
   var $183=(($178)|(0))==(($__021)|(0));
   if ($183) { label = 60; break; } else { var $__d_351 = $178;var $__ng_052 = $182;var $__ig_053 = $__ig_1;var $__gl_054 = $__gl_1;label = 48; break; }
  case 60: 
   var $184=HEAP32[(($__me)>>2)];
   var $185=(($87)|(0))==(($184)|(0));
   if ($185) { var $_2 = $__021;label = 63; break; } else { label = 61; break; }
  case 61: 
   var $186=((($184)-(4))|0);
   var $187=(($87)>>>(0)) < (($186)>>>(0));
   if ($187) { var $_01857 = $87;var $188 = $186;label = 62; break; } else { var $_2 = $__021;label = 63; break; }
  case 62: 
   var $188;
   var $_01857;
   var $189=HEAP32[(($_01857)>>2)];
   var $190=HEAP32[(($188)>>2)];
   HEAP32[(($_01857)>>2)]=$190;
   HEAP32[(($188)>>2)]=$189;
   var $191=(($_01857+4)|0);
   var $192=((($188)-(4))|0);
   var $193=(($191)>>>(0)) < (($192)>>>(0));
   if ($193) { var $_01857 = $191;var $188 = $192;label = 62; break; } else { var $_2 = $__021;label = 63; break; }
  case 63: 
   var $_2;
   var $194=((($__p_064)+(1))|0);
   var $195=(($194)>>>(0)) < 4;
   if ($195) { var $_02163 = $_2;var $__p_064 = $194;label = 2; break; } else { label = 64; break; }
  case 64: 
   var $197=HEAP8[($2)];
   var $198=(($197)&(255));
   var $199=$198 & 1;
   var $200=(($199)|(0))==0;
   if ($200) { label = 66; break; } else { label = 65; break; }
  case 65: 
   var $202=HEAP32[(($3)>>2)];
   var $205 = $202;label = 67; break;
  case 66: 
   var $204=$198 >>> 1;
   var $205 = $204;label = 67; break;
  case 67: 
   var $205;
   var $206=(($205)>>>(0)) > 1;
   if ($206) { label = 68; break; } else { label = 79; break; }
  case 68: 
   var $208=$197 & 1;
   var $209=(($208 << 24) >> 24)==0;
   if ($209) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $211=HEAP32[(($4)>>2)];
   var $214 = $211;var $213 = $211;var $_in = $211;label = 71; break;
  case 70: 
   var $214 = $3;var $213 = $3;var $_in = $3;label = 71; break;
  case 71: 
   var $_in;
   var $213;
   var $214;
   var $215=$_in;
   if ($200) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $217=HEAP32[(($3)>>2)];
   var $220 = $217;label = 74; break;
  case 73: 
   var $219=$198 >>> 1;
   var $220 = $219;label = 74; break;
  case 74: 
   var $220;
   var $221=(($214+($220<<2))|0);
   var $222=HEAP32[(($__me)>>2)];
   var $_sroa_028_030=(($213+4)|0);
   var $223=(($_sroa_028_030)|(0))==(($221)|(0));
   if ($223) { var $_020_lcssa = $222;label = 78; break; } else { label = 75; break; }
  case 75: 
   var $224=((($220)-(2))|0);
   var $scevgep=(($214+($224<<2))|0);
   var $scevgep66=$scevgep;
   var $225=(((-$215))|0);
   var $uglygep=(($scevgep66+$225)|0);
   var $uglygep67=$uglygep;
   var $226=$uglygep67 >>> 2;
   var $227=((($226)+(1))|0);
   var $_02031 = $222;var $_sroa_028_032 = $_sroa_028_030;label = 76; break;
  case 76: 
   var $_sroa_028_032;
   var $_02031;
   var $229=HEAP32[(($_sroa_028_032)>>2)];
   HEAP32[(($_02031)>>2)]=$229;
   var $230=(($_02031+4)|0);
   var $_sroa_028_0=(($_sroa_028_032+4)|0);
   var $231=(($_sroa_028_0)|(0))==(($221)|(0));
   if ($231) { label = 77; break; } else { var $_02031 = $230;var $_sroa_028_032 = $_sroa_028_0;label = 76; break; }
  case 77: 
   var $scevgep68=(($222+($227<<2))|0);
   var $_020_lcssa = $scevgep68;label = 78; break;
  case 78: 
   var $_020_lcssa;
   HEAP32[(($__me)>>2)]=$_020_lcssa;
   label = 79; break;
  case 79: 
   var $233=$__flags & 176;
   if ((($233)|(0))==32) {
    label = 80; break;
   }
   else if ((($233)|(0))==16) {
    label = 82; break;
   }
   else {
   label = 81; break;
   }
  case 80: 
   var $235=HEAP32[(($__me)>>2)];
   HEAP32[(($__mi)>>2)]=$235;
   label = 82; break;
  case 81: 
   HEAP32[(($__mi)>>2)]=$__mb;
   label = 82; break;
  case 82: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i=sp;
   var $__loc=(sp)+(16);
   var $__pat=(sp)+(24);
   var $tmpcast=$__pat;
   var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__grp7=$__grp;
   var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=$__sym;
   var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=$__sn;
   var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
   var $4=(($__loc)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $7=HEAP32[((((13696)|0))>>2)];
   var $8=(($7)|(0))==-1;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($__p_i_i_i)|0);
   HEAP32[(($10)>>2)]=13696;
   var $11=(($__p_i_i_i+4)|0);
   HEAP32[(($11)>>2)]=(26);
   var $12=(($__p_i_i_i+8)|0);
   HEAP32[(($12)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $6, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 42; break; }
  case 3: 
   var $13=HEAP32[((((13700)|0))>>2)];
   var $14=((($13)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $15=(($5+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($5+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$16;
   var $20=$18;
   var $21=((($19)-($20))|0);
   var $22=$21 >> 2;
   var $23=(($22)>>>(0)) > (($14)>>>(0));
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $24=(($18+($14<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=___cxa_allocate_exception(4);
   var $28=$27;
   __ZNSt8bad_castC2Ev($28);
   (function() { try { __THREW__ = 0; return ___cxa_throw($27, 8440, (356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 42; break; }
  case 6: 
   throw "Reached an unreachable!";
  case 7: 
   var $29=$25;
   var $30=$__digits;
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=$32 & 1;
   var $34=(($33)|(0))==0;
   if ($34) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $36=(($__digits+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $40 = $37;label = 10; break;
  case 9: 
   var $39=$32 >>> 1;
   var $40 = $39;label = 10; break;
  case 10: 
   var $40;
   var $41=(($40)|(0))==0;
   if ($41) { var $58 = 0;label = 16; break; } else { label = 11; break; }
  case 11: 
   var $43=$31 & 1;
   var $44=(($43 << 24) >> 24)==0;
   if ($44) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $46=(($__digits+8)|0);
   var $47=HEAP32[(($46)>>2)];
   var $50 = $47;label = 14; break;
  case 13: 
   var $49=(($__digits+4)|0);
   var $50 = $49;label = 14; break;
  case 14: 
   var $50;
   var $51=HEAP32[(($50)>>2)];
   var $52=$25;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+44)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($29, 45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 42; break; }
  case 15: 
   var $57=(($51)|(0))==(($56)|(0));
   var $58 = $57;label = 16; break;
  case 16: 
   var $58;
   HEAP32[(($__pat)>>2)]=0;
   HEAP32[(($__grp7)>>2)]=0; HEAP32[((($__grp7)+(4))>>2)]=0; HEAP32[((($__grp7)+(8))>>2)]=0;
   HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $58, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 43; break; }
  case 17: 
   var $60=(($__mbuf)|0);
   var $61=HEAP8[($30)];
   var $62=(($61)&(255));
   var $63=$62 & 1;
   var $64=(($63)|(0))==0;
   if ($64) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $66=(($__digits+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $70 = $67;label = 20; break;
  case 19: 
   var $69=$62 >>> 1;
   var $70 = $69;label = 20; break;
  case 20: 
   var $70;
   var $71=HEAP32[(($__fd)>>2)];
   var $72=(($70)|(0)) > (($71)|(0));
   if ($72) { label = 21; break; } else { label = 31; break; }
  case 21: 
   if ($64) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $75=(($__digits+4)|0);
   var $76=HEAP32[(($75)>>2)];
   var $79 = $76;label = 24; break;
  case 23: 
   var $78=$62 >>> 1;
   var $79 = $78;label = 24; break;
  case 24: 
   var $79;
   var $80=((($79)-($71))|0);
   var $81=$80 << 1;
   var $82=HEAP8[($2)];
   var $83=(($82)&(255));
   var $84=$83 & 1;
   var $85=(($84)|(0))==0;
   if ($85) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $87=(($__sn+4)|0);
   var $88=HEAP32[(($87)>>2)];
   var $91 = $88;label = 27; break;
  case 26: 
   var $90=$83 >>> 1;
   var $91 = $90;label = 27; break;
  case 27: 
   var $91;
   var $92=HEAP8[($1)];
   var $93=(($92)&(255));
   var $94=$93 & 1;
   var $95=(($94)|(0))==0;
   if ($95) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $97=(($__sym+4)|0);
   var $98=HEAP32[(($97)>>2)];
   var $101 = $98;label = 30; break;
  case 29: 
   var $100=$93 >>> 1;
   var $101 = $100;label = 30; break;
  case 30: 
   var $101;
   var $102=$81 | 1;
   var $103=((($102)+($91))|0);
   var $104=((($103)+($101))|0);
   var $_pn = $104;label = 38; break;
  case 31: 
   var $106=HEAP8[($2)];
   var $107=(($106)&(255));
   var $108=$107 & 1;
   var $109=(($108)|(0))==0;
   if ($109) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $111=(($__sn+4)|0);
   var $112=HEAP32[(($111)>>2)];
   var $115 = $112;label = 34; break;
  case 33: 
   var $114=$107 >>> 1;
   var $115 = $114;label = 34; break;
  case 34: 
   var $115;
   var $116=HEAP8[($1)];
   var $117=(($116)&(255));
   var $118=$117 & 1;
   var $119=(($118)|(0))==0;
   if ($119) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $121=(($__sym+4)|0);
   var $122=HEAP32[(($121)>>2)];
   var $125 = $122;label = 37; break;
  case 36: 
   var $124=$117 >>> 1;
   var $125 = $124;label = 37; break;
  case 37: 
   var $125;
   var $126=((($115)+(2))|0);
   var $127=((($126)+($125))|0);
   var $_pn = $127;label = 38; break;
  case 38: 
   var $_pn;
   var $129=((($_pn)+($71))|0);
   var $130=(($129)>>>(0)) > 100;
   if ($130) { label = 39; break; } else { var $__mb_0 = $60;var $__h_sroa_0_1 = 0;var $152 = $61;label = 46; break; }
  case 39: 
   var $131=$129 << 2;
   var $132=_malloc($131);
   var $133=$132;
   var $134=(($132)|(0))==0;
   if ($134) { label = 40; break; } else { var $__mb_0 = $133;var $__h_sroa_0_1 = $133;var $152 = $61;label = 46; break; }
  case 40: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { var $__h_sroa_0_0 = $133;label = 44; break; }
  case 41: 
   var $_pre=HEAP8[($30)];
   var $__mb_0 = $133;var $__h_sroa_0_1 = $133;var $152 = $_pre;label = 46; break;
  case 42: 
   var $137$0 = ___cxa_find_matching_catch(-1, -1); $137$1 = tempRet0;
   var $138=$137$0;
   var $139=$137$1;
   var $_1 = $139;var $_12 = $138;label = 58; break;
  case 43: 
   var $141$0 = ___cxa_find_matching_catch(-1, -1); $141$1 = tempRet0;
   var $142=$141$0;
   var $143=$141$1;
   var $_0 = $143;var $_01 = $142;label = 57; break;
  case 44: 
   var $__h_sroa_0_0;
   var $145$0 = ___cxa_find_matching_catch(-1, -1); $145$1 = tempRet0;
   var $146=$145$0;
   var $147=$145$1;
   var $148=(($__h_sroa_0_0)|(0))==0;
   if ($148) { var $_0 = $147;var $_01 = $146;label = 57; break; } else { label = 45; break; }
  case 45: 
   var $150=$__h_sroa_0_0;
   _free($150);
   var $_0 = $147;var $_01 = $146;label = 57; break;
  case 46: 
   var $152;
   var $__h_sroa_0_1;
   var $__mb_0;
   var $153=(($__iob+4)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=$152 & 1;
   var $156=(($155 << 24) >> 24)==0;
   if ($156) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $158=(($__digits+8)|0);
   var $159=HEAP32[(($158)>>2)];
   var $164 = $159;var $163 = $159;label = 49; break;
  case 48: 
   var $161=(($__digits+4)|0);
   var $162=(($__digits+4)|0);
   var $164 = $162;var $163 = $161;label = 49; break;
  case 49: 
   var $163;
   var $164;
   var $165=(($152)&(255));
   var $166=$165 & 1;
   var $167=(($166)|(0))==0;
   if ($167) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $169=(($__digits+4)|0);
   var $170=HEAP32[(($169)>>2)];
   var $173 = $170;label = 52; break;
  case 51: 
   var $172=$165 >>> 1;
   var $173 = $172;label = 52; break;
  case 52: 
   var $173;
   var $174=(($164+($173<<2))|0);
   var $175=HEAP32[(($__dp)>>2)];
   var $176=HEAP32[(($__ts)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0, $__mi, $__me, $154, $163, $174, $29, $58, $tmpcast, $175, $176, $__grp, $__sym, $__sn, $71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { var $__h_sroa_0_0 = $__h_sroa_0_1;label = 44; break; }
  case 53: 
   var $178=(($__s)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($3)|0);
   HEAP32[(($180)>>2)]=$179;
   var $181=HEAP32[(($__mi)>>2)];
   var $182=HEAP32[(($__me)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $3, $__mb_0, $181, $182, $__iob, $__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { var $__h_sroa_0_0 = $__h_sroa_0_1;label = 44; break; }
  case 54: 
   var $184=(($__h_sroa_0_1)|(0))==0;
   if ($184) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $186=$__h_sroa_0_1;
   _free($186);
   label = 56; break;
  case 56: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $187=HEAP32[(($4)>>2)];
   var $188=(($187)|0);
   var $189=__ZNSt3__114__shared_count16__release_sharedEv($188);
   STACKTOP = sp;
   return;
  case 57: 
   var $_01;
   var $_0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   var $_1 = $_0;var $_12 = $_01;label = 58; break;
  case 58: 
   var $_12;
   var $_1;
   var $191=HEAP32[(($4)>>2)];
   var $192=(($191)|0);
   var $193=__ZNSt3__114__shared_count16__release_sharedEv($192);
   var $194$0=$_12;
   var $194$1=0;
   var $195$0=$194$0;
   var $195$1=$_1;
   ___resumeException($195$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2=$__nm;
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__nm+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $12 = $8;label = 4; break;
  case 3: 
   var $10=$__nm;
   var $11=(($10+1)|0);
   var $12 = $11;label = 4; break;
  case 4: 
   var $12;
   var $13=_catopen($12, 1);
   var $14=$13;
   var $not_=(($13)|(0))!=-1;
   var $15=(($not_)&(1));
   var $_=$14 >>> (($15)>>>(0));
   return $_;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__ndflt=sp;
   var $0=$__ndflt;
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $agg_result14=$agg_result;
   var $1=$__dflt;
   var $2=$__dflt;
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__dflt+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $13 = $8;var $12 = $8;label = 4; break;
  case 3: 
   var $10=(($1+1)|0);
   var $11=(($1+1)|0);
   var $13 = $11;var $12 = $10;label = 4; break;
  case 4: 
   var $12;
   var $13;
   var $14=(($3)&(255));
   var $15=$14 & 1;
   var $16=(($15)|(0))==0;
   if ($16) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $18=(($__dflt+4)|0);
   var $19=HEAP32[(($18)>>2)];
   var $22 = $19;label = 7; break;
  case 6: 
   var $21=$14 >>> 1;
   var $22 = $21;label = 7; break;
  case 7: 
   var $22;
   var $23=(($13+$22)|0);
   var $24=(($12)>>>(0)) < (($23)>>>(0));
   if ($24) { var $_011 = $12;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $25=(($__c)|(0))==-1;
   var $26=$__c << 1;
   var $27=$26;
   var $28=$25 ? -1 : $27;
   var $43 = $28;label = 16; break;
  case 9: 
   var $_011;
   var $29=HEAP8[($_011)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, $29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $30=(($_011+1)|0);
   var $31=(($30)>>>(0)) < (($23)>>>(0));
   if ($31) { var $_011 = $30;label = 9; break; } else { label = 11; break; }
  case 11: 
   var $_pre=HEAP8[($0)];
   var $phitmp=$_pre & 1;
   var $phitmp15=(($phitmp << 24) >> 24)==0;
   var $32=(($__c)|(0))==-1;
   var $33=$__c << 1;
   var $34=$33;
   var $35=$32 ? -1 : $34;
   if ($phitmp15) { var $43 = $35;label = 16; break; } else { label = 15; break; }
  case 12: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 14; break;
  case 13: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 14; break;
  case 14: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $37=$lpad_phi$0;
   var $38=$lpad_phi$1;
   var $_04 = $38;var $_05 = $37;label = 23; break;
  case 15: 
   var $40=(($__ndflt+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $47 = $41;var $46 = $35;label = 17; break;
  case 16: 
   var $43;
   var $44=$__ndflt;
   var $45=(($44+1)|0);
   var $47 = $45;var $46 = $43;label = 17; break;
  case 17: 
   var $46;
   var $47;
   var $48 = (function() { try { __THREW__ = 0; return _catgets($46, $__set, $__msgid, $47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 13; break; }
  case 18: 
   HEAP32[(($agg_result14)>>2)]=0; HEAP32[((($agg_result14)+(4))>>2)]=0; HEAP32[((($agg_result14)+(8))>>2)]=0;
   var $50=_strlen($48);
   var $51=(($48+$50)|0);
   var $52=(($50)|(0)) > 0;
   if ($52) { var $_029 = $48;label = 19; break; } else { label = 22; break; }
  case 19: 
   var $_029;
   var $53=HEAP8[($_029)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result, $53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $54=(($_029+1)|0);
   var $55=(($54)>>>(0)) < (($51)>>>(0));
   if ($55) { var $_029 = $54;label = 19; break; } else { label = 22; break; }
  case 21: 
   var $57$0 = ___cxa_find_matching_catch(-1, -1); $57$1 = tempRet0;
   var $58=$57$0;
   var $59=$57$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
   var $_04 = $59;var $_05 = $58;label = 23; break;
  case 22: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;
   return;
  case 23: 
   var $_05;
   var $_04;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   var $61$0=$_05;
   var $61$1=0;
   var $62$0=$61$0;
   var $62$1=$_04;
   ___resumeException($62$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 var label = 0;
 var $1=(($__c)|(0))==-1;
 var $2=$__c << 1;
 var $3=$2;
 var $4=$1 ? -1 : $3;
 var $5=_catclose($4);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2=$__nm;
   var $3=HEAP8[($2)];
   var $4=$3 & 1;
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($__nm+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $12 = $8;label = 4; break;
  case 3: 
   var $10=$__nm;
   var $11=(($10+1)|0);
   var $12 = $11;label = 4; break;
  case 4: 
   var $12;
   var $13=_catopen($12, 1);
   var $14=$13;
   var $not_=(($13)|(0))!=-1;
   var $15=(($not_)&(1));
   var $_=$14 >>> (($15)>>>(0));
   return $_;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__mb_i10=sp;
   var $__buf_i12=(sp)+(8);
   var $__bn_i13=(sp)+(40);
   var $__wn_i=(sp)+(48);
   var $__mb_i=(sp)+(56);
   var $__buf_i=(sp)+(64);
   var $__bn_i=(sp)+(192);
   var $__nn_i=(sp)+(200);
   var $__ndflt=(sp)+(208);
   var $0=$__ndflt;
   var $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
   var $agg_result43=$agg_result;
   var $tmpcast=$__mb_i10;
   var $tmpcast9=$__mb_i;
   var $3=(($1)|0);
   var $4=(($1)|0);
   var $5=(($1+4)|0);
   HEAP32[(($5)>>2)]=0;
   HEAP32[(($4)>>2)]=(((4048)|0));
   var $6=$__dflt;
   var $7=HEAP8[($6)];
   var $8=$7 & 1;
   var $9=(($8 << 24) >> 24)==0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($__dflt+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $17 = $12;var $16 = $12;label = 4; break;
  case 3: 
   var $14=(($__dflt+4)|0);
   var $15=(($__dflt+4)|0);
   var $17 = $15;var $16 = $14;label = 4; break;
  case 4: 
   var $16;
   var $17;
   var $18=(($7)&(255));
   var $19=$18 & 1;
   var $20=(($19)|(0))==0;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $22=(($__dflt+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $26 = $23;label = 7; break;
  case 6: 
   var $25=$18 >>> 1;
   var $26 = $25;label = 7; break;
  case 7: 
   var $26;
   var $27=(($17+($26<<2))|0);
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $st$1$0=(($__mb_i10)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($__mb_i10+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $28=(($16)>>>(0)) < (($27)>>>(0));
   if ($28) { label = 8; break; } else { label = 21; break; }
  case 8: 
   var $29=$1;
   var $30=(($__buf_i12)|0);
   var $31=(($__buf_i12+32)|0);
   var $_040 = $16;var $33 = (((4048)|0));label = 9; break;
  case 9: 
   var $33;
   var $_040;
   HEAP32[(($__wn_i)>>2)]=$_040;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($3, $tmpcast, $_040, $27, $__wn_i, $30, $31, $__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 24; break; }
  case 10: 
   var $37=(($36)|(0))==2;
   var $38=HEAP32[(($__wn_i)>>2)];
   var $39=(($38)|(0))==(($_040)|(0));
   var $or_cond11=$37 | $39;
   if ($or_cond11) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $40=HEAP32[(($__bn_i13)>>2)];
   var $41=(($30)>>>(0)) < (($40)>>>(0));
   if ($41) { var $__p_i14_035 = $30;label = 16; break; } else { var $53 = $38;label = 19; break; }
  case 12: 
   var $43=___cxa_allocate_exception(8);
   var $44=$43;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($44, ((904)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   (function() { try { __THREW__ = 0; return ___cxa_throw($43, 8456, (44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 25; break; }
  case 14: 
   throw "Reached an unreachable!";
  case 15: 
   var $47$0 = ___cxa_find_matching_catch(-1, -1); $47$1 = tempRet0;
   ___cxa_free_exception($43);
   var $eh_lpad_body$1 = $47$1;var $eh_lpad_body$0 = $47$0;label = 26; break;
  case 16: 
   var $__p_i14_035;
   var $48=HEAP8[($__p_i14_035)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, $48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $49=(($__p_i14_035+1)|0);
   var $50=HEAP32[(($__bn_i13)>>2)];
   var $51=(($49)>>>(0)) < (($50)>>>(0));
   if ($51) { var $__p_i14_035 = $49;label = 16; break; } else { label = 18; break; }
  case 18: 
   var $_pre44=HEAP32[(($__wn_i)>>2)];
   var $53 = $_pre44;label = 19; break;
  case 19: 
   var $53;
   var $54=(($53)>>>(0)) < (($27)>>>(0));
   if ($54) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $_pre47=HEAP32[(($29)>>2)];
   var $_040 = $53;var $33 = $_pre47;label = 9; break;
  case 21: 
   var $55=(($1)|0);
   __ZNSt3__114__shared_countD2Ev($55);
   var $56=(($__c)|(0))==-1;
   var $57=$__c << 1;
   var $58=$57;
   var $59=$56 ? -1 : $58;
   var $60=HEAP8[($0)];
   var $61=$60 & 1;
   var $62=(($61 << 24) >> 24)==0;
   if ($62) { label = 28; break; } else { label = 27; break; }
  case 22: 
   var $64$0 = ___cxa_find_matching_catch(-1, -1); $64$1 = tempRet0;
   var $65=$64$0;
   var $66=$64$1;
   var $_03 = $66;var $_04 = $65;label = 49; break;
  case 23: 
   var $lpad_loopexit33$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit33$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit33$1;var $eh_lpad_body$0 = $lpad_loopexit33$0;label = 26; break;
  case 24: 
   var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit37$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_loopexit37$1;var $eh_lpad_body$0 = $lpad_loopexit37$0;label = 26; break;
  case 25: 
   var $lpad_nonloopexit38$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit38$1 = tempRet0;
   var $eh_lpad_body$1 = $lpad_nonloopexit38$1;var $eh_lpad_body$0 = $lpad_nonloopexit38$0;label = 26; break;
  case 26: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $67=$eh_lpad_body$0;
   var $68=$eh_lpad_body$1;
   var $69=(($1)|0);
   __ZNSt3__114__shared_countD2Ev($69);
   var $_03 = $68;var $_04 = $67;label = 49; break;
  case 27: 
   var $71=(($__ndflt+8)|0);
   var $72=HEAP32[(($71)>>2)];
   var $76 = $72;label = 29; break;
  case 28: 
   var $74=$__ndflt;
   var $75=(($74+1)|0);
   var $76 = $75;label = 29; break;
  case 29: 
   var $76;
   var $77 = (function() { try { __THREW__ = 0; return _catgets($59, $__set, $__msgid, $76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 22; break; }
  case 30: 
   HEAP32[(($agg_result43)>>2)]=0; HEAP32[((($agg_result43)+(4))>>2)]=0; HEAP32[((($agg_result43)+(8))>>2)]=0;
   var $79=(($2)|0);
   var $80=(($2)|0);
   var $81=(($2+4)|0);
   HEAP32[(($81)>>2)]=0;
   HEAP32[(($80)>>2)]=(((3992)|0));
   var $82=_strlen($77);
   var $83=(($77+$82)|0);
   var $$etemp$3$0=0;
   var $$etemp$3$1=0;
   var $st$4$0=(($__mb_i)|0);
   HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
   var $st$5$1=(($__mb_i+4)|0);
   HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
   var $84=(($82)|(0)) < 1;
   if ($84) { label = 44; break; } else { label = 31; break; }
  case 31: 
   var $85=$2;
   var $86=$83;
   var $87=(($__buf_i)|0);
   var $88=(($__buf_i+128)|0);
   var $_0228 = $77;var $90 = (((3992)|0));label = 32; break;
  case 32: 
   var $90;
   var $_0228;
   HEAP32[(($__nn_i)>>2)]=$_0228;
   var $91=(($90+16)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$_0228;
   var $94=((($86)-($93))|0);
   var $95=(($94)|(0)) > 32;
   var $96=(($_0228+32)|0);
   var $97=$95 ? $96 : $83;
   var $98 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($79, $tmpcast9, $_0228, $97, $__nn_i, $87, $88, $__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 46; break; }
  case 33: 
   var $99=(($98)|(0))==2;
   var $100=HEAP32[(($__nn_i)>>2)];
   var $101=(($100)|(0))==(($_0228)|(0));
   var $or_cond14=$99 | $101;
   if ($or_cond14) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $102=HEAP32[(($__bn_i)>>2)];
   var $103=(($87)>>>(0)) < (($102)>>>(0));
   if ($103) { var $__p_i_024 = $87;label = 39; break; } else { var $115 = $100;label = 42; break; }
  case 35: 
   var $105=___cxa_allocate_exception(8);
   var $106=$105;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($106, ((904)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 38; break; }
  case 36: 
   (function() { try { __THREW__ = 0; return ___cxa_throw($105, 8456, (44)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 47; break; }
  case 37: 
   throw "Reached an unreachable!";
  case 38: 
   var $109$0 = ___cxa_find_matching_catch(-1, -1); $109$1 = tempRet0;
   ___cxa_free_exception($105);
   var $eh_lpad_body21$1 = $109$1;var $eh_lpad_body21$0 = $109$0;label = 48; break;
  case 39: 
   var $__p_i_024;
   var $110=HEAP32[(($__p_i_024)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result, $110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 45; break; }
  case 40: 
   var $111=(($__p_i_024+4)|0);
   var $112=HEAP32[(($__bn_i)>>2)];
   var $113=(($111)>>>(0)) < (($112)>>>(0));
   if ($113) { var $__p_i_024 = $111;label = 39; break; } else { label = 41; break; }
  case 41: 
   var $_pre=HEAP32[(($__nn_i)>>2)];
   var $115 = $_pre;label = 42; break;
  case 42: 
   var $115;
   var $116=(($115)>>>(0)) < (($83)>>>(0));
   if ($116) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $_pre46=HEAP32[(($85)>>2)];
   var $_0228 = $115;var $90 = $_pre46;label = 32; break;
  case 44: 
   var $117=(($2)|0);
   __ZNSt3__114__shared_countD2Ev($117);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;
   return;
  case 45: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $eh_lpad_body21$1 = $lpad_loopexit$1;var $eh_lpad_body21$0 = $lpad_loopexit$0;label = 48; break;
  case 46: 
   var $lpad_loopexit25$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit25$1 = tempRet0;
   var $eh_lpad_body21$1 = $lpad_loopexit25$1;var $eh_lpad_body21$0 = $lpad_loopexit25$0;label = 48; break;
  case 47: 
   var $lpad_nonloopexit26$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit26$1 = tempRet0;
   var $eh_lpad_body21$1 = $lpad_nonloopexit26$1;var $eh_lpad_body21$0 = $lpad_nonloopexit26$0;label = 48; break;
  case 48: 
   var $eh_lpad_body21$0;
   var $eh_lpad_body21$1;
   var $118=$eh_lpad_body21$0;
   var $119=$eh_lpad_body21$1;
   var $120=(($2)|0);
   __ZNSt3__114__shared_countD2Ev($120);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
   var $_03 = $119;var $_04 = $118;label = 49; break;
  case 49: 
   var $_04;
   var $_03;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   var $122$0=$_04;
   var $122$1=0;
   var $123$0=$122$0;
   var $123$1=$_03;
   ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 var label = 0;
 var $1=(($__c)|(0))==-1;
 var $2=$__c << 1;
 var $3=$2;
 var $4=$1 ? -1 : $3;
 var $5=_catclose($4);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((3512)|0));
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=HEAP8[(14264)];
   var $5=(($4 << 24) >> 24)==0;
   if ($5) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $7=___cxa_guard_acquire(14264);
   var $8=(($7)|(0))==0;
   if ($8) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $10 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   HEAP32[((12160)>>2)]=$10;
   label = 6; break;
  case 5: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1,0); $13$1 = tempRet0;
   label = 9; break;
  case 6: 
   var $15=HEAP32[((12160)>>2)];
   var $16=(($3)|(0))==(($15)|(0));
   if ($16) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $18=HEAP32[(($2)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $20$0 = ___cxa_find_matching_catch(-1, -1,0); $20$1 = tempRet0;
   label = 9; break;
  case 9: 
   var $21=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($21);
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 10: 
   var $23=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($23);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=___cxa_allocate_exception(8);
   var $2=$1;
   (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2, ((1384)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=$1;
   HEAP32[(($3)>>2)]=((2448)|0);
   ___cxa_throw($1, 8472, (74));
   throw "Reached an unreachable!";
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1); $5$1 = tempRet0;
   ___cxa_free_exception($1);
   ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i_i116=sp;
   var $__p_i_i_i112=(sp)+(16);
   var $__p_i_i_i108=(sp)+(32);
   var $__p_i_i_i101=(sp)+(48);
   var $__p_i_i_i95=(sp)+(64);
   var $__p_i_i_i91=(sp)+(80);
   var $__p_i_i_i87=(sp)+(96);
   var $__p_i_i_i83=(sp)+(112);
   var $__p_i_i_i79=(sp)+(128);
   var $__p_i_i_i75=(sp)+(144);
   var $__p_i_i_i71=(sp)+(160);
   var $__p_i_i_i67=(sp)+(176);
   var $__p_i_i_i63=(sp)+(192);
   var $__p_i_i_i59=(sp)+(208);
   var $__p_i_i_i55=(sp)+(224);
   var $__p_i_i_i51=(sp)+(240);
   var $__p_i_i_i47=(sp)+(256);
   var $__p_i_i_i43=(sp)+(272);
   var $__p_i_i_i39=(sp)+(288);
   var $__p_i_i_i35=(sp)+(304);
   var $__p_i_i_i31=(sp)+(320);
   var $__p_i_i_i27=(sp)+(336);
   var $__p_i_i_i23=(sp)+(352);
   var $__p_i_i_i19=(sp)+(368);
   var $__p_i_i_i15=(sp)+(384);
   var $__p_i_i_i11=(sp)+(400);
   var $__p_i_i_i7=(sp)+(416);
   var $__p_i_i_i=(sp)+(432);
   var $1=((($refs)-(1))|0);
   var $2=(($this)|0);
   var $3=(($this+4)|0);
   HEAP32[(($3)>>2)]=$1;
   HEAP32[(($2)>>2)]=(((3768)|0));
   var $4=(($this+8)|0);
   var $5=(($this+12)|0);
   var $6=(($this+16)|0);
   var $7=(($this+136)|0);
   HEAP8[($7)]=1;
   var $8=(($this+24)|0);
   var $9=$8;
   HEAP32[(($5)>>2)]=$9;
   HEAP32[(($4)>>2)]=$9;
   var $10=(($8+112)|0);
   var $11=$10;
   HEAP32[(($6)>>2)]=$11;
   var $_0_i2_i = 28;var $13 = $9;label = 2; break;
  case 2: 
   var $13;
   var $_0_i2_i;
   var $14=(($13)|(0))==0;
   if ($14) { var $16 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   HEAP32[(($13)>>2)]=0;
   var $_pre2_i_i=HEAP32[(($5)>>2)];
   var $16 = $_pre2_i_i;label = 4; break;
  case 4: 
   var $16;
   var $17=(($16+4)|0);
   HEAP32[(($5)>>2)]=$17;
   var $18=((($_0_i2_i)-(1))|0);
   var $19=(($18)|(0))==0;
   if ($19) { label = 5; break; } else { var $_0_i2_i = $18;var $13 = $17;label = 2; break; }
  case 5: 
   var $20=(($this+144)|0);
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($20, ((1376)|0), 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 110; break; }
  case 6: 
   var $21=HEAP32[(($4)>>2)];
   var $22=HEAP32[(($5)>>2)];
   var $23=(($21)|(0))==(($22)|(0));
   if ($23) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $24=$21;
   var $scevgep=((($22)-(4))|0);
   var $scevgep120=$scevgep;
   var $25=(((-$24))|0);
   var $uglygep=(($scevgep120+$25)|0);
   var $uglygep121=$uglygep;
   var $26=$uglygep121 >>> 2;
   var $27=$26 ^ -1;
   var $scevgep122=(($22+($27<<2))|0);
   HEAP32[(($5)>>2)]=$scevgep122;
   label = 8; break;
  case 8: 
   HEAP32[(((((12388)|0)))>>2)]=0;
   HEAP32[((12384)>>2)]=((3472)|0);
   var $29=$__p_i_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $30=HEAP32[((((13384)|0))>>2)];
   var $31=(($30)|(0))==-1;
   if ($31) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $33=(($__p_i_i_i)|0);
   HEAP32[(($33)>>2)]=13384;
   var $34=(($__p_i_i_i+4)|0);
   HEAP32[(($34)>>2)]=(26);
   var $35=(($__p_i_i_i+8)|0);
   HEAP32[(($35)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13384)|0), $29, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 111; break; }
  case 10: 
   var $36=HEAP32[((((13388)|0))>>2)];
   var $37=((($36)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12384, $37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 111; break; }
  case 11: 
   HEAP32[(((((12380)|0)))>>2)]=0;
   HEAP32[((12376)>>2)]=((3432)|0);
   var $39=$__p_i_i_i7;
   var $$etemp$2$0=12;
   var $$etemp$2$1=0;
   var $40=HEAP32[((((13376)|0))>>2)];
   var $41=(($40)|(0))==-1;
   if ($41) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $43=(($__p_i_i_i7)|0);
   HEAP32[(($43)>>2)]=13376;
   var $44=(($__p_i_i_i7+4)|0);
   HEAP32[(($44)>>2)]=(26);
   var $45=(($__p_i_i_i7+8)|0);
   HEAP32[(($45)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13376)|0), $39, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 111; break; }
  case 13: 
   var $46=HEAP32[((((13380)|0))>>2)];
   var $47=((($46)-(1))|0);
   var $$etemp$3$0=12;
   var $$etemp$3$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12376, $47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 111; break; }
  case 14: 
   HEAP32[(((((12604)|0)))>>2)]=0;
   HEAP32[((12600)>>2)]=(((3880)|0));
   HEAP32[(((((12608)|0)))>>2)]=0;
   HEAP8[((((12612)|0))|0)]=0;
   var $48 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $50$0 = ___cxa_find_matching_catch(-1, -1,0); $50$1 = tempRet0;
   var $51=$50$0;
   ___clang_call_terminate($51);
   throw "Reached an unreachable!";
  case 16: 
   var $53=HEAP32[(($48)>>2)];
   HEAP32[(((((12608)|0)))>>2)]=$53;
   var $54=$__p_i_i_i11;
   var $$etemp$4$0=12;
   var $$etemp$4$1=0;
   var $55=HEAP32[((((13704)|0))>>2)];
   var $56=(($55)|(0))==-1;
   if ($56) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $58=(($__p_i_i_i11)|0);
   HEAP32[(($58)>>2)]=13704;
   var $59=(($__p_i_i_i11+4)|0);
   HEAP32[(($59)>>2)]=(26);
   var $60=(($__p_i_i_i11+8)|0);
   HEAP32[(($60)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13704)|0), $54, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 111; break; }
  case 18: 
   var $61=HEAP32[((((13708)|0))>>2)];
   var $62=((($61)-(1))|0);
   var $$etemp$5$0=12;
   var $$etemp$5$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12600, $62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 111; break; }
  case 19: 
   HEAP32[(((((12596)|0)))>>2)]=0;
   HEAP32[((12592)>>2)]=((3800)|0);
   var $64=$__p_i_i_i15;
   var $$etemp$6$0=12;
   var $$etemp$6$1=0;
   var $65=HEAP32[((((13696)|0))>>2)];
   var $66=(($65)|(0))==-1;
   if ($66) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $68=(($__p_i_i_i15)|0);
   HEAP32[(($68)>>2)]=13696;
   var $69=(($__p_i_i_i15+4)|0);
   HEAP32[(($69)>>2)]=(26);
   var $70=(($__p_i_i_i15+8)|0);
   HEAP32[(($70)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13696)|0), $64, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 111; break; }
  case 21: 
   var $71=HEAP32[((((13700)|0))>>2)];
   var $72=((($71)-(1))|0);
   var $$etemp$7$0=12;
   var $$etemp$7$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12592, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 111; break; }
  case 22: 
   HEAP32[(((((12412)|0)))>>2)]=0;
   HEAP32[((12408)>>2)]=((3568)|0);
   var $74=$__p_i_i_i19;
   var $$etemp$8$0=12;
   var $$etemp$8$1=0;
   var $75=HEAP32[((((13400)|0))>>2)];
   var $76=(($75)|(0))==-1;
   if ($76) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $78=(($__p_i_i_i19)|0);
   HEAP32[(($78)>>2)]=13400;
   var $79=(($__p_i_i_i19+4)|0);
   HEAP32[(($79)>>2)]=(26);
   var $80=(($__p_i_i_i19+8)|0);
   HEAP32[(($80)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13400)|0), $74, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 111; break; }
  case 24: 
   var $81=HEAP32[((((13404)|0))>>2)];
   var $82=((($81)-(1))|0);
   var $$etemp$9$0=12;
   var $$etemp$9$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12408, $82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 111; break; }
  case 25: 
   HEAP32[(((((12396)|0)))>>2)]=0;
   HEAP32[((12392)>>2)]=(((3512)|0));
   var $83=HEAP8[(14264)];
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { label = 26; break; } else { label = 30; break; }
  case 26: 
   var $86=___cxa_guard_acquire(14264);
   var $87=(($86)|(0))==0;
   if ($87) { label = 30; break; } else { label = 27; break; }
  case 27: 
   var $89 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 29; break; }
  case 28: 
   HEAP32[((12160)>>2)]=$89;
   label = 30; break;
  case 29: 
   var $91$0 = ___cxa_find_matching_catch(-1, -1); $91$1 = tempRet0;
   __ZNSt3__114__shared_countD2Ev(12392);
   var $eh_lpad_body$1 = $91$1;var $eh_lpad_body$0 = $91$0;label = 112; break;
  case 30: 
   var $93=HEAP32[((12160)>>2)];
   HEAP32[(((((12400)|0)))>>2)]=$93;
   var $94=$__p_i_i_i23;
   var $$etemp$10$0=12;
   var $$etemp$10$1=0;
   var $95=HEAP32[((((13392)|0))>>2)];
   var $96=(($95)|(0))==-1;
   if ($96) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $98=(($__p_i_i_i23)|0);
   HEAP32[(($98)>>2)]=13392;
   var $99=(($__p_i_i_i23+4)|0);
   HEAP32[(($99)>>2)]=(26);
   var $100=(($__p_i_i_i23+8)|0);
   HEAP32[(($100)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13392)|0), $94, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 111; break; }
  case 32: 
   var $101=HEAP32[((((13396)|0))>>2)];
   var $102=((($101)-(1))|0);
   var $$etemp$11$0=12;
   var $$etemp$11$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12392, $102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 111; break; }
  case 33: 
   HEAP32[(((((12420)|0)))>>2)]=0;
   HEAP32[((12416)>>2)]=((3624)|0);
   var $104=$__p_i_i_i27;
   var $$etemp$12$0=12;
   var $$etemp$12$1=0;
   var $105=HEAP32[((((13408)|0))>>2)];
   var $106=(($105)|(0))==-1;
   if ($106) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $108=(($__p_i_i_i27)|0);
   HEAP32[(($108)>>2)]=13408;
   var $109=(($__p_i_i_i27+4)|0);
   HEAP32[(($109)>>2)]=(26);
   var $110=(($__p_i_i_i27+8)|0);
   HEAP32[(($110)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13408)|0), $104, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 111; break; }
  case 35: 
   var $111=HEAP32[((((13412)|0))>>2)];
   var $112=((($111)-(1))|0);
   var $$etemp$13$0=12;
   var $$etemp$13$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12416, $112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 111; break; }
  case 36: 
   HEAP32[(((((12428)|0)))>>2)]=0;
   HEAP32[((12424)>>2)]=((3680)|0);
   var $114=$__p_i_i_i31;
   var $$etemp$14$0=12;
   var $$etemp$14$1=0;
   var $115=HEAP32[((((13416)|0))>>2)];
   var $116=(($115)|(0))==-1;
   if ($116) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $118=(($__p_i_i_i31)|0);
   HEAP32[(($118)>>2)]=13416;
   var $119=(($__p_i_i_i31+4)|0);
   HEAP32[(($119)>>2)]=(26);
   var $120=(($__p_i_i_i31+8)|0);
   HEAP32[(($120)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13416)|0), $114, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 111; break; }
  case 38: 
   var $121=HEAP32[((((13420)|0))>>2)];
   var $122=((($121)-(1))|0);
   var $$etemp$15$0=12;
   var $$etemp$15$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12424, $122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 111; break; }
  case 39: 
   HEAP32[(((((12308)|0)))>>2)]=0;
   HEAP32[((12304)>>2)]=(((2976)|0));
   HEAP8[((((12312)|0))|0)]=46;
   HEAP8[((((12313)|0))|0)]=44;
   HEAP32[((((12316)|0))>>2)]=0; HEAP32[(((((12316)|0))+(4))>>2)]=0; HEAP32[(((((12316)|0))+(8))>>2)]=0;
   var $124=$__p_i_i_i35;
   var $$etemp$16$0=12;
   var $$etemp$16$1=0;
   var $125=HEAP32[((((13320)|0))>>2)];
   var $126=(($125)|(0))==-1;
   if ($126) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $128=(($__p_i_i_i35)|0);
   HEAP32[(($128)>>2)]=13320;
   var $129=(($__p_i_i_i35+4)|0);
   HEAP32[(($129)>>2)]=(26);
   var $130=(($__p_i_i_i35+8)|0);
   HEAP32[(($130)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13320)|0), $124, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 111; break; }
  case 41: 
   var $131=HEAP32[((((13324)|0))>>2)];
   var $132=((($131)-(1))|0);
   var $$etemp$17$0=12;
   var $$etemp$17$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12304, $132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 111; break; }
  case 42: 
   HEAP32[(((((12276)|0)))>>2)]=0;
   HEAP32[((12272)>>2)]=(((2928)|0));
   HEAP32[(((((12280)|0)))>>2)]=46;
   HEAP32[(((((12284)|0)))>>2)]=44;
   HEAP32[((((12288)|0))>>2)]=0; HEAP32[(((((12288)|0))+(4))>>2)]=0; HEAP32[(((((12288)|0))+(8))>>2)]=0;
   var $134=$__p_i_i_i39;
   var $$etemp$18$0=12;
   var $$etemp$18$1=0;
   var $135=HEAP32[((((13312)|0))>>2)];
   var $136=(($135)|(0))==-1;
   if ($136) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $138=(($__p_i_i_i39)|0);
   HEAP32[(($138)>>2)]=13312;
   var $139=(($__p_i_i_i39+4)|0);
   HEAP32[(($139)>>2)]=(26);
   var $140=(($__p_i_i_i39+8)|0);
   HEAP32[(($140)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13312)|0), $134, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 111; break; }
  case 44: 
   var $141=HEAP32[((((13316)|0))>>2)];
   var $142=((($141)-(1))|0);
   var $$etemp$19$0=12;
   var $$etemp$19$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12272, $142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 111; break; }
  case 45: 
   HEAP32[(((((12372)|0)))>>2)]=0;
   HEAP32[((12368)>>2)]=((3360)|0);
   var $144=$__p_i_i_i43;
   var $$etemp$20$0=12;
   var $$etemp$20$1=0;
   var $145=HEAP32[((((13368)|0))>>2)];
   var $146=(($145)|(0))==-1;
   if ($146) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $148=(($__p_i_i_i43)|0);
   HEAP32[(($148)>>2)]=13368;
   var $149=(($__p_i_i_i43+4)|0);
   HEAP32[(($149)>>2)]=(26);
   var $150=(($__p_i_i_i43+8)|0);
   HEAP32[(($150)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13368)|0), $144, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 111; break; }
  case 47: 
   var $151=HEAP32[((((13372)|0))>>2)];
   var $152=((($151)-(1))|0);
   var $$etemp$21$0=12;
   var $$etemp$21$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12368, $152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 111; break; }
  case 48: 
   HEAP32[(((((12364)|0)))>>2)]=0;
   HEAP32[((12360)>>2)]=((3288)|0);
   var $154=$__p_i_i_i47;
   var $$etemp$22$0=12;
   var $$etemp$22$1=0;
   var $155=HEAP32[((((13360)|0))>>2)];
   var $156=(($155)|(0))==-1;
   if ($156) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $158=(($__p_i_i_i47)|0);
   HEAP32[(($158)>>2)]=13360;
   var $159=(($__p_i_i_i47+4)|0);
   HEAP32[(($159)>>2)]=(26);
   var $160=(($__p_i_i_i47+8)|0);
   HEAP32[(($160)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13360)|0), $154, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 111; break; }
  case 50: 
   var $161=HEAP32[((((13364)|0))>>2)];
   var $162=((($161)-(1))|0);
   var $$etemp$23$0=12;
   var $$etemp$23$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12360, $162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 111; break; }
  case 51: 
   HEAP32[(((((12356)|0)))>>2)]=0;
   HEAP32[((12352)>>2)]=((3224)|0);
   var $164=$__p_i_i_i51;
   var $$etemp$24$0=12;
   var $$etemp$24$1=0;
   var $165=HEAP32[((((13352)|0))>>2)];
   var $166=(($165)|(0))==-1;
   if ($166) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $168=(($__p_i_i_i51)|0);
   HEAP32[(($168)>>2)]=13352;
   var $169=(($__p_i_i_i51+4)|0);
   HEAP32[(($169)>>2)]=(26);
   var $170=(($__p_i_i_i51+8)|0);
   HEAP32[(($170)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13352)|0), $164, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 111; break; }
  case 53: 
   var $171=HEAP32[((((13356)|0))>>2)];
   var $172=((($171)-(1))|0);
   var $$etemp$25$0=12;
   var $$etemp$25$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12352, $172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 111; break; }
  case 54: 
   HEAP32[(((((12348)|0)))>>2)]=0;
   HEAP32[((12344)>>2)]=((3160)|0);
   var $174=$__p_i_i_i55;
   var $$etemp$26$0=12;
   var $$etemp$26$1=0;
   var $175=HEAP32[((((13344)|0))>>2)];
   var $176=(($175)|(0))==-1;
   if ($176) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $178=(($__p_i_i_i55)|0);
   HEAP32[(($178)>>2)]=13344;
   var $179=(($__p_i_i_i55+4)|0);
   HEAP32[(($179)>>2)]=(26);
   var $180=(($__p_i_i_i55+8)|0);
   HEAP32[(($180)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13344)|0), $174, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 56; break; } else { label = 111; break; }
  case 56: 
   var $181=HEAP32[((((13348)|0))>>2)];
   var $182=((($181)-(1))|0);
   var $$etemp$27$0=12;
   var $$etemp$27$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12344, $182) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 111; break; }
  case 57: 
   HEAP32[(((((12644)|0)))>>2)]=0;
   HEAP32[((12640)>>2)]=((4856)|0);
   var $184=$__p_i_i_i59;
   var $$etemp$28$0=12;
   var $$etemp$28$1=0;
   var $185=HEAP32[((((14184)|0))>>2)];
   var $186=(($185)|(0))==-1;
   if ($186) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $188=(($__p_i_i_i59)|0);
   HEAP32[(($188)>>2)]=14184;
   var $189=(($__p_i_i_i59+4)|0);
   HEAP32[(($189)>>2)]=(26);
   var $190=(($__p_i_i_i59+8)|0);
   HEAP32[(($190)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((14184)|0), $184, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 111; break; }
  case 59: 
   var $191=HEAP32[((((14188)|0))>>2)];
   var $192=((($191)-(1))|0);
   var $$etemp$29$0=12;
   var $$etemp$29$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12640, $192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 111; break; }
  case 60: 
   HEAP32[(((((12636)|0)))>>2)]=0;
   HEAP32[((12632)>>2)]=((4792)|0);
   var $194=$__p_i_i_i63;
   var $$etemp$30$0=12;
   var $$etemp$30$1=0;
   var $195=HEAP32[((((14176)|0))>>2)];
   var $196=(($195)|(0))==-1;
   if ($196) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $198=(($__p_i_i_i63)|0);
   HEAP32[(($198)>>2)]=14176;
   var $199=(($__p_i_i_i63+4)|0);
   HEAP32[(($199)>>2)]=(26);
   var $200=(($__p_i_i_i63+8)|0);
   HEAP32[(($200)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((14176)|0), $194, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 111; break; }
  case 62: 
   var $201=HEAP32[((((14180)|0))>>2)];
   var $202=((($201)-(1))|0);
   var $$etemp$31$0=12;
   var $$etemp$31$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12632, $202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 63; break; } else { label = 111; break; }
  case 63: 
   HEAP32[(((((12628)|0)))>>2)]=0;
   HEAP32[((12624)>>2)]=((4728)|0);
   var $204=$__p_i_i_i67;
   var $$etemp$32$0=12;
   var $$etemp$32$1=0;
   var $205=HEAP32[((((14168)|0))>>2)];
   var $206=(($205)|(0))==-1;
   if ($206) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $208=(($__p_i_i_i67)|0);
   HEAP32[(($208)>>2)]=14168;
   var $209=(($__p_i_i_i67+4)|0);
   HEAP32[(($209)>>2)]=(26);
   var $210=(($__p_i_i_i67+8)|0);
   HEAP32[(($210)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((14168)|0), $204, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 65; break; } else { label = 111; break; }
  case 65: 
   var $211=HEAP32[((((14172)|0))>>2)];
   var $212=((($211)-(1))|0);
   var $$etemp$33$0=12;
   var $$etemp$33$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12624, $212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 66; break; } else { label = 111; break; }
  case 66: 
   HEAP32[(((((12620)|0)))>>2)]=0;
   HEAP32[((12616)>>2)]=((4664)|0);
   var $214=$__p_i_i_i71;
   var $$etemp$34$0=12;
   var $$etemp$34$1=0;
   var $215=HEAP32[((((14160)|0))>>2)];
   var $216=(($215)|(0))==-1;
   if ($216) { label = 68; break; } else { label = 67; break; }
  case 67: 
   var $218=(($__p_i_i_i71)|0);
   HEAP32[(($218)>>2)]=14160;
   var $219=(($__p_i_i_i71+4)|0);
   HEAP32[(($219)>>2)]=(26);
   var $220=(($__p_i_i_i71+8)|0);
   HEAP32[(($220)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((14160)|0), $214, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 68; break; } else { label = 111; break; }
  case 68: 
   var $221=HEAP32[((((14164)|0))>>2)];
   var $222=((($221)-(1))|0);
   var $$etemp$35$0=12;
   var $$etemp$35$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12616, $222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 111; break; }
  case 69: 
   HEAP32[(((((12204)|0)))>>2)]=0;
   HEAP32[((12200)>>2)]=((2632)|0);
   var $224=$__p_i_i_i75;
   var $$etemp$36$0=12;
   var $$etemp$36$1=0;
   var $225=HEAP32[((((13272)|0))>>2)];
   var $226=(($225)|(0))==-1;
   if ($226) { label = 71; break; } else { label = 70; break; }
  case 70: 
   var $228=(($__p_i_i_i75)|0);
   HEAP32[(($228)>>2)]=13272;
   var $229=(($__p_i_i_i75+4)|0);
   HEAP32[(($229)>>2)]=(26);
   var $230=(($__p_i_i_i75+8)|0);
   HEAP32[(($230)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13272)|0), $224, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 111; break; }
  case 71: 
   var $231=HEAP32[((((13276)|0))>>2)];
   var $232=((($231)-(1))|0);
   var $$etemp$37$0=12;
   var $$etemp$37$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12200, $232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 111; break; }
  case 72: 
   HEAP32[(((((12196)|0)))>>2)]=0;
   HEAP32[((12192)>>2)]=((2592)|0);
   var $234=$__p_i_i_i79;
   var $$etemp$38$0=12;
   var $$etemp$38$1=0;
   var $235=HEAP32[((((13264)|0))>>2)];
   var $236=(($235)|(0))==-1;
   if ($236) { label = 74; break; } else { label = 73; break; }
  case 73: 
   var $238=(($__p_i_i_i79)|0);
   HEAP32[(($238)>>2)]=13264;
   var $239=(($__p_i_i_i79+4)|0);
   HEAP32[(($239)>>2)]=(26);
   var $240=(($__p_i_i_i79+8)|0);
   HEAP32[(($240)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13264)|0), $234, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 74; break; } else { label = 111; break; }
  case 74: 
   var $241=HEAP32[((((13268)|0))>>2)];
   var $242=((($241)-(1))|0);
   var $$etemp$39$0=12;
   var $$etemp$39$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12192, $242) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 75; break; } else { label = 111; break; }
  case 75: 
   HEAP32[(((((12188)|0)))>>2)]=0;
   HEAP32[((12184)>>2)]=((2552)|0);
   var $244=$__p_i_i_i83;
   var $$etemp$40$0=12;
   var $$etemp$40$1=0;
   var $245=HEAP32[((((13256)|0))>>2)];
   var $246=(($245)|(0))==-1;
   if ($246) { label = 77; break; } else { label = 76; break; }
  case 76: 
   var $248=(($__p_i_i_i83)|0);
   HEAP32[(($248)>>2)]=13256;
   var $249=(($__p_i_i_i83+4)|0);
   HEAP32[(($249)>>2)]=(26);
   var $250=(($__p_i_i_i83+8)|0);
   HEAP32[(($250)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13256)|0), $244, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 77; break; } else { label = 111; break; }
  case 77: 
   var $251=HEAP32[((((13260)|0))>>2)];
   var $252=((($251)-(1))|0);
   var $$etemp$41$0=12;
   var $$etemp$41$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12184, $252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 78; break; } else { label = 111; break; }
  case 78: 
   HEAP32[(((((12180)|0)))>>2)]=0;
   HEAP32[((12176)>>2)]=((2512)|0);
   var $254=$__p_i_i_i87;
   var $$etemp$42$0=12;
   var $$etemp$42$1=0;
   var $255=HEAP32[((((13248)|0))>>2)];
   var $256=(($255)|(0))==-1;
   if ($256) { label = 80; break; } else { label = 79; break; }
  case 79: 
   var $258=(($__p_i_i_i87)|0);
   HEAP32[(($258)>>2)]=13248;
   var $259=(($__p_i_i_i87+4)|0);
   HEAP32[(($259)>>2)]=(26);
   var $260=(($__p_i_i_i87+8)|0);
   HEAP32[(($260)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13248)|0), $254, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 80; break; } else { label = 111; break; }
  case 80: 
   var $261=HEAP32[((((13252)|0))>>2)];
   var $262=((($261)-(1))|0);
   var $$etemp$43$0=12;
   var $$etemp$43$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12176, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 111; break; }
  case 81: 
   HEAP32[(((((12260)|0)))>>2)]=0;
   HEAP32[((12256)>>2)]=((2832)|0);
   HEAP32[(((((12264)|0)))>>2)]=((2880)|0);
   var $264=$__p_i_i_i91;
   var $$etemp$44$0=12;
   var $$etemp$44$1=0;
   var $265=HEAP32[((((13304)|0))>>2)];
   var $266=(($265)|(0))==-1;
   if ($266) { label = 83; break; } else { label = 82; break; }
  case 82: 
   var $268=(($__p_i_i_i91)|0);
   HEAP32[(($268)>>2)]=13304;
   var $269=(($__p_i_i_i91+4)|0);
   HEAP32[(($269)>>2)]=(26);
   var $270=(($__p_i_i_i91+8)|0);
   HEAP32[(($270)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13304)|0), $264, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 83; break; } else { label = 111; break; }
  case 83: 
   var $271=HEAP32[((((13308)|0))>>2)];
   var $272=((($271)-(1))|0);
   var $$etemp$45$0=12;
   var $$etemp$45$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12256, $272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 84; break; } else { label = 111; break; }
  case 84: 
   HEAP32[(((((12244)|0)))>>2)]=0;
   HEAP32[((12240)>>2)]=((2736)|0);
   HEAP32[(((((12248)|0)))>>2)]=((2784)|0);
   var $274=$__p_i_i_i95;
   var $$etemp$46$0=12;
   var $$etemp$46$1=0;
   var $275=HEAP32[((((13296)|0))>>2)];
   var $276=(($275)|(0))==-1;
   if ($276) { label = 86; break; } else { label = 85; break; }
  case 85: 
   var $278=(($__p_i_i_i95)|0);
   HEAP32[(($278)>>2)]=13296;
   var $279=(($__p_i_i_i95+4)|0);
   HEAP32[(($279)>>2)]=(26);
   var $280=(($__p_i_i_i95+8)|0);
   HEAP32[(($280)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13296)|0), $274, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 86; break; } else { label = 111; break; }
  case 86: 
   var $281=HEAP32[((((13300)|0))>>2)];
   var $282=((($281)-(1))|0);
   var $$etemp$47$0=12;
   var $$etemp$47$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12240, $282) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 87; break; } else { label = 111; break; }
  case 87: 
   HEAP32[(((((12228)|0)))>>2)]=0;
   HEAP32[((12224)>>2)]=((3736)|0);
   var $283=HEAP8[(14264)];
   var $284=(($283 << 24) >> 24)==0;
   if ($284) { label = 88; break; } else { label = 92; break; }
  case 88: 
   var $286=___cxa_guard_acquire(14264);
   var $287=(($286)|(0))==0;
   if ($287) { label = 92; break; } else { label = 89; break; }
  case 89: 
   var $289 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 90; break; } else { label = 91; break; }
  case 90: 
   HEAP32[((12160)>>2)]=$289;
   label = 92; break;
  case 91: 
   var $291$0 = ___cxa_find_matching_catch(-1, -1); $291$1 = tempRet0;
   __ZNSt3__114__shared_countD2Ev(12224);
   var $eh_lpad_body$1 = $291$1;var $eh_lpad_body$0 = $291$0;label = 112; break;
  case 92: 
   var $293=HEAP32[((12160)>>2)];
   HEAP32[(((((12232)|0)))>>2)]=$293;
   HEAP32[((12224)>>2)]=((2704)|0);
   var $294=$__p_i_i_i101;
   var $$etemp$48$0=12;
   var $$etemp$48$1=0;
   var $295=HEAP32[((((13288)|0))>>2)];
   var $296=(($295)|(0))==-1;
   if ($296) { label = 94; break; } else { label = 93; break; }
  case 93: 
   var $298=(($__p_i_i_i101)|0);
   HEAP32[(($298)>>2)]=13288;
   var $299=(($__p_i_i_i101+4)|0);
   HEAP32[(($299)>>2)]=(26);
   var $300=(($__p_i_i_i101+8)|0);
   HEAP32[(($300)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13288)|0), $294, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 94; break; } else { label = 111; break; }
  case 94: 
   var $301=HEAP32[((((13292)|0))>>2)];
   var $302=((($301)-(1))|0);
   var $$etemp$49$0=12;
   var $$etemp$49$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12224, $302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 95; break; } else { label = 111; break; }
  case 95: 
   HEAP32[(((((12212)|0)))>>2)]=0;
   HEAP32[((12208)>>2)]=((3736)|0);
   var $303=HEAP8[(14264)];
   var $304=(($303 << 24) >> 24)==0;
   if ($304) { label = 96; break; } else { label = 100; break; }
  case 96: 
   var $306=___cxa_guard_acquire(14264);
   var $307=(($306)|(0))==0;
   if ($307) { label = 100; break; } else { label = 97; break; }
  case 97: 
   var $309 = (function() { try { __THREW__ = 0; return _newlocale(2147483647, ((1376)|0), 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 98; break; } else { label = 99; break; }
  case 98: 
   HEAP32[((12160)>>2)]=$309;
   label = 100; break;
  case 99: 
   var $311$0 = ___cxa_find_matching_catch(-1, -1); $311$1 = tempRet0;
   __ZNSt3__114__shared_countD2Ev(12208);
   var $eh_lpad_body$1 = $311$1;var $eh_lpad_body$0 = $311$0;label = 112; break;
  case 100: 
   var $313=HEAP32[((12160)>>2)];
   HEAP32[(((((12216)|0)))>>2)]=$313;
   HEAP32[((12208)>>2)]=((2672)|0);
   var $314=$__p_i_i_i108;
   var $$etemp$50$0=12;
   var $$etemp$50$1=0;
   var $315=HEAP32[((((13280)|0))>>2)];
   var $316=(($315)|(0))==-1;
   if ($316) { label = 102; break; } else { label = 101; break; }
  case 101: 
   var $318=(($__p_i_i_i108)|0);
   HEAP32[(($318)>>2)]=13280;
   var $319=(($__p_i_i_i108+4)|0);
   HEAP32[(($319)>>2)]=(26);
   var $320=(($__p_i_i_i108+8)|0);
   HEAP32[(($320)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13280)|0), $314, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 102; break; } else { label = 111; break; }
  case 102: 
   var $321=HEAP32[((((13284)|0))>>2)];
   var $322=((($321)-(1))|0);
   var $$etemp$51$0=12;
   var $$etemp$51$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12208, $322) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 103; break; } else { label = 111; break; }
  case 103: 
   HEAP32[(((((12340)|0)))>>2)]=0;
   HEAP32[((12336)>>2)]=((3064)|0);
   var $324=$__p_i_i_i112;
   var $$etemp$52$0=12;
   var $$etemp$52$1=0;
   var $325=HEAP32[((((13336)|0))>>2)];
   var $326=(($325)|(0))==-1;
   if ($326) { label = 105; break; } else { label = 104; break; }
  case 104: 
   var $328=(($__p_i_i_i112)|0);
   HEAP32[(($328)>>2)]=13336;
   var $329=(($__p_i_i_i112+4)|0);
   HEAP32[(($329)>>2)]=(26);
   var $330=(($__p_i_i_i112+8)|0);
   HEAP32[(($330)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13336)|0), $324, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 105; break; } else { label = 111; break; }
  case 105: 
   var $331=HEAP32[((((13340)|0))>>2)];
   var $332=((($331)-(1))|0);
   var $$etemp$53$0=12;
   var $$etemp$53$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12336, $332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 106; break; } else { label = 111; break; }
  case 106: 
   HEAP32[(((((12332)|0)))>>2)]=0;
   HEAP32[((12328)>>2)]=((3024)|0);
   var $334=$__p_i_i_i116;
   var $$etemp$54$0=12;
   var $$etemp$54$1=0;
   var $335=HEAP32[((((13328)|0))>>2)];
   var $336=(($335)|(0))==-1;
   if ($336) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $338=(($__p_i_i_i116)|0);
   HEAP32[(($338)>>2)]=13328;
   var $339=(($__p_i_i_i116+4)|0);
   HEAP32[(($339)>>2)]=(26);
   var $340=(($__p_i_i_i116+8)|0);
   HEAP32[(($340)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(((13328)|0), $334, 256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 108; break; } else { label = 111; break; }
  case 108: 
   var $341=HEAP32[((((13332)|0))>>2)];
   var $342=((($341)-(1))|0);
   var $$etemp$55$0=12;
   var $$etemp$55$1=0;
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 12328, $342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 109; break; } else { label = 111; break; }
  case 109: 
   STACKTOP = sp;
   return;
  case 110: 
   var $344$0 = ___cxa_find_matching_catch(-1, -1); $344$1 = tempRet0;
   var $345=$344$0;
   var $346=$344$1;
   var $_0 = $346;var $_02 = $345;label = 113; break;
  case 111: 
   var $348$0 = ___cxa_find_matching_catch(-1, -1); $348$1 = tempRet0;
   var $eh_lpad_body$1 = $348$1;var $eh_lpad_body$0 = $348$0;label = 112; break;
  case 112: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $349=$eh_lpad_body$0;
   var $350=$eh_lpad_body$1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($20);
   var $_0 = $350;var $_02 = $349;label = 113; break;
  case 113: 
   var $_02;
   var $_0;
   var $352=HEAP32[(($4)>>2)];
   var $353=$352;
   var $354=(($352)|(0))==0;
   if ($354) { label = 119; break; } else { label = 114; break; }
  case 114: 
   var $355=HEAP32[(($5)>>2)];
   var $356=(($352)|(0))==(($355)|(0));
   if ($356) { label = 116; break; } else { label = 115; break; }
  case 115: 
   var $scevgep_i_i_i=((($355)-(4))|0);
   var $scevgep2_i_i_i=$scevgep_i_i_i;
   var $357=(((-$353))|0);
   var $uglygep_i_i_i=(($scevgep2_i_i_i+$357)|0);
   var $uglygep3_i_i_i=$uglygep_i_i_i;
   var $358=$uglygep3_i_i_i >>> 2;
   var $359=$358 ^ -1;
   var $scevgep4_i_i_i=(($355+($359<<2))|0);
   HEAP32[(($5)>>2)]=$scevgep4_i_i_i;
   label = 116; break;
  case 116: 
   var $360=(($this+24)|0);
   var $361=$360;
   var $362=(($352)|(0))==(($361)|(0));
   if ($362) { label = 117; break; } else { label = 118; break; }
  case 117: 
   HEAP8[($7)]=0;
   label = 119; break;
  case 118: 
   var $365=$352;
   __ZdlPv($365);
   label = 119; break;
  case 119: 
   var $366=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($366);
   var $367$0=$_02;
   var $367$1=0;
   var $368$0=$367$0;
   var $368$1=$_0;
   ___resumeException($368$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($f)|0);
   __ZNSt3__114__shared_count12__add_sharedEv($1);
   var $2=(($this+8)|0);
   var $3=(($this+12)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($2)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$4;
   var $8=$6;
   var $9=((($7)-($8))|0);
   var $10=$9 >> 2;
   var $11=(($10)>>>(0)) > (($id)>>>(0));
   if ($11) { var $30 = $6;label = 11; break; } else { label = 2; break; }
  case 2: 
   var $13=((($id)+(1))|0);
   var $14=(($10)>>>(0)) < (($13)>>>(0));
   if ($14) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $16=((($13)-($10))|0);
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $_pre2=HEAP32[(($5)>>2)];
   var $30 = $_pre2;label = 11; break;
  case 5: 
   var $18=(($10)>>>(0)) > (($13)>>>(0));
   if ($18) { label = 6; break; } else { var $30 = $6;label = 11; break; }
  case 6: 
   var $20=(($6+($13<<2))|0);
   var $21=(($20)|(0))==(($4)|(0));
   if ($21) { var $30 = $6;label = 11; break; } else { label = 7; break; }
  case 7: 
   var $scevgep_i=((($4)-(4))|0);
   var $scevgep2_i=$scevgep_i;
   var $scevgep34_i=$20;
   var $22=(((-$scevgep34_i))|0);
   var $uglygep_i=(($scevgep2_i+$22)|0);
   var $uglygep5_i=$uglygep_i;
   var $23=$uglygep5_i >>> 2;
   var $24=$23 ^ -1;
   var $scevgep6_i=(($4+($24<<2))|0);
   HEAP32[(($3)>>2)]=$scevgep6_i;
   var $30 = $6;label = 11; break;
  case 8: 
   var $26$0 = ___cxa_find_matching_catch(-1, -1); $26$1 = tempRet0;
   var $27=(($f)|(0))==0;
   if ($27) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $29=__ZNSt3__114__shared_count16__release_sharedEv($1);
   label = 10; break;
  case 10: 
   ___resumeException($26$0)
  case 11: 
   var $30;
   var $31=(($30+($id<<2))|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==0;
   if ($33) { var $37 = $30;label = 13; break; } else { label = 12; break; }
  case 12: 
   var $35=(($32)|0);
   var $36=__ZNSt3__114__shared_count16__release_sharedEv($35);
   var $_pre=HEAP32[(($5)>>2)];
   var $37 = $_pre;label = 13; break;
  case 13: 
   var $37;
   var $38=(($37+($id<<2))|0);
   HEAP32[(($38)>>2)]=$f;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this) {
 var label = 0;
 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((3768)|0));
   var $2=(($this+12)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($this+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3)|(0))==(($5)|(0));
   if ($6) { label = 5; break; } else { var $i_01 = 0;var $8 = $5;var $7 = $3;label = 2; break; }
  case 2: 
   var $7;
   var $8;
   var $i_01;
   var $9=(($8+($i_01<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { var $17 = $7;var $16 = $8;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=(($10)|0);
   var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
   var $_pre=HEAP32[(($2)>>2)];
   var $_pre2=HEAP32[(($4)>>2)];
   var $17 = $_pre;var $16 = $_pre2;label = 4; break;
  case 4: 
   var $16;
   var $17;
   var $18=((($i_01)+(1))|0);
   var $19=$17;
   var $20=$16;
   var $21=((($19)-($20))|0);
   var $22=$21 >> 2;
   var $23=(($18)>>>(0)) < (($22)>>>(0));
   if ($23) { var $i_01 = $18;var $8 = $16;var $7 = $17;label = 2; break; } else { label = 5; break; }
  case 5: 
   var $24=(($this+144)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
   var $25=HEAP32[(($4)>>2)];
   var $26=$25;
   var $27=(($25)|(0))==0;
   if ($27) { label = 11; break; } else { label = 6; break; }
  case 6: 
   var $28=HEAP32[(($2)>>2)];
   var $29=(($25)|(0))==(($28)|(0));
   if ($29) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $scevgep_i_i_i=((($28)-(4))|0);
   var $scevgep2_i_i_i=$scevgep_i_i_i;
   var $30=(((-$26))|0);
   var $uglygep_i_i_i=(($scevgep2_i_i_i+$30)|0);
   var $uglygep3_i_i_i=$uglygep_i_i_i;
   var $31=$uglygep3_i_i_i >>> 2;
   var $32=$31 ^ -1;
   var $scevgep4_i_i_i=(($28+($32<<2))|0);
   HEAP32[(($2)>>2)]=$scevgep4_i_i_i;
   label = 8; break;
  case 8: 
   var $33=(($this+24)|0);
   var $34=$33;
   var $35=(($25)|(0))==(($34)|(0));
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=(($this+136)|0);
   HEAP8[($37)]=0;
   label = 11; break;
  case 10: 
   var $39=$25;
   __ZdlPv($39);
   label = 11; break;
  case 11: 
   var $40=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($40);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale8__globalEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14248)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14248);
   var $5=(($4)|(0))==0;
   if ($5) { label = 8; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14256)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14256);
   var $11=(($10)|(0))==0;
   if ($11) { label = 7; break; } else { label = 5; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(12432, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
  case 6: 
   HEAP32[((12144)>>2)]=12432;
   HEAP32[((12136)>>2)]=12144;
   label = 7; break;
  case 7: 
   var $15=HEAP32[((12136)>>2)];
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   HEAP32[((12152)>>2)]=$17;
   var $18=(($17)|0);
   __ZNSt3__114__shared_count12__add_sharedEv($18);
   HEAP32[((12128)>>2)]=12152;
   label = 8; break;
  case 8: 
   var $20=HEAP32[((12128)>>2)];
   return $20;
  case 9: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
   ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=(($this)|0);
   var $4=(($1)|0);
   var $5=HEAP32[(($4)>>2)];
   HEAP32[(($3)>>2)]=$5;
   var $6=(($5)|0);
   __ZNSt3__114__shared_count12__add_sharedEv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1,0); $8$1 = tempRet0;
   var $9=$8$0;
   ___clang_call_terminate($9);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2ERKS0_($this, $l) {
 var label = 0;
 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $__p_i_i=sp;
   var $1=(($this)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$__p_i_i;
   var $$etemp$0$0=12;
   var $$etemp$0$1=0;
   var $4=(($x)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==-1;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($__p_i_i)|0);
   HEAP32[(($8)>>2)]=$x;
   var $9=(($__p_i_i+4)|0);
   HEAP32[(($9)>>2)]=(26);
   var $10=(($__p_i_i+8)|0);
   HEAP32[(($10)>>2)]=0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($4, $3, 256);
   label = 3; break;
  case 3: 
   var $11=(($x+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)-(1))|0);
   var $$etemp$1$0=12;
   var $$etemp$1$1=0;
   var $14=(($2+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($2+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$15;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$20 >> 2;
   var $22=(($21)>>>(0)) > (($13)>>>(0));
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($17+($13<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=___cxa_allocate_exception(4);
   var $27=$26;
   __ZNSt8bad_castC2Ev($27);
   ___cxa_throw($26, 8440, (356));
   throw "Reached an unreachable!";
  case 6: 
   STACKTOP = sp;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facetD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|(0))==0;
   if ($1) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=$this;
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+4)|0);
   var $6=HEAP32[(($5)>>2)];
   FUNCTION_TABLE[$6]($this);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this) {
 var label = 0;
 var $1=(tempValue=HEAP32[((13424)>>2)],HEAP32[((13424)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $isascii=(($c)>>>(0)) < 128;
   if ($isascii) { label = 2; break; } else { var $11 = 0;label = 5; break; }
  case 2: 
   var $2 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   ___clang_call_terminate($5);
   throw "Reached an unreachable!";
  case 4: 
   var $6=HEAP32[(($2)>>2)];
   var $7=(($6+($c<<1))|0);
   var $8=HEAP16[(($7)>>1)];
   var $9=$8 & $m;
   var $phitmp=(($9 << 16) >> 16)!=0;
   var $11 = $phitmp;label = 5; break;
  case 5: 
   var $11;
   return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_01_lcssa = $low;label = 7; break; } else { var $_013 = $low;var $_04 = $vec;label = 2; break; }
  case 2: 
   var $_04;
   var $_013;
   var $2=HEAP32[(($_013)>>2)];
   var $isascii=(($2)>>>(0)) < 128;
   if ($isascii) { label = 3; break; } else { var $_off0 = 0;label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=HEAP32[(($4)>>2)];
   var $9=(($8+($2<<1))|0);
   var $10=HEAP16[(($9)>>1)];
   var $_off0 = $10;label = 6; break;
  case 6: 
   var $_off0;
   HEAP16[(($_04)>>1)]=$_off0;
   var $12=(($_013+4)|0);
   var $13=(($_04+2)|0);
   var $14=(($12)|(0))==(($high)|(0));
   if ($14) { var $_01_lcssa = $high;label = 7; break; } else { var $_013 = $12;var $_04 = $13;label = 2; break; }
  case 7: 
   var $_01_lcssa;
   return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_02 = $low;label = 2; break; }
  case 2: 
   var $_02;
   var $2=HEAP32[(($_02)>>2)];
   var $isascii=(($2)>>>(0)) < 128;
   if ($isascii) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=HEAP32[(($4)>>2)];
   var $9=(($8+($2<<1))|0);
   var $10=HEAP16[(($9)>>1)];
   var $11=$10 & $m;
   var $12=(($11 << 16) >> 16)==0;
   if ($12) { label = 6; break; } else { var $_0_lcssa = $_02;label = 7; break; }
  case 6: 
   var $14=(($_02+4)|0);
   var $15=(($14)|(0))==(($high)|(0));
   if ($15) { var $_0_lcssa = $high;label = 7; break; } else { var $_02 = $14;label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_02 = $low;label = 3; break; }
  case 2: 
   var $3=(($15)|(0))==(($high)|(0));
   if ($3) { var $_0_lcssa = $high;label = 7; break; } else { var $_02 = $15;label = 3; break; }
  case 3: 
   var $_02;
   var $4=HEAP32[(($_02)>>2)];
   var $isascii=(($4)>>>(0)) < 128;
   if ($isascii) { label = 4; break; } else { var $_0_lcssa = $_02;label = 7; break; }
  case 4: 
   var $6 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1,0); $8$1 = tempRet0;
   var $9=$8$0;
   ___clang_call_terminate($9);
   throw "Reached an unreachable!";
  case 6: 
   var $10=HEAP32[(($6)>>2)];
   var $11=(($10+($4<<1))|0);
   var $12=HEAP16[(($11)>>1)];
   var $13=$12 & $m;
   var $14=(($13 << 16) >> 16)==0;
   var $15=(($_02+4)|0);
   if ($14) { var $_0_lcssa = $_02;label = 7; break; } else { label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $isascii=(($c)>>>(0)) < 128;
   if ($isascii) { label = 2; break; } else { var $10 = $c;label = 5; break; }
  case 2: 
   var $2 = (function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   ___clang_call_terminate($5);
   throw "Reached an unreachable!";
  case 4: 
   var $6=HEAP32[(($2)>>2)];
   var $7=(($6+($c<<2))|0);
   var $8=HEAP32[(($7)>>2)];
   var $10 = $8;label = 5; break;
  case 5: 
   var $10;
   return $10;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_02 = $low;label = 2; break; }
  case 2: 
   var $_02;
   var $2=HEAP32[(($_02)>>2)];
   var $isascii=(($2)>>>(0)) < 128;
   if ($isascii) { label = 3; break; } else { var $12 = $2;label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=HEAP32[(($4)>>2)];
   var $9=(($8+($2<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $12 = $10;label = 6; break;
  case 6: 
   var $12;
   HEAP32[(($_02)>>2)]=$12;
   var $13=(($_02+4)|0);
   var $14=(($13)|(0))==(($high)|(0));
   if ($14) { var $_0_lcssa = $high;label = 7; break; } else { var $_02 = $13;label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $isascii=(($c)>>>(0)) < 128;
   if ($isascii) { label = 2; break; } else { var $10 = $c;label = 5; break; }
  case 2: 
   var $2 = (function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   ___clang_call_terminate($5);
   throw "Reached an unreachable!";
  case 4: 
   var $6=HEAP32[(($2)>>2)];
   var $7=(($6+($c<<2))|0);
   var $8=HEAP32[(($7)>>2)];
   var $10 = $8;label = 5; break;
  case 5: 
   var $10;
   return $10;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_02 = $low;label = 2; break; }
  case 2: 
   var $_02;
   var $2=HEAP32[(($_02)>>2)];
   var $isascii=(($2)>>>(0)) < 128;
   if ($isascii) { label = 3; break; } else { var $12 = $2;label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=HEAP32[(($4)>>2)];
   var $9=(($8+($2<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $12 = $10;label = 6; break;
  case 6: 
   var $12;
   HEAP32[(($_02)>>2)]=$12;
   var $13=(($_02+4)|0);
   var $14=(($13)|(0))==(($high)|(0));
   if ($14) { var $_0_lcssa = $high;label = 7; break; } else { var $_02 = $13;label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 var label = 0;
 var $1=(($c << 24) >> 24);
 return $1;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_01_lcssa = $low;label = 3; break; } else { var $_012 = $low;var $_03 = $dest;label = 2; break; }
  case 2: 
   var $_03;
   var $_012;
   var $2=HEAP8[($_012)];
   var $3=(($2 << 24) >> 24);
   HEAP32[(($_03)>>2)]=$3;
   var $4=(($_012+1)|0);
   var $5=(($_03+4)|0);
   var $6=(($4)|(0))==(($high)|(0));
   if ($6) { var $_01_lcssa = $high;label = 3; break; } else { var $_012 = $4;var $_03 = $5;label = 2; break; }
  case 3: 
   var $_01_lcssa;
   return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 var label = 0;
 var $isascii=(($c)>>>(0)) < 128;
 var $1=(($c) & 255);
 var $_0=$isascii ? $1 : $dfault;
 return $_0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_01_lcssa = $low;label = 5; break; } else { label = 2; break; }
  case 2: 
   var $low5=$low;
   var $scevgep=((($high)-(4))|0);
   var $scevgep4=$scevgep;
   var $2=(((-$low5))|0);
   var $uglygep=(($scevgep4+$2)|0);
   var $uglygep6=$uglygep;
   var $3=$uglygep6 >>> 2;
   var $4=((($3)+(1))|0);
   var $_012 = $low;var $_03 = $dest;label = 3; break;
  case 3: 
   var $_03;
   var $_012;
   var $6=HEAP32[(($_012)>>2)];
   var $isascii=(($6)>>>(0)) < 128;
   var $7=(($6) & 255);
   var $_dfault=$isascii ? $7 : $dfault;
   HEAP8[($_03)]=$_dfault;
   var $8=(($_012+4)|0);
   var $9=(($_03+1)|0);
   var $10=(($8)|(0))==(($high)|(0));
   if ($10) { label = 4; break; } else { var $_012 = $8;var $_03 = $9;label = 3; break; }
  case 4: 
   var $scevgep7=(($low+($4<<2))|0);
   var $_01_lcssa = $scevgep7;label = 5; break;
  case 5: 
   var $_01_lcssa;
   return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((3880)|0));
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+12)|0);
   var $7=HEAP8[($6)];
   var $8=$7 & 1;
   var $9=(($8 << 24) >> 24)==0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $11=$3;
   __ZdaPv($11);
   label = 4; break;
  case 4: 
   var $12=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($12);
   var $13=$this;
   __ZdlPv($13);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   HEAP32[(($1)>>2)]=(((3880)|0));
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $6=(($this+12)|0);
   var $7=HEAP8[($6)];
   var $8=$7 & 1;
   var $9=(($8 << 24) >> 24)==0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $11=$3;
   __ZdaPv($11);
   label = 4; break;
  case 4: 
   var $13=(($this)|0);
   __ZNSt3__114__shared_countD2Ev($13);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $isascii1=(($c << 24) >> 24) > -1;
   if ($isascii1) { label = 2; break; } else { var $12 = $c;label = 5; break; }
  case 2: 
   var $2 = (function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   ___clang_call_terminate($5);
   throw "Reached an unreachable!";
  case 4: 
   var $6=(($c)&(255));
   var $7=HEAP32[(($2)>>2)];
   var $8=(($7+($6<<2))|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9) & 255);
   var $12 = $10;label = 5; break;
  case 5: 
   var $12;
   return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_03 = $low;label = 2; break; }
  case 2: 
   var $_03;
   var $2=HEAP8[($_03)];
   var $isascii1=(($2 << 24) >> 24) > -1;
   if ($isascii1) { label = 3; break; } else { var $14 = $2;label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=(($2 << 24) >> 24);
   var $9=HEAP32[(($4)>>2)];
   var $10=(($9+($8<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11) & 255);
   var $14 = $12;label = 6; break;
  case 6: 
   var $14;
   HEAP8[($_03)]=$14;
   var $15=(($_03+1)|0);
   var $16=(($15)|(0))==(($high)|(0));
   if ($16) { var $_0_lcssa = $high;label = 7; break; } else { var $_03 = $15;label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $isascii1=(($c << 24) >> 24) > -1;
   if ($isascii1) { label = 2; break; } else { var $12 = $c;label = 5; break; }
  case 2: 
   var $2 = (function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   ___clang_call_terminate($5);
   throw "Reached an unreachable!";
  case 4: 
   var $6=(($c << 24) >> 24);
   var $7=HEAP32[(($2)>>2)];
   var $8=(($7+($6<<2))|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9) & 255);
   var $12 = $10;label = 5; break;
  case 5: 
   var $12;
   return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_0_lcssa = $low;label = 7; break; } else { var $_03 = $low;label = 2; break; }
  case 2: 
   var $_03;
   var $2=HEAP8[($_03)];
   var $isascii1=(($2 << 24) >> 24) > -1;
   if ($isascii1) { label = 3; break; } else { var $14 = $2;label = 6; break; }
  case 3: 
   var $4 = (function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $6$0 = ___cxa_find_matching_catch(-1, -1,0); $6$1 = tempRet0;
   var $7=$6$0;
   ___clang_call_terminate($7);
   throw "Reached an unreachable!";
  case 5: 
   var $8=(($2 << 24) >> 24);
   var $9=HEAP32[(($4)>>2)];
   var $10=(($9+($8<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11) & 255);
   var $14 = $12;label = 6; break;
  case 6: 
   var $14;
   HEAP8[($_03)]=$14;
   var $15=(($_03+1)|0);
   var $16=(($15)|(0))==(($high)|(0));
   if ($16) { var $_0_lcssa = $high;label = 7; break; } else { var $_03 = $15;label = 2; break; }
  case 7: 
   var $_0_lcssa;
   return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 var label = 0;
 return $c;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_01_lcssa = $low;label = 3; break; } else { var $_012 = $low;var $_03 = $dest;label = 2; break; }
  case 2: 
   var $_03;
   var $_012;
   var $2=HEAP8[($_012)];
   HEAP8[($_03)]=$2;
   var $3=(($_012+1)|0);
   var $4=(($_03+1)|0);
   var $5=(($3)|(0))==(($high)|(0));
   if ($5) { var $_01_lcssa = $high;label = 3; break; } else { var $_012 = $3;var $_03 = $4;label = 2; break; }
  case 3: 
   var $_01_lcssa;
   return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 var label = 0;
 var $isascii1=(($c << 24) >> 24) > -1;
 var $c_dfault=$isascii1 ? $c : $dfault;
 return $c_dfault;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($low)|(0))==(($high)|(0));
   if ($1) { var $_01_lcssa = $low;label = 3; break; } else { var $_013 = $low;var $_04 = $dest;label = 2; break; }
  case 2: 
   var $_04;
   var $_013;
   var $2=HEAP8[($_013)];
   var $isascii2=(($2 << 24) >> 24) > -1;
   var $_dfault=$isascii2 ? $2 : $dfault;
   HEAP8[($_04)]=$_dfault;
   var $3=(($_013+1)|0);
   var $4=(($_04+1)|0);
   var $5=(($3)|(0))==(($high)|(0));
   if ($5) { var $_01_lcssa = $high;label = 3; break; } else { var $_013 = $3;var $_04 = $4;label = 2; break; }
  case 3: 
   var $_01_lcssa;
   return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 var label = 0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 var label = 0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 var label = 0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 var label = 0;
 var $1=$end;
 var $2=$frm;
 var $3=((($1)-($2))|0);
 var $4=(($3)>>>(0)) < (($mx)>>>(0));
 var $5=$4 ? $3 : $mx;
 return $5;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 var label = 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $save_state=sp;
   var $tmpcast=$save_state;
   var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1=(($frm)|(0))==(($frm_end)|(0));
   if ($1) { label = 2; break; } else { var $fend_049 = $frm;label = 4; break; }
  case 2: 
   HEAP32[(($to_nxt)>>2)]=$to;
   HEAP32[(($frm_nxt)>>2)]=$frm;
   var $119 = $frm;label = 50; break;
  case 3: 
   var $3=(($6)|(0))==(($frm_end)|(0));
   if ($3) { var $fend_0_lcssa = $frm_end;label = 5; break; } else { var $fend_049 = $6;label = 4; break; }
  case 4: 
   var $fend_049;
   var $4=HEAP32[(($fend_049)>>2)];
   var $5=(($4)|(0))==0;
   var $6=(($fend_049+4)|0);
   if ($5) { var $fend_0_lcssa = $fend_049;label = 5; break; } else { label = 3; break; }
  case 5: 
   var $fend_0_lcssa;
   HEAP32[(($to_nxt)>>2)]=$to;
   HEAP32[(($frm_nxt)>>2)]=$frm;
   var $7=(($to)|(0))==(($to_end)|(0));
   var $or_cond43=$1 | $7;
   if ($or_cond43) { var $119 = $frm;label = 50; break; } else { label = 6; break; }
  case 6: 
   var $8=$st;
   var $9=$to_end;
   var $10=(($this+8)|0);
   var $11=(($tmp)|0);
   var $_0244 = $to;var $_0145 = $frm;var $fend_146 = $fend_0_lcssa;label = 7; break;
  case 7: 
   var $fend_146;
   var $_0145;
   var $_0244;
   var $ld$0$0=(($8)|0);
   var $13$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($8+4)|0);
   var $13$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($save_state)|0);
   HEAP32[(($st$2$0)>>2)]=$13$0;
   var $st$3$1=(($save_state+4)|0);
   HEAP32[(($st$3$1)>>2)]=$13$1;
   var $14=$fend_146;
   var $15=$_0145;
   var $16=((($14)-($15))|0);
   var $17=$16 >> 2;
   var $18=$_0244;
   var $19=((($9)-($18))|0);
   var $20=HEAP32[(($10)>>2)];
   var $21=_uselocale($20);
   var $22 = (function() { try { __THREW__ = 0; return _wcsnrtombs($_0244, $frm_nxt, $17, $19, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $24=(($21)|(0))==0;
   if ($24) { label = 15; break; } else { label = 9; break; }
  case 9: 
   var $26 = (function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 10; break; }
  case 10: 
   var $28$0 = ___cxa_find_matching_catch(-1, -1,0); $28$1 = tempRet0;
   var $29=$28$0;
   ___clang_call_terminate($29);
   throw "Reached an unreachable!";
  case 11: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   var $32=(($21)|(0))==0;
   if ($32) { label = 14; break; } else { label = 12; break; }
  case 12: 
   var $34 = (function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $36$0 = ___cxa_find_matching_catch(-1, -1,0); $36$1 = tempRet0;
   var $37=$36$0;
   ___clang_call_terminate($37);
   throw "Reached an unreachable!";
  case 14: 
   ___resumeException($31$0)
  case 15: 
   if ((($22)|(0))==-1) {
    label = 16; break;
   }
   else if ((($22)|(0))==0) {
    var $_0 = 1;label = 51; break;
   }
   else {
   label = 28; break;
   }
  case 16: 
   HEAP32[(($to_nxt)>>2)]=$_0244;
   var $39=HEAP32[(($frm_nxt)>>2)];
   var $40=(($_0145)|(0))==(($39)|(0));
   if ($40) { var $_1_lcssa = $_0145;label = 27; break; } else { var $_16 = $_0145;var $41 = $_0244;label = 17; break; }
  case 17: 
   var $41;
   var $_16;
   var $42=HEAP32[(($_16)>>2)];
   var $43=HEAP32[(($10)>>2)];
   var $44=_uselocale($43);
   var $45 = (function() { try { __THREW__ = 0; return _wcrtomb($41, $42, $tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $47=(($44)|(0))==0;
   if ($47) { label = 25; break; } else { label = 19; break; }
  case 19: 
   var $49 = (function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 20; break; }
  case 20: 
   var $51$0 = ___cxa_find_matching_catch(-1, -1,0); $51$1 = tempRet0;
   var $52=$51$0;
   ___clang_call_terminate($52);
   throw "Reached an unreachable!";
  case 21: 
   var $54$0 = ___cxa_find_matching_catch(-1, -1); $54$1 = tempRet0;
   var $55=(($44)|(0))==0;
   if ($55) { label = 24; break; } else { label = 22; break; }
  case 22: 
   var $57 = (function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1,0); $59$1 = tempRet0;
   var $60=$59$0;
   ___clang_call_terminate($60);
   throw "Reached an unreachable!";
  case 24: 
   ___resumeException($54$0)
  case 25: 
   var $61=(($45)|(0))==-1;
   if ($61) { var $_1_lcssa = $_16;label = 27; break; } else { label = 26; break; }
  case 26: 
   var $63=HEAP32[(($to_nxt)>>2)];
   var $64=(($63+$45)|0);
   HEAP32[(($to_nxt)>>2)]=$64;
   var $65=(($_16+4)|0);
   var $66=HEAP32[(($frm_nxt)>>2)];
   var $67=(($65)|(0))==(($66)|(0));
   if ($67) { var $_1_lcssa = $65;label = 27; break; } else { var $_16 = $65;var $41 = $64;label = 17; break; }
  case 27: 
   var $_1_lcssa;
   HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
   var $_0 = 2;label = 51; break;
  case 28: 
   var $69=HEAP32[(($to_nxt)>>2)];
   var $70=(($69+$22)|0);
   HEAP32[(($to_nxt)>>2)]=$70;
   var $71=(($70)|(0))==(($to_end)|(0));
   if ($71) { label = 49; break; } else { label = 29; break; }
  case 29: 
   var $73=(($fend_146)|(0))==(($frm_end)|(0));
   if ($73) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $_pre95=HEAP32[(($frm_nxt)>>2)];
   var $fend_3 = $frm_end;var $116 = $70;var $115 = $_pre95;label = 48; break;
  case 31: 
   var $75=HEAP32[(($10)>>2)];
   var $76=_uselocale($75);
   var $77 = (function() { try { __THREW__ = 0; return _wcrtomb($11, 0, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $79=(($76)|(0))==0;
   if ($79) { label = 39; break; } else { label = 33; break; }
  case 33: 
   var $81 = (function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 34: 
   var $83$0 = ___cxa_find_matching_catch(-1, -1,0); $83$1 = tempRet0;
   var $84=$83$0;
   ___clang_call_terminate($84);
   throw "Reached an unreachable!";
  case 35: 
   var $86$0 = ___cxa_find_matching_catch(-1, -1); $86$1 = tempRet0;
   var $87=(($76)|(0))==0;
   if ($87) { label = 38; break; } else { label = 36; break; }
  case 36: 
   var $89 = (function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $91$0 = ___cxa_find_matching_catch(-1, -1,0); $91$1 = tempRet0;
   var $92=$91$0;
   ___clang_call_terminate($92);
   throw "Reached an unreachable!";
  case 38: 
   ___resumeException($86$0)
  case 39: 
   var $93=(($77)|(0))==-1;
   if ($93) { var $_0 = 2;label = 51; break; } else { label = 40; break; }
  case 40: 
   var $95=HEAP32[(($to_nxt)>>2)];
   var $96=$95;
   var $97=((($9)-($96))|0);
   var $98=(($77)>>>(0)) > (($97)>>>(0));
   if ($98) { var $_0 = 1;label = 51; break; } else { label = 41; break; }
  case 41: 
   var $99=(($77)|(0))==0;
   if ($99) { label = 44; break; } else { var $n_08 = $77;var $p_09 = $11;var $100 = $95;label = 42; break; }
  case 42: 
   var $100;
   var $p_09;
   var $n_08;
   var $101=HEAP8[($p_09)];
   var $102=(($100+1)|0);
   HEAP32[(($to_nxt)>>2)]=$102;
   HEAP8[($100)]=$101;
   var $103=((($n_08)-(1))|0);
   var $104=(($103)|(0))==0;
   if ($104) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $105=(($p_09+1)|0);
   var $_pre96=HEAP32[(($to_nxt)>>2)];
   var $n_08 = $103;var $p_09 = $105;var $100 = $_pre96;label = 42; break;
  case 44: 
   var $106=HEAP32[(($frm_nxt)>>2)];
   var $107=(($106+4)|0);
   HEAP32[(($frm_nxt)>>2)]=$107;
   var $108=(($107)|(0))==(($frm_end)|(0));
   if ($108) { var $fend_2_lcssa = $frm_end;label = 47; break; } else { var $fend_212 = $107;label = 46; break; }
  case 45: 
   var $110=(($113)|(0))==(($frm_end)|(0));
   if ($110) { var $fend_2_lcssa = $frm_end;label = 47; break; } else { var $fend_212 = $113;label = 46; break; }
  case 46: 
   var $fend_212;
   var $111=HEAP32[(($fend_212)>>2)];
   var $112=(($111)|(0))==0;
   var $113=(($fend_212+4)|0);
   if ($112) { var $fend_2_lcssa = $fend_212;label = 47; break; } else { label = 45; break; }
  case 47: 
   var $fend_2_lcssa;
   var $_pre92=HEAP32[(($to_nxt)>>2)];
   var $fend_3 = $fend_2_lcssa;var $116 = $_pre92;var $115 = $107;label = 48; break;
  case 48: 
   var $115;
   var $116;
   var $fend_3;
   var $117=(($115)|(0))==(($frm_end)|(0));
   var $118=(($116)|(0))==(($to_end)|(0));
   var $or_cond=$117 | $118;
   if ($or_cond) { var $119 = $115;label = 50; break; } else { var $_0244 = $116;var $_0145 = $115;var $fend_146 = $fend_3;label = 7; break; }
  case 49: 
   var $_pre=HEAP32[(($frm_nxt)>>2)];
   var $119 = $_pre;label = 50; break;
  case 50: 
   var $119;
   var $not_=(($119)|(0))!=(($frm_end)|(0));
   var $120=(($not_)&(1));
   var $_0 = $120;label = 51; break;
  case 51: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $save_state=sp;
   var $tmpcast=$save_state;
   var $1=(($frm)|(0))==(($frm_end)|(0));
   if ($1) { label = 2; break; } else { var $fend_056 = $frm;label = 4; break; }
  case 2: 
   HEAP32[(($to_nxt)>>2)]=$to;
   HEAP32[(($frm_nxt)>>2)]=$frm;
   var $112 = $frm;label = 49; break;
  case 3: 
   var $3=(($6)|(0))==(($frm_end)|(0));
   if ($3) { var $fend_0_lcssa = $frm_end;label = 5; break; } else { var $fend_056 = $6;label = 4; break; }
  case 4: 
   var $fend_056;
   var $4=HEAP8[($fend_056)];
   var $5=(($4 << 24) >> 24)==0;
   var $6=(($fend_056+1)|0);
   if ($5) { var $fend_0_lcssa = $fend_056;label = 5; break; } else { label = 3; break; }
  case 5: 
   var $fend_0_lcssa;
   HEAP32[(($to_nxt)>>2)]=$to;
   HEAP32[(($frm_nxt)>>2)]=$frm;
   var $7=(($to)|(0))==(($to_end)|(0));
   var $or_cond50=$1 | $7;
   if ($or_cond50) { var $112 = $frm;label = 49; break; } else { label = 6; break; }
  case 6: 
   var $8=$st;
   var $9=$to_end;
   var $10=(($this+8)|0);
   var $_0251 = $to;var $_0152 = $frm;var $fend_153 = $fend_0_lcssa;label = 7; break;
  case 7: 
   var $fend_153;
   var $_0152;
   var $_0251;
   var $ld$0$0=(($8)|0);
   var $12$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($8+4)|0);
   var $12$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($save_state)|0);
   HEAP32[(($st$2$0)>>2)]=$12$0;
   var $st$3$1=(($save_state+4)|0);
   HEAP32[(($st$3$1)>>2)]=$12$1;
   var $13=$fend_153;
   var $14=$_0152;
   var $15=((($13)-($14))|0);
   var $16=$_0251;
   var $17=((($9)-($16))|0);
   var $18=$17 >> 2;
   var $19=HEAP32[(($10)>>2)];
   var $20=_uselocale($19);
   var $21 = (function() { try { __THREW__ = 0; return _mbsnrtowcs($_0251, $frm_nxt, $15, $18, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $23=(($20)|(0))==0;
   if ($23) { label = 15; break; } else { label = 9; break; }
  case 9: 
   var $25 = (function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 10; break; }
  case 10: 
   var $27$0 = ___cxa_find_matching_catch(-1, -1,0); $27$1 = tempRet0;
   var $28=$27$0;
   ___clang_call_terminate($28);
   throw "Reached an unreachable!";
  case 11: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1); $30$1 = tempRet0;
   var $31=(($20)|(0))==0;
   if ($31) { label = 14; break; } else { label = 12; break; }
  case 12: 
   var $33 = (function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1,0); $35$1 = tempRet0;
   var $36=$35$0;
   ___clang_call_terminate($36);
   throw "Reached an unreachable!";
  case 14: 
   ___resumeException($30$0)
  case 15: 
   if ((($21)|(0))==-1) {
    label = 16; break;
   }
   else if ((($21)|(0))==0) {
    var $_0 = 2;label = 50; break;
   }
   else {
   label = 32; break;
   }
  case 16: 
   HEAP32[(($to_nxt)>>2)]=$_0251;
   var $37=HEAP32[(($frm_nxt)>>2)];
   var $38=(($_0152)|(0))==(($37)|(0));
   if ($38) { var $_1_lcssa = $_0152;label = 31; break; } else { var $storemerge11 = $_0251;var $_112 = $_0152;label = 17; break; }
  case 17: 
   var $_112;
   var $storemerge11;
   var $39=$_112;
   var $40=((($13)-($39))|0);
   var $41=HEAP32[(($10)>>2)];
   var $42=_uselocale($41);
   var $43 = (function() { try { __THREW__ = 0; return _mbrtowc($storemerge11, $_112, $40, $tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $45=(($42)|(0))==0;
   if ($45) { label = 25; break; } else { label = 19; break; }
  case 19: 
   var $47 = (function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 20; break; }
  case 20: 
   var $49$0 = ___cxa_find_matching_catch(-1, -1,0); $49$1 = tempRet0;
   var $50=$49$0;
   ___clang_call_terminate($50);
   throw "Reached an unreachable!";
  case 21: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1); $52$1 = tempRet0;
   var $53=(($42)|(0))==0;
   if ($53) { label = 24; break; } else { label = 22; break; }
  case 22: 
   var $55 = (function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $57$0 = ___cxa_find_matching_catch(-1, -1,0); $57$1 = tempRet0;
   var $58=$57$0;
   ___clang_call_terminate($58);
   throw "Reached an unreachable!";
  case 24: 
   ___resumeException($52$0)
  case 25: 
   if ((($43)|(0))==0) {
    label = 26; break;
   }
   else if ((($43)|(0))==-1) {
    label = 27; break;
   }
   else if ((($43)|(0))==-2) {
    label = 28; break;
   }
   else {
   label = 29; break;
   }
  case 26: 
   var $60=(($_112+1)|0);
   var $_2 = $60;label = 30; break;
  case 27: 
   HEAP32[(($frm_nxt)>>2)]=$_112;
   var $_0 = 2;label = 50; break;
  case 28: 
   HEAP32[(($frm_nxt)>>2)]=$_112;
   var $_0 = 1;label = 50; break;
  case 29: 
   var $64=(($_112+$43)|0);
   var $_2 = $64;label = 30; break;
  case 30: 
   var $_2;
   var $66=HEAP32[(($to_nxt)>>2)];
   var $67=(($66+4)|0);
   HEAP32[(($to_nxt)>>2)]=$67;
   var $68=HEAP32[(($frm_nxt)>>2)];
   var $69=(($_2)|(0))==(($68)|(0));
   if ($69) { var $_1_lcssa = $_2;label = 31; break; } else { var $storemerge11 = $67;var $_112 = $_2;label = 17; break; }
  case 31: 
   var $_1_lcssa;
   HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
   var $not_3=(($_1_lcssa)|(0))!=(($frm_end)|(0));
   var $70=(($not_3)&(1));
   var $_0 = $70;label = 50; break;
  case 32: 
   var $72=HEAP32[(($to_nxt)>>2)];
   var $73=(($72+($21<<2))|0);
   HEAP32[(($to_nxt)>>2)]=$73;
   var $74=(($73)|(0))==(($to_end)|(0));
   if ($74) { label = 48; break; } else { label = 33; break; }
  case 33: 
   var $76=(($fend_153)|(0))==(($frm_end)|(0));
   var $_pre110=HEAP32[(($frm_nxt)>>2)];
   if ($76) { var $fend_3 = $frm_end;var $109 = $73;var $108 = $_pre110;label = 47; break; } else { label = 34; break; }
  case 34: 
   var $78=HEAP32[(($10)>>2)];
   var $79=_uselocale($78);
   var $80 = (function() { try { __THREW__ = 0; return _mbrtowc($73, $_pre110, 1, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 38; break; }
  case 35: 
   var $82=(($79)|(0))==0;
   if ($82) { label = 42; break; } else { label = 36; break; }
  case 36: 
   var $84 = (function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 37; break; }
  case 37: 
   var $86$0 = ___cxa_find_matching_catch(-1, -1,0); $86$1 = tempRet0;
   var $87=$86$0;
   ___clang_call_terminate($87);
   throw "Reached an unreachable!";
  case 38: 
   var $89$0 = ___cxa_find_matching_catch(-1, -1); $89$1 = tempRet0;
   var $90=(($79)|(0))==0;
   if ($90) { label = 41; break; } else { label = 39; break; }
  case 39: 
   var $92 = (function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $94$0 = ___cxa_find_matching_catch(-1, -1,0); $94$1 = tempRet0;
   var $95=$94$0;
   ___clang_call_terminate($95);
   throw "Reached an unreachable!";
  case 41: 
   ___resumeException($89$0)
  case 42: 
   var $96=(($80)|(0))==0;
   if ($96) { label = 43; break; } else { var $_0 = 2;label = 50; break; }
  case 43: 
   var $98=HEAP32[(($to_nxt)>>2)];
   var $99=(($98+4)|0);
   HEAP32[(($to_nxt)>>2)]=$99;
   var $100=HEAP32[(($frm_nxt)>>2)];
   var $101=(($100+1)|0);
   HEAP32[(($frm_nxt)>>2)]=$101;
   var $102=(($101)|(0))==(($frm_end)|(0));
   if ($102) { var $fend_2_lcssa = $frm_end;label = 46; break; } else { var $fend_213 = $101;label = 45; break; }
  case 44: 
   var $104=(($107)|(0))==(($frm_end)|(0));
   if ($104) { var $fend_2_lcssa = $frm_end;label = 46; break; } else { var $fend_213 = $107;label = 45; break; }
  case 45: 
   var $fend_213;
   var $105=HEAP8[($fend_213)];
   var $106=(($105 << 24) >> 24)==0;
   var $107=(($fend_213+1)|0);
   if ($106) { var $fend_2_lcssa = $fend_213;label = 46; break; } else { label = 44; break; }
  case 46: 
   var $fend_2_lcssa;
   var $_pre108=HEAP32[(($to_nxt)>>2)];
   var $fend_3 = $fend_2_lcssa;var $109 = $_pre108;var $108 = $101;label = 47; break;
  case 47: 
   var $108;
   var $109;
   var $fend_3;
   var $110=(($108)|(0))==(($frm_end)|(0));
   var $111=(($109)|(0))==(($to_end)|(0));
   var $or_cond=$110 | $111;
   if ($or_cond) { var $112 = $108;label = 49; break; } else { var $_0251 = $109;var $_0152 = $108;var $fend_153 = $fend_3;label = 7; break; }
  case 48: 
   var $_pre=HEAP32[(($frm_nxt)>>2)];
   var $112 = $_pre;label = 49; break;
  case 49: 
   var $112;
   var $not_=(($112)|(0))!=(($frm_end)|(0));
   var $113=(($not_)&(1));
   var $_0 = $113;label = 50; break;
  case 50: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $tmp=sp;
   HEAP32[(($to_nxt)>>2)]=$to;
   var $1=(($tmp)|0);
   var $2=(($this+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=_uselocale($3);
   var $5 = (function() { try { __THREW__ = 0; return _wcrtomb($1, 0, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($4)|(0))==0;
   if ($7) { label = 9; break; } else { label = 3; break; }
  case 3: 
   var $9 = (function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1,0); $11$1 = tempRet0;
   var $12=$11$0;
   ___clang_call_terminate($12);
   throw "Reached an unreachable!";
  case 5: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=(($4)|(0))==0;
   if ($15) { label = 8; break; } else { label = 6; break; }
  case 6: 
   var $17 = (function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1,0); $19$1 = tempRet0;
   var $20=$19$0;
   ___clang_call_terminate($20);
   throw "Reached an unreachable!";
  case 8: 
   ___resumeException($14$0)
  case 9: 
   if ((($5)|(0))==-1 | (($5)|(0))==0) {
    var $_0 = 2;label = 14; break;
   }
   else {
   label = 10; break;
   }
  case 10: 
   var $22=((($5)-(1))|0);
   var $23=HEAP32[(($to_nxt)>>2)];
   var $24=$to_end;
   var $25=$23;
   var $26=((($24)-($25))|0);
   var $27=(($22)>>>(0)) > (($26)>>>(0));
   if ($27) { var $_0 = 1;label = 14; break; } else { label = 11; break; }
  case 11: 
   var $28=(($22)|(0))==0;
   if ($28) { var $_0 = 0;label = 14; break; } else { var $n_02 = $22;var $p_03 = $1;var $29 = $23;label = 12; break; }
  case 12: 
   var $29;
   var $p_03;
   var $n_02;
   var $30=HEAP8[($p_03)];
   var $31=(($29+1)|0);
   HEAP32[(($to_nxt)>>2)]=$31;
   HEAP8[($29)]=$30;
   var $32=((($n_02)-(1))|0);
   var $33=(($32)|(0))==0;
   if ($33) { var $_0 = 0;label = 14; break; } else { label = 13; break; }
  case 13: 
   var $34=(($p_03+1)|0);
   var $_pre=HEAP32[(($to_nxt)>>2)];
   var $n_02 = $32;var $p_03 = $34;var $29 = $_pre;label = 12; break;
  case 14: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3 = (function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 16; break; }
  case 2: 
   var $4 = (function() { try { __THREW__ = 0; return _mbtowc(0, 0, 4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $6=(($3)|(0))==0;
   if ($6) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $8 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 5; break; }
  case 5: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1,0); $10$1 = tempRet0;
   var $11=$10$0;
   ___clang_call_terminate($11);
   throw "Reached an unreachable!";
  case 6: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1,0); $13$1 = tempRet0;
   var $14=(($3)|(0))==0;
   if ($14) { var $eh_lpad_body$1 = $13$1;var $eh_lpad_body$0 = $13$0;label = 17; break; } else { label = 7; break; }
  case 7: 
   var $16 = (function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1 = $13$1;var $eh_lpad_body$0 = $13$0;label = 17; break; } else { label = 8; break; }
  case 8: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1,0); $18$1 = tempRet0;
   var $19=$18$0;
   ___clang_call_terminate($19);
   throw "Reached an unreachable!";
  case 9: 
   var $20=(($4)|(0))==0;
   if ($20) { label = 10; break; } else { var $_0 = -1;label = 15; break; }
  case 10: 
   var $22=HEAP32[(($1)>>2)];
   var $23=(($22)|(0))==0;
   if ($23) { var $_0 = 1;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $25 = (function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $26=(($25)|(0))==0;
   if ($26) { var $_0 = 0;label = 15; break; } else { label = 13; break; }
  case 13: 
   var $28 = (function() { try { __THREW__ = 0; return _uselocale($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0 = 0;label = 15; break; } else { label = 14; break; }
  case 14: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1,0); $30$1 = tempRet0;
   var $31=$30$0;
   ___clang_call_terminate($31);
   throw "Reached an unreachable!";
  case 15: 
   var $_0;
   return $_0;
  case 16: 
   var $33$0 = ___cxa_find_matching_catch(-1, -1,0); $33$1 = tempRet0;
   var $eh_lpad_body$1 = $33$1;var $eh_lpad_body$0 = $33$0;label = 17; break;
  case 17: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   var $34=$eh_lpad_body$0;
   ___clang_call_terminate($34);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mx)|(0))==0;
   var $2=(($frm)|(0))==(($frm_end)|(0));
   var $or_cond5=$1 | $2;
   if ($or_cond5) { var $nbytes_0_lcssa = 0;label = 15; break; } else { label = 2; break; }
  case 2: 
   var $3=$frm_end;
   var $4=(($this+8)|0);
   var $_016 = $frm;var $nbytes_07 = 0;var $nwchar_t_08 = 0;label = 3; break;
  case 3: 
   var $nwchar_t_08;
   var $nbytes_07;
   var $_016;
   var $6=$_016;
   var $7=((($3)-($6))|0);
   var $8=HEAP32[(($4)>>2)];
   var $9=_uselocale($8);
   var $10 = (function() { try { __THREW__ = 0; return _mbrlen($_016, $7, $st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $12=(($9)|(0))==0;
   if ($12) { label = 11; break; } else { label = 5; break; }
  case 5: 
   var $14 = (function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
  case 6: 
   var $16$0 = ___cxa_find_matching_catch(-1, -1,0); $16$1 = tempRet0;
   var $17=$16$0;
   ___clang_call_terminate($17);
   throw "Reached an unreachable!";
  case 7: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   var $20=(($9)|(0))==0;
   if ($20) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $22 = (function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $24$0 = ___cxa_find_matching_catch(-1, -1,0); $24$1 = tempRet0;
   var $25=$24$0;
   ___clang_call_terminate($25);
   throw "Reached an unreachable!";
  case 10: 
   ___resumeException($19$0)
  case 11: 
   if ((($10)|(0))==0) {
    label = 12; break;
   }
   else if ((($10)|(0))==-1 | (($10)|(0))==-2) {
    var $nbytes_0_lcssa = $nbytes_07;label = 15; break;
   }
   else {
   label = 13; break;
   }
  case 12: 
   var $27=(($_016+1)|0);
   var $_pn = 1;var $_1 = $27;label = 14; break;
  case 13: 
   var $29=(($_016+$10)|0);
   var $_pn = $10;var $_1 = $29;label = 14; break;
  case 14: 
   var $_1;
   var $_pn;
   var $nbytes_1=((($_pn)+($nbytes_07))|0);
   var $31=((($nwchar_t_08)+(1))|0);
   var $32=(($31)>>>(0)) >= (($mx)>>>(0));
   var $33=(($_1)|(0))==(($frm_end)|(0));
   var $or_cond=$32 | $33;
   if ($or_cond) { var $nbytes_0_lcssa = $nbytes_1;label = 15; break; } else { var $_016 = $_1;var $nbytes_07 = $nbytes_1;var $nwchar_t_08 = $31;label = 3; break; }
  case 15: 
   var $nbytes_0_lcssa;
   return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==0;
   if ($3) { var $12 = 1;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $5 = (function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $6=(($5)|(0))==0;
   if ($6) { var $12 = 4;label = 6; break; } else { label = 4; break; }
  case 4: 
   var $8 = (function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12 = 4;label = 6; break; } else { label = 5; break; }
  case 5: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1,0); $10$1 = tempRet0;
   var $11=$10$0;
   ___clang_call_terminate($11);
   throw "Reached an unreachable!";
  case 6: 
   var $12;
   return $12;
  case 7: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1,0); $14$1 = tempRet0;
   var $15=$14$0;
   ___clang_call_terminate($15);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6 >> 1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP = sp;
 return $2;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($frm_nxt)>>2)]=$frm;
   HEAP32[(($to_nxt)>>2)]=$to;
   var $1=$mode & 2;
   var $2=(($1)|(0))==0;
   if ($2) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $4=$to_end;
   var $5=$to;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) < 3;
   if ($7) { var $_0 = 1;label = 26; break; } else { label = 3; break; }
  case 3: 
   var $9=(($to+1)|0);
   HEAP32[(($to_nxt)>>2)]=$9;
   HEAP8[($to)]=-17;
   var $10=HEAP32[(($to_nxt)>>2)];
   var $11=(($10+1)|0);
   HEAP32[(($to_nxt)>>2)]=$11;
   HEAP8[($10)]=-69;
   var $12=HEAP32[(($to_nxt)>>2)];
   var $13=(($12+1)|0);
   HEAP32[(($to_nxt)>>2)]=$13;
   HEAP8[($12)]=-65;
   label = 4; break;
  case 4: 
   var $14=$frm_end;
   var $15=HEAP32[(($frm_nxt)>>2)];
   var $16=(($15)>>>(0)) < (($frm_end)>>>(0));
   if ($16) { label = 5; break; } else { var $_0 = 0;label = 26; break; }
  case 5: 
   var $17=$to_end;
   var $19 = $15;label = 6; break;
  case 6: 
   var $19;
   var $20=HEAP16[(($19)>>1)];
   var $21=(($20)&(65535));
   var $22=(($21)>>>(0)) > (($Maxcode)>>>(0));
   if ($22) { var $_0 = 2;label = 26; break; } else { label = 7; break; }
  case 7: 
   var $24=(($20)&(65535)) < 128;
   if ($24) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $26=HEAP32[(($to_nxt)>>2)];
   var $27=$26;
   var $28=((($17)-($27))|0);
   var $29=(($28)|(0)) < 1;
   if ($29) { var $_0 = 1;label = 26; break; } else { label = 9; break; }
  case 9: 
   var $31=(($20) & 255);
   var $32=(($26+1)|0);
   HEAP32[(($to_nxt)>>2)]=$32;
   HEAP8[($26)]=$31;
   label = 25; break;
  case 10: 
   var $34=(($20)&(65535)) < 2048;
   if ($34) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $36=HEAP32[(($to_nxt)>>2)];
   var $37=$36;
   var $38=((($17)-($37))|0);
   var $39=(($38)|(0)) < 2;
   if ($39) { var $_0 = 1;label = 26; break; } else { label = 12; break; }
  case 12: 
   var $41=$21 >>> 6;
   var $42=$41 | 192;
   var $43=(($42) & 255);
   var $44=(($36+1)|0);
   HEAP32[(($to_nxt)>>2)]=$44;
   HEAP8[($36)]=$43;
   var $45=$21 & 63;
   var $46=$45 | 128;
   var $47=(($46) & 255);
   var $48=HEAP32[(($to_nxt)>>2)];
   var $49=(($48+1)|0);
   HEAP32[(($to_nxt)>>2)]=$49;
   HEAP8[($48)]=$47;
   label = 25; break;
  case 13: 
   var $51=(($20)&(65535)) < 55296;
   if ($51) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $53=HEAP32[(($to_nxt)>>2)];
   var $54=$53;
   var $55=((($17)-($54))|0);
   var $56=(($55)|(0)) < 3;
   if ($56) { var $_0 = 1;label = 26; break; } else { label = 15; break; }
  case 15: 
   var $58=$21 >>> 12;
   var $59=$58 | 224;
   var $60=(($59) & 255);
   var $61=(($53+1)|0);
   HEAP32[(($to_nxt)>>2)]=$61;
   HEAP8[($53)]=$60;
   var $62=$21 >>> 6;
   var $63=$62 & 63;
   var $64=$63 | 128;
   var $65=(($64) & 255);
   var $66=HEAP32[(($to_nxt)>>2)];
   var $67=(($66+1)|0);
   HEAP32[(($to_nxt)>>2)]=$67;
   HEAP8[($66)]=$65;
   var $68=$21 & 63;
   var $69=$68 | 128;
   var $70=(($69) & 255);
   var $71=HEAP32[(($to_nxt)>>2)];
   var $72=(($71+1)|0);
   HEAP32[(($to_nxt)>>2)]=$72;
   HEAP8[($71)]=$70;
   label = 25; break;
  case 16: 
   var $74=(($20)&(65535)) < 56320;
   if ($74) { label = 17; break; } else { label = 22; break; }
  case 17: 
   var $76=$19;
   var $77=((($14)-($76))|0);
   var $78=(($77)|(0)) < 4;
   if ($78) { var $_0 = 1;label = 26; break; } else { label = 18; break; }
  case 18: 
   var $80=(($19+2)|0);
   var $81=HEAP16[(($80)>>1)];
   var $82=(($81)&(65535));
   var $83=$82 & 64512;
   var $84=(($83)|(0))==56320;
   if ($84) { label = 19; break; } else { var $_0 = 2;label = 26; break; }
  case 19: 
   var $86=HEAP32[(($to_nxt)>>2)];
   var $87=$86;
   var $88=((($17)-($87))|0);
   var $89=(($88)|(0)) < 4;
   if ($89) { var $_0 = 1;label = 26; break; } else { label = 20; break; }
  case 20: 
   var $91=$21 & 960;
   var $92=$91 << 10;
   var $93=((($92)+(65536))|0);
   var $94=$21 << 10;
   var $95=$94 & 64512;
   var $96=$93 | $95;
   var $97=$82 & 1023;
   var $98=$96 | $97;
   var $99=(($98)>>>(0)) > (($Maxcode)>>>(0));
   if ($99) { var $_0 = 2;label = 26; break; } else { label = 21; break; }
  case 21: 
   HEAP32[(($frm_nxt)>>2)]=$80;
   var $101=$91 >>> 6;
   var $102=((($101)+(1))|0);
   var $103=$102 >>> 2;
   var $104=$103 | 240;
   var $105=(($104) & 255);
   var $106=HEAP32[(($to_nxt)>>2)];
   var $107=(($106+1)|0);
   HEAP32[(($to_nxt)>>2)]=$107;
   HEAP8[($106)]=$105;
   var $108=$102 << 4;
   var $109=$108 & 48;
   var $110=$21 >>> 2;
   var $111=$110 & 15;
   var $112=$111 | $109;
   var $113=$112 | 128;
   var $114=(($113) & 255);
   var $115=HEAP32[(($to_nxt)>>2)];
   var $116=(($115+1)|0);
   HEAP32[(($to_nxt)>>2)]=$116;
   HEAP8[($115)]=$114;
   var $117=$21 << 4;
   var $118=$117 & 48;
   var $119=$82 >>> 6;
   var $120=$119 & 15;
   var $121=$118 | $120;
   var $122=$121 | 128;
   var $123=(($122) & 255);
   var $124=HEAP32[(($to_nxt)>>2)];
   var $125=(($124+1)|0);
   HEAP32[(($to_nxt)>>2)]=$125;
   HEAP8[($124)]=$123;
   var $126=$82 & 63;
   var $127=$126 | 128;
   var $128=(($127) & 255);
   var $129=HEAP32[(($to_nxt)>>2)];
   var $130=(($129+1)|0);
   HEAP32[(($to_nxt)>>2)]=$130;
   HEAP8[($129)]=$128;
   label = 25; break;
  case 22: 
   var $132=(($20)&(65535)) < 57344;
   if ($132) { var $_0 = 2;label = 26; break; } else { label = 23; break; }
  case 23: 
   var $134=HEAP32[(($to_nxt)>>2)];
   var $135=$134;
   var $136=((($17)-($135))|0);
   var $137=(($136)|(0)) < 3;
   if ($137) { var $_0 = 1;label = 26; break; } else { label = 24; break; }
  case 24: 
   var $139=$21 >>> 12;
   var $140=$139 | 224;
   var $141=(($140) & 255);
   var $142=(($134+1)|0);
   HEAP32[(($to_nxt)>>2)]=$142;
   HEAP8[($134)]=$141;
   var $143=$21 >>> 6;
   var $144=$143 & 63;
   var $145=$144 | 128;
   var $146=(($145) & 255);
   var $147=HEAP32[(($to_nxt)>>2)];
   var $148=(($147+1)|0);
   HEAP32[(($to_nxt)>>2)]=$148;
   HEAP8[($147)]=$146;
   var $149=$21 & 63;
   var $150=$149 | 128;
   var $151=(($150) & 255);
   var $152=HEAP32[(($to_nxt)>>2)];
   var $153=(($152+1)|0);
   HEAP32[(($to_nxt)>>2)]=$153;
   HEAP8[($152)]=$151;
   label = 25; break;
  case 25: 
   var $155=HEAP32[(($frm_nxt)>>2)];
   var $156=(($155+2)|0);
   HEAP32[(($frm_nxt)>>2)]=$156;
   var $157=(($156)>>>(0)) < (($frm_end)>>>(0));
   if ($157) { var $19 = $156;label = 6; break; } else { var $_0 = 0;label = 26; break; }
  case 26: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11 >> 1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP = sp;
 return $2;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($frm_nxt)>>2)]=$frm;
   HEAP32[(($to_nxt)>>2)]=$to;
   var $1=$mode & 4;
   var $2=(($1)|(0))==0;
   var $_pre5=HEAP32[(($frm_nxt)>>2)];
   if ($2) { var $21 = $_pre5;label = 7; break; } else { label = 2; break; }
  case 2: 
   var $4=$frm_end;
   var $5=$_pre5;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) > 2;
   if ($7) { label = 3; break; } else { var $21 = $_pre5;label = 7; break; }
  case 3: 
   var $9=HEAP8[($_pre5)];
   var $10=(($9 << 24) >> 24)==-17;
   if ($10) { label = 4; break; } else { var $21 = $_pre5;label = 7; break; }
  case 4: 
   var $12=(($_pre5+1)|0);
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24)==-69;
   if ($14) { label = 5; break; } else { var $21 = $_pre5;label = 7; break; }
  case 5: 
   var $16=(($_pre5+2)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24)==-65;
   if ($18) { label = 6; break; } else { var $21 = $_pre5;label = 7; break; }
  case 6: 
   var $20=(($_pre5+3)|0);
   HEAP32[(($frm_nxt)>>2)]=$20;
   var $21 = $20;label = 7; break;
  case 7: 
   var $21;
   var $22=(($21)>>>(0)) < (($frm_end)>>>(0));
   if ($22) { label = 8; break; } else { var $175 = $21;label = 40; break; }
  case 8: 
   var $23=$frm_end;
   var $24=$to_end;
   var $_pre=HEAP32[(($to_nxt)>>2)];
   var $27 = $_pre;var $26 = $21;label = 9; break;
  case 9: 
   var $26;
   var $27;
   var $28=(($27)>>>(0)) < (($to_end)>>>(0));
   if ($28) { label = 10; break; } else { var $175 = $26;label = 40; break; }
  case 10: 
   var $30=HEAP8[($26)];
   var $31=(($30)&(255));
   var $32=(($31)>>>(0)) > (($Maxcode)>>>(0));
   if ($32) { var $_0 = 2;label = 41; break; } else { label = 11; break; }
  case 11: 
   var $34=(($30 << 24) >> 24) > -1;
   if ($34) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $36=(($30)&(255));
   HEAP16[(($27)>>1)]=$36;
   var $37=HEAP32[(($frm_nxt)>>2)];
   var $38=(($37+1)|0);
   HEAP32[(($frm_nxt)>>2)]=$38;
   label = 39; break;
  case 13: 
   var $40=(($30)&(255)) < 194;
   if ($40) { var $_0 = 2;label = 41; break; } else { label = 14; break; }
  case 14: 
   var $42=(($30)&(255)) < 224;
   if ($42) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $44=$26;
   var $45=((($23)-($44))|0);
   var $46=(($45)|(0)) < 2;
   if ($46) { var $_0 = 1;label = 41; break; } else { label = 16; break; }
  case 16: 
   var $48=(($26+1)|0);
   var $49=HEAP8[($48)];
   var $50=(($49)&(255));
   var $51=$50 & 192;
   var $52=(($51)|(0))==128;
   if ($52) { label = 17; break; } else { var $_0 = 2;label = 41; break; }
  case 17: 
   var $54=$31 << 6;
   var $55=$54 & 1984;
   var $56=$50 & 63;
   var $57=$56 | $55;
   var $58=(($57)>>>(0)) > (($Maxcode)>>>(0));
   if ($58) { var $_0 = 2;label = 41; break; } else { label = 18; break; }
  case 18: 
   var $60=(($57) & 65535);
   HEAP16[(($27)>>1)]=$60;
   var $61=HEAP32[(($frm_nxt)>>2)];
   var $62=(($61+2)|0);
   HEAP32[(($frm_nxt)>>2)]=$62;
   label = 39; break;
  case 19: 
   var $64=(($30)&(255)) < 240;
   if ($64) { label = 20; break; } else { label = 28; break; }
  case 20: 
   var $66=$26;
   var $67=((($23)-($66))|0);
   var $68=(($67)|(0)) < 3;
   if ($68) { var $_0 = 1;label = 41; break; } else { label = 21; break; }
  case 21: 
   var $70=(($26+1)|0);
   var $71=HEAP8[($70)];
   var $72=(($26+2)|0);
   var $73=HEAP8[($72)];
   if ((($31)|(0))==224) {
    label = 22; break;
   }
   else if ((($31)|(0))==237) {
    label = 23; break;
   }
   else {
   label = 24; break;
   }
  case 22: 
   var $75=$71 & -32;
   var $76=(($75 << 24) >> 24)==-96;
   if ($76) { label = 25; break; } else { var $_0 = 2;label = 41; break; }
  case 23: 
   var $78=$71 & -32;
   var $79=(($78 << 24) >> 24)==-128;
   if ($79) { label = 25; break; } else { var $_0 = 2;label = 41; break; }
  case 24: 
   var $81=$71 & -64;
   var $82=(($81 << 24) >> 24)==-128;
   if ($82) { label = 25; break; } else { var $_0 = 2;label = 41; break; }
  case 25: 
   var $84=(($73)&(255));
   var $85=$84 & 192;
   var $86=(($85)|(0))==128;
   if ($86) { label = 26; break; } else { var $_0 = 2;label = 41; break; }
  case 26: 
   var $88=$31 << 12;
   var $89=(($71)&(255));
   var $90=$89 << 6;
   var $91=$90 & 4032;
   var $92=$91 | $88;
   var $93=$84 & 63;
   var $94=$92 | $93;
   var $95=$94 & 65535;
   var $96=(($95)>>>(0)) > (($Maxcode)>>>(0));
   if ($96) { var $_0 = 2;label = 41; break; } else { label = 27; break; }
  case 27: 
   var $98=(($94) & 65535);
   HEAP16[(($27)>>1)]=$98;
   var $99=HEAP32[(($frm_nxt)>>2)];
   var $100=(($99+3)|0);
   HEAP32[(($frm_nxt)>>2)]=$100;
   label = 39; break;
  case 28: 
   var $102=(($30)&(255)) < 245;
   if ($102) { label = 29; break; } else { var $_0 = 2;label = 41; break; }
  case 29: 
   var $104=$26;
   var $105=((($23)-($104))|0);
   var $106=(($105)|(0)) < 4;
   if ($106) { var $_0 = 1;label = 41; break; } else { label = 30; break; }
  case 30: 
   var $108=(($26+1)|0);
   var $109=HEAP8[($108)];
   var $110=(($26+2)|0);
   var $111=HEAP8[($110)];
   var $112=(($26+3)|0);
   var $113=HEAP8[($112)];
   if ((($31)|(0))==240) {
    label = 31; break;
   }
   else if ((($31)|(0))==244) {
    label = 32; break;
   }
   else {
   label = 33; break;
   }
  case 31: 
   var $_off=((($109)+(112))&255);
   var $115=(($_off)&(255)) < 48;
   if ($115) { label = 34; break; } else { var $_0 = 2;label = 41; break; }
  case 32: 
   var $117=$109 & -16;
   var $118=(($117 << 24) >> 24)==-128;
   if ($118) { label = 34; break; } else { var $_0 = 2;label = 41; break; }
  case 33: 
   var $120=$109 & -64;
   var $121=(($120 << 24) >> 24)==-128;
   if ($121) { label = 34; break; } else { var $_0 = 2;label = 41; break; }
  case 34: 
   var $123=(($111)&(255));
   var $124=$123 & 192;
   var $125=(($124)|(0))==128;
   if ($125) { label = 35; break; } else { var $_0 = 2;label = 41; break; }
  case 35: 
   var $127=(($113)&(255));
   var $128=$127 & 192;
   var $129=(($128)|(0))==128;
   if ($129) { label = 36; break; } else { var $_0 = 2;label = 41; break; }
  case 36: 
   var $131=$27;
   var $132=((($24)-($131))|0);
   var $133=(($132)|(0)) < 4;
   if ($133) { var $_0 = 1;label = 41; break; } else { label = 37; break; }
  case 37: 
   var $135=$31 & 7;
   var $136=$135 << 18;
   var $137=(($109)&(255));
   var $138=$137 << 12;
   var $139=$138 & 258048;
   var $140=$139 | $136;
   var $141=$123 << 6;
   var $142=$141 & 4032;
   var $143=$140 | $142;
   var $144=$127 & 63;
   var $145=$143 | $144;
   var $146=(($145)>>>(0)) > (($Maxcode)>>>(0));
   if ($146) { var $_0 = 2;label = 41; break; } else { label = 38; break; }
  case 38: 
   var $148=$135 << 2;
   var $149=$137 >>> 4;
   var $150=$149 & 3;
   var $151=$150 | $148;
   var $152=$151 << 6;
   var $153=((($152)+(16320))|0);
   var $154=$137 << 2;
   var $155=$154 & 60;
   var $156=$123 >>> 4;
   var $157=$156 & 3;
   var $158=$155 | $157;
   var $159=$158 | $153;
   var $160=$159 | 55296;
   var $161=(($160) & 65535);
   HEAP16[(($27)>>1)]=$161;
   var $162=$141 & 960;
   var $163=$144 | $162;
   var $164=$163 | 56320;
   var $165=(($164) & 65535);
   var $166=HEAP32[(($to_nxt)>>2)];
   var $167=(($166+2)|0);
   HEAP32[(($to_nxt)>>2)]=$167;
   HEAP16[(($167)>>1)]=$165;
   var $168=HEAP32[(($frm_nxt)>>2)];
   var $169=(($168+4)|0);
   HEAP32[(($frm_nxt)>>2)]=$169;
   label = 39; break;
  case 39: 
   var $171=HEAP32[(($to_nxt)>>2)];
   var $172=(($171+2)|0);
   HEAP32[(($to_nxt)>>2)]=$172;
   var $173=HEAP32[(($frm_nxt)>>2)];
   var $174=(($173)>>>(0)) < (($frm_end)>>>(0));
   if ($174) { var $27 = $172;var $26 = $173;label = 9; break; } else { var $175 = $173;label = 40; break; }
  case 40: 
   var $175;
   var $176=(($175)>>>(0)) < (($frm_end)>>>(0));
   var $177=(($176)&(1));
   var $_0 = $177;label = 41; break;
  case 41: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0);
 return $2;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$mode & 4;
   var $2=(($1)|(0))==0;
   if ($2) { var $frm_nxt_1_ph = $frm;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $4=$frm_end;
   var $5=$frm;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) > 2;
   if ($7) { label = 3; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 3: 
   var $9=HEAP8[($frm)];
   var $10=(($9 << 24) >> 24)==-17;
   if ($10) { label = 4; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 4: 
   var $12=(($frm+1)|0);
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24)==-69;
   if ($14) { label = 5; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 5: 
   var $16=(($frm+2)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24)==-65;
   var $19=(($frm+3)|0);
   var $_frm=$18 ? $19 : $frm;
   var $frm_nxt_1_ph = $_frm;label = 6; break;
  case 6: 
   var $frm_nxt_1_ph;
   var $20=(($frm_nxt_1_ph)>>>(0)) < (($frm_end)>>>(0));
   var $21=(($mx)|(0))!=0;
   var $or_cond13=$20 & $21;
   if ($or_cond13) { label = 7; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_1_ph;label = 44; break; }
  case 7: 
   var $22=$frm_end;
   var $nchar16_t_014 = 0;var $frm_nxt_115 = $frm_nxt_1_ph;label = 8; break;
  case 8: 
   var $frm_nxt_115;
   var $nchar16_t_014;
   var $23=HEAP8[($frm_nxt_115)];
   var $24=(($23)&(255));
   var $25=(($24)>>>(0)) > (($Maxcode)>>>(0));
   if ($25) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 9; break; }
  case 9: 
   var $27=(($23 << 24) >> 24) > -1;
   if ($27) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $29=(($frm_nxt_115+1)|0);
   var $frm_nxt_2 = $29;var $nchar16_t_1 = $nchar16_t_014;label = 43; break;
  case 11: 
   var $31=(($23)&(255)) < 194;
   if ($31) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 12; break; }
  case 12: 
   var $33=(($23)&(255)) < 224;
   if ($33) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $35=$frm_nxt_115;
   var $36=((($22)-($35))|0);
   var $37=(($36)|(0)) < 2;
   if ($37) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 14; break; }
  case 14: 
   var $39=(($frm_nxt_115+1)|0);
   var $40=HEAP8[($39)];
   var $41=(($40)&(255));
   var $42=$41 & 192;
   var $43=(($42)|(0))==128;
   if ($43) { label = 15; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 15: 
   var $45=$24 << 6;
   var $46=$45 & 1984;
   var $47=$41 & 63;
   var $48=$47 | $46;
   var $49=(($48)>>>(0)) > (($Maxcode)>>>(0));
   if ($49) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 16; break; }
  case 16: 
   var $51=(($frm_nxt_115+2)|0);
   var $frm_nxt_2 = $51;var $nchar16_t_1 = $nchar16_t_014;label = 43; break;
  case 17: 
   var $53=(($23)&(255)) < 240;
   if ($53) { label = 18; break; } else { label = 29; break; }
  case 18: 
   var $55=$frm_nxt_115;
   var $56=((($22)-($55))|0);
   var $57=(($56)|(0)) < 3;
   if ($57) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 19; break; }
  case 19: 
   var $59=(($frm_nxt_115+1)|0);
   var $60=HEAP8[($59)];
   var $61=(($frm_nxt_115+2)|0);
   var $62=HEAP8[($61)];
   if ((($24)|(0))==224) {
    label = 20; break;
   }
   else if ((($24)|(0))==237) {
    label = 22; break;
   }
   else {
   label = 24; break;
   }
  case 20: 
   var $64=$60 & -32;
   var $65=(($64 << 24) >> 24)==-96;
   if ($65) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $67=$frm;
   var $68=((($55)-($67))|0);
   var $_0 = $68;label = 45; break;
  case 22: 
   var $70=$60 & -32;
   var $71=(($70 << 24) >> 24)==-128;
   if ($71) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $73=$frm;
   var $74=((($55)-($73))|0);
   var $_0 = $74;label = 45; break;
  case 24: 
   var $76=$60 & -64;
   var $77=(($76 << 24) >> 24)==-128;
   if ($77) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $79=$frm;
   var $80=((($55)-($79))|0);
   var $_0 = $80;label = 45; break;
  case 26: 
   var $82=(($62)&(255));
   var $83=$82 & 192;
   var $84=(($83)|(0))==128;
   if ($84) { label = 27; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 27: 
   var $86=$24 << 12;
   var $87=$86 & 61440;
   var $88=(($60)&(255));
   var $89=$88 << 6;
   var $90=$89 & 4032;
   var $91=$90 | $87;
   var $92=$82 & 63;
   var $93=$91 | $92;
   var $94=(($93)>>>(0)) > (($Maxcode)>>>(0));
   if ($94) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 28; break; }
  case 28: 
   var $96=(($frm_nxt_115+3)|0);
   var $frm_nxt_2 = $96;var $nchar16_t_1 = $nchar16_t_014;label = 43; break;
  case 29: 
   var $98=(($23)&(255)) < 245;
   if ($98) { label = 30; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 30: 
   var $100=$frm_nxt_115;
   var $101=((($22)-($100))|0);
   var $102=(($101)|(0)) < 4;
   if ($102) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 31; break; }
  case 31: 
   var $104=((($mx)-($nchar16_t_014))|0);
   var $105=(($104)>>>(0)) < 2;
   if ($105) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 32; break; }
  case 32: 
   var $107=(($frm_nxt_115+1)|0);
   var $108=HEAP8[($107)];
   var $109=(($frm_nxt_115+2)|0);
   var $110=HEAP8[($109)];
   var $111=(($frm_nxt_115+3)|0);
   var $112=HEAP8[($111)];
   if ((($24)|(0))==240) {
    label = 33; break;
   }
   else if ((($24)|(0))==244) {
    label = 35; break;
   }
   else {
   label = 37; break;
   }
  case 33: 
   var $_off=((($108)+(112))&255);
   var $114=(($_off)&(255)) < 48;
   if ($114) { label = 39; break; } else { label = 34; break; }
  case 34: 
   var $116=$frm;
   var $117=((($100)-($116))|0);
   var $_0 = $117;label = 45; break;
  case 35: 
   var $119=$108 & -16;
   var $120=(($119 << 24) >> 24)==-128;
   if ($120) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $122=$frm;
   var $123=((($100)-($122))|0);
   var $_0 = $123;label = 45; break;
  case 37: 
   var $125=$108 & -64;
   var $126=(($125 << 24) >> 24)==-128;
   if ($126) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $128=$frm;
   var $129=((($100)-($128))|0);
   var $_0 = $129;label = 45; break;
  case 39: 
   var $131=(($110)&(255));
   var $132=$131 & 192;
   var $133=(($132)|(0))==128;
   if ($133) { label = 40; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 40: 
   var $135=(($112)&(255));
   var $136=$135 & 192;
   var $137=(($136)|(0))==128;
   if ($137) { label = 41; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 41: 
   var $139=$24 << 18;
   var $140=$139 & 1835008;
   var $141=(($108)&(255));
   var $142=$141 << 12;
   var $143=$142 & 258048;
   var $144=$143 | $140;
   var $145=$131 << 6;
   var $146=$145 & 4032;
   var $147=$144 | $146;
   var $148=$135 & 63;
   var $149=$147 | $148;
   var $150=(($149)>>>(0)) > (($Maxcode)>>>(0));
   if ($150) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 42; break; }
  case 42: 
   var $152=((($nchar16_t_014)+(1))|0);
   var $153=(($frm_nxt_115+4)|0);
   var $frm_nxt_2 = $153;var $nchar16_t_1 = $152;label = 43; break;
  case 43: 
   var $nchar16_t_1;
   var $frm_nxt_2;
   var $155=((($nchar16_t_1)+(1))|0);
   var $156=(($frm_nxt_2)>>>(0)) < (($frm_end)>>>(0));
   var $157=(($155)>>>(0)) < (($mx)>>>(0));
   var $or_cond=$156 & $157;
   if ($or_cond) { var $nchar16_t_014 = $155;var $frm_nxt_115 = $frm_nxt_2;label = 8; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_2;label = 44; break; }
  case 44: 
   var $frm_nxt_1_lcssa;
   var $158=$frm_nxt_1_lcssa;
   var $159=$frm;
   var $160=((($158)-($159))|0);
   var $_0 = $160;label = 45; break;
  case 45: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6 >> 2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP = sp;
 return $2;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($frm_nxt)>>2)]=$frm;
   HEAP32[(($to_nxt)>>2)]=$to;
   var $1=$mode & 2;
   var $2=(($1)|(0))==0;
   if ($2) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $4=$to_end;
   var $5=$to;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) < 3;
   if ($7) { var $_0 = 1;label = 19; break; } else { label = 3; break; }
  case 3: 
   var $9=(($to+1)|0);
   HEAP32[(($to_nxt)>>2)]=$9;
   HEAP8[($to)]=-17;
   var $10=HEAP32[(($to_nxt)>>2)];
   var $11=(($10+1)|0);
   HEAP32[(($to_nxt)>>2)]=$11;
   HEAP8[($10)]=-69;
   var $12=HEAP32[(($to_nxt)>>2)];
   var $13=(($12+1)|0);
   HEAP32[(($to_nxt)>>2)]=$13;
   HEAP8[($12)]=-65;
   label = 4; break;
  case 4: 
   var $14=HEAP32[(($frm_nxt)>>2)];
   var $15=(($14)>>>(0)) < (($frm_end)>>>(0));
   if ($15) { label = 5; break; } else { var $_0 = 0;label = 19; break; }
  case 5: 
   var $16=$to_end;
   var $18 = $14;label = 6; break;
  case 6: 
   var $18;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & -2048;
   var $21=(($20)|(0))==55296;
   var $22=(($19)>>>(0)) > (($Maxcode)>>>(0));
   var $or_cond=$21 | $22;
   if ($or_cond) { var $_0 = 2;label = 19; break; } else { label = 7; break; }
  case 7: 
   var $24=(($19)>>>(0)) < 128;
   if ($24) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $26=HEAP32[(($to_nxt)>>2)];
   var $27=$26;
   var $28=((($16)-($27))|0);
   var $29=(($28)|(0)) < 1;
   if ($29) { var $_0 = 1;label = 19; break; } else { label = 9; break; }
  case 9: 
   var $31=(($19) & 255);
   var $32=(($26+1)|0);
   HEAP32[(($to_nxt)>>2)]=$32;
   HEAP8[($26)]=$31;
   label = 18; break;
  case 10: 
   var $34=(($19)>>>(0)) < 2048;
   if ($34) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $36=HEAP32[(($to_nxt)>>2)];
   var $37=$36;
   var $38=((($16)-($37))|0);
   var $39=(($38)|(0)) < 2;
   if ($39) { var $_0 = 1;label = 19; break; } else { label = 12; break; }
  case 12: 
   var $41=$19 >>> 6;
   var $42=$41 | 192;
   var $43=(($42) & 255);
   var $44=(($36+1)|0);
   HEAP32[(($to_nxt)>>2)]=$44;
   HEAP8[($36)]=$43;
   var $45=$19 & 63;
   var $46=$45 | 128;
   var $47=(($46) & 255);
   var $48=HEAP32[(($to_nxt)>>2)];
   var $49=(($48+1)|0);
   HEAP32[(($to_nxt)>>2)]=$49;
   HEAP8[($48)]=$47;
   label = 18; break;
  case 13: 
   var $51=(($19)>>>(0)) < 65536;
   var $52=HEAP32[(($to_nxt)>>2)];
   var $53=$52;
   var $54=((($16)-($53))|0);
   if ($51) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $56=(($54)|(0)) < 3;
   if ($56) { var $_0 = 1;label = 19; break; } else { label = 15; break; }
  case 15: 
   var $58=$19 >>> 12;
   var $59=$58 | 224;
   var $60=(($59) & 255);
   var $61=(($52+1)|0);
   HEAP32[(($to_nxt)>>2)]=$61;
   HEAP8[($52)]=$60;
   var $62=$19 >>> 6;
   var $63=$62 & 63;
   var $64=$63 | 128;
   var $65=(($64) & 255);
   var $66=HEAP32[(($to_nxt)>>2)];
   var $67=(($66+1)|0);
   HEAP32[(($to_nxt)>>2)]=$67;
   HEAP8[($66)]=$65;
   var $68=$19 & 63;
   var $69=$68 | 128;
   var $70=(($69) & 255);
   var $71=HEAP32[(($to_nxt)>>2)];
   var $72=(($71+1)|0);
   HEAP32[(($to_nxt)>>2)]=$72;
   HEAP8[($71)]=$70;
   label = 18; break;
  case 16: 
   var $74=(($54)|(0)) < 4;
   if ($74) { var $_0 = 1;label = 19; break; } else { label = 17; break; }
  case 17: 
   var $76=$19 >>> 18;
   var $77=$76 | 240;
   var $78=(($77) & 255);
   var $79=(($52+1)|0);
   HEAP32[(($to_nxt)>>2)]=$79;
   HEAP8[($52)]=$78;
   var $80=$19 >>> 12;
   var $81=$80 & 63;
   var $82=$81 | 128;
   var $83=(($82) & 255);
   var $84=HEAP32[(($to_nxt)>>2)];
   var $85=(($84+1)|0);
   HEAP32[(($to_nxt)>>2)]=$85;
   HEAP8[($84)]=$83;
   var $86=$19 >>> 6;
   var $87=$86 & 63;
   var $88=$87 | 128;
   var $89=(($88) & 255);
   var $90=HEAP32[(($to_nxt)>>2)];
   var $91=(($90+1)|0);
   HEAP32[(($to_nxt)>>2)]=$91;
   HEAP8[($90)]=$89;
   var $92=$19 & 63;
   var $93=$92 | 128;
   var $94=(($93) & 255);
   var $95=HEAP32[(($to_nxt)>>2)];
   var $96=(($95+1)|0);
   HEAP32[(($to_nxt)>>2)]=$96;
   HEAP8[($95)]=$94;
   label = 18; break;
  case 18: 
   var $98=HEAP32[(($frm_nxt)>>2)];
   var $99=(($98+4)|0);
   HEAP32[(($frm_nxt)>>2)]=$99;
   var $100=(($99)>>>(0)) < (($frm_end)>>>(0));
   if ($100) { var $18 = $99;label = 6; break; } else { var $_0 = 0;label = 19; break; }
  case 19: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11 >> 2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP = sp;
 return $2;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[(($frm_nxt)>>2)]=$frm;
   HEAP32[(($to_nxt)>>2)]=$to;
   var $1=$mode & 4;
   var $2=(($1)|(0))==0;
   var $_pre5=HEAP32[(($frm_nxt)>>2)];
   if ($2) { var $21 = $_pre5;label = 7; break; } else { label = 2; break; }
  case 2: 
   var $4=$frm_end;
   var $5=$_pre5;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) > 2;
   if ($7) { label = 3; break; } else { var $21 = $_pre5;label = 7; break; }
  case 3: 
   var $9=HEAP8[($_pre5)];
   var $10=(($9 << 24) >> 24)==-17;
   if ($10) { label = 4; break; } else { var $21 = $_pre5;label = 7; break; }
  case 4: 
   var $12=(($_pre5+1)|0);
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24)==-69;
   if ($14) { label = 5; break; } else { var $21 = $_pre5;label = 7; break; }
  case 5: 
   var $16=(($_pre5+2)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24)==-65;
   if ($18) { label = 6; break; } else { var $21 = $_pre5;label = 7; break; }
  case 6: 
   var $20=(($_pre5+3)|0);
   HEAP32[(($frm_nxt)>>2)]=$20;
   var $21 = $20;label = 7; break;
  case 7: 
   var $21;
   var $22=(($21)>>>(0)) < (($frm_end)>>>(0));
   if ($22) { label = 8; break; } else { var $147 = $21;label = 39; break; }
  case 8: 
   var $23=$frm_end;
   var $_pre=HEAP32[(($to_nxt)>>2)];
   var $26 = $_pre;var $25 = $21;label = 9; break;
  case 9: 
   var $25;
   var $26;
   var $27=(($26)>>>(0)) < (($to_end)>>>(0));
   if ($27) { label = 10; break; } else { var $147 = $25;label = 39; break; }
  case 10: 
   var $29=HEAP8[($25)];
   var $30=(($29)&(255));
   var $31=(($29 << 24) >> 24) > -1;
   if ($31) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $33=(($30)>>>(0)) > (($Maxcode)>>>(0));
   if ($33) { var $_0 = 2;label = 40; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($26)>>2)]=$30;
   var $35=HEAP32[(($frm_nxt)>>2)];
   var $36=(($35+1)|0);
   HEAP32[(($frm_nxt)>>2)]=$36;
   label = 38; break;
  case 13: 
   var $38=(($29)&(255)) < 194;
   if ($38) { var $_0 = 2;label = 40; break; } else { label = 14; break; }
  case 14: 
   var $40=(($29)&(255)) < 224;
   if ($40) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $42=$25;
   var $43=((($23)-($42))|0);
   var $44=(($43)|(0)) < 2;
   if ($44) { var $_0 = 1;label = 40; break; } else { label = 16; break; }
  case 16: 
   var $46=(($25+1)|0);
   var $47=HEAP8[($46)];
   var $48=(($47)&(255));
   var $49=$48 & 192;
   var $50=(($49)|(0))==128;
   if ($50) { label = 17; break; } else { var $_0 = 2;label = 40; break; }
  case 17: 
   var $52=$30 << 6;
   var $53=$52 & 1984;
   var $54=$48 & 63;
   var $55=$54 | $53;
   var $56=(($55)>>>(0)) > (($Maxcode)>>>(0));
   if ($56) { var $_0 = 2;label = 40; break; } else { label = 18; break; }
  case 18: 
   HEAP32[(($26)>>2)]=$55;
   var $58=HEAP32[(($frm_nxt)>>2)];
   var $59=(($58+2)|0);
   HEAP32[(($frm_nxt)>>2)]=$59;
   label = 38; break;
  case 19: 
   var $61=(($29)&(255)) < 240;
   if ($61) { label = 20; break; } else { label = 28; break; }
  case 20: 
   var $63=$25;
   var $64=((($23)-($63))|0);
   var $65=(($64)|(0)) < 3;
   if ($65) { var $_0 = 1;label = 40; break; } else { label = 21; break; }
  case 21: 
   var $67=(($25+1)|0);
   var $68=HEAP8[($67)];
   var $69=(($25+2)|0);
   var $70=HEAP8[($69)];
   if ((($30)|(0))==224) {
    label = 22; break;
   }
   else if ((($30)|(0))==237) {
    label = 23; break;
   }
   else {
   label = 24; break;
   }
  case 22: 
   var $72=$68 & -32;
   var $73=(($72 << 24) >> 24)==-96;
   if ($73) { label = 25; break; } else { var $_0 = 2;label = 40; break; }
  case 23: 
   var $75=$68 & -32;
   var $76=(($75 << 24) >> 24)==-128;
   if ($76) { label = 25; break; } else { var $_0 = 2;label = 40; break; }
  case 24: 
   var $78=$68 & -64;
   var $79=(($78 << 24) >> 24)==-128;
   if ($79) { label = 25; break; } else { var $_0 = 2;label = 40; break; }
  case 25: 
   var $81=(($70)&(255));
   var $82=$81 & 192;
   var $83=(($82)|(0))==128;
   if ($83) { label = 26; break; } else { var $_0 = 2;label = 40; break; }
  case 26: 
   var $85=$30 << 12;
   var $86=$85 & 61440;
   var $87=(($68)&(255));
   var $88=$87 << 6;
   var $89=$88 & 4032;
   var $90=$89 | $86;
   var $91=$81 & 63;
   var $92=$90 | $91;
   var $93=(($92)>>>(0)) > (($Maxcode)>>>(0));
   if ($93) { var $_0 = 2;label = 40; break; } else { label = 27; break; }
  case 27: 
   HEAP32[(($26)>>2)]=$92;
   var $95=HEAP32[(($frm_nxt)>>2)];
   var $96=(($95+3)|0);
   HEAP32[(($frm_nxt)>>2)]=$96;
   label = 38; break;
  case 28: 
   var $98=(($29)&(255)) < 245;
   if ($98) { label = 29; break; } else { var $_0 = 2;label = 40; break; }
  case 29: 
   var $100=$25;
   var $101=((($23)-($100))|0);
   var $102=(($101)|(0)) < 4;
   if ($102) { var $_0 = 1;label = 40; break; } else { label = 30; break; }
  case 30: 
   var $104=(($25+1)|0);
   var $105=HEAP8[($104)];
   var $106=(($25+2)|0);
   var $107=HEAP8[($106)];
   var $108=(($25+3)|0);
   var $109=HEAP8[($108)];
   if ((($30)|(0))==240) {
    label = 31; break;
   }
   else if ((($30)|(0))==244) {
    label = 32; break;
   }
   else {
   label = 33; break;
   }
  case 31: 
   var $_off=((($105)+(112))&255);
   var $111=(($_off)&(255)) < 48;
   if ($111) { label = 34; break; } else { var $_0 = 2;label = 40; break; }
  case 32: 
   var $113=$105 & -16;
   var $114=(($113 << 24) >> 24)==-128;
   if ($114) { label = 34; break; } else { var $_0 = 2;label = 40; break; }
  case 33: 
   var $116=$105 & -64;
   var $117=(($116 << 24) >> 24)==-128;
   if ($117) { label = 34; break; } else { var $_0 = 2;label = 40; break; }
  case 34: 
   var $119=(($107)&(255));
   var $120=$119 & 192;
   var $121=(($120)|(0))==128;
   if ($121) { label = 35; break; } else { var $_0 = 2;label = 40; break; }
  case 35: 
   var $123=(($109)&(255));
   var $124=$123 & 192;
   var $125=(($124)|(0))==128;
   if ($125) { label = 36; break; } else { var $_0 = 2;label = 40; break; }
  case 36: 
   var $127=$30 << 18;
   var $128=$127 & 1835008;
   var $129=(($105)&(255));
   var $130=$129 << 12;
   var $131=$130 & 258048;
   var $132=$131 | $128;
   var $133=$119 << 6;
   var $134=$133 & 4032;
   var $135=$132 | $134;
   var $136=$123 & 63;
   var $137=$135 | $136;
   var $138=(($137)>>>(0)) > (($Maxcode)>>>(0));
   if ($138) { var $_0 = 2;label = 40; break; } else { label = 37; break; }
  case 37: 
   HEAP32[(($26)>>2)]=$137;
   var $140=HEAP32[(($frm_nxt)>>2)];
   var $141=(($140+4)|0);
   HEAP32[(($frm_nxt)>>2)]=$141;
   label = 38; break;
  case 38: 
   var $143=HEAP32[(($to_nxt)>>2)];
   var $144=(($143+4)|0);
   HEAP32[(($to_nxt)>>2)]=$144;
   var $145=HEAP32[(($frm_nxt)>>2)];
   var $146=(($145)>>>(0)) < (($frm_end)>>>(0));
   if ($146) { var $26 = $144;var $25 = $145;label = 9; break; } else { var $147 = $145;label = 39; break; }
  case 39: 
   var $147;
   var $148=(($147)>>>(0)) < (($frm_end)>>>(0));
   var $149=(($148)&(1));
   var $_0 = $149;label = 40; break;
  case 40: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0);
 return $2;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$mode & 4;
   var $2=(($1)|(0))==0;
   if ($2) { var $frm_nxt_1_ph = $frm;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $4=$frm_end;
   var $5=$frm;
   var $6=((($4)-($5))|0);
   var $7=(($6)|(0)) > 2;
   if ($7) { label = 3; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 3: 
   var $9=HEAP8[($frm)];
   var $10=(($9 << 24) >> 24)==-17;
   if ($10) { label = 4; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 4: 
   var $12=(($frm+1)|0);
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24)==-69;
   if ($14) { label = 5; break; } else { var $frm_nxt_1_ph = $frm;label = 6; break; }
  case 5: 
   var $16=(($frm+2)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24)==-65;
   var $19=(($frm+3)|0);
   var $_frm=$18 ? $19 : $frm;
   var $frm_nxt_1_ph = $_frm;label = 6; break;
  case 6: 
   var $frm_nxt_1_ph;
   var $20=(($frm_nxt_1_ph)>>>(0)) < (($frm_end)>>>(0));
   var $21=(($mx)|(0))!=0;
   var $or_cond13=$20 & $21;
   if ($or_cond13) { label = 7; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_1_ph;label = 44; break; }
  case 7: 
   var $22=$frm_end;
   var $nchar32_t_014 = 1;var $frm_nxt_115 = $frm_nxt_1_ph;label = 8; break;
  case 8: 
   var $frm_nxt_115;
   var $nchar32_t_014;
   var $24=HEAP8[($frm_nxt_115)];
   var $25=(($24)&(255));
   var $26=(($24 << 24) >> 24) > -1;
   if ($26) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $28=(($25)>>>(0)) > (($Maxcode)>>>(0));
   if ($28) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 10; break; }
  case 10: 
   var $30=(($frm_nxt_115+1)|0);
   var $frm_nxt_2 = $30;label = 42; break;
  case 11: 
   var $32=(($24)&(255)) < 194;
   if ($32) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 12; break; }
  case 12: 
   var $34=(($24)&(255)) < 224;
   if ($34) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $36=$frm_nxt_115;
   var $37=((($22)-($36))|0);
   var $38=(($37)|(0)) < 2;
   if ($38) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 14; break; }
  case 14: 
   var $40=(($frm_nxt_115+1)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$42 & 192;
   var $44=(($43)|(0))==128;
   if ($44) { label = 15; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 15: 
   var $46=$25 << 6;
   var $47=$46 & 1984;
   var $48=$42 & 63;
   var $49=$48 | $47;
   var $50=(($49)>>>(0)) > (($Maxcode)>>>(0));
   if ($50) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 16; break; }
  case 16: 
   var $52=(($frm_nxt_115+2)|0);
   var $frm_nxt_2 = $52;label = 42; break;
  case 17: 
   var $54=(($24)&(255)) < 240;
   if ($54) { label = 18; break; } else { label = 29; break; }
  case 18: 
   var $56=$frm_nxt_115;
   var $57=((($22)-($56))|0);
   var $58=(($57)|(0)) < 3;
   if ($58) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 19; break; }
  case 19: 
   var $60=(($frm_nxt_115+1)|0);
   var $61=HEAP8[($60)];
   var $62=(($frm_nxt_115+2)|0);
   var $63=HEAP8[($62)];
   if ((($25)|(0))==224) {
    label = 20; break;
   }
   else if ((($25)|(0))==237) {
    label = 22; break;
   }
   else {
   label = 24; break;
   }
  case 20: 
   var $65=$61 & -32;
   var $66=(($65 << 24) >> 24)==-96;
   if ($66) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $68=$frm;
   var $69=((($56)-($68))|0);
   var $_0 = $69;label = 45; break;
  case 22: 
   var $71=$61 & -32;
   var $72=(($71 << 24) >> 24)==-128;
   if ($72) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $74=$frm;
   var $75=((($56)-($74))|0);
   var $_0 = $75;label = 45; break;
  case 24: 
   var $77=$61 & -64;
   var $78=(($77 << 24) >> 24)==-128;
   if ($78) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $80=$frm;
   var $81=((($56)-($80))|0);
   var $_0 = $81;label = 45; break;
  case 26: 
   var $83=(($63)&(255));
   var $84=$83 & 192;
   var $85=(($84)|(0))==128;
   if ($85) { label = 27; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 27: 
   var $87=$25 << 12;
   var $88=$87 & 61440;
   var $89=(($61)&(255));
   var $90=$89 << 6;
   var $91=$90 & 4032;
   var $92=$91 | $88;
   var $93=$83 & 63;
   var $94=$92 | $93;
   var $95=(($94)>>>(0)) > (($Maxcode)>>>(0));
   if ($95) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 28; break; }
  case 28: 
   var $97=(($frm_nxt_115+3)|0);
   var $frm_nxt_2 = $97;label = 42; break;
  case 29: 
   var $99=(($24)&(255)) < 245;
   if ($99) { label = 30; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 30: 
   var $101=$frm_nxt_115;
   var $102=((($22)-($101))|0);
   var $103=(($102)|(0)) < 4;
   if ($103) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 31; break; }
  case 31: 
   var $105=(($frm_nxt_115+1)|0);
   var $106=HEAP8[($105)];
   var $107=(($frm_nxt_115+2)|0);
   var $108=HEAP8[($107)];
   var $109=(($frm_nxt_115+3)|0);
   var $110=HEAP8[($109)];
   if ((($25)|(0))==240) {
    label = 32; break;
   }
   else if ((($25)|(0))==244) {
    label = 34; break;
   }
   else {
   label = 36; break;
   }
  case 32: 
   var $_off=((($106)+(112))&255);
   var $112=(($_off)&(255)) < 48;
   if ($112) { label = 38; break; } else { label = 33; break; }
  case 33: 
   var $114=$frm;
   var $115=((($101)-($114))|0);
   var $_0 = $115;label = 45; break;
  case 34: 
   var $117=$106 & -16;
   var $118=(($117 << 24) >> 24)==-128;
   if ($118) { label = 38; break; } else { label = 35; break; }
  case 35: 
   var $120=$frm;
   var $121=((($101)-($120))|0);
   var $_0 = $121;label = 45; break;
  case 36: 
   var $123=$106 & -64;
   var $124=(($123 << 24) >> 24)==-128;
   if ($124) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $126=$frm;
   var $127=((($101)-($126))|0);
   var $_0 = $127;label = 45; break;
  case 38: 
   var $129=(($108)&(255));
   var $130=$129 & 192;
   var $131=(($130)|(0))==128;
   if ($131) { label = 39; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 39: 
   var $133=(($110)&(255));
   var $134=$133 & 192;
   var $135=(($134)|(0))==128;
   if ($135) { label = 40; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; }
  case 40: 
   var $137=$25 << 18;
   var $138=$137 & 1835008;
   var $139=(($106)&(255));
   var $140=$139 << 12;
   var $141=$140 & 258048;
   var $142=$141 | $138;
   var $143=$129 << 6;
   var $144=$143 & 4032;
   var $145=$142 | $144;
   var $146=$133 & 63;
   var $147=$145 | $146;
   var $148=(($147)>>>(0)) > (($Maxcode)>>>(0));
   if ($148) { var $frm_nxt_1_lcssa = $frm_nxt_115;label = 44; break; } else { label = 41; break; }
  case 41: 
   var $150=(($frm_nxt_115+4)|0);
   var $frm_nxt_2 = $150;label = 42; break;
  case 42: 
   var $frm_nxt_2;
   var $152=(($frm_nxt_2)>>>(0)) < (($frm_end)>>>(0));
   var $153=(($nchar32_t_014)>>>(0)) < (($mx)>>>(0));
   var $or_cond=$152 & $153;
   if ($or_cond) { label = 43; break; } else { var $frm_nxt_1_lcssa = $frm_nxt_2;label = 44; break; }
  case 43: 
   var $phitmp=((($nchar32_t_014)+(1))|0);
   var $nchar32_t_014 = $phitmp;var $frm_nxt_115 = $frm_nxt_2;label = 8; break;
  case 44: 
   var $frm_nxt_1_lcssa;
   var $154=$frm_nxt_1_lcssa;
   var $155=$frm;
   var $156=((($154)-($155))|0);
   var $_0 = $156;label = 45; break;
  case 45: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2976)|0));
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2976)|0));
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2928)|0));
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2928)|0));
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 var label = 0;
 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 var label = 0;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 var label = 0;
 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 var label = 0;
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result, $1);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result, $1);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result, ((1304)|0), 4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result, $this) {
 var label = 0;
 var $1=_wcslen(((1280)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result, ((1280)|0), $1);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result, $this) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result, ((1272)|0), 5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result, $this) {
 var label = 0;
 var $1=_wcslen(((1248)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result, ((1248)|0), $1);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14344)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 21; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14344);
   var $5=(($4)|(0))==0;
   if ($5) { label = 21; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14232)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14232);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(11672, 0, 168);
   var $12=_atexit(756, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11672)|0), ((1568)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 22; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11684)|0), ((1560)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 22; break; }
  case 8: 
   var $16 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11696)|0), ((1552)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 22; break; }
  case 9: 
   var $17 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11708)|0), ((1536)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 22; break; }
  case 10: 
   var $18 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11720)|0), ((1520)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $19 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11732)|0), ((1512)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 22; break; }
  case 12: 
   var $20 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11744)|0), ((1496)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 22; break; }
  case 13: 
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11756)|0), ((1488)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 22; break; }
  case 14: 
   var $22 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11768)|0), ((1480)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 22; break; }
  case 15: 
   var $23 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11780)|0), ((1472)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 22; break; }
  case 16: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11792)|0), ((1464)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 22; break; }
  case 17: 
   var $25 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11804)|0), ((1432)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $26 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11816)|0), ((1424)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $27 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11828)|0), ((1416)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[((12744)>>2)]=((11672)|0);
   label = 21; break;
  case 21: 
   var $29=HEAP32[((12744)>>2)];
   return $29;
  case 22: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14288)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 21; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14288);
   var $5=(($4)|(0))==0;
   if ($5) { label = 21; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14208)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14208);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(10928, 0, 168);
   var $12=_atexit(384, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10928)|0), ((1944)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 22; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10940)|0), ((1912)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 22; break; }
  case 8: 
   var $16 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10952)|0), ((1880)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 22; break; }
  case 9: 
   var $17 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10964)|0), ((1840)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 22; break; }
  case 10: 
   var $18 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10976)|0), ((1800)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $19 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10988)|0), ((1768)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 22; break; }
  case 12: 
   var $20 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11000)|0), ((1728)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 22; break; }
  case 13: 
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11012)|0), ((1712)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 22; break; }
  case 14: 
   var $22 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11024)|0), ((1656)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 22; break; }
  case 15: 
   var $23 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11036)|0), ((1640)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 22; break; }
  case 16: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11048)|0), ((1624)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 22; break; }
  case 17: 
   var $25 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11060)|0), ((1608)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $26 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11072)|0), ((1592)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $27 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11084)|0), ((1576)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 22; break; }
  case 20: 
   HEAP32[((12656)>>2)]=((10928)|0);
   label = 21; break;
  case 21: 
   var $29=HEAP32[((12656)>>2)];
   return $29;
  case 22: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14336)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14336);
   var $5=(($4)|(0))==0;
   if ($5) { label = 31; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14224)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14224);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(11384, 0, 288);
   var $12=_atexit(430, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11384)|0), ((288)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 32; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11396)|0), ((272)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 32; break; }
  case 8: 
   var $16 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11408)|0), ((264)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 32; break; }
  case 9: 
   var $17 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11420)|0), ((256)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 32; break; }
  case 10: 
   var $18 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11432)|0), ((248)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 32; break; }
  case 11: 
   var $19 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11444)|0), ((240)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 32; break; }
  case 12: 
   var $20 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11456)|0), ((232)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 32; break; }
  case 13: 
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11468)|0), ((224)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 32; break; }
  case 14: 
   var $22 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11480)|0), ((168)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 32; break; }
  case 15: 
   var $23 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11492)|0), ((160)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 32; break; }
  case 16: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11504)|0), ((144)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 32; break; }
  case 17: 
   var $25 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11516)|0), ((128)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 32; break; }
  case 18: 
   var $26 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11528)|0), ((120)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 32; break; }
  case 19: 
   var $27 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11540)|0), ((112)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 32; break; }
  case 20: 
   var $28 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11552)|0), ((104)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 32; break; }
  case 21: 
   var $29 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11564)|0), ((96)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 32; break; }
  case 22: 
   var $30 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11576)|0), ((248)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 32; break; }
  case 23: 
   var $31 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11588)|0), ((88)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 32; break; }
  case 24: 
   var $32 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11600)|0), ((80)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 32; break; }
  case 25: 
   var $33 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11612)|0), ((2008)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 32; break; }
  case 26: 
   var $34 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11624)|0), ((2000)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 32; break; }
  case 27: 
   var $35 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11636)|0), ((1992)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $36 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11648)|0), ((1984)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $37 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11660)|0), ((1976)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 32; break; }
  case 30: 
   HEAP32[((12736)>>2)]=((11384)|0);
   label = 31; break;
  case 31: 
   var $39=HEAP32[((12736)>>2)];
   return $39;
  case 32: 
   var $41$0 = ___cxa_find_matching_catch(-1, -1); $41$1 = tempRet0;
   ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14280)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 31; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14280);
   var $5=(($4)|(0))==0;
   if ($5) { label = 31; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14200)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14200);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(10640, 0, 288);
   var $12=_atexit(328, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10640)|0), ((824)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 32; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10652)|0), ((784)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 32; break; }
  case 8: 
   var $16 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10664)|0), ((760)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 32; break; }
  case 9: 
   var $17 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10676)|0), ((736)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 32; break; }
  case 10: 
   var $18 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10688)|0), ((424)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 32; break; }
  case 11: 
   var $19 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10700)|0), ((712)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 32; break; }
  case 12: 
   var $20 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10712)|0), ((688)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 32; break; }
  case 13: 
   var $21 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10724)|0), ((656)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 32; break; }
  case 14: 
   var $22 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10736)|0), ((616)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 32; break; }
  case 15: 
   var $23 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10748)|0), ((584)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 32; break; }
  case 16: 
   var $24 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10760)|0), ((544)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 32; break; }
  case 17: 
   var $25 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10772)|0), ((504)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 32; break; }
  case 18: 
   var $26 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10784)|0), ((488)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 32; break; }
  case 19: 
   var $27 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10796)|0), ((472)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 32; break; }
  case 20: 
   var $28 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10808)|0), ((456)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 32; break; }
  case 21: 
   var $29 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10820)|0), ((440)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 32; break; }
  case 22: 
   var $30 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10832)|0), ((424)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 32; break; }
  case 23: 
   var $31 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10844)|0), ((408)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 32; break; }
  case 24: 
   var $32 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10856)|0), ((392)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 32; break; }
  case 25: 
   var $33 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10868)|0), ((376)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 32; break; }
  case 26: 
   var $34 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10880)|0), ((344)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 32; break; }
  case 27: 
   var $35 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10892)|0), ((328)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $36 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10904)|0), ((312)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $37 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((10916)|0), ((296)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 32; break; }
  case 30: 
   HEAP32[((12648)>>2)]=((10640)|0);
   label = 31; break;
  case 31: 
   var $39=HEAP32[((12648)>>2)];
   return $39;
  case 32: 
   var $41$0 = ___cxa_find_matching_catch(-1, -1); $41$1 = tempRet0;
   ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14352)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14352);
   var $5=(($4)|(0))==0;
   if ($5) { label = 9; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14240)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14240);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(11840, 0, 288);
   var $12=_atexit(324, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11840)|0), ((864)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11852)|0), ((856)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 10; break; }
  case 8: 
   HEAP32[((12752)>>2)]=((11840)|0);
   label = 9; break;
  case 9: 
   var $17=HEAP32[((12752)>>2)];
   return $17;
  case 10: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14296)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14296);
   var $5=(($4)|(0))==0;
   if ($5) { label = 9; break; } else { label = 3; break; }
  case 3: 
   var $7=HEAP8[(14216)];
   var $8=(($7 << 24) >> 24)==0;
   if ($8) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $10=___cxa_guard_acquire(14216);
   var $11=(($10)|(0))==0;
   if ($11) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _memset(11096, 0, 288);
   var $12=_atexit(714, 0, ___dso_handle);
   label = 6; break;
  case 6: 
   var $14 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11096)|0), ((888)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $15 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11108)|0), ((872)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 10; break; }
  case 8: 
   HEAP32[((12664)>>2)]=((11096)|0);
   label = 9; break;
  case 9: 
   var $17=HEAP32[((12664)>>2)];
   return $17;
  case 10: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14360)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14360);
   var $5=(($4)|(0))==0;
   if ($5) { label = 5; break; } else { label = 3; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12760, ((1216)|0), 8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $6=_atexit((748), 12760, ___dso_handle);
   label = 5; break;
  case 5: 
   return 12760;
  case 6: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14304)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14304);
   var $5=(($4)|(0))==0;
   if ($5) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7 = (function() { try { __THREW__ = 0; return _wcslen(((1176)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12672, ((1176)|0), $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $8=_atexit((502), 12672, ___dso_handle);
   label = 6; break;
  case 6: 
   return 12672;
  case 7: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14384)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14384);
   var $5=(($4)|(0))==0;
   if ($5) { label = 5; break; } else { label = 3; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12808, ((1144)|0), 8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $6=_atexit((748), 12808, ___dso_handle);
   label = 5; break;
  case 5: 
   return 12808;
  case 6: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14328)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14328);
   var $5=(($4)|(0))==0;
   if ($5) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7 = (function() { try { __THREW__ = 0; return _wcslen(((1104)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12720, ((1104)|0), $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $8=_atexit((502), 12720, ___dso_handle);
   label = 6; break;
  case 6: 
   return 12720;
  case 7: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14376)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14376);
   var $5=(($4)|(0))==0;
   if ($5) { label = 5; break; } else { label = 3; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12792, ((1080)|0), 20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $6=_atexit((748), 12792, ___dso_handle);
   label = 5; break;
  case 5: 
   return 12792;
  case 6: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14320)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14320);
   var $5=(($4)|(0))==0;
   if ($5) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7 = (function() { try { __THREW__ = 0; return _wcslen(((992)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12704, ((992)|0), $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $8=_atexit((502), 12704, ___dso_handle);
   label = 6; break;
  case 6: 
   return 12704;
  case 7: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14368)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14368);
   var $5=(($4)|(0))==0;
   if ($5) { label = 5; break; } else { label = 3; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12776, ((976)|0), 11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $6=_atexit((748), 12776, ___dso_handle);
   label = 5; break;
  case 5: 
   return 12776;
  case 6: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(14312)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $4=___cxa_guard_acquire(14312);
   var $5=(($4)|(0))==0;
   if ($5) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7 = (function() { try { __THREW__ = 0; return _wcslen(((928)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12688, ((928)|0), $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $8=_atexit((502), 12688, ___dso_handle);
   label = 6; break;
  case 6: 
   return 12688;
  case 7: 
   var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
   ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $_idx=$__vp;
   var $_idx_val=HEAP32[(($_idx)>>2)];
   var $_idx2=(($__vp+4)|0);
   var $1=$_idx2;
   var $ld$0$0=(($1)|0);
   var $_idx2_val$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($1+4)|0);
   var $_idx2_val$1=HEAP32[(($ld$1$1)>>2)];
   var $2=$_idx2_val$1;
   var $3=$_idx_val;
   var $4=(($3+$2)|0);
   var $5=$4;
   var $6=$_idx2_val$0;
   var $7=$6 & 1;
   var $8=(($7)|(0))==0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$4;
   var $11=HEAP32[(($10)>>2)];
   var $12=((($6)-(1))|0);
   var $13=(($11+$12)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $18 = $15;label = 4; break;
  case 3: 
   var $17=$6;
   var $18 = $17;label = 4; break;
  case 4: 
   var $18;
   FUNCTION_TABLE[$18]($5);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($this+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$2;
   var $6=$4;
   var $7=((($5)-($6))|0);
   var $8=$7 >> 2;
   var $9=(($8)>>>(0)) < (($__n)>>>(0));
   if ($9) { label = 5; break; } else { var $_0_i = $__n;var $10 = $4;label = 2; break; }
  case 2: 
   var $10;
   var $_0_i;
   var $11=(($10)|(0))==0;
   if ($11) { var $13 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   HEAP32[(($10)>>2)]=0;
   var $_pre2_i=HEAP32[(($3)>>2)];
   var $13 = $_pre2_i;label = 4; break;
  case 4: 
   var $13;
   var $14=(($13+4)|0);
   HEAP32[(($3)>>2)]=$14;
   var $15=((($_0_i)-(1))|0);
   var $16=(($15)|(0))==0;
   if ($16) { label = 20; break; } else { var $_0_i = $15;var $10 = $14;label = 2; break; }
  case 5: 
   var $18=(($this+16)|0);
   var $19=(($this)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=((($6)-($21))|0);
   var $23=$22 >> 2;
   var $24=((($23)+($__n))|0);
   var $25=(($24)>>>(0)) > 1073741823;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   throw "Reached an unreachable!";
  case 7: 
   var $28=((($5)-($21))|0);
   var $29=$28 >> 2;
   var $30=(($29)>>>(0)) > 536870910;
   if ($30) { var $_058 = 1073741823;label = 11; break; } else { label = 8; break; }
  case 8: 
   var $31=$28 >> 1;
   var $32=(($31)>>>(0)) < (($24)>>>(0));
   var $33=$32 ? $24 : $31;
   var $34=(($33)|(0))==0;
   if ($34) { var $46 = 0;var $_06 = 0;label = 12; break; } else { label = 9; break; }
  case 9: 
   var $36=(($this+128)|0);
   var $37=HEAP8[($36)];
   var $38=$37 & 1;
   var $39=(($38 << 24) >> 24)==0;
   var $40=(($33)>>>(0)) < 29;
   var $or_cond_i_i=$39 & $40;
   if ($or_cond_i_i) { label = 10; break; } else { var $_058 = $33;label = 11; break; }
  case 10: 
   HEAP8[($36)]=1;
   var $42=$18;
   var $46 = $42;var $_06 = $33;label = 12; break;
  case 11: 
   var $_058;
   var $43=$_058 << 2;
   var $44=__Znwj($43);
   var $45=$44;
   var $46 = $45;var $_06 = $_058;label = 12; break;
  case 12: 
   var $_06;
   var $46;
   var $47=(($46+($23<<2))|0);
   var $_0_i2 = $__n;var $49 = $47;label = 13; break;
  case 13: 
   var $49;
   var $_0_i2;
   var $50=(($49)|(0))==0;
   if ($50) { var $52 = 0;label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP32[(($49)>>2)]=0;
   var $52 = $49;label = 15; break;
  case 15: 
   var $52;
   var $53=(($52+4)|0);
   var $54=((($_0_i2)-(1))|0);
   var $55=(($54)|(0))==0;
   if ($55) { label = 16; break; } else { var $_0_i2 = $54;var $49 = $53;label = 13; break; }
  case 16: 
   var $56=(($46+($_06<<2))|0);
   var $57=HEAP32[(($19)>>2)];
   var $58=HEAP32[(($3)>>2)];
   var $59=$58;
   var $60=$57;
   var $61=((($59)-($60))|0);
   var $62=$61 >> 2;
   var $_sum=((($23)-($62))|0);
   var $63=(($46+($_sum<<2))|0);
   var $64=$63;
   var $65=$57;
   assert($61 % 1 === 0);(_memcpy($64, $65, $61)|0);
   HEAP32[(($19)>>2)]=$63;
   HEAP32[(($3)>>2)]=$53;
   HEAP32[(($1)>>2)]=$56;
   var $66=(($57)|(0))==0;
   if ($66) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $68=$18;
   var $69=(($57)|(0))==(($68)|(0));
   if ($69) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $71=(($this+128)|0);
   HEAP8[($71)]=0;
   label = 20; break;
  case 19: 
   __ZdlPv($65);
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0) {
 var label = 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11372)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11360)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11348)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11336)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11324)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11312)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11300)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11288)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11276)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11264)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11252)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11240)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11228)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11216)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11204)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11192)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11180)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11168)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11156)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11144)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11132)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11120)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11108)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11096)|0));
 return;
}
function ___cxx_global_array_dtor53($0) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12116)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12104)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12092)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12080)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12068)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12056)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12044)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12032)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12020)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12008)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11996)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11984)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11972)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11960)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11948)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11936)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11924)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11912)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11900)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11888)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11876)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11852)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11840)|0));
 return;
}
function ___cxx_global_array_dtor56($0) {
 var label = 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10916)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10904)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10892)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10880)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10868)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10856)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10844)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10832)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10820)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10808)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10796)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10784)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10772)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10760)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10748)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10736)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10724)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10712)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10700)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10688)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10676)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10664)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10652)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10640)|0));
 return;
}
function ___cxx_global_array_dtor81($0) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11660)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11648)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11636)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11624)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11612)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11600)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11588)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11576)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11564)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11552)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11540)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11528)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11516)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11504)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11492)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11480)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11468)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11456)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11444)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11432)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11420)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11408)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11396)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11384)|0));
 return;
}
function ___cxx_global_array_dtor105($0) {
 var label = 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11084)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11072)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11060)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11048)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11036)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11024)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11012)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11000)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10988)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10976)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10964)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10952)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10940)|0));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((10928)|0));
 return;
}
function ___cxx_global_array_dtor120($0) {
 var label = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11828)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11816)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11804)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11792)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11780)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11768)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11756)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11744)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11732)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11720)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11708)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11696)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11684)|0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11672)|0));
 return;
}
function _mbrlen($s, $n, $st) {
 var label = 0;
 var $1=(($st)|(0))!=0;
 var $2=$1 ? $st : 10160;
 var $3=_mbrtowc(0, $s, $n, $2);
 return $3;
}
function _mbrtowc($wc, $src, $n, $st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   HEAP32[(($1)>>2)]=$wc;
   var $2=(($st)|(0))==0;
   var $_01=$2 ? 10152 : $st;
   var $3=(($_01)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($src)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($4)|(0))==0;
   if ($7) { var $_0 = 0;label = 19; break; } else { label = 18; break; }
  case 3: 
   var $9=(($wc)|(0))==0;
   if ($9) { label = 4; break; } else { var $13 = $wc;label = 5; break; }
  case 4: 
   var $11=$1;
   HEAP32[(($1)>>2)]=$11;
   var $13 = $11;label = 5; break;
  case 5: 
   var $13;
   var $14=(($n)|(0))==0;
   if ($14) { var $_0 = -2;label = 19; break; } else { label = 6; break; }
  case 6: 
   var $16=(($4)|(0))==0;
   if ($16) { label = 7; break; } else { var $s_0 = $src;var $c_0 = $4;var $_02 = $n;label = 11; break; }
  case 7: 
   var $18=HEAP8[($src)];
   var $19=(($18)&(255));
   var $20=(($18 << 24) >> 24) > -1;
   if ($20) { label = 8; break; } else { label = 9; break; }
  case 8: 
   HEAP32[(($13)>>2)]=$19;
   var $22=(($18 << 24) >> 24)!=0;
   var $23=(($22)&(1));
   var $_0 = $23;label = 19; break;
  case 9: 
   var $25=((($19)-(194))|0);
   var $26=(($25)>>>(0)) > 50;
   if ($26) { label = 18; break; } else { label = 10; break; }
  case 10: 
   var $28=(($src+1)|0);
   var $29=((___fsmu8+($25<<2))|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=((($n)-(1))|0);
   var $s_0 = $28;var $c_0 = $30;var $_02 = $31;label = 11; break;
  case 11: 
   var $_02;
   var $c_0;
   var $s_0;
   var $33=(($_02)|(0))==0;
   if ($33) { var $c_2 = $c_0;label = 17; break; } else { label = 12; break; }
  case 12: 
   var $35=HEAP8[($s_0)];
   var $36=(($35)&(255));
   var $37=$36 >>> 3;
   var $38=((($37)-(16))|0);
   var $39=$c_0 >> 26;
   var $40=((($37)+($39))|0);
   var $41=$38 | $40;
   var $42=(($41)>>>(0)) > 7;
   if ($42) { label = 18; break; } else { var $s_1 = $s_0;var $c_1 = $c_0;var $_1 = $_02;var $43 = $35;label = 13; break; }
  case 13: 
   var $43;
   var $_1;
   var $c_1;
   var $s_1;
   var $44=$c_1 << 6;
   var $45=(($s_1+1)|0);
   var $46=(($43)&(255));
   var $47=((($46)-(128))|0);
   var $48=$47 | $44;
   var $49=((($_1)-(1))|0);
   var $50=(($48)|(0)) < 0;
   if ($50) { label = 15; break; } else { label = 14; break; }
  case 14: 
   HEAP32[(($3)>>2)]=0;
   HEAP32[(($13)>>2)]=$48;
   var $52=((($n)-($49))|0);
   var $_0 = $52;label = 19; break;
  case 15: 
   var $54=(($49)|(0))==0;
   if ($54) { var $c_2 = $48;label = 17; break; } else { label = 16; break; }
  case 16: 
   var $56=HEAP8[($45)];
   var $57=(($56)&(255));
   var $58=((($57)-(128))|0);
   var $59=(($58)>>>(0)) > 63;
   if ($59) { label = 18; break; } else { var $s_1 = $45;var $c_1 = $48;var $_1 = $49;var $43 = $56;label = 13; break; }
  case 17: 
   var $c_2;
   HEAP32[(($3)>>2)]=$c_2;
   var $_0 = -2;label = 19; break;
  case 18: 
   HEAP32[(($3)>>2)]=0;
   var $60=___errno_location();
   HEAP32[(($60)>>2)]=84;
   var $_0 = -1;label = 19; break;
  case 19: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $wbuf=sp;
   var $s=(sp)+(1024);
   var $1=HEAP32[(($src)>>2)];
   HEAP32[(($s)>>2)]=$1;
   var $2=(($wcs)|(0))!=0;
   var $3=(($wbuf)|0);
   var $wn_=$2 ? $wn : 256;
   var $wcs_=$2 ? $wcs : $3;
   var $4=(($1)|(0))==0;
   var $5=(($wn_)|(0))==0;
   var $or_cond22=$4 | $5;
   if ($or_cond22) { var $cnt_1 = 0;var $_1 = $n;var $_26 = $wn_;var $ws_019 = $wcs_;var $22 = $1;label = 8; break; } else { var $_0423 = $wn_;var $_024 = $n;var $cnt_025 = 0;var $ws_026 = $wcs_;var $_pr41 = $1;label = 2; break; }
  case 2: 
   var $_pr41;
   var $ws_026;
   var $cnt_025;
   var $_024;
   var $_0423;
   var $6=$_024 >>> 2;
   var $7=(($6)>>>(0)) >= (($_0423)>>>(0));
   var $8=(($_024)>>>(0)) > 131;
   var $or_cond7=$7 | $8;
   if ($or_cond7) { label = 3; break; } else { var $cnt_1 = $cnt_025;var $_1 = $_024;var $_26 = $_0423;var $ws_019 = $ws_026;var $22 = $_pr41;label = 8; break; }
  case 3: 
   var $_04_=$7 ? $_0423 : $6;
   var $9=((($_024)-($_04_))|0);
   var $10=_mbsrtowcs($ws_026, $s, $_04_, $st);
   var $11=(($10)|(0))==-1;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $_pr_pre=HEAP32[(($s)>>2)];
   var $cnt_1 = -1;var $_1 = $9;var $_26 = 0;var $ws_019 = $ws_026;var $22 = $_pr_pre;label = 8; break;
  case 5: 
   var $13=(($ws_026)|(0))==(($3)|(0));
   if ($13) { var $ws_1 = $3;var $_15 = $_0423;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $15=(($ws_026+($10<<2))|0);
   var $16=((($_0423)-($10))|0);
   var $ws_1 = $15;var $_15 = $16;label = 7; break;
  case 7: 
   var $_15;
   var $ws_1;
   var $18=((($10)+($cnt_025))|0);
   var $19=HEAP32[(($s)>>2)];
   var $20=(($19)|(0))==0;
   var $21=(($_15)|(0))==0;
   var $or_cond=$20 | $21;
   if ($or_cond) { var $cnt_1 = $18;var $_1 = $9;var $_26 = $_15;var $ws_019 = $ws_1;var $22 = $19;label = 8; break; } else { var $_0423 = $_15;var $_024 = $9;var $cnt_025 = $18;var $ws_026 = $ws_1;var $_pr41 = $19;label = 2; break; }
  case 8: 
   var $22;
   var $ws_019;
   var $_26;
   var $_1;
   var $cnt_1;
   var $23=(($22)|(0))==0;
   if ($23) { var $cnt_3 = $cnt_1;label = 15; break; } else { label = 9; break; }
  case 9: 
   var $24=(($_26)|(0))==0;
   var $25=(($_1)|(0))==0;
   var $or_cond810=$24 | $25;
   if ($or_cond810) { var $cnt_3 = $cnt_1;label = 15; break; } else { var $_311 = $_26;var $_212 = $_1;var $cnt_213 = $cnt_1;var $ws_214 = $ws_019;var $26 = $22;label = 10; break; }
  case 10: 
   var $26;
   var $ws_214;
   var $cnt_213;
   var $_212;
   var $_311;
   var $27=_mbrtowc($ws_214, $26, $_212, $st);
   var $28=((($27)+(2))|0);
   var $29=(($28)>>>(0)) < 3;
   if ($29) { label = 11; break; } else { label = 14; break; }
  case 11: 
   if ((($27)|(0))==0) {
    label = 12; break;
   }
   else if ((($27)|(0))==-1) {
    var $cnt_3 = -1;label = 15; break;
   }
   else {
   label = 13; break;
   }
  case 12: 
   HEAP32[(($s)>>2)]=0;
   var $cnt_3 = $cnt_213;label = 15; break;
  case 13: 
   var $33=(($st)|0);
   HEAP32[(($33)>>2)]=0;
   var $cnt_3 = $cnt_213;label = 15; break;
  case 14: 
   var $35=HEAP32[(($s)>>2)];
   var $36=(($35+$27)|0);
   HEAP32[(($s)>>2)]=$36;
   var $37=((($_212)-($27))|0);
   var $38=(($ws_214+4)|0);
   var $39=((($_311)-(1))|0);
   var $40=((($cnt_213)+(1))|0);
   var $41=(($39)|(0))==0;
   var $42=(($_212)|(0))==(($27)|(0));
   var $or_cond8=$41 | $42;
   if ($or_cond8) { var $cnt_3 = $40;label = 15; break; } else { var $_311 = $39;var $_212 = $37;var $cnt_213 = $40;var $ws_214 = $38;var $26 = $36;label = 10; break; }
  case 15: 
   var $cnt_3;
   if ($2) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $44=HEAP32[(($s)>>2)];
   HEAP32[(($src)>>2)]=$44;
   label = 17; break;
  case 17: 
   STACKTOP = sp;
   return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[(($src)>>2)];
   var $2=(($st)|(0))==0;
   if ($2) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $4=(($st)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 5; break; } else { label = 3; break; }
  case 3: 
   var $8=(($ws)|(0))==0;
   if ($8) { var $c_2 = $5;var $s_3 = $1;var $_35 = $wn;label = 16; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($4)>>2)]=0;
   var $c_4 = $5;var $s_8 = $1;var $_3 = $ws;var $_7 = $wn;label = 36; break;
  case 5: 
   var $11=(($ws)|(0))==0;
   if ($11) { var $s_0 = $1;var $_02 = $wn;label = 7; break; } else { var $s_5_ph = $1;var $_01_ph = $ws;var $_46_ph = $wn;label = 6; break; }
  case 6: 
   var $_46_ph;
   var $_01_ph;
   var $s_5_ph;
   var $12=(($_46_ph)|(0))==0;
   if ($12) { var $_0 = $wn;label = 53; break; } else { var $_4622 = $_46_ph;var $_0123 = $_01_ph;var $s_524 = $s_5_ph;label = 26; break; }
  case 7: 
   var $_02;
   var $s_0;
   var $13=HEAP8[($s_0)];
   var $14=(($13)&(255));
   var $15=((($14)-(1))|0);
   var $16=(($15)>>>(0)) < 127;
   if ($16) { label = 8; break; } else { var $s_2 = $s_0;var $_24 = $_02;var $37 = $13;label = 12; break; }
  case 8: 
   var $18=$s_0;
   var $19=$18 & 3;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { var $s_2 = $s_0;var $_24 = $_02;var $37 = $13;label = 12; break; }
  case 9: 
   var $21=$s_0;
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(16843009))|0);
   var $24=$23 | $22;
   var $25=$24 & -2139062144;
   var $26=(($25)|(0))==0;
   var $27=(($22) & 255);
   if ($26) { var $_137 = $_02;var $s_18 = $s_0;label = 10; break; } else { var $s_2 = $s_0;var $_24 = $_02;var $37 = $27;label = 12; break; }
  case 10: 
   var $s_18;
   var $_137;
   var $28=(($s_18+4)|0);
   var $29=((($_137)-(4))|0);
   var $30=$28;
   var $31=HEAP32[(($30)>>2)];
   var $32=((($31)-(16843009))|0);
   var $33=$32 | $31;
   var $34=$33 & -2139062144;
   var $35=(($34)|(0))==0;
   if ($35) { var $_137 = $29;var $s_18 = $28;label = 10; break; } else { label = 11; break; }
  case 11: 
   var $36=(($31) & 255);
   var $s_2 = $28;var $_24 = $29;var $37 = $36;label = 12; break;
  case 12: 
   var $37;
   var $_24;
   var $s_2;
   var $38=(($37)&(255));
   var $39=((($38)-(1))|0);
   var $40=(($39)>>>(0)) < 127;
   if ($40) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $42=(($s_2+1)|0);
   var $43=((($_24)-(1))|0);
   var $s_0 = $42;var $_02 = $43;label = 7; break;
  case 14: 
   var $45=((($38)-(194))|0);
   var $46=(($45)>>>(0)) > 50;
   if ($46) { var $_840 = $_24;var $_442 = $ws;var $s_1044 = $s_2;label = 47; break; } else { label = 15; break; }
  case 15: 
   var $48=(($s_2+1)|0);
   var $49=((___fsmu8+($45<<2))|0);
   var $50=HEAP32[(($49)>>2)];
   var $c_2 = $50;var $s_3 = $48;var $_35 = $_24;label = 16; break;
  case 16: 
   var $_35;
   var $s_3;
   var $c_2;
   var $52=HEAP8[($s_3)];
   var $53=(($52)&(255));
   var $54=$53 >>> 3;
   var $55=((($54)-(16))|0);
   var $56=$c_2 >> 26;
   var $57=((($54)+($56))|0);
   var $58=$55 | $57;
   var $59=(($58)>>>(0)) > 7;
   if ($59) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $61=((($s_3)-(1))|0);
   var $c_6 = $c_2;var $s_10 = $61;var $_4 = $ws;var $_8 = $_35;label = 46; break;
  case 18: 
   var $63=(($s_3+1)|0);
   var $64=$c_2 & 33554432;
   var $65=(($64)|(0))==0;
   if ($65) { var $s_4 = $63;label = 25; break; } else { label = 19; break; }
  case 19: 
   var $67=HEAP8[($63)];
   var $68=(($67)&(255));
   var $69=((($68)-(128))|0);
   var $70=(($69)>>>(0)) > 63;
   if ($70) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $72=((($s_3)-(1))|0);
   var $c_6 = $c_2;var $s_10 = $72;var $_4 = $ws;var $_8 = $_35;label = 46; break;
  case 21: 
   var $74=(($s_3+2)|0);
   var $75=$c_2 & 524288;
   var $76=(($75)|(0))==0;
   if ($76) { var $s_4 = $74;label = 25; break; } else { label = 22; break; }
  case 22: 
   var $78=HEAP8[($74)];
   var $79=(($78)&(255));
   var $80=((($79)-(128))|0);
   var $81=(($80)>>>(0)) > 63;
   if ($81) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $83=((($s_3)-(1))|0);
   var $c_6 = $c_2;var $s_10 = $83;var $_4 = $ws;var $_8 = $_35;label = 46; break;
  case 24: 
   var $85=(($s_3+3)|0);
   var $s_4 = $85;label = 25; break;
  case 25: 
   var $s_4;
   var $87=((($_35)-(1))|0);
   var $s_0 = $s_4;var $_02 = $87;label = 7; break;
  case 26: 
   var $s_524;
   var $_0123;
   var $_4622;
   var $88=HEAP8[($s_524)];
   var $89=(($88)&(255));
   var $90=((($89)-(1))|0);
   var $91=(($90)>>>(0)) < 127;
   if ($91) { label = 27; break; } else { var $s_7 = $s_524;var $_2 = $_0123;var $_6 = $_4622;var $122 = $88;label = 32; break; }
  case 27: 
   var $93=$s_524;
   var $94=$93 & 3;
   var $95=(($94)|(0))==0;
   var $96=(($_4622)>>>(0)) > 3;
   var $or_cond=$95 & $96;
   if ($or_cond) { var $_512 = $_4622;var $_113 = $_0123;var $s_614 = $s_524;label = 28; break; } else { var $s_7 = $s_524;var $_2 = $_0123;var $_6 = $_4622;var $122 = $88;label = 32; break; }
  case 28: 
   var $s_614;
   var $_113;
   var $_512;
   var $97=$s_614;
   var $98=HEAP32[(($97)>>2)];
   var $99=((($98)-(16843009))|0);
   var $100=$99 | $98;
   var $101=$100 & -2139062144;
   var $102=(($101)|(0))==0;
   if ($102) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $104=(($s_614+1)|0);
   var $105=$98 & 255;
   var $106=(($_113+4)|0);
   HEAP32[(($_113)>>2)]=$105;
   var $107=(($s_614+2)|0);
   var $108=HEAP8[($104)];
   var $109=(($108)&(255));
   var $110=(($_113+8)|0);
   HEAP32[(($106)>>2)]=$109;
   var $111=(($s_614+3)|0);
   var $112=HEAP8[($107)];
   var $113=(($112)&(255));
   var $114=(($_113+12)|0);
   HEAP32[(($110)>>2)]=$113;
   var $115=(($s_614+4)|0);
   var $116=HEAP8[($111)];
   var $117=(($116)&(255));
   var $118=(($_113+16)|0);
   HEAP32[(($114)>>2)]=$117;
   var $119=((($_512)-(4))|0);
   var $120=(($119)>>>(0)) > 3;
   if ($120) { var $_512 = $119;var $_113 = $118;var $s_614 = $115;label = 28; break; } else { label = 31; break; }
  case 30: 
   var $121=(($98) & 255);
   var $s_7 = $s_614;var $_2 = $_113;var $_6 = $_512;var $122 = $121;label = 32; break;
  case 31: 
   var $_pre_pre=HEAP8[($115)];
   var $s_7 = $115;var $_2 = $118;var $_6 = $119;var $122 = $_pre_pre;label = 32; break;
  case 32: 
   var $122;
   var $_6;
   var $_2;
   var $s_7;
   var $123=(($122)&(255));
   var $124=((($123)-(1))|0);
   var $125=(($124)>>>(0)) < 127;
   if ($125) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $127=(($s_7+1)|0);
   var $128=(($_2+4)|0);
   HEAP32[(($_2)>>2)]=$123;
   var $129=((($_6)-(1))|0);
   var $130=(($129)|(0))==0;
   if ($130) { var $_0 = $wn;label = 53; break; } else { var $_4622 = $129;var $_0123 = $128;var $s_524 = $127;label = 26; break; }
  case 34: 
   var $132=((($123)-(194))|0);
   var $133=(($132)>>>(0)) > 50;
   if ($133) { var $_840 = $_6;var $_442 = $_2;var $s_1044 = $s_7;label = 47; break; } else { label = 35; break; }
  case 35: 
   var $135=(($s_7+1)|0);
   var $136=((___fsmu8+($132<<2))|0);
   var $137=HEAP32[(($136)>>2)];
   var $c_4 = $137;var $s_8 = $135;var $_3 = $_2;var $_7 = $_6;label = 36; break;
  case 36: 
   var $_7;
   var $_3;
   var $s_8;
   var $c_4;
   var $139=HEAP8[($s_8)];
   var $140=(($139)&(255));
   var $141=$140 >>> 3;
   var $142=((($141)-(16))|0);
   var $143=$c_4 >> 26;
   var $144=((($141)+($143))|0);
   var $145=$142 | $144;
   var $146=(($145)>>>(0)) > 7;
   if ($146) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $148=((($s_8)-(1))|0);
   var $c_6 = $c_4;var $s_10 = $148;var $_4 = $_3;var $_8 = $_7;label = 46; break;
  case 38: 
   var $150=$c_4 << 6;
   var $151=(($s_8+1)|0);
   var $152=((($140)-(128))|0);
   var $153=$152 | $150;
   var $154=(($153)|(0)) < 0;
   if ($154) { label = 39; break; } else { var $c_5 = $153;var $s_9 = $151;label = 45; break; }
  case 39: 
   var $156=HEAP8[($151)];
   var $157=(($156)&(255));
   var $158=((($157)-(128))|0);
   var $159=(($158)>>>(0)) > 63;
   if ($159) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $161=((($s_8)-(1))|0);
   var $c_6 = $153;var $s_10 = $161;var $_4 = $_3;var $_8 = $_7;label = 46; break;
  case 41: 
   var $163=$153 << 6;
   var $164=(($s_8+2)|0);
   var $165=$158 | $163;
   var $166=(($165)|(0)) < 0;
   if ($166) { label = 42; break; } else { var $c_5 = $165;var $s_9 = $164;label = 45; break; }
  case 42: 
   var $168=HEAP8[($164)];
   var $169=(($168)&(255));
   var $170=((($169)-(128))|0);
   var $171=(($170)>>>(0)) > 63;
   if ($171) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $173=((($s_8)-(1))|0);
   var $c_6 = $165;var $s_10 = $173;var $_4 = $_3;var $_8 = $_7;label = 46; break;
  case 44: 
   var $175=$165 << 6;
   var $176=(($s_8+3)|0);
   var $177=$170 | $175;
   var $c_5 = $177;var $s_9 = $176;label = 45; break;
  case 45: 
   var $s_9;
   var $c_5;
   var $179=(($_3+4)|0);
   HEAP32[(($_3)>>2)]=$c_5;
   var $180=((($_7)-(1))|0);
   var $s_5_ph = $s_9;var $_01_ph = $179;var $_46_ph = $180;label = 6; break;
  case 46: 
   var $_8;
   var $_4;
   var $s_10;
   var $c_6;
   var $182=(($c_6)|(0))==0;
   if ($182) { var $_840 = $_8;var $_442 = $_4;var $s_1044 = $s_10;label = 47; break; } else { var $_441 = $_4;var $s_1043 = $s_10;label = 51; break; }
  case 47: 
   var $s_1044;
   var $_442;
   var $_840;
   var $183=HEAP8[($s_1044)];
   var $184=(($183 << 24) >> 24)==0;
   if ($184) { label = 48; break; } else { var $_441 = $_442;var $s_1043 = $s_1044;label = 51; break; }
  case 48: 
   var $186=(($_442)|(0))==0;
   if ($186) { label = 50; break; } else { label = 49; break; }
  case 49: 
   HEAP32[(($_442)>>2)]=0;
   HEAP32[(($src)>>2)]=0;
   label = 50; break;
  case 50: 
   var $189=((($wn)-($_840))|0);
   var $_0 = $189;label = 53; break;
  case 51: 
   var $s_1043;
   var $_441;
   var $191=___errno_location();
   HEAP32[(($191)>>2)]=84;
   var $192=(($_441)|(0))==0;
   if ($192) { var $_0 = -1;label = 53; break; } else { label = 52; break; }
  case 52: 
   HEAP32[(($src)>>2)]=$s_1043;
   var $_0 = -1;label = 53; break;
  case 53: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbtowc($wc, $src, $n) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   HEAP32[(($1)>>2)]=$wc;
   var $2=(($src)|(0))==0;
   if ($2) { var $_0 = 0;label = 19; break; } else { label = 2; break; }
  case 2: 
   var $4=(($n)|(0))==0;
   if ($4) { label = 18; break; } else { label = 3; break; }
  case 3: 
   var $6=(($wc)|(0))==0;
   if ($6) { label = 4; break; } else { var $10 = $wc;label = 5; break; }
  case 4: 
   var $8=$1;
   HEAP32[(($1)>>2)]=$8;
   var $10 = $8;label = 5; break;
  case 5: 
   var $10;
   var $11=HEAP8[($src)];
   var $12=(($11)&(255));
   var $13=(($11 << 24) >> 24) > -1;
   if ($13) { label = 6; break; } else { label = 7; break; }
  case 6: 
   HEAP32[(($10)>>2)]=$12;
   var $15=(($11 << 24) >> 24)!=0;
   var $16=(($15)&(1));
   var $_0 = $16;label = 19; break;
  case 7: 
   var $18=((($12)-(194))|0);
   var $19=(($18)>>>(0)) > 50;
   if ($19) { label = 18; break; } else { label = 8; break; }
  case 8: 
   var $21=(($src+1)|0);
   var $22=((___fsmu8+($18<<2))|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($n)>>>(0)) < 4;
   if ($24) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $26=((($n)*(6))&-1);
   var $27=((($26)-(6))|0);
   var $28=-2147483648 >>> (($27)>>>(0));
   var $29=$23 & $28;
   var $30=(($29)|(0))==0;
   if ($30) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $32=HEAP8[($21)];
   var $33=(($32)&(255));
   var $34=$33 >>> 3;
   var $35=((($34)-(16))|0);
   var $36=$23 >> 26;
   var $37=((($34)+($36))|0);
   var $38=$35 | $37;
   var $39=(($38)>>>(0)) > 7;
   if ($39) { label = 18; break; } else { label = 11; break; }
  case 11: 
   var $41=$23 << 6;
   var $42=((($33)-(128))|0);
   var $43=$42 | $41;
   var $44=(($43)|(0)) < 0;
   if ($44) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[(($10)>>2)]=$43;
   var $_0 = 2;label = 19; break;
  case 13: 
   var $47=(($src+2)|0);
   var $48=HEAP8[($47)];
   var $49=(($48)&(255));
   var $50=((($49)-(128))|0);
   var $51=(($50)>>>(0)) > 63;
   if ($51) { label = 18; break; } else { label = 14; break; }
  case 14: 
   var $53=$43 << 6;
   var $54=$50 | $53;
   var $55=(($54)|(0)) < 0;
   if ($55) { label = 16; break; } else { label = 15; break; }
  case 15: 
   HEAP32[(($10)>>2)]=$54;
   var $_0 = 3;label = 19; break;
  case 16: 
   var $58=(($src+3)|0);
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=((($60)-(128))|0);
   var $62=(($61)>>>(0)) > 63;
   if ($62) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $64=$54 << 6;
   var $65=$61 | $64;
   HEAP32[(($10)>>2)]=$65;
   var $_0 = 4;label = 19; break;
  case 18: 
   var $67=___errno_location();
   HEAP32[(($67)>>2)]=84;
   var $_0 = -1;label = 19; break;
  case 19: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s, $wc, $st) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($s)|(0))==0;
   if ($1) { var $_0 = 1;label = 11; break; } else { label = 2; break; }
  case 2: 
   var $3=(($wc)>>>(0)) < 128;
   if ($3) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $5=(($wc) & 255);
   HEAP8[($s)]=$5;
   var $_0 = 1;label = 11; break;
  case 4: 
   var $7=(($wc)>>>(0)) < 2048;
   if ($7) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $9=$wc >>> 6;
   var $10=$9 | 192;
   var $11=(($10) & 255);
   var $12=(($s+1)|0);
   HEAP8[($s)]=$11;
   var $13=$wc & 63;
   var $14=$13 | 128;
   var $15=(($14) & 255);
   HEAP8[($12)]=$15;
   var $_0 = 2;label = 11; break;
  case 6: 
   var $17=(($wc)>>>(0)) < 55296;
   var $18=((($wc)-(57344))|0);
   var $19=(($18)>>>(0)) < 8192;
   var $or_cond=$17 | $19;
   if ($or_cond) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $21=$wc >>> 12;
   var $22=$21 | 224;
   var $23=(($22) & 255);
   var $24=(($s+1)|0);
   HEAP8[($s)]=$23;
   var $25=$wc >>> 6;
   var $26=$25 & 63;
   var $27=$26 | 128;
   var $28=(($27) & 255);
   var $29=(($s+2)|0);
   HEAP8[($24)]=$28;
   var $30=$wc & 63;
   var $31=$30 | 128;
   var $32=(($31) & 255);
   HEAP8[($29)]=$32;
   var $_0 = 3;label = 11; break;
  case 8: 
   var $34=((($wc)-(65536))|0);
   var $35=(($34)>>>(0)) < 1048576;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$wc >>> 18;
   var $38=$37 | 240;
   var $39=(($38) & 255);
   var $40=(($s+1)|0);
   HEAP8[($s)]=$39;
   var $41=$wc >>> 12;
   var $42=$41 & 63;
   var $43=$42 | 128;
   var $44=(($43) & 255);
   var $45=(($s+2)|0);
   HEAP8[($40)]=$44;
   var $46=$wc >>> 6;
   var $47=$46 & 63;
   var $48=$47 | 128;
   var $49=(($48) & 255);
   var $50=(($s+3)|0);
   HEAP8[($45)]=$49;
   var $51=$wc & 63;
   var $52=$51 | 128;
   var $53=(($52) & 255);
   HEAP8[($50)]=$53;
   var $_0 = 4;label = 11; break;
  case 10: 
   var $55=___errno_location();
   HEAP32[(($55)>>2)]=84;
   var $_0 = -1;label = 11; break;
  case 11: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $buf=sp;
   var $ws=(sp)+(256);
   var $1=HEAP32[(($wcs)>>2)];
   HEAP32[(($ws)>>2)]=$1;
   var $2=(($dst)|(0))!=0;
   var $3=(($buf)|0);
   var $n_=$2 ? $n : 256;
   var $dst_=$2 ? $dst : $3;
   var $4=(($1)|(0))==0;
   var $5=(($n_)|(0))==0;
   var $or_cond22=$4 | $5;
   if ($or_cond22) { var $cnt_1 = 0;var $_1 = $wn;var $_26 = $n_;var $s_019 = $dst_;var $21 = $1;label = 8; break; } else { var $_0423 = $n_;var $_024 = $wn;var $cnt_025 = 0;var $s_026 = $dst_;var $_pr41 = $1;label = 2; break; }
  case 2: 
   var $_pr41;
   var $s_026;
   var $cnt_025;
   var $_024;
   var $_0423;
   var $6=(($_024)>>>(0)) >= (($_0423)>>>(0));
   var $7=(($_024)>>>(0)) > 32;
   var $or_cond7=$6 | $7;
   if ($or_cond7) { label = 3; break; } else { var $cnt_1 = $cnt_025;var $_1 = $_024;var $_26 = $_0423;var $s_019 = $s_026;var $21 = $_pr41;label = 8; break; }
  case 3: 
   var $_04__0=$6 ? $_0423 : $_024;
   var $8=((($_024)-($_04__0))|0);
   var $9=_wcsrtombs($s_026, $ws, $_04__0, 0);
   var $10=(($9)|(0))==-1;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $_pr_pre=HEAP32[(($ws)>>2)];
   var $cnt_1 = -1;var $_1 = $8;var $_26 = 0;var $s_019 = $s_026;var $21 = $_pr_pre;label = 8; break;
  case 5: 
   var $12=(($s_026)|(0))==(($3)|(0));
   if ($12) { var $s_1 = $3;var $_15 = $_0423;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $14=(($s_026+$9)|0);
   var $15=((($_0423)-($9))|0);
   var $s_1 = $14;var $_15 = $15;label = 7; break;
  case 7: 
   var $_15;
   var $s_1;
   var $17=((($9)+($cnt_025))|0);
   var $18=HEAP32[(($ws)>>2)];
   var $19=(($18)|(0))==0;
   var $20=(($_15)|(0))==0;
   var $or_cond=$19 | $20;
   if ($or_cond) { var $cnt_1 = $17;var $_1 = $8;var $_26 = $_15;var $s_019 = $s_1;var $21 = $18;label = 8; break; } else { var $_0423 = $_15;var $_024 = $8;var $cnt_025 = $17;var $s_026 = $s_1;var $_pr41 = $18;label = 2; break; }
  case 8: 
   var $21;
   var $s_019;
   var $_26;
   var $_1;
   var $cnt_1;
   var $22=(($21)|(0))==0;
   if ($22) { var $cnt_3 = $cnt_1;label = 14; break; } else { label = 9; break; }
  case 9: 
   var $23=(($_26)|(0))==0;
   var $24=(($_1)|(0))==0;
   var $or_cond810=$23 | $24;
   if ($or_cond810) { var $cnt_3 = $cnt_1;label = 14; break; } else { var $_311 = $_26;var $_212 = $_1;var $cnt_213 = $cnt_1;var $s_214 = $s_019;var $25 = $21;label = 10; break; }
  case 10: 
   var $25;
   var $s_214;
   var $cnt_213;
   var $_212;
   var $_311;
   var $26=HEAP32[(($25)>>2)];
   var $27=_wcrtomb($s_214, $26, 0);
   var $28=((($27)+(1))|0);
   var $29=(($28)>>>(0)) < 2;
   if ($29) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $31=(($27)|(0))==0;
   if ($31) { label = 12; break; } else { var $cnt_3 = -1;label = 14; break; }
  case 12: 
   HEAP32[(($ws)>>2)]=0;
   var $cnt_3 = $cnt_213;label = 14; break;
  case 13: 
   var $34=HEAP32[(($ws)>>2)];
   var $35=(($34+4)|0);
   HEAP32[(($ws)>>2)]=$35;
   var $36=((($_212)-(1))|0);
   var $37=(($s_214+$27)|0);
   var $38=((($_311)-($27))|0);
   var $39=((($cnt_213)+(1))|0);
   var $40=(($_311)|(0))==(($27)|(0));
   var $41=(($36)|(0))==0;
   var $or_cond8=$40 | $41;
   if ($or_cond8) { var $cnt_3 = $39;label = 14; break; } else { var $_311 = $38;var $_212 = $36;var $cnt_213 = $39;var $s_214 = $37;var $25 = $35;label = 10; break; }
  case 14: 
   var $cnt_3;
   if ($2) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $43=HEAP32[(($ws)>>2)];
   HEAP32[(($wcs)>>2)]=$43;
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsrtombs($s, $ws, $n, $st) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $buf=sp;
   var $1=(($s)|(0))==0;
   if ($1) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $2=(($n)>>>(0)) > 3;
   if ($2) { label = 3; break; } else { var $_25_lcssa = $n;var $_02_lcssa = $s;label = 9; break; }
  case 3: 
   var $_pre41=HEAP32[(($ws)>>2)];
   var $_2525 = $n;var $_0226 = $s;var $18 = $_pre41;label = 8; break;
  case 4: 
   var $4=HEAP32[(($ws)>>2)];
   var $5=(($buf)|0);
   var $6=HEAP32[(($4)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { var $_0 = 0;label = 26; break; } else { var $_038 = 0;var $ws2_09 = $4;var $8 = $6;label = 5; break; }
  case 5: 
   var $8;
   var $ws2_09;
   var $_038;
   var $9=(($8)>>>(0)) > 127;
   if ($9) { label = 6; break; } else { var $_pn = 1;label = 7; break; }
  case 6: 
   var $11=_wcrtomb($5, $8, 0);
   var $12=(($11)|(0))==-1;
   if ($12) { var $_0 = -1;label = 26; break; } else { var $_pn = $11;label = 7; break; }
  case 7: 
   var $_pn;
   var $_14=((($_pn)+($_038))|0);
   var $14=(($ws2_09+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { var $_0 = $_14;label = 26; break; } else { var $_038 = $_14;var $ws2_09 = $14;var $8 = $15;label = 5; break; }
  case 8: 
   var $18;
   var $_0226;
   var $_2525;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==0;
   if ($20) { var $_25_lcssa = $_2525;var $_02_lcssa = $_0226;label = 9; break; } else { label = 11; break; }
  case 9: 
   var $_02_lcssa;
   var $_25_lcssa;
   var $21=(($_25_lcssa)|(0))==0;
   if ($21) { var $_414 = 0;label = 25; break; } else { label = 10; break; }
  case 10: 
   var $22=(($buf)|0);
   var $_pre=HEAP32[(($ws)>>2)];
   var $_418 = $_25_lcssa;var $_219 = $_02_lcssa;var $40 = $_pre;label = 16; break;
  case 11: 
   var $24=(($19)>>>(0)) > 127;
   if ($24) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $26=_wcrtomb($_0226, $19, 0);
   var $27=(($26)|(0))==-1;
   if ($27) { var $_0 = -1;label = 26; break; } else { label = 13; break; }
  case 13: 
   var $29=(($_0226+$26)|0);
   var $30=((($_2525)-($26))|0);
   var $_1 = $29;var $_36 = $30;var $36 = $18;label = 15; break;
  case 14: 
   var $32=(($19) & 255);
   var $33=(($_0226+1)|0);
   HEAP8[($_0226)]=$32;
   var $34=((($_2525)-(1))|0);
   var $_pre42=HEAP32[(($ws)>>2)];
   var $_1 = $33;var $_36 = $34;var $36 = $_pre42;label = 15; break;
  case 15: 
   var $36;
   var $_36;
   var $_1;
   var $37=(($36+4)|0);
   HEAP32[(($ws)>>2)]=$37;
   var $38=(($_36)>>>(0)) > 3;
   if ($38) { var $_2525 = $_36;var $_0226 = $_1;var $18 = $37;label = 8; break; } else { var $_25_lcssa = $_36;var $_02_lcssa = $_1;label = 9; break; }
  case 16: 
   var $40;
   var $_219;
   var $_418;
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==0;
   if ($42) { label = 24; break; } else { label = 17; break; }
  case 17: 
   var $44=(($41)>>>(0)) > 127;
   if ($44) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $46=_wcrtomb($22, $41, 0);
   var $47=(($46)|(0))==-1;
   if ($47) { var $_0 = -1;label = 26; break; } else { label = 19; break; }
  case 19: 
   var $49=(($46)>>>(0)) > (($_418)>>>(0));
   if ($49) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $51=((($n)-($_418))|0);
   var $_0 = $51;label = 26; break;
  case 21: 
   var $53=HEAP32[(($40)>>2)];
   var $54=_wcrtomb($_219, $53, 0);
   var $55=(($_219+$46)|0);
   var $56=((($_418)-($46))|0);
   var $_3 = $55;var $_5 = $56;var $61 = $40;label = 23; break;
  case 22: 
   var $58=(($41) & 255);
   var $59=(($_219+1)|0);
   HEAP8[($_219)]=$58;
   var $60=((($_418)-(1))|0);
   var $_pre40=HEAP32[(($ws)>>2)];
   var $_3 = $59;var $_5 = $60;var $61 = $_pre40;label = 23; break;
  case 23: 
   var $61;
   var $_5;
   var $_3;
   var $62=(($61+4)|0);
   HEAP32[(($ws)>>2)]=$62;
   var $63=(($_5)|(0))==0;
   if ($63) { var $_414 = 0;label = 25; break; } else { var $_418 = $_5;var $_219 = $_3;var $40 = $62;label = 16; break; }
  case 24: 
   HEAP8[($_219)]=0;
   var $_414 = $_418;label = 25; break;
  case 25: 
   var $_414;
   HEAP32[(($ws)>>2)]=0;
   var $65=((($n)-($_414))|0);
   var $_0 = $65;label = 26; break;
  case 26: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcslen($s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $_0 = $s;label = 2; break;
  case 2: 
   var $_0;
   var $2=HEAP32[(($_0)>>2)];
   var $3=(($2)|(0))==0;
   var $4=(($_0+4)|0);
   if ($3) { label = 3; break; } else { var $_0 = $4;label = 2; break; }
  case 3: 
   var $6=$_0;
   var $7=$s;
   var $8=((($6)-($7))|0);
   var $9=$8 >> 2;
   return $9;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemcpy($d, $s, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($n)|(0))==0;
   if ($1) { label = 3; break; } else { var $_023 = $s;var $_014 = $n;var $_05 = $d;label = 2; break; }
  case 2: 
   var $_05;
   var $_014;
   var $_023;
   var $2=((($_014)-(1))|0);
   var $3=(($_023+4)|0);
   var $4=HEAP32[(($_023)>>2)];
   var $5=(($_05+4)|0);
   HEAP32[(($_05)>>2)]=$4;
   var $6=(($2)|(0))==0;
   if ($6) { label = 3; break; } else { var $_023 = $3;var $_014 = $2;var $_05 = $5;label = 2; break; }
  case 3: 
   return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemmove($d, $s, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$d;
   var $2=$s;
   var $3=((($1)-($2))|0);
   var $4=$3 >> 2;
   var $5=(($4)>>>(0)) < (($n)>>>(0));
   var $6=(($n)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   if ($6) { label = 6; break; } else { var $_025 = $s;var $_16 = $n;var $_07 = $d;label = 5; break; }
  case 3: 
   if ($6) { label = 6; break; } else { var $_in = $n;label = 4; break; }
  case 4: 
   var $_in;
   var $7=((($_in)-(1))|0);
   var $8=(($s+($7<<2))|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($d+($7<<2))|0);
   HEAP32[(($10)>>2)]=$9;
   var $11=(($7)|(0))==0;
   if ($11) { label = 6; break; } else { var $_in = $7;label = 4; break; }
  case 5: 
   var $_07;
   var $_16;
   var $_025;
   var $12=((($_16)-(1))|0);
   var $13=(($_025+4)|0);
   var $14=HEAP32[(($_025)>>2)];
   var $15=(($_07+4)|0);
   HEAP32[(($_07)>>2)]=$14;
   var $16=(($12)|(0))==0;
   if ($16) { label = 6; break; } else { var $_025 = $13;var $_16 = $12;var $_07 = $15;label = 5; break; }
  case 6: 
   return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemset($d, $c, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($n)|(0))==0;
   if ($1) { label = 3; break; } else { var $_012 = $n;var $_03 = $d;label = 2; break; }
  case 2: 
   var $_03;
   var $_012;
   var $2=((($_012)-(1))|0);
   var $3=(($_03+4)|0);
   HEAP32[(($_03)>>2)]=$c;
   var $4=(($2)|(0))==0;
   if ($4) { label = 3; break; } else { var $_012 = $2;var $_03 = $3;label = 2; break; }
  case 3: 
   return $d;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this) {
 var label = 0;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((2384)|0));
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 var label = 0;
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 var label = 0;
 return ((1360)|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 var label = 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 var label = 0;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $info=sp;
   var $1=(($this)|0);
   var $2=(($thrown_type)|0);
   var $3=(($1)|(0))==(($2)|(0));
   if ($3) { var $_0 = 1;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $5=(($thrown_type)|(0))==0;
   if ($5) { var $_0 = 0;label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7=$thrown_type;
   var $8=___dynamic_cast($7, 9968, 9952, 0);
   var $9=$8;
   var $10=(($8)|(0))==0;
   if ($10) { var $_0 = 0;label = 6; break; } else { label = 4; break; }
  case 4: 
   var $12=$info;
   _memset($12, 0, 56);
   var $13=(($info)|0);
   HEAP32[(($13)>>2)]=$9;
   var $14=(($info+8)|0);
   HEAP32[(($14)>>2)]=$this;
   var $15=(($info+12)|0);
   HEAP32[(($15)>>2)]=-1;
   var $16=(($info+48)|0);
   HEAP32[(($16)>>2)]=1;
   var $17=$8;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=HEAP32[(($adjustedPtr)>>2)];
   FUNCTION_TABLE[$20]($9, $info, $21, 1);
   var $22=(($info+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==1;
   if ($24) { label = 5; break; } else { var $_0 = 0;label = 6; break; }
  case 5: 
   var $26=(($info+16)|0);
   var $27=HEAP32[(($26)>>2)];
   HEAP32[(($adjustedPtr)>>2)]=$27;
   var $_0 = 1;label = 6; break;
  case 6: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $5=(($info+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($5)>>2)]=$adjustedPtr;
   var $9=(($info+24)|0);
   HEAP32[(($9)>>2)]=$path_below;
   var $10=(($info+36)|0);
   HEAP32[(($10)>>2)]=1;
   label = 8; break;
  case 4: 
   var $12=(($6)|(0))==(($adjustedPtr)|(0));
   if ($12) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $14=(($info+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==2;
   if ($16) { label = 6; break; } else { label = 8; break; }
  case 6: 
   HEAP32[(($14)>>2)]=$path_below;
   label = 8; break;
  case 7: 
   var $19=(($info+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($info+24)|0);
   HEAP32[(($22)>>2)]=2;
   var $23=(($info+54)|0);
   HEAP8[($23)]=1;
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $7=(($info+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($7)>>2)]=$adjustedPtr;
   var $11=(($info+24)|0);
   HEAP32[(($11)>>2)]=$path_below;
   var $12=(($info+36)|0);
   HEAP32[(($12)>>2)]=1;
   label = 9; break;
  case 4: 
   var $14=(($8)|(0))==(($adjustedPtr)|(0));
   if ($14) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $16=(($info+24)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==2;
   if ($18) { label = 6; break; } else { label = 9; break; }
  case 6: 
   HEAP32[(($16)>>2)]=$path_below;
   label = 9; break;
  case 7: 
   var $21=(($info+36)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($info+24)|0);
   HEAP32[(($24)>>2)]=2;
   var $25=(($info+54)|0);
   HEAP8[($25)]=1;
   label = 9; break;
  case 8: 
   var $27=(($this+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+28)|0);
   var $32=HEAP32[(($31)>>2)];
   FUNCTION_TABLE[$32]($28, $info, $adjustedPtr, $path_below);
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $7=(($info+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($7)>>2)]=$adjustedPtr;
   var $11=(($info+24)|0);
   HEAP32[(($11)>>2)]=$path_below;
   var $12=(($info+36)|0);
   HEAP32[(($12)>>2)]=1;
   label = 16; break;
  case 4: 
   var $14=(($8)|(0))==(($adjustedPtr)|(0));
   if ($14) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $16=(($info+24)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==2;
   if ($18) { label = 6; break; } else { label = 16; break; }
  case 6: 
   HEAP32[(($16)>>2)]=$path_below;
   label = 16; break;
  case 7: 
   var $21=(($info+36)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($info+24)|0);
   HEAP32[(($24)>>2)]=2;
   var $25=(($info+54)|0);
   HEAP8[($25)]=1;
   label = 16; break;
  case 8: 
   var $27=(($this+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($this+16+($28<<3))|0);
   var $30=(($this+20)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31 >> 8;
   var $33=$31 & 1;
   var $34=(($33)|(0))==0;
   if ($34) { var $offset_to_base_0_i1 = $32;label = 10; break; } else { label = 9; break; }
  case 9: 
   var $36=$adjustedPtr;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+$32)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $offset_to_base_0_i1 = $40;label = 10; break;
  case 10: 
   var $offset_to_base_0_i1;
   var $41=(($this+16)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+28)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
   var $48=$31 & 2;
   var $49=(($48)|(0))!=0;
   var $50=$49 ? $path_below : 2;
   FUNCTION_TABLE[$46]($42, $info, $47, $50);
   var $51=(($28)|(0)) > 1;
   if ($51) { label = 11; break; } else { label = 16; break; }
  case 11: 
   var $52=(($this+24)|0);
   var $53=(($info+54)|0);
   var $54=$adjustedPtr;
   var $p_0 = $52;label = 12; break;
  case 12: 
   var $p_0;
   var $56=(($p_0+4)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$57 >> 8;
   var $59=$57 & 1;
   var $60=(($59)|(0))==0;
   if ($60) { var $offset_to_base_0_i = $58;label = 14; break; } else { label = 13; break; }
  case 13: 
   var $62=HEAP32[(($54)>>2)];
   var $63=(($62+$58)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $offset_to_base_0_i = $65;label = 14; break;
  case 14: 
   var $offset_to_base_0_i;
   var $66=(($p_0)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+28)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
   var $73=$57 & 2;
   var $74=(($73)|(0))!=0;
   var $75=$74 ? $path_below : 2;
   FUNCTION_TABLE[$71]($67, $info, $72, $75);
   var $76=HEAP8[($53)];
   var $77=$76 & 1;
   var $78=(($77 << 24) >> 24)==0;
   if ($78) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $80=(($p_0+8)|0);
   var $81=(($80)>>>(0)) < (($29)>>>(0));
   if ($81) { var $p_0 = $80;label = 12; break; } else { label = 16; break; }
  case 16: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $info=sp;
   var $1=$static_ptr;
   var $2=HEAP32[(($1)>>2)];
   var $3=((($2)-(8))|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($static_ptr+$5)|0);
   var $7=((($2)-(4))|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($info)|0);
   HEAP32[(($10)>>2)]=$dst_type;
   var $11=(($info+4)|0);
   HEAP32[(($11)>>2)]=$static_ptr;
   var $12=(($info+8)|0);
   HEAP32[(($12)>>2)]=$static_type;
   var $13=(($info+12)|0);
   HEAP32[(($13)>>2)]=$src2dst_offset;
   var $14=(($info+16)|0);
   var $15=(($info+20)|0);
   var $16=(($info+24)|0);
   var $17=(($info+28)|0);
   var $18=(($info+32)|0);
   var $19=(($info+40)|0);
   var $20=$8;
   var $21=(($dst_type)|0);
   var $22=(($20)|(0))==(($21)|(0));
   var $23=$14;
   _memset($23, 0, 39);
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=(($info+48)|0);
   HEAP32[(($25)>>2)]=1;
   var $26=$8;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   FUNCTION_TABLE[$29]($9, $info, $6, $6, 1, 0);
   var $30=HEAP32[(($16)>>2)];
   var $31=(($30)|(0))==1;
   var $_=$31 ? $6 : 0;
   STACKTOP = sp;
   return $_;
  case 3: 
   var $33=(($info+36)|0);
   var $34=$8;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   FUNCTION_TABLE[$37]($9, $info, $6, 1, 0);
   var $38=HEAP32[(($33)>>2)];
   if ((($38)|(0))==0) {
    label = 4; break;
   }
   else if ((($38)|(0))==1) {
    label = 7; break;
   }
   else {
   var $dst_ptr_0 = 0;label = 12; break;
   }
  case 4: 
   var $40=HEAP32[(($19)>>2)];
   var $41=(($40)|(0))==1;
   if ($41) { label = 5; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 5: 
   var $43=HEAP32[(($17)>>2)];
   var $44=(($43)|(0))==1;
   if ($44) { label = 6; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 6: 
   var $46=HEAP32[(($18)>>2)];
   var $47=(($46)|(0))==1;
   var $48=HEAP32[(($15)>>2)];
   var $_1=$47 ? $48 : 0;
   var $dst_ptr_0 = $_1;label = 12; break;
  case 7: 
   var $50=HEAP32[(($16)>>2)];
   var $51=(($50)|(0))==1;
   if ($51) { label = 11; break; } else { label = 8; break; }
  case 8: 
   var $53=HEAP32[(($19)>>2)];
   var $54=(($53)|(0))==0;
   if ($54) { label = 9; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 9: 
   var $56=HEAP32[(($17)>>2)];
   var $57=(($56)|(0))==1;
   if ($57) { label = 10; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 10: 
   var $59=HEAP32[(($18)>>2)];
   var $60=(($59)|(0))==1;
   if ($60) { label = 11; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 11: 
   var $62=HEAP32[(($14)>>2)];
   var $dst_ptr_0 = $62;label = 12; break;
  case 12: 
   var $dst_ptr_0;
   STACKTOP = sp;
   return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($info+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==(($current_ptr)|(0));
   if ($9) { label = 3; break; } else { label = 53; break; }
  case 3: 
   var $11=(($info+28)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==1;
   if ($13) { label = 53; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($11)>>2)]=$path_below;
   label = 53; break;
  case 5: 
   var $16=(($info)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|0);
   var $19=(($1)|(0))==(($18)|(0));
   if ($19) { label = 6; break; } else { label = 29; break; }
  case 6: 
   var $21=(($info+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==(($current_ptr)|(0));
   if ($23) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $25=(($info+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==(($current_ptr)|(0));
   if ($27) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $29=(($path_below)|(0))==1;
   if ($29) { label = 9; break; } else { label = 53; break; }
  case 9: 
   var $31=(($info+32)|0);
   HEAP32[(($31)>>2)]=1;
   label = 53; break;
  case 10: 
   var $33=(($info+32)|0);
   HEAP32[(($33)>>2)]=$path_below;
   var $34=(($info+44)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==4;
   if ($36) { label = 53; break; } else { label = 11; break; }
  case 11: 
   var $38=(($this+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($this+16+($39<<3))|0);
   var $41=(($39)|(0)) > 0;
   if ($41) { label = 12; break; } else { var $is_dst_type_derived_from_static_type_2_off030 = 0;label = 23; break; }
  case 12: 
   var $42=(($this+16)|0);
   var $43=(($info+52)|0);
   var $44=(($info+53)|0);
   var $45=(($info+54)|0);
   var $46=(($this+8)|0);
   var $47=(($info+24)|0);
   var $48=$current_ptr;
   var $does_dst_type_point_to_our_static_type_0_off019 = 0;var $p_020 = $42;var $is_dst_type_derived_from_static_type_0_off021 = 0;label = 13; break;
  case 13: 
   var $is_dst_type_derived_from_static_type_0_off021;
   var $p_020;
   var $does_dst_type_point_to_our_static_type_0_off019;
   HEAP8[($43)]=0;
   HEAP8[($44)]=0;
   var $50=(($p_020+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51 >> 8;
   var $53=$51 & 1;
   var $54=(($53)|(0))==0;
   if ($54) { var $offset_to_base_0_i13 = $52;label = 15; break; } else { label = 14; break; }
  case 14: 
   var $56=HEAP32[(($48)>>2)];
   var $57=(($56+$52)|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $offset_to_base_0_i13 = $59;label = 15; break;
  case 15: 
   var $offset_to_base_0_i13;
   var $60=(($p_020)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$61;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+20)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($current_ptr+$offset_to_base_0_i13)|0);
   var $67=$51 >>> 1;
   var $68=$67 & 1;
   var $69=(((2)-($68))|0);
   FUNCTION_TABLE[$65]($61, $info, $current_ptr, $66, $69, $use_strcmp);
   var $70=HEAP8[($45)];
   var $71=$70 & 1;
   var $72=(($71 << 24) >> 24)==0;
   if ($72) { label = 16; break; } else { var $is_dst_type_derived_from_static_type_2_off0 = $is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_0_off019;label = 22; break; }
  case 16: 
   var $74=HEAP8[($44)];
   var $75=$74 & 1;
   var $76=(($75 << 24) >> 24)==0;
   if ($76) { var $is_dst_type_derived_from_static_type_1_off0 = $is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0 = $does_dst_type_point_to_our_static_type_0_off019;label = 21; break; } else { label = 17; break; }
  case 17: 
   var $78=HEAP8[($43)];
   var $79=$78 & 1;
   var $80=(($79 << 24) >> 24)==0;
   if ($80) { label = 20; break; } else { label = 18; break; }
  case 18: 
   var $82=HEAP32[(($47)>>2)];
   var $83=(($82)|(0))==1;
   if ($83) { label = 27; break; } else { label = 19; break; }
  case 19: 
   var $85=HEAP32[(($46)>>2)];
   var $86=$85 & 2;
   var $87=(($86)|(0))==0;
   if ($87) { label = 27; break; } else { var $is_dst_type_derived_from_static_type_1_off0 = 1;var $does_dst_type_point_to_our_static_type_1_off0 = 1;label = 21; break; }
  case 20: 
   var $89=HEAP32[(($46)>>2)];
   var $90=$89 & 1;
   var $91=(($90)|(0))==0;
   if ($91) { var $is_dst_type_derived_from_static_type_2_off0 = 1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_0_off019;label = 22; break; } else { var $is_dst_type_derived_from_static_type_1_off0 = 1;var $does_dst_type_point_to_our_static_type_1_off0 = $does_dst_type_point_to_our_static_type_0_off019;label = 21; break; }
  case 21: 
   var $does_dst_type_point_to_our_static_type_1_off0;
   var $is_dst_type_derived_from_static_type_1_off0;
   var $93=(($p_020+8)|0);
   var $94=(($93)>>>(0)) < (($40)>>>(0));
   if ($94) { var $does_dst_type_point_to_our_static_type_0_off019 = $does_dst_type_point_to_our_static_type_1_off0;var $p_020 = $93;var $is_dst_type_derived_from_static_type_0_off021 = $is_dst_type_derived_from_static_type_1_off0;label = 13; break; } else { var $is_dst_type_derived_from_static_type_2_off0 = $is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_1_off0;label = 22; break; }
  case 22: 
   var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
   var $is_dst_type_derived_from_static_type_2_off0;
   if ($does_dst_type_point_to_our_static_type_0_off0_lcssa) { var $is_dst_type_derived_from_static_type_2_off031 = $is_dst_type_derived_from_static_type_2_off0;label = 26; break; } else { var $is_dst_type_derived_from_static_type_2_off030 = $is_dst_type_derived_from_static_type_2_off0;label = 23; break; }
  case 23: 
   var $is_dst_type_derived_from_static_type_2_off030;
   HEAP32[(($25)>>2)]=$current_ptr;
   var $95=(($info+40)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=((($96)+(1))|0);
   HEAP32[(($95)>>2)]=$97;
   var $98=(($info+36)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==1;
   if ($100) { label = 24; break; } else { var $is_dst_type_derived_from_static_type_2_off031 = $is_dst_type_derived_from_static_type_2_off030;label = 26; break; }
  case 24: 
   var $102=(($info+24)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==2;
   if ($104) { label = 25; break; } else { var $is_dst_type_derived_from_static_type_2_off031 = $is_dst_type_derived_from_static_type_2_off030;label = 26; break; }
  case 25: 
   var $106=(($info+54)|0);
   HEAP8[($106)]=1;
   if ($is_dst_type_derived_from_static_type_2_off030) { label = 27; break; } else { label = 28; break; }
  case 26: 
   var $is_dst_type_derived_from_static_type_2_off031;
   if ($is_dst_type_derived_from_static_type_2_off031) { label = 27; break; } else { label = 28; break; }
  case 27: 
   HEAP32[(($34)>>2)]=3;
   label = 53; break;
  case 28: 
   HEAP32[(($34)>>2)]=4;
   label = 53; break;
  case 29: 
   var $110=(($this+12)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($this+16+($111<<3))|0);
   var $113=(($this+20)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$114 >> 8;
   var $116=$114 & 1;
   var $117=(($116)|(0))==0;
   if ($117) { var $offset_to_base_0_i14 = $115;label = 31; break; } else { label = 30; break; }
  case 30: 
   var $119=$current_ptr;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+$115)|0);
   var $122=$121;
   var $123=HEAP32[(($122)>>2)];
   var $offset_to_base_0_i14 = $123;label = 31; break;
  case 31: 
   var $offset_to_base_0_i14;
   var $124=(($this+16)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=$125;
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127+24)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($current_ptr+$offset_to_base_0_i14)|0);
   var $131=$114 & 2;
   var $132=(($131)|(0))!=0;
   var $133=$132 ? $path_below : 2;
   FUNCTION_TABLE[$129]($125, $info, $130, $133, $use_strcmp);
   var $134=(($this+24)|0);
   var $135=(($111)|(0)) > 1;
   if ($135) { label = 32; break; } else { label = 53; break; }
  case 32: 
   var $137=(($this+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$138 & 2;
   var $140=(($139)|(0))==0;
   if ($140) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $142=(($info+36)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143)|(0))==1;
   if ($144) { label = 34; break; } else { label = 39; break; }
  case 34: 
   var $145=(($info+54)|0);
   var $146=$current_ptr;
   var $p2_0 = $134;label = 35; break;
  case 35: 
   var $p2_0;
   var $148=HEAP8[($145)];
   var $149=$148 & 1;
   var $150=(($149 << 24) >> 24)==0;
   if ($150) { label = 36; break; } else { label = 53; break; }
  case 36: 
   var $152=(($p2_0+4)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$153 >> 8;
   var $155=$153 & 1;
   var $156=(($155)|(0))==0;
   if ($156) { var $offset_to_base_0_i11 = $154;label = 38; break; } else { label = 37; break; }
  case 37: 
   var $158=HEAP32[(($146)>>2)];
   var $159=(($158+$154)|0);
   var $160=$159;
   var $161=HEAP32[(($160)>>2)];
   var $offset_to_base_0_i11 = $161;label = 38; break;
  case 38: 
   var $offset_to_base_0_i11;
   var $162=(($p2_0)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=$163;
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+24)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($current_ptr+$offset_to_base_0_i11)|0);
   var $169=$153 & 2;
   var $170=(($169)|(0))!=0;
   var $171=$170 ? $path_below : 2;
   FUNCTION_TABLE[$167]($163, $info, $168, $171, $use_strcmp);
   var $172=(($p2_0+8)|0);
   var $173=(($172)>>>(0)) < (($112)>>>(0));
   if ($173) { var $p2_0 = $172;label = 35; break; } else { label = 53; break; }
  case 39: 
   var $175=$138 & 1;
   var $176=(($175)|(0))==0;
   if ($176) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $177=(($info+24)|0);
   var $178=(($info+54)|0);
   var $179=$current_ptr;
   var $p2_1 = $134;label = 42; break;
  case 41: 
   var $180=(($info+54)|0);
   var $181=$current_ptr;
   var $p2_2 = $134;label = 48; break;
  case 42: 
   var $p2_1;
   var $183=HEAP8[($178)];
   var $184=$183 & 1;
   var $185=(($184 << 24) >> 24)==0;
   if ($185) { label = 43; break; } else { label = 53; break; }
  case 43: 
   var $187=HEAP32[(($142)>>2)];
   var $188=(($187)|(0))==1;
   if ($188) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $190=HEAP32[(($177)>>2)];
   var $191=(($190)|(0))==1;
   if ($191) { label = 53; break; } else { label = 45; break; }
  case 45: 
   var $193=(($p2_1+4)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=$194 >> 8;
   var $196=$194 & 1;
   var $197=(($196)|(0))==0;
   if ($197) { var $offset_to_base_0_i9 = $195;label = 47; break; } else { label = 46; break; }
  case 46: 
   var $199=HEAP32[(($179)>>2)];
   var $200=(($199+$195)|0);
   var $201=$200;
   var $202=HEAP32[(($201)>>2)];
   var $offset_to_base_0_i9 = $202;label = 47; break;
  case 47: 
   var $offset_to_base_0_i9;
   var $203=(($p2_1)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=$204;
   var $206=HEAP32[(($205)>>2)];
   var $207=(($206+24)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($current_ptr+$offset_to_base_0_i9)|0);
   var $210=$194 & 2;
   var $211=(($210)|(0))!=0;
   var $212=$211 ? $path_below : 2;
   FUNCTION_TABLE[$208]($204, $info, $209, $212, $use_strcmp);
   var $213=(($p2_1+8)|0);
   var $214=(($213)>>>(0)) < (($112)>>>(0));
   if ($214) { var $p2_1 = $213;label = 42; break; } else { label = 53; break; }
  case 48: 
   var $p2_2;
   var $216=HEAP8[($180)];
   var $217=$216 & 1;
   var $218=(($217 << 24) >> 24)==0;
   if ($218) { label = 49; break; } else { label = 53; break; }
  case 49: 
   var $220=HEAP32[(($142)>>2)];
   var $221=(($220)|(0))==1;
   if ($221) { label = 53; break; } else { label = 50; break; }
  case 50: 
   var $223=(($p2_2+4)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=$224 >> 8;
   var $226=$224 & 1;
   var $227=(($226)|(0))==0;
   if ($227) { var $offset_to_base_0_i = $225;label = 52; break; } else { label = 51; break; }
  case 51: 
   var $229=HEAP32[(($181)>>2)];
   var $230=(($229+$225)|0);
   var $231=$230;
   var $232=HEAP32[(($231)>>2)];
   var $offset_to_base_0_i = $232;label = 52; break;
  case 52: 
   var $offset_to_base_0_i;
   var $233=(($p2_2)|0);
   var $234=HEAP32[(($233)>>2)];
   var $235=$234;
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+24)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=(($current_ptr+$offset_to_base_0_i)|0);
   var $240=$224 & 2;
   var $241=(($240)|(0))!=0;
   var $242=$241 ? $path_below : 2;
   FUNCTION_TABLE[$238]($234, $info, $239, $242, $use_strcmp);
   var $243=(($p2_2+8)|0);
   var $244=(($243)>>>(0)) < (($112)>>>(0));
   if ($244) { var $p2_2 = $243;label = 48; break; } else { label = 53; break; }
  case 53: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($info+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==(($current_ptr)|(0));
   if ($9) { label = 3; break; } else { label = 20; break; }
  case 3: 
   var $11=(($info+28)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==1;
   if ($13) { label = 20; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($11)>>2)]=$path_below;
   label = 20; break;
  case 5: 
   var $16=(($info)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|0);
   var $19=(($1)|(0))==(($18)|(0));
   if ($19) { label = 6; break; } else { label = 19; break; }
  case 6: 
   var $21=(($info+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==(($current_ptr)|(0));
   if ($23) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $25=(($info+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==(($current_ptr)|(0));
   if ($27) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $29=(($path_below)|(0))==1;
   if ($29) { label = 9; break; } else { label = 20; break; }
  case 9: 
   var $31=(($info+32)|0);
   HEAP32[(($31)>>2)]=1;
   label = 20; break;
  case 10: 
   var $33=(($info+32)|0);
   HEAP32[(($33)>>2)]=$path_below;
   var $34=(($info+44)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==4;
   if ($36) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $38=(($info+52)|0);
   HEAP8[($38)]=0;
   var $39=(($info+53)|0);
   HEAP8[($39)]=0;
   var $40=(($this+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   FUNCTION_TABLE[$45]($41, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   var $46=HEAP8[($39)];
   var $47=$46 & 1;
   var $48=(($47 << 24) >> 24)==0;
   if ($48) { var $is_dst_type_derived_from_static_type_0_off01 = 0;label = 13; break; } else { label = 12; break; }
  case 12: 
   var $50=HEAP8[($38)];
   var $51=$50 & 1;
   var $not_=(($51 << 24) >> 24)==0;
   if ($not_) { var $is_dst_type_derived_from_static_type_0_off01 = 1;label = 13; break; } else { label = 17; break; }
  case 13: 
   var $is_dst_type_derived_from_static_type_0_off01;
   HEAP32[(($25)>>2)]=$current_ptr;
   var $52=(($info+40)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($53)+(1))|0);
   HEAP32[(($52)>>2)]=$54;
   var $55=(($info+36)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))==1;
   if ($57) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $59=(($info+24)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0))==2;
   if ($61) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $63=(($info+54)|0);
   HEAP8[($63)]=1;
   if ($is_dst_type_derived_from_static_type_0_off01) { label = 17; break; } else { label = 18; break; }
  case 16: 
   if ($is_dst_type_derived_from_static_type_0_off01) { label = 17; break; } else { label = 18; break; }
  case 17: 
   HEAP32[(($34)>>2)]=3;
   label = 20; break;
  case 18: 
   HEAP32[(($34)>>2)]=4;
   label = 20; break;
  case 19: 
   var $67=(($this+8)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+24)|0);
   var $72=HEAP32[(($71)>>2)];
   FUNCTION_TABLE[$72]($68, $info, $current_ptr, $path_below, $use_strcmp);
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=(($info+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==(($current_ptr)|(0));
   if ($7) { label = 3; break; } else { label = 14; break; }
  case 3: 
   var $9=(($info+28)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==1;
   if ($11) { label = 14; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($9)>>2)]=$path_below;
   label = 14; break;
  case 5: 
   var $14=(($info)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==(($this)|(0));
   if ($16) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $18=(($info+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==(($current_ptr)|(0));
   if ($20) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $22=(($info+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==(($current_ptr)|(0));
   if ($24) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $26=(($path_below)|(0))==1;
   if ($26) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $28=(($info+32)|0);
   HEAP32[(($28)>>2)]=1;
   label = 14; break;
  case 10: 
   var $30=(($info+32)|0);
   HEAP32[(($30)>>2)]=$path_below;
   HEAP32[(($22)>>2)]=$current_ptr;
   var $31=(($info+40)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)+(1))|0);
   HEAP32[(($31)>>2)]=$33;
   var $34=(($info+36)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   if ($36) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $38=(($info+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==2;
   if ($40) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $42=(($info+54)|0);
   HEAP8[($42)]=1;
   label = 13; break;
  case 13: 
   var $44=(($info+44)|0);
   HEAP32[(($44)>>2)]=4;
   label = 14; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $7=(($info+53)|0);
   HEAP8[($7)]=1;
   var $8=(($info+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==(($current_ptr)|(0));
   if ($10) { label = 3; break; } else { label = 26; break; }
  case 3: 
   var $12=(($info+52)|0);
   HEAP8[($12)]=1;
   var $13=(($info+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 4; break; } else { label = 6; break; }
  case 4: 
   HEAP32[(($13)>>2)]=$dst_ptr;
   var $17=(($info+24)|0);
   HEAP32[(($17)>>2)]=$path_below;
   var $18=(($info+36)|0);
   HEAP32[(($18)>>2)]=1;
   var $19=(($info+48)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==1;
   var $22=(($path_below)|(0))==1;
   var $or_cond_i=$21 & $22;
   if ($or_cond_i) { label = 5; break; } else { label = 26; break; }
  case 5: 
   var $24=(($info+54)|0);
   HEAP8[($24)]=1;
   label = 26; break;
  case 6: 
   var $26=(($14)|(0))==(($dst_ptr)|(0));
   if ($26) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $28=(($info+24)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))==2;
   if ($30) { label = 8; break; } else { var $33 = $29;label = 9; break; }
  case 8: 
   HEAP32[(($28)>>2)]=$path_below;
   var $33 = $path_below;label = 9; break;
  case 9: 
   var $33;
   var $34=(($info+48)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   var $37=(($33)|(0))==1;
   var $or_cond1_i=$36 & $37;
   if ($or_cond1_i) { label = 10; break; } else { label = 26; break; }
  case 10: 
   var $39=(($info+54)|0);
   HEAP8[($39)]=1;
   label = 26; break;
  case 11: 
   var $41=(($info+36)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)+(1))|0);
   HEAP32[(($41)>>2)]=$43;
   var $44=(($info+54)|0);
   HEAP8[($44)]=1;
   label = 26; break;
  case 12: 
   var $46=(($info+52)|0);
   var $47=HEAP8[($46)];
   var $48=$47 & 1;
   var $49=(($info+53)|0);
   var $50=HEAP8[($49)];
   var $51=$50 & 1;
   var $52=(($this+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($this+16+($53<<3))|0);
   HEAP8[($46)]=0;
   HEAP8[($49)]=0;
   var $55=(($this+20)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56 >> 8;
   var $58=$56 & 1;
   var $59=(($58)|(0))==0;
   if ($59) { var $offset_to_base_0_i1 = $57;label = 14; break; } else { label = 13; break; }
  case 13: 
   var $61=$current_ptr;
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+$57)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $offset_to_base_0_i1 = $65;label = 14; break;
  case 14: 
   var $offset_to_base_0_i1;
   var $66=(($this+16)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+20)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($current_ptr+$offset_to_base_0_i1)|0);
   var $73=$56 & 2;
   var $74=(($73)|(0))!=0;
   var $75=$74 ? $path_below : 2;
   FUNCTION_TABLE[$71]($67, $info, $dst_ptr, $72, $75, $use_strcmp);
   var $76=(($53)|(0)) > 1;
   if ($76) { label = 15; break; } else { label = 25; break; }
  case 15: 
   var $77=(($this+24)|0);
   var $78=(($info+24)|0);
   var $79=(($this+8)|0);
   var $80=(($info+54)|0);
   var $81=$current_ptr;
   var $p_0 = $77;label = 16; break;
  case 16: 
   var $p_0;
   var $83=HEAP8[($80)];
   var $84=$83 & 1;
   var $85=(($84 << 24) >> 24)==0;
   if ($85) { label = 17; break; } else { label = 25; break; }
  case 17: 
   var $87=HEAP8[($46)];
   var $88=$87 & 1;
   var $89=(($88 << 24) >> 24)==0;
   if ($89) { label = 20; break; } else { label = 18; break; }
  case 18: 
   var $91=HEAP32[(($78)>>2)];
   var $92=(($91)|(0))==1;
   if ($92) { label = 25; break; } else { label = 19; break; }
  case 19: 
   var $94=HEAP32[(($79)>>2)];
   var $95=$94 & 2;
   var $96=(($95)|(0))==0;
   if ($96) { label = 25; break; } else { label = 22; break; }
  case 20: 
   var $98=HEAP8[($49)];
   var $99=$98 & 1;
   var $100=(($99 << 24) >> 24)==0;
   if ($100) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $102=HEAP32[(($79)>>2)];
   var $103=$102 & 1;
   var $104=(($103)|(0))==0;
   if ($104) { label = 25; break; } else { label = 22; break; }
  case 22: 
   HEAP8[($46)]=0;
   HEAP8[($49)]=0;
   var $106=(($p_0+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=$107 >> 8;
   var $109=$107 & 1;
   var $110=(($109)|(0))==0;
   if ($110) { var $offset_to_base_0_i = $108;label = 24; break; } else { label = 23; break; }
  case 23: 
   var $112=HEAP32[(($81)>>2)];
   var $113=(($112+$108)|0);
   var $114=$113;
   var $115=HEAP32[(($114)>>2)];
   var $offset_to_base_0_i = $115;label = 24; break;
  case 24: 
   var $offset_to_base_0_i;
   var $116=(($p_0)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+20)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($current_ptr+$offset_to_base_0_i)|0);
   var $123=$107 & 2;
   var $124=(($123)|(0))!=0;
   var $125=$124 ? $path_below : 2;
   FUNCTION_TABLE[$121]($117, $info, $dst_ptr, $122, $125, $use_strcmp);
   var $126=(($p_0+8)|0);
   var $127=(($126)>>>(0)) < (($54)>>>(0));
   if ($127) { var $p_0 = $126;label = 16; break; } else { label = 25; break; }
  case 25: 
   HEAP8[($46)]=$48;
   HEAP8[($49)]=$51;
   label = 26; break;
  case 26: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $7=(($info+53)|0);
   HEAP8[($7)]=1;
   var $8=(($info+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==(($current_ptr)|(0));
   if ($10) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $12=(($info+52)|0);
   HEAP8[($12)]=1;
   var $13=(($info+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 4; break; } else { label = 6; break; }
  case 4: 
   HEAP32[(($13)>>2)]=$dst_ptr;
   var $17=(($info+24)|0);
   HEAP32[(($17)>>2)]=$path_below;
   var $18=(($info+36)|0);
   HEAP32[(($18)>>2)]=1;
   var $19=(($info+48)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==1;
   var $22=(($path_below)|(0))==1;
   var $or_cond_i=$21 & $22;
   if ($or_cond_i) { label = 5; break; } else { label = 13; break; }
  case 5: 
   var $24=(($info+54)|0);
   HEAP8[($24)]=1;
   label = 13; break;
  case 6: 
   var $26=(($14)|(0))==(($dst_ptr)|(0));
   if ($26) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $28=(($info+24)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))==2;
   if ($30) { label = 8; break; } else { var $33 = $29;label = 9; break; }
  case 8: 
   HEAP32[(($28)>>2)]=$path_below;
   var $33 = $path_below;label = 9; break;
  case 9: 
   var $33;
   var $34=(($info+48)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   var $37=(($33)|(0))==1;
   var $or_cond1_i=$36 & $37;
   if ($or_cond1_i) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $39=(($info+54)|0);
   HEAP8[($39)]=1;
   label = 13; break;
  case 11: 
   var $41=(($info+36)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)+(1))|0);
   HEAP32[(($41)>>2)]=$43;
   var $44=(($info+54)|0);
   HEAP8[($44)]=1;
   label = 13; break;
  case 12: 
   var $46=(($this+8)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   FUNCTION_TABLE[$51]($47, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $5=(($info+53)|0);
   HEAP8[($5)]=1;
   var $6=(($info+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==(($current_ptr)|(0));
   if ($8) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $10=(($info+52)|0);
   HEAP8[($10)]=1;
   var $11=(($info+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 4; break; } else { label = 6; break; }
  case 4: 
   HEAP32[(($11)>>2)]=$dst_ptr;
   var $15=(($info+24)|0);
   HEAP32[(($15)>>2)]=$path_below;
   var $16=(($info+36)|0);
   HEAP32[(($16)>>2)]=1;
   var $17=(($info+48)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))==1;
   var $20=(($path_below)|(0))==1;
   var $or_cond_i=$19 & $20;
   if ($or_cond_i) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $22=(($info+54)|0);
   HEAP8[($22)]=1;
   label = 12; break;
  case 6: 
   var $24=(($12)|(0))==(($dst_ptr)|(0));
   if ($24) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $26=(($info+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==2;
   if ($28) { label = 8; break; } else { var $31 = $27;label = 9; break; }
  case 8: 
   HEAP32[(($26)>>2)]=$path_below;
   var $31 = $path_below;label = 9; break;
  case 9: 
   var $31;
   var $32=(($info+48)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))==1;
   var $35=(($31)|(0))==1;
   var $or_cond1_i=$34 & $35;
   if ($or_cond1_i) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $37=(($info+54)|0);
   HEAP8[($37)]=1;
   label = 12; break;
  case 11: 
   var $39=(($info+36)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)+(1))|0);
   HEAP32[(($39)>>2)]=$41;
   var $42=(($info+54)|0);
   HEAP8[($42)]=1;
   label = 12; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($bytes)>>>(0)) < 245;
   if ($1) { label = 2; break; } else { label = 78; break; }
  case 2: 
   var $3=(($bytes)>>>(0)) < 11;
   if ($3) { var $8 = 16;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $5=((($bytes)+(11))|0);
   var $6=$5 & -8;
   var $8 = $6;label = 4; break;
  case 4: 
   var $8;
   var $9=$8 >>> 3;
   var $10=HEAP32[((((10168)|0))>>2)];
   var $11=$10 >>> (($9)>>>(0));
   var $12=$11 & 3;
   var $13=(($12)|(0))==0;
   if ($13) { label = 12; break; } else { label = 5; break; }
  case 5: 
   var $15=$11 & 1;
   var $16=$15 ^ 1;
   var $17=((($16)+($9))|0);
   var $18=$17 << 1;
   var $19=((10208+($18<<2))|0);
   var $20=$19;
   var $_sum11=((($18)+(2))|0);
   var $21=((10208+($_sum11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20)|(0))==(($24)|(0));
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=1 << $17;
   var $28=$27 ^ -1;
   var $29=$10 & $28;
   HEAP32[((((10168)|0))>>2)]=$29;
   label = 11; break;
  case 7: 
   var $31=$24;
   var $32=HEAP32[((((10184)|0))>>2)];
   var $33=(($31)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $35=(($24+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==(($22)|(0));
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($35)>>2)]=$20;
   HEAP32[(($21)>>2)]=$24;
   label = 11; break;
  case 10: 
   _abort();
   throw "Reached an unreachable!";
  case 11: 
   var $40=$17 << 3;
   var $41=$40 | 3;
   var $42=(($22+4)|0);
   HEAP32[(($42)>>2)]=$41;
   var $43=$22;
   var $_sum1314=$40 | 4;
   var $44=(($43+$_sum1314)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 | 1;
   HEAP32[(($45)>>2)]=$47;
   var $48=$23;
   var $mem_0 = $48;label = 344; break;
  case 12: 
   var $50=HEAP32[((((10176)|0))>>2)];
   var $51=(($8)>>>(0)) > (($50)>>>(0));
   if ($51) { label = 13; break; } else { var $nb_0 = $8;label = 161; break; }
  case 13: 
   var $53=(($11)|(0))==0;
   if ($53) { label = 27; break; } else { label = 14; break; }
  case 14: 
   var $55=$11 << $9;
   var $56=2 << $9;
   var $57=(((-$56))|0);
   var $58=$56 | $57;
   var $59=$55 & $58;
   var $60=(((-$59))|0);
   var $61=$59 & $60;
   var $62=((($61)-(1))|0);
   var $63=$62 >>> 12;
   var $64=$63 & 16;
   var $65=$62 >>> (($64)>>>(0));
   var $66=$65 >>> 5;
   var $67=$66 & 8;
   var $68=$67 | $64;
   var $69=$65 >>> (($67)>>>(0));
   var $70=$69 >>> 2;
   var $71=$70 & 4;
   var $72=$68 | $71;
   var $73=$69 >>> (($71)>>>(0));
   var $74=$73 >>> 1;
   var $75=$74 & 2;
   var $76=$72 | $75;
   var $77=$73 >>> (($75)>>>(0));
   var $78=$77 >>> 1;
   var $79=$78 & 1;
   var $80=$76 | $79;
   var $81=$77 >>> (($79)>>>(0));
   var $82=((($80)+($81))|0);
   var $83=$82 << 1;
   var $84=((10208+($83<<2))|0);
   var $85=$84;
   var $_sum4=((($83)+(2))|0);
   var $86=((10208+($_sum4<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85)|(0))==(($89)|(0));
   if ($90) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $92=1 << $82;
   var $93=$92 ^ -1;
   var $94=$10 & $93;
   HEAP32[((((10168)|0))>>2)]=$94;
   label = 20; break;
  case 16: 
   var $96=$89;
   var $97=HEAP32[((((10184)|0))>>2)];
   var $98=(($96)>>>(0)) < (($97)>>>(0));
   if ($98) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $100=(($89+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==(($87)|(0));
   if ($102) { label = 18; break; } else { label = 19; break; }
  case 18: 
   HEAP32[(($100)>>2)]=$85;
   HEAP32[(($86)>>2)]=$89;
   label = 20; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   var $105=$82 << 3;
   var $106=((($105)-($8))|0);
   var $107=$8 | 3;
   var $108=(($87+4)|0);
   HEAP32[(($108)>>2)]=$107;
   var $109=$87;
   var $110=(($109+$8)|0);
   var $111=$110;
   var $112=$106 | 1;
   var $_sum67=$8 | 4;
   var $113=(($109+$_sum67)|0);
   var $114=$113;
   HEAP32[(($114)>>2)]=$112;
   var $115=(($109+$105)|0);
   var $116=$115;
   HEAP32[(($116)>>2)]=$106;
   var $117=HEAP32[((((10176)|0))>>2)];
   var $118=(($117)|(0))==0;
   if ($118) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $120=HEAP32[((((10188)|0))>>2)];
   var $121=$117 >>> 3;
   var $122=$121 << 1;
   var $123=((10208+($122<<2))|0);
   var $124=$123;
   var $125=HEAP32[((((10168)|0))>>2)];
   var $126=1 << $121;
   var $127=$125 & $126;
   var $128=(($127)|(0))==0;
   if ($128) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $130=$125 | $126;
   HEAP32[((((10168)|0))>>2)]=$130;
   var $_sum9_pre=((($122)+(2))|0);
   var $_pre=((10208+($_sum9_pre<<2))|0);
   var $F4_0 = $124;var $_pre_phi = $_pre;label = 25; break;
  case 23: 
   var $_sum10=((($122)+(2))|0);
   var $132=((10208+($_sum10<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   var $135=HEAP32[((((10184)|0))>>2)];
   var $136=(($134)>>>(0)) < (($135)>>>(0));
   if ($136) { label = 24; break; } else { var $F4_0 = $133;var $_pre_phi = $132;label = 25; break; }
  case 24: 
   _abort();
   throw "Reached an unreachable!";
  case 25: 
   var $_pre_phi;
   var $F4_0;
   HEAP32[(($_pre_phi)>>2)]=$120;
   var $139=(($F4_0+12)|0);
   HEAP32[(($139)>>2)]=$120;
   var $140=(($120+8)|0);
   HEAP32[(($140)>>2)]=$F4_0;
   var $141=(($120+12)|0);
   HEAP32[(($141)>>2)]=$124;
   label = 26; break;
  case 26: 
   HEAP32[((((10176)|0))>>2)]=$106;
   HEAP32[((((10188)|0))>>2)]=$111;
   var $143=$88;
   var $mem_0 = $143;label = 344; break;
  case 27: 
   var $145=HEAP32[((((10172)|0))>>2)];
   var $146=(($145)|(0))==0;
   if ($146) { var $nb_0 = $8;label = 161; break; } else { label = 28; break; }
  case 28: 
   var $148=(((-$145))|0);
   var $149=$145 & $148;
   var $150=((($149)-(1))|0);
   var $151=$150 >>> 12;
   var $152=$151 & 16;
   var $153=$150 >>> (($152)>>>(0));
   var $154=$153 >>> 5;
   var $155=$154 & 8;
   var $156=$155 | $152;
   var $157=$153 >>> (($155)>>>(0));
   var $158=$157 >>> 2;
   var $159=$158 & 4;
   var $160=$156 | $159;
   var $161=$157 >>> (($159)>>>(0));
   var $162=$161 >>> 1;
   var $163=$162 & 2;
   var $164=$160 | $163;
   var $165=$161 >>> (($163)>>>(0));
   var $166=$165 >>> 1;
   var $167=$166 & 1;
   var $168=$164 | $167;
   var $169=$165 >>> (($167)>>>(0));
   var $170=((($168)+($169))|0);
   var $171=((10472+($170<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$174 & -8;
   var $176=((($175)-($8))|0);
   var $t_0_i = $172;var $v_0_i = $172;var $rsize_0_i = $176;label = 29; break;
  case 29: 
   var $rsize_0_i;
   var $v_0_i;
   var $t_0_i;
   var $178=(($t_0_i+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 30; break; } else { var $185 = $179;label = 31; break; }
  case 30: 
   var $182=(($t_0_i+20)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   if ($184) { label = 32; break; } else { var $185 = $183;label = 31; break; }
  case 31: 
   var $185;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$187 & -8;
   var $189=((($188)-($8))|0);
   var $190=(($189)>>>(0)) < (($rsize_0_i)>>>(0));
   var $_rsize_0_i=$190 ? $189 : $rsize_0_i;
   var $_v_0_i=$190 ? $185 : $v_0_i;
   var $t_0_i = $185;var $v_0_i = $_v_0_i;var $rsize_0_i = $_rsize_0_i;label = 29; break;
  case 32: 
   var $192=$v_0_i;
   var $193=HEAP32[((((10184)|0))>>2)];
   var $194=(($192)>>>(0)) < (($193)>>>(0));
   if ($194) { label = 76; break; } else { label = 33; break; }
  case 33: 
   var $196=(($192+$8)|0);
   var $197=$196;
   var $198=(($192)>>>(0)) < (($196)>>>(0));
   if ($198) { label = 34; break; } else { label = 76; break; }
  case 34: 
   var $200=(($v_0_i+24)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($v_0_i+12)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203)|(0))==(($v_0_i)|(0));
   if ($204) { label = 40; break; } else { label = 35; break; }
  case 35: 
   var $206=(($v_0_i+8)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=$207;
   var $209=(($208)>>>(0)) < (($193)>>>(0));
   if ($209) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $211=(($207+12)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212)|(0))==(($v_0_i)|(0));
   if ($213) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $215=(($203+8)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216)|(0))==(($v_0_i)|(0));
   if ($217) { label = 38; break; } else { label = 39; break; }
  case 38: 
   HEAP32[(($211)>>2)]=$203;
   HEAP32[(($215)>>2)]=$207;
   var $R_1_i = $203;label = 47; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $220=(($v_0_i+20)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221)|(0))==0;
   if ($222) { label = 41; break; } else { var $R_0_i = $221;var $RP_0_i = $220;label = 42; break; }
  case 41: 
   var $224=(($v_0_i+16)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0))==0;
   if ($226) { var $R_1_i = 0;label = 47; break; } else { var $R_0_i = $225;var $RP_0_i = $224;label = 42; break; }
  case 42: 
   var $RP_0_i;
   var $R_0_i;
   var $227=(($R_0_i+20)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228)|(0))==0;
   if ($229) { label = 43; break; } else { var $R_0_i = $228;var $RP_0_i = $227;label = 42; break; }
  case 43: 
   var $231=(($R_0_i+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==0;
   if ($233) { label = 44; break; } else { var $R_0_i = $232;var $RP_0_i = $231;label = 42; break; }
  case 44: 
   var $235=$RP_0_i;
   var $236=(($235)>>>(0)) < (($193)>>>(0));
   if ($236) { label = 46; break; } else { label = 45; break; }
  case 45: 
   HEAP32[(($RP_0_i)>>2)]=0;
   var $R_1_i = $R_0_i;label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   var $R_1_i;
   var $240=(($201)|(0))==0;
   if ($240) { label = 67; break; } else { label = 48; break; }
  case 48: 
   var $242=(($v_0_i+28)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=((10472+($243<<2))|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($v_0_i)|(0))==(($245)|(0));
   if ($246) { label = 49; break; } else { label = 51; break; }
  case 49: 
   HEAP32[(($244)>>2)]=$R_1_i;
   var $cond_i=(($R_1_i)|(0))==0;
   if ($cond_i) { label = 50; break; } else { label = 57; break; }
  case 50: 
   var $248=HEAP32[(($242)>>2)];
   var $249=1 << $248;
   var $250=$249 ^ -1;
   var $251=HEAP32[((((10172)|0))>>2)];
   var $252=$251 & $250;
   HEAP32[((((10172)|0))>>2)]=$252;
   label = 67; break;
  case 51: 
   var $254=$201;
   var $255=HEAP32[((((10184)|0))>>2)];
   var $256=(($254)>>>(0)) < (($255)>>>(0));
   if ($256) { label = 55; break; } else { label = 52; break; }
  case 52: 
   var $258=(($201+16)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))==(($v_0_i)|(0));
   if ($260) { label = 53; break; } else { label = 54; break; }
  case 53: 
   HEAP32[(($258)>>2)]=$R_1_i;
   label = 56; break;
  case 54: 
   var $263=(($201+20)|0);
   HEAP32[(($263)>>2)]=$R_1_i;
   label = 56; break;
  case 55: 
   _abort();
   throw "Reached an unreachable!";
  case 56: 
   var $266=(($R_1_i)|(0))==0;
   if ($266) { label = 67; break; } else { label = 57; break; }
  case 57: 
   var $268=$R_1_i;
   var $269=HEAP32[((((10184)|0))>>2)];
   var $270=(($268)>>>(0)) < (($269)>>>(0));
   if ($270) { label = 66; break; } else { label = 58; break; }
  case 58: 
   var $272=(($R_1_i+24)|0);
   HEAP32[(($272)>>2)]=$201;
   var $273=(($v_0_i+16)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==0;
   if ($275) { label = 62; break; } else { label = 59; break; }
  case 59: 
   var $277=$274;
   var $278=HEAP32[((((10184)|0))>>2)];
   var $279=(($277)>>>(0)) < (($278)>>>(0));
   if ($279) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $281=(($R_1_i+16)|0);
   HEAP32[(($281)>>2)]=$274;
   var $282=(($274+24)|0);
   HEAP32[(($282)>>2)]=$R_1_i;
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   var $285=(($v_0_i+20)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))==0;
   if ($287) { label = 67; break; } else { label = 63; break; }
  case 63: 
   var $289=$286;
   var $290=HEAP32[((((10184)|0))>>2)];
   var $291=(($289)>>>(0)) < (($290)>>>(0));
   if ($291) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $293=(($R_1_i+20)|0);
   HEAP32[(($293)>>2)]=$286;
   var $294=(($286+24)|0);
   HEAP32[(($294)>>2)]=$R_1_i;
   label = 67; break;
  case 65: 
   _abort();
   throw "Reached an unreachable!";
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   var $298=(($rsize_0_i)>>>(0)) < 16;
   if ($298) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $300=((($rsize_0_i)+($8))|0);
   var $301=$300 | 3;
   var $302=(($v_0_i+4)|0);
   HEAP32[(($302)>>2)]=$301;
   var $_sum4_i=((($300)+(4))|0);
   var $303=(($192+$_sum4_i)|0);
   var $304=$303;
   var $305=HEAP32[(($304)>>2)];
   var $306=$305 | 1;
   HEAP32[(($304)>>2)]=$306;
   label = 77; break;
  case 69: 
   var $308=$8 | 3;
   var $309=(($v_0_i+4)|0);
   HEAP32[(($309)>>2)]=$308;
   var $310=$rsize_0_i | 1;
   var $_sum_i37=$8 | 4;
   var $311=(($192+$_sum_i37)|0);
   var $312=$311;
   HEAP32[(($312)>>2)]=$310;
   var $_sum1_i=((($rsize_0_i)+($8))|0);
   var $313=(($192+$_sum1_i)|0);
   var $314=$313;
   HEAP32[(($314)>>2)]=$rsize_0_i;
   var $315=HEAP32[((((10176)|0))>>2)];
   var $316=(($315)|(0))==0;
   if ($316) { label = 75; break; } else { label = 70; break; }
  case 70: 
   var $318=HEAP32[((((10188)|0))>>2)];
   var $319=$315 >>> 3;
   var $320=$319 << 1;
   var $321=((10208+($320<<2))|0);
   var $322=$321;
   var $323=HEAP32[((((10168)|0))>>2)];
   var $324=1 << $319;
   var $325=$323 & $324;
   var $326=(($325)|(0))==0;
   if ($326) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $328=$323 | $324;
   HEAP32[((((10168)|0))>>2)]=$328;
   var $_sum2_pre_i=((($320)+(2))|0);
   var $_pre_i=((10208+($_sum2_pre_i<<2))|0);
   var $F1_0_i = $322;var $_pre_phi_i = $_pre_i;label = 74; break;
  case 72: 
   var $_sum3_i=((($320)+(2))|0);
   var $330=((10208+($_sum3_i<<2))|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=$331;
   var $333=HEAP32[((((10184)|0))>>2)];
   var $334=(($332)>>>(0)) < (($333)>>>(0));
   if ($334) { label = 73; break; } else { var $F1_0_i = $331;var $_pre_phi_i = $330;label = 74; break; }
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $_pre_phi_i;
   var $F1_0_i;
   HEAP32[(($_pre_phi_i)>>2)]=$318;
   var $337=(($F1_0_i+12)|0);
   HEAP32[(($337)>>2)]=$318;
   var $338=(($318+8)|0);
   HEAP32[(($338)>>2)]=$F1_0_i;
   var $339=(($318+12)|0);
   HEAP32[(($339)>>2)]=$322;
   label = 75; break;
  case 75: 
   HEAP32[((((10176)|0))>>2)]=$rsize_0_i;
   HEAP32[((((10188)|0))>>2)]=$197;
   label = 77; break;
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   var $342=(($v_0_i+8)|0);
   var $343=$342;
   var $mem_0 = $343;label = 344; break;
  case 78: 
   var $345=(($bytes)>>>(0)) > 4294967231;
   if ($345) { var $nb_0 = -1;label = 161; break; } else { label = 79; break; }
  case 79: 
   var $347=((($bytes)+(11))|0);
   var $348=$347 & -8;
   var $349=HEAP32[((((10172)|0))>>2)];
   var $350=(($349)|(0))==0;
   if ($350) { var $nb_0 = $348;label = 161; break; } else { label = 80; break; }
  case 80: 
   var $352=(((-$348))|0);
   var $353=$347 >>> 8;
   var $354=(($353)|(0))==0;
   if ($354) { var $idx_0_i = 0;label = 83; break; } else { label = 81; break; }
  case 81: 
   var $356=(($348)>>>(0)) > 16777215;
   if ($356) { var $idx_0_i = 31;label = 83; break; } else { label = 82; break; }
  case 82: 
   var $358=((($353)+(1048320))|0);
   var $359=$358 >>> 16;
   var $360=$359 & 8;
   var $361=$353 << $360;
   var $362=((($361)+(520192))|0);
   var $363=$362 >>> 16;
   var $364=$363 & 4;
   var $365=$364 | $360;
   var $366=$361 << $364;
   var $367=((($366)+(245760))|0);
   var $368=$367 >>> 16;
   var $369=$368 & 2;
   var $370=$365 | $369;
   var $371=(((14)-($370))|0);
   var $372=$366 << $369;
   var $373=$372 >>> 15;
   var $374=((($371)+($373))|0);
   var $375=$374 << 1;
   var $376=((($374)+(7))|0);
   var $377=$348 >>> (($376)>>>(0));
   var $378=$377 & 1;
   var $379=$378 | $375;
   var $idx_0_i = $379;label = 83; break;
  case 83: 
   var $idx_0_i;
   var $381=((10472+($idx_0_i<<2))|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=(($382)|(0))==0;
   if ($383) { var $v_2_i = 0;var $rsize_2_i = $352;var $t_1_i = 0;label = 90; break; } else { label = 84; break; }
  case 84: 
   var $385=(($idx_0_i)|(0))==31;
   if ($385) { var $390 = 0;label = 86; break; } else { label = 85; break; }
  case 85: 
   var $387=$idx_0_i >>> 1;
   var $388=(((25)-($387))|0);
   var $390 = $388;label = 86; break;
  case 86: 
   var $390;
   var $391=$348 << $390;
   var $v_0_i18 = 0;var $rsize_0_i17 = $352;var $t_0_i16 = $382;var $sizebits_0_i = $391;var $rst_0_i = 0;label = 87; break;
  case 87: 
   var $rst_0_i;
   var $sizebits_0_i;
   var $t_0_i16;
   var $rsize_0_i17;
   var $v_0_i18;
   var $393=(($t_0_i16+4)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=$394 & -8;
   var $396=((($395)-($348))|0);
   var $397=(($396)>>>(0)) < (($rsize_0_i17)>>>(0));
   if ($397) { label = 88; break; } else { var $v_1_i = $v_0_i18;var $rsize_1_i = $rsize_0_i17;label = 89; break; }
  case 88: 
   var $399=(($395)|(0))==(($348)|(0));
   if ($399) { var $v_2_i = $t_0_i16;var $rsize_2_i = $396;var $t_1_i = $t_0_i16;label = 90; break; } else { var $v_1_i = $t_0_i16;var $rsize_1_i = $396;label = 89; break; }
  case 89: 
   var $rsize_1_i;
   var $v_1_i;
   var $401=(($t_0_i16+20)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=$sizebits_0_i >>> 31;
   var $404=(($t_0_i16+16+($403<<2))|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=(($402)|(0))==0;
   var $407=(($402)|(0))==(($405)|(0));
   var $or_cond_i=$406 | $407;
   var $rst_1_i=$or_cond_i ? $rst_0_i : $402;
   var $408=(($405)|(0))==0;
   var $409=$sizebits_0_i << 1;
   if ($408) { var $v_2_i = $v_1_i;var $rsize_2_i = $rsize_1_i;var $t_1_i = $rst_1_i;label = 90; break; } else { var $v_0_i18 = $v_1_i;var $rsize_0_i17 = $rsize_1_i;var $t_0_i16 = $405;var $sizebits_0_i = $409;var $rst_0_i = $rst_1_i;label = 87; break; }
  case 90: 
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   var $410=(($t_1_i)|(0))==0;
   var $411=(($v_2_i)|(0))==0;
   var $or_cond21_i=$410 & $411;
   if ($or_cond21_i) { label = 91; break; } else { var $t_2_ph_i = $t_1_i;label = 93; break; }
  case 91: 
   var $413=2 << $idx_0_i;
   var $414=(((-$413))|0);
   var $415=$413 | $414;
   var $416=$349 & $415;
   var $417=(($416)|(0))==0;
   if ($417) { var $nb_0 = $348;label = 161; break; } else { label = 92; break; }
  case 92: 
   var $419=(((-$416))|0);
   var $420=$416 & $419;
   var $421=((($420)-(1))|0);
   var $422=$421 >>> 12;
   var $423=$422 & 16;
   var $424=$421 >>> (($423)>>>(0));
   var $425=$424 >>> 5;
   var $426=$425 & 8;
   var $427=$426 | $423;
   var $428=$424 >>> (($426)>>>(0));
   var $429=$428 >>> 2;
   var $430=$429 & 4;
   var $431=$427 | $430;
   var $432=$428 >>> (($430)>>>(0));
   var $433=$432 >>> 1;
   var $434=$433 & 2;
   var $435=$431 | $434;
   var $436=$432 >>> (($434)>>>(0));
   var $437=$436 >>> 1;
   var $438=$437 & 1;
   var $439=$435 | $438;
   var $440=$436 >>> (($438)>>>(0));
   var $441=((($439)+($440))|0);
   var $442=((10472+($441<<2))|0);
   var $443=HEAP32[(($442)>>2)];
   var $t_2_ph_i = $443;label = 93; break;
  case 93: 
   var $t_2_ph_i;
   var $444=(($t_2_ph_i)|(0))==0;
   if ($444) { var $rsize_3_lcssa_i = $rsize_2_i;var $v_3_lcssa_i = $v_2_i;label = 96; break; } else { var $t_230_i = $t_2_ph_i;var $rsize_331_i = $rsize_2_i;var $v_332_i = $v_2_i;label = 94; break; }
  case 94: 
   var $v_332_i;
   var $rsize_331_i;
   var $t_230_i;
   var $445=(($t_230_i+4)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=$446 & -8;
   var $448=((($447)-($348))|0);
   var $449=(($448)>>>(0)) < (($rsize_331_i)>>>(0));
   var $_rsize_3_i=$449 ? $448 : $rsize_331_i;
   var $t_2_v_3_i=$449 ? $t_230_i : $v_332_i;
   var $450=(($t_230_i+16)|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=(($451)|(0))==0;
   if ($452) { label = 95; break; } else { var $t_230_i = $451;var $rsize_331_i = $_rsize_3_i;var $v_332_i = $t_2_v_3_i;label = 94; break; }
  case 95: 
   var $453=(($t_230_i+20)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=(($454)|(0))==0;
   if ($455) { var $rsize_3_lcssa_i = $_rsize_3_i;var $v_3_lcssa_i = $t_2_v_3_i;label = 96; break; } else { var $t_230_i = $454;var $rsize_331_i = $_rsize_3_i;var $v_332_i = $t_2_v_3_i;label = 94; break; }
  case 96: 
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   var $456=(($v_3_lcssa_i)|(0))==0;
   if ($456) { var $nb_0 = $348;label = 161; break; } else { label = 97; break; }
  case 97: 
   var $458=HEAP32[((((10176)|0))>>2)];
   var $459=((($458)-($348))|0);
   var $460=(($rsize_3_lcssa_i)>>>(0)) < (($459)>>>(0));
   if ($460) { label = 98; break; } else { var $nb_0 = $348;label = 161; break; }
  case 98: 
   var $462=$v_3_lcssa_i;
   var $463=HEAP32[((((10184)|0))>>2)];
   var $464=(($462)>>>(0)) < (($463)>>>(0));
   if ($464) { label = 159; break; } else { label = 99; break; }
  case 99: 
   var $466=(($462+$348)|0);
   var $467=$466;
   var $468=(($462)>>>(0)) < (($466)>>>(0));
   if ($468) { label = 100; break; } else { label = 159; break; }
  case 100: 
   var $470=(($v_3_lcssa_i+24)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($v_3_lcssa_i+12)|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($473)|(0))==(($v_3_lcssa_i)|(0));
   if ($474) { label = 106; break; } else { label = 101; break; }
  case 101: 
   var $476=(($v_3_lcssa_i+8)|0);
   var $477=HEAP32[(($476)>>2)];
   var $478=$477;
   var $479=(($478)>>>(0)) < (($463)>>>(0));
   if ($479) { label = 105; break; } else { label = 102; break; }
  case 102: 
   var $481=(($477+12)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=(($482)|(0))==(($v_3_lcssa_i)|(0));
   if ($483) { label = 103; break; } else { label = 105; break; }
  case 103: 
   var $485=(($473+8)|0);
   var $486=HEAP32[(($485)>>2)];
   var $487=(($486)|(0))==(($v_3_lcssa_i)|(0));
   if ($487) { label = 104; break; } else { label = 105; break; }
  case 104: 
   HEAP32[(($481)>>2)]=$473;
   HEAP32[(($485)>>2)]=$477;
   var $R_1_i22 = $473;label = 113; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   var $490=(($v_3_lcssa_i+20)|0);
   var $491=HEAP32[(($490)>>2)];
   var $492=(($491)|(0))==0;
   if ($492) { label = 107; break; } else { var $R_0_i20 = $491;var $RP_0_i19 = $490;label = 108; break; }
  case 107: 
   var $494=(($v_3_lcssa_i+16)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=(($495)|(0))==0;
   if ($496) { var $R_1_i22 = 0;label = 113; break; } else { var $R_0_i20 = $495;var $RP_0_i19 = $494;label = 108; break; }
  case 108: 
   var $RP_0_i19;
   var $R_0_i20;
   var $497=(($R_0_i20+20)|0);
   var $498=HEAP32[(($497)>>2)];
   var $499=(($498)|(0))==0;
   if ($499) { label = 109; break; } else { var $R_0_i20 = $498;var $RP_0_i19 = $497;label = 108; break; }
  case 109: 
   var $501=(($R_0_i20+16)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=(($502)|(0))==0;
   if ($503) { label = 110; break; } else { var $R_0_i20 = $502;var $RP_0_i19 = $501;label = 108; break; }
  case 110: 
   var $505=$RP_0_i19;
   var $506=(($505)>>>(0)) < (($463)>>>(0));
   if ($506) { label = 112; break; } else { label = 111; break; }
  case 111: 
   HEAP32[(($RP_0_i19)>>2)]=0;
   var $R_1_i22 = $R_0_i20;label = 113; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   var $R_1_i22;
   var $510=(($471)|(0))==0;
   if ($510) { label = 133; break; } else { label = 114; break; }
  case 114: 
   var $512=(($v_3_lcssa_i+28)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=((10472+($513<<2))|0);
   var $515=HEAP32[(($514)>>2)];
   var $516=(($v_3_lcssa_i)|(0))==(($515)|(0));
   if ($516) { label = 115; break; } else { label = 117; break; }
  case 115: 
   HEAP32[(($514)>>2)]=$R_1_i22;
   var $cond_i23=(($R_1_i22)|(0))==0;
   if ($cond_i23) { label = 116; break; } else { label = 123; break; }
  case 116: 
   var $518=HEAP32[(($512)>>2)];
   var $519=1 << $518;
   var $520=$519 ^ -1;
   var $521=HEAP32[((((10172)|0))>>2)];
   var $522=$521 & $520;
   HEAP32[((((10172)|0))>>2)]=$522;
   label = 133; break;
  case 117: 
   var $524=$471;
   var $525=HEAP32[((((10184)|0))>>2)];
   var $526=(($524)>>>(0)) < (($525)>>>(0));
   if ($526) { label = 121; break; } else { label = 118; break; }
  case 118: 
   var $528=(($471+16)|0);
   var $529=HEAP32[(($528)>>2)];
   var $530=(($529)|(0))==(($v_3_lcssa_i)|(0));
   if ($530) { label = 119; break; } else { label = 120; break; }
  case 119: 
   HEAP32[(($528)>>2)]=$R_1_i22;
   label = 122; break;
  case 120: 
   var $533=(($471+20)|0);
   HEAP32[(($533)>>2)]=$R_1_i22;
   label = 122; break;
  case 121: 
   _abort();
   throw "Reached an unreachable!";
  case 122: 
   var $536=(($R_1_i22)|(0))==0;
   if ($536) { label = 133; break; } else { label = 123; break; }
  case 123: 
   var $538=$R_1_i22;
   var $539=HEAP32[((((10184)|0))>>2)];
   var $540=(($538)>>>(0)) < (($539)>>>(0));
   if ($540) { label = 132; break; } else { label = 124; break; }
  case 124: 
   var $542=(($R_1_i22+24)|0);
   HEAP32[(($542)>>2)]=$471;
   var $543=(($v_3_lcssa_i+16)|0);
   var $544=HEAP32[(($543)>>2)];
   var $545=(($544)|(0))==0;
   if ($545) { label = 128; break; } else { label = 125; break; }
  case 125: 
   var $547=$544;
   var $548=HEAP32[((((10184)|0))>>2)];
   var $549=(($547)>>>(0)) < (($548)>>>(0));
   if ($549) { label = 127; break; } else { label = 126; break; }
  case 126: 
   var $551=(($R_1_i22+16)|0);
   HEAP32[(($551)>>2)]=$544;
   var $552=(($544+24)|0);
   HEAP32[(($552)>>2)]=$R_1_i22;
   label = 128; break;
  case 127: 
   _abort();
   throw "Reached an unreachable!";
  case 128: 
   var $555=(($v_3_lcssa_i+20)|0);
   var $556=HEAP32[(($555)>>2)];
   var $557=(($556)|(0))==0;
   if ($557) { label = 133; break; } else { label = 129; break; }
  case 129: 
   var $559=$556;
   var $560=HEAP32[((((10184)|0))>>2)];
   var $561=(($559)>>>(0)) < (($560)>>>(0));
   if ($561) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $563=(($R_1_i22+20)|0);
   HEAP32[(($563)>>2)]=$556;
   var $564=(($556+24)|0);
   HEAP32[(($564)>>2)]=$R_1_i22;
   label = 133; break;
  case 131: 
   _abort();
   throw "Reached an unreachable!";
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   var $568=(($rsize_3_lcssa_i)>>>(0)) < 16;
   if ($568) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $570=((($rsize_3_lcssa_i)+($348))|0);
   var $571=$570 | 3;
   var $572=(($v_3_lcssa_i+4)|0);
   HEAP32[(($572)>>2)]=$571;
   var $_sum19_i=((($570)+(4))|0);
   var $573=(($462+$_sum19_i)|0);
   var $574=$573;
   var $575=HEAP32[(($574)>>2)];
   var $576=$575 | 1;
   HEAP32[(($574)>>2)]=$576;
   label = 160; break;
  case 135: 
   var $578=$348 | 3;
   var $579=(($v_3_lcssa_i+4)|0);
   HEAP32[(($579)>>2)]=$578;
   var $580=$rsize_3_lcssa_i | 1;
   var $_sum_i2536=$348 | 4;
   var $581=(($462+$_sum_i2536)|0);
   var $582=$581;
   HEAP32[(($582)>>2)]=$580;
   var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
   var $583=(($462+$_sum1_i26)|0);
   var $584=$583;
   HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
   var $585=$rsize_3_lcssa_i >>> 3;
   var $586=(($rsize_3_lcssa_i)>>>(0)) < 256;
   if ($586) { label = 136; break; } else { label = 141; break; }
  case 136: 
   var $588=$585 << 1;
   var $589=((10208+($588<<2))|0);
   var $590=$589;
   var $591=HEAP32[((((10168)|0))>>2)];
   var $592=1 << $585;
   var $593=$591 & $592;
   var $594=(($593)|(0))==0;
   if ($594) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $596=$591 | $592;
   HEAP32[((((10168)|0))>>2)]=$596;
   var $_sum15_pre_i=((($588)+(2))|0);
   var $_pre_i27=((10208+($_sum15_pre_i<<2))|0);
   var $F5_0_i = $590;var $_pre_phi_i28 = $_pre_i27;label = 140; break;
  case 138: 
   var $_sum18_i=((($588)+(2))|0);
   var $598=((10208+($_sum18_i<<2))|0);
   var $599=HEAP32[(($598)>>2)];
   var $600=$599;
   var $601=HEAP32[((((10184)|0))>>2)];
   var $602=(($600)>>>(0)) < (($601)>>>(0));
   if ($602) { label = 139; break; } else { var $F5_0_i = $599;var $_pre_phi_i28 = $598;label = 140; break; }
  case 139: 
   _abort();
   throw "Reached an unreachable!";
  case 140: 
   var $_pre_phi_i28;
   var $F5_0_i;
   HEAP32[(($_pre_phi_i28)>>2)]=$467;
   var $605=(($F5_0_i+12)|0);
   HEAP32[(($605)>>2)]=$467;
   var $_sum16_i=((($348)+(8))|0);
   var $606=(($462+$_sum16_i)|0);
   var $607=$606;
   HEAP32[(($607)>>2)]=$F5_0_i;
   var $_sum17_i=((($348)+(12))|0);
   var $608=(($462+$_sum17_i)|0);
   var $609=$608;
   HEAP32[(($609)>>2)]=$590;
   label = 160; break;
  case 141: 
   var $611=$466;
   var $612=$rsize_3_lcssa_i >>> 8;
   var $613=(($612)|(0))==0;
   if ($613) { var $I7_0_i = 0;label = 144; break; } else { label = 142; break; }
  case 142: 
   var $615=(($rsize_3_lcssa_i)>>>(0)) > 16777215;
   if ($615) { var $I7_0_i = 31;label = 144; break; } else { label = 143; break; }
  case 143: 
   var $617=((($612)+(1048320))|0);
   var $618=$617 >>> 16;
   var $619=$618 & 8;
   var $620=$612 << $619;
   var $621=((($620)+(520192))|0);
   var $622=$621 >>> 16;
   var $623=$622 & 4;
   var $624=$623 | $619;
   var $625=$620 << $623;
   var $626=((($625)+(245760))|0);
   var $627=$626 >>> 16;
   var $628=$627 & 2;
   var $629=$624 | $628;
   var $630=(((14)-($629))|0);
   var $631=$625 << $628;
   var $632=$631 >>> 15;
   var $633=((($630)+($632))|0);
   var $634=$633 << 1;
   var $635=((($633)+(7))|0);
   var $636=$rsize_3_lcssa_i >>> (($635)>>>(0));
   var $637=$636 & 1;
   var $638=$637 | $634;
   var $I7_0_i = $638;label = 144; break;
  case 144: 
   var $I7_0_i;
   var $640=((10472+($I7_0_i<<2))|0);
   var $_sum2_i=((($348)+(28))|0);
   var $641=(($462+$_sum2_i)|0);
   var $642=$641;
   HEAP32[(($642)>>2)]=$I7_0_i;
   var $_sum3_i29=((($348)+(16))|0);
   var $643=(($462+$_sum3_i29)|0);
   var $_sum4_i30=((($348)+(20))|0);
   var $644=(($462+$_sum4_i30)|0);
   var $645=$644;
   HEAP32[(($645)>>2)]=0;
   var $646=$643;
   HEAP32[(($646)>>2)]=0;
   var $647=HEAP32[((((10172)|0))>>2)];
   var $648=1 << $I7_0_i;
   var $649=$647 & $648;
   var $650=(($649)|(0))==0;
   if ($650) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $652=$647 | $648;
   HEAP32[((((10172)|0))>>2)]=$652;
   HEAP32[(($640)>>2)]=$611;
   var $653=$640;
   var $_sum5_i=((($348)+(24))|0);
   var $654=(($462+$_sum5_i)|0);
   var $655=$654;
   HEAP32[(($655)>>2)]=$653;
   var $_sum6_i=((($348)+(12))|0);
   var $656=(($462+$_sum6_i)|0);
   var $657=$656;
   HEAP32[(($657)>>2)]=$611;
   var $_sum7_i=((($348)+(8))|0);
   var $658=(($462+$_sum7_i)|0);
   var $659=$658;
   HEAP32[(($659)>>2)]=$611;
   label = 160; break;
  case 146: 
   var $661=HEAP32[(($640)>>2)];
   var $662=(($I7_0_i)|(0))==31;
   if ($662) { var $667 = 0;label = 148; break; } else { label = 147; break; }
  case 147: 
   var $664=$I7_0_i >>> 1;
   var $665=(((25)-($664))|0);
   var $667 = $665;label = 148; break;
  case 148: 
   var $667;
   var $668=(($661+4)|0);
   var $669=HEAP32[(($668)>>2)];
   var $670=$669 & -8;
   var $671=(($670)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($671) { var $T_0_lcssa_i = $661;label = 155; break; } else { label = 149; break; }
  case 149: 
   var $672=$rsize_3_lcssa_i << $667;
   var $T_026_i = $661;var $K12_027_i = $672;label = 151; break;
  case 150: 
   var $674=$K12_027_i << 1;
   var $675=(($682+4)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=$676 & -8;
   var $678=(($677)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($678) { var $T_0_lcssa_i = $682;label = 155; break; } else { var $T_026_i = $682;var $K12_027_i = $674;label = 151; break; }
  case 151: 
   var $K12_027_i;
   var $T_026_i;
   var $680=$K12_027_i >>> 31;
   var $681=(($T_026_i+16+($680<<2))|0);
   var $682=HEAP32[(($681)>>2)];
   var $683=(($682)|(0))==0;
   if ($683) { label = 152; break; } else { label = 150; break; }
  case 152: 
   var $685=$681;
   var $686=HEAP32[((((10184)|0))>>2)];
   var $687=(($685)>>>(0)) < (($686)>>>(0));
   if ($687) { label = 154; break; } else { label = 153; break; }
  case 153: 
   HEAP32[(($681)>>2)]=$611;
   var $_sum12_i=((($348)+(24))|0);
   var $689=(($462+$_sum12_i)|0);
   var $690=$689;
   HEAP32[(($690)>>2)]=$T_026_i;
   var $_sum13_i=((($348)+(12))|0);
   var $691=(($462+$_sum13_i)|0);
   var $692=$691;
   HEAP32[(($692)>>2)]=$611;
   var $_sum14_i=((($348)+(8))|0);
   var $693=(($462+$_sum14_i)|0);
   var $694=$693;
   HEAP32[(($694)>>2)]=$611;
   label = 160; break;
  case 154: 
   _abort();
   throw "Reached an unreachable!";
  case 155: 
   var $T_0_lcssa_i;
   var $696=(($T_0_lcssa_i+8)|0);
   var $697=HEAP32[(($696)>>2)];
   var $698=$T_0_lcssa_i;
   var $699=HEAP32[((((10184)|0))>>2)];
   var $700=(($698)>>>(0)) < (($699)>>>(0));
   if ($700) { label = 158; break; } else { label = 156; break; }
  case 156: 
   var $702=$697;
   var $703=(($702)>>>(0)) < (($699)>>>(0));
   if ($703) { label = 158; break; } else { label = 157; break; }
  case 157: 
   var $705=(($697+12)|0);
   HEAP32[(($705)>>2)]=$611;
   HEAP32[(($696)>>2)]=$611;
   var $_sum9_i=((($348)+(8))|0);
   var $706=(($462+$_sum9_i)|0);
   var $707=$706;
   HEAP32[(($707)>>2)]=$697;
   var $_sum10_i=((($348)+(12))|0);
   var $708=(($462+$_sum10_i)|0);
   var $709=$708;
   HEAP32[(($709)>>2)]=$T_0_lcssa_i;
   var $_sum11_i=((($348)+(24))|0);
   var $710=(($462+$_sum11_i)|0);
   var $711=$710;
   HEAP32[(($711)>>2)]=0;
   label = 160; break;
  case 158: 
   _abort();
   throw "Reached an unreachable!";
  case 159: 
   _abort();
   throw "Reached an unreachable!";
  case 160: 
   var $713=(($v_3_lcssa_i+8)|0);
   var $714=$713;
   var $mem_0 = $714;label = 344; break;
  case 161: 
   var $nb_0;
   var $715=HEAP32[((((10176)|0))>>2)];
   var $716=(($nb_0)>>>(0)) > (($715)>>>(0));
   if ($716) { label = 166; break; } else { label = 162; break; }
  case 162: 
   var $718=((($715)-($nb_0))|0);
   var $719=HEAP32[((((10188)|0))>>2)];
   var $720=(($718)>>>(0)) > 15;
   if ($720) { label = 163; break; } else { label = 164; break; }
  case 163: 
   var $722=$719;
   var $723=(($722+$nb_0)|0);
   var $724=$723;
   HEAP32[((((10188)|0))>>2)]=$724;
   HEAP32[((((10176)|0))>>2)]=$718;
   var $725=$718 | 1;
   var $_sum2=((($nb_0)+(4))|0);
   var $726=(($722+$_sum2)|0);
   var $727=$726;
   HEAP32[(($727)>>2)]=$725;
   var $728=(($722+$715)|0);
   var $729=$728;
   HEAP32[(($729)>>2)]=$718;
   var $730=$nb_0 | 3;
   var $731=(($719+4)|0);
   HEAP32[(($731)>>2)]=$730;
   label = 165; break;
  case 164: 
   HEAP32[((((10176)|0))>>2)]=0;
   HEAP32[((((10188)|0))>>2)]=0;
   var $733=$715 | 3;
   var $734=(($719+4)|0);
   HEAP32[(($734)>>2)]=$733;
   var $735=$719;
   var $_sum1=((($715)+(4))|0);
   var $736=(($735+$_sum1)|0);
   var $737=$736;
   var $738=HEAP32[(($737)>>2)];
   var $739=$738 | 1;
   HEAP32[(($737)>>2)]=$739;
   label = 165; break;
  case 165: 
   var $741=(($719+8)|0);
   var $742=$741;
   var $mem_0 = $742;label = 344; break;
  case 166: 
   var $744=HEAP32[((((10180)|0))>>2)];
   var $745=(($nb_0)>>>(0)) < (($744)>>>(0));
   if ($745) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $747=((($744)-($nb_0))|0);
   HEAP32[((((10180)|0))>>2)]=$747;
   var $748=HEAP32[((((10192)|0))>>2)];
   var $749=$748;
   var $750=(($749+$nb_0)|0);
   var $751=$750;
   HEAP32[((((10192)|0))>>2)]=$751;
   var $752=$747 | 1;
   var $_sum=((($nb_0)+(4))|0);
   var $753=(($749+$_sum)|0);
   var $754=$753;
   HEAP32[(($754)>>2)]=$752;
   var $755=$nb_0 | 3;
   var $756=(($748+4)|0);
   HEAP32[(($756)>>2)]=$755;
   var $757=(($748+8)|0);
   var $758=$757;
   var $mem_0 = $758;label = 344; break;
  case 168: 
   var $760=HEAP32[((((10128)|0))>>2)];
   var $761=(($760)|(0))==0;
   if ($761) { label = 169; break; } else { label = 172; break; }
  case 169: 
   var $763=_sysconf(30);
   var $764=((($763)-(1))|0);
   var $765=$764 & $763;
   var $766=(($765)|(0))==0;
   if ($766) { label = 171; break; } else { label = 170; break; }
  case 170: 
   _abort();
   throw "Reached an unreachable!";
  case 171: 
   HEAP32[((((10136)|0))>>2)]=$763;
   HEAP32[((((10132)|0))>>2)]=$763;
   HEAP32[((((10140)|0))>>2)]=-1;
   HEAP32[((((10144)|0))>>2)]=-1;
   HEAP32[((((10148)|0))>>2)]=0;
   HEAP32[((((10612)|0))>>2)]=0;
   var $768=_time(0);
   var $769=$768 & -16;
   var $770=$769 ^ 1431655768;
   HEAP32[((((10128)|0))>>2)]=$770;
   label = 172; break;
  case 172: 
   var $772=((($nb_0)+(48))|0);
   var $773=HEAP32[((((10136)|0))>>2)];
   var $774=((($nb_0)+(47))|0);
   var $775=((($773)+($774))|0);
   var $776=(((-$773))|0);
   var $777=$775 & $776;
   var $778=(($777)>>>(0)) > (($nb_0)>>>(0));
   if ($778) { label = 173; break; } else { var $mem_0 = 0;label = 344; break; }
  case 173: 
   var $780=HEAP32[((((10608)|0))>>2)];
   var $781=(($780)|(0))==0;
   if ($781) { label = 175; break; } else { label = 174; break; }
  case 174: 
   var $783=HEAP32[((((10600)|0))>>2)];
   var $784=((($783)+($777))|0);
   var $785=(($784)>>>(0)) <= (($783)>>>(0));
   var $786=(($784)>>>(0)) > (($780)>>>(0));
   var $or_cond1_i=$785 | $786;
   if ($or_cond1_i) { var $mem_0 = 0;label = 344; break; } else { label = 175; break; }
  case 175: 
   var $788=HEAP32[((((10612)|0))>>2)];
   var $789=$788 & 4;
   var $790=(($789)|(0))==0;
   if ($790) { label = 176; break; } else { var $tsize_1_i = 0;label = 199; break; }
  case 176: 
   var $792=HEAP32[((((10192)|0))>>2)];
   var $793=(($792)|(0))==0;
   if ($793) { label = 182; break; } else { label = 177; break; }
  case 177: 
   var $795=$792;
   var $sp_0_i_i = ((10616)|0);label = 178; break;
  case 178: 
   var $sp_0_i_i;
   var $797=(($sp_0_i_i)|0);
   var $798=HEAP32[(($797)>>2)];
   var $799=(($798)>>>(0)) > (($795)>>>(0));
   if ($799) { label = 180; break; } else { label = 179; break; }
  case 179: 
   var $801=(($sp_0_i_i+4)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803=(($798+$802)|0);
   var $804=(($803)>>>(0)) > (($795)>>>(0));
   if ($804) { label = 181; break; } else { label = 180; break; }
  case 180: 
   var $806=(($sp_0_i_i+8)|0);
   var $807=HEAP32[(($806)>>2)];
   var $808=(($807)|(0))==0;
   if ($808) { label = 182; break; } else { var $sp_0_i_i = $807;label = 178; break; }
  case 181: 
   var $809=(($sp_0_i_i)|(0))==0;
   if ($809) { label = 182; break; } else { label = 189; break; }
  case 182: 
   var $810=_sbrk(0);
   var $811=(($810)|(0))==-1;
   if ($811) { var $tsize_0323841_i = 0;label = 198; break; } else { label = 183; break; }
  case 183: 
   var $813=$810;
   var $814=HEAP32[((((10132)|0))>>2)];
   var $815=((($814)-(1))|0);
   var $816=$815 & $813;
   var $817=(($816)|(0))==0;
   if ($817) { var $ssize_0_i = $777;label = 185; break; } else { label = 184; break; }
  case 184: 
   var $819=((($815)+($813))|0);
   var $820=(((-$814))|0);
   var $821=$819 & $820;
   var $822=((($777)-($813))|0);
   var $823=((($822)+($821))|0);
   var $ssize_0_i = $823;label = 185; break;
  case 185: 
   var $ssize_0_i;
   var $825=HEAP32[((((10600)|0))>>2)];
   var $826=((($825)+($ssize_0_i))|0);
   var $827=(($ssize_0_i)>>>(0)) > (($nb_0)>>>(0));
   var $828=(($ssize_0_i)>>>(0)) < 2147483647;
   var $or_cond_i31=$827 & $828;
   if ($or_cond_i31) { label = 186; break; } else { var $tsize_0323841_i = 0;label = 198; break; }
  case 186: 
   var $830=HEAP32[((((10608)|0))>>2)];
   var $831=(($830)|(0))==0;
   if ($831) { label = 188; break; } else { label = 187; break; }
  case 187: 
   var $833=(($826)>>>(0)) <= (($825)>>>(0));
   var $834=(($826)>>>(0)) > (($830)>>>(0));
   var $or_cond2_i=$833 | $834;
   if ($or_cond2_i) { var $tsize_0323841_i = 0;label = 198; break; } else { label = 188; break; }
  case 188: 
   var $836=_sbrk($ssize_0_i);
   var $837=(($836)|(0))==(($810)|(0));
   var $ssize_0__i=$837 ? $ssize_0_i : 0;
   var $__i=$837 ? $810 : -1;
   var $tbase_0_i = $__i;var $tsize_0_i = $ssize_0__i;var $br_0_i = $836;var $ssize_1_i = $ssize_0_i;label = 191; break;
  case 189: 
   var $839=HEAP32[((((10180)|0))>>2)];
   var $840=((($775)-($839))|0);
   var $841=$840 & $776;
   var $842=(($841)>>>(0)) < 2147483647;
   if ($842) { label = 190; break; } else { var $tsize_0323841_i = 0;label = 198; break; }
  case 190: 
   var $844=_sbrk($841);
   var $845=HEAP32[(($797)>>2)];
   var $846=HEAP32[(($801)>>2)];
   var $847=(($845+$846)|0);
   var $848=(($844)|(0))==(($847)|(0));
   var $_3_i=$848 ? $841 : 0;
   var $_4_i=$848 ? $844 : -1;
   var $tbase_0_i = $_4_i;var $tsize_0_i = $_3_i;var $br_0_i = $844;var $ssize_1_i = $841;label = 191; break;
  case 191: 
   var $ssize_1_i;
   var $br_0_i;
   var $tsize_0_i;
   var $tbase_0_i;
   var $850=(((-$ssize_1_i))|0);
   var $851=(($tbase_0_i)|(0))==-1;
   if ($851) { label = 192; break; } else { var $tsize_246_i = $tsize_0_i;var $tbase_247_i = $tbase_0_i;label = 202; break; }
  case 192: 
   var $853=(($br_0_i)|(0))!=-1;
   var $854=(($ssize_1_i)>>>(0)) < 2147483647;
   var $or_cond5_i=$853 & $854;
   var $855=(($ssize_1_i)>>>(0)) < (($772)>>>(0));
   var $or_cond6_i=$or_cond5_i & $855;
   if ($or_cond6_i) { label = 193; break; } else { var $ssize_2_i = $ssize_1_i;label = 197; break; }
  case 193: 
   var $857=HEAP32[((((10136)|0))>>2)];
   var $858=((($774)-($ssize_1_i))|0);
   var $859=((($858)+($857))|0);
   var $860=(((-$857))|0);
   var $861=$859 & $860;
   var $862=(($861)>>>(0)) < 2147483647;
   if ($862) { label = 194; break; } else { var $ssize_2_i = $ssize_1_i;label = 197; break; }
  case 194: 
   var $864=_sbrk($861);
   var $865=(($864)|(0))==-1;
   if ($865) { label = 196; break; } else { label = 195; break; }
  case 195: 
   var $867=((($861)+($ssize_1_i))|0);
   var $ssize_2_i = $867;label = 197; break;
  case 196: 
   var $869=_sbrk($850);
   var $tsize_0323841_i = $tsize_0_i;label = 198; break;
  case 197: 
   var $ssize_2_i;
   var $871=(($br_0_i)|(0))==-1;
   if ($871) { var $tsize_0323841_i = $tsize_0_i;label = 198; break; } else { var $tsize_246_i = $ssize_2_i;var $tbase_247_i = $br_0_i;label = 202; break; }
  case 198: 
   var $tsize_0323841_i;
   var $872=HEAP32[((((10612)|0))>>2)];
   var $873=$872 | 4;
   HEAP32[((((10612)|0))>>2)]=$873;
   var $tsize_1_i = $tsize_0323841_i;label = 199; break;
  case 199: 
   var $tsize_1_i;
   var $875=(($777)>>>(0)) < 2147483647;
   if ($875) { label = 200; break; } else { label = 343; break; }
  case 200: 
   var $877=_sbrk($777);
   var $878=_sbrk(0);
   var $notlhs_i=(($877)|(0))!=-1;
   var $notrhs_i=(($878)|(0))!=-1;
   var $or_cond8_not_i=$notrhs_i & $notlhs_i;
   var $879=(($877)>>>(0)) < (($878)>>>(0));
   var $or_cond9_i=$or_cond8_not_i & $879;
   if ($or_cond9_i) { label = 201; break; } else { label = 343; break; }
  case 201: 
   var $880=$878;
   var $881=$877;
   var $882=((($880)-($881))|0);
   var $883=((($nb_0)+(40))|0);
   var $884=(($882)>>>(0)) > (($883)>>>(0));
   var $_tsize_1_i=$884 ? $882 : $tsize_1_i;
   if ($884) { var $tsize_246_i = $_tsize_1_i;var $tbase_247_i = $877;label = 202; break; } else { label = 343; break; }
  case 202: 
   var $tbase_247_i;
   var $tsize_246_i;
   var $885=HEAP32[((((10600)|0))>>2)];
   var $886=((($885)+($tsize_246_i))|0);
   HEAP32[((((10600)|0))>>2)]=$886;
   var $887=HEAP32[((((10604)|0))>>2)];
   var $888=(($886)>>>(0)) > (($887)>>>(0));
   if ($888) { label = 203; break; } else { label = 204; break; }
  case 203: 
   HEAP32[((((10604)|0))>>2)]=$886;
   label = 204; break;
  case 204: 
   var $890=HEAP32[((((10192)|0))>>2)];
   var $891=(($890)|(0))==0;
   if ($891) { label = 205; break; } else { var $sp_075_i = ((10616)|0);label = 212; break; }
  case 205: 
   var $893=HEAP32[((((10184)|0))>>2)];
   var $894=(($893)|(0))==0;
   var $895=(($tbase_247_i)>>>(0)) < (($893)>>>(0));
   var $or_cond10_i=$894 | $895;
   if ($or_cond10_i) { label = 206; break; } else { label = 207; break; }
  case 206: 
   HEAP32[((((10184)|0))>>2)]=$tbase_247_i;
   label = 207; break;
  case 207: 
   HEAP32[((((10616)|0))>>2)]=$tbase_247_i;
   HEAP32[((((10620)|0))>>2)]=$tsize_246_i;
   HEAP32[((((10628)|0))>>2)]=0;
   var $897=HEAP32[((((10128)|0))>>2)];
   HEAP32[((((10204)|0))>>2)]=$897;
   HEAP32[((((10200)|0))>>2)]=-1;
   var $i_02_i_i = 0;label = 208; break;
  case 208: 
   var $i_02_i_i;
   var $899=$i_02_i_i << 1;
   var $900=((10208+($899<<2))|0);
   var $901=$900;
   var $_sum_i_i=((($899)+(3))|0);
   var $902=((10208+($_sum_i_i<<2))|0);
   HEAP32[(($902)>>2)]=$901;
   var $_sum1_i_i=((($899)+(2))|0);
   var $903=((10208+($_sum1_i_i<<2))|0);
   HEAP32[(($903)>>2)]=$901;
   var $904=((($i_02_i_i)+(1))|0);
   var $905=(($904)>>>(0)) < 32;
   if ($905) { var $i_02_i_i = $904;label = 208; break; } else { label = 209; break; }
  case 209: 
   var $906=((($tsize_246_i)-(40))|0);
   var $907=(($tbase_247_i+8)|0);
   var $908=$907;
   var $909=$908 & 7;
   var $910=(($909)|(0))==0;
   if ($910) { var $914 = 0;label = 211; break; } else { label = 210; break; }
  case 210: 
   var $912=(((-$908))|0);
   var $913=$912 & 7;
   var $914 = $913;label = 211; break;
  case 211: 
   var $914;
   var $915=(($tbase_247_i+$914)|0);
   var $916=$915;
   var $917=((($906)-($914))|0);
   HEAP32[((((10192)|0))>>2)]=$916;
   HEAP32[((((10180)|0))>>2)]=$917;
   var $918=$917 | 1;
   var $_sum_i14_i=((($914)+(4))|0);
   var $919=(($tbase_247_i+$_sum_i14_i)|0);
   var $920=$919;
   HEAP32[(($920)>>2)]=$918;
   var $_sum2_i_i=((($tsize_246_i)-(36))|0);
   var $921=(($tbase_247_i+$_sum2_i_i)|0);
   var $922=$921;
   HEAP32[(($922)>>2)]=40;
   var $923=HEAP32[((((10144)|0))>>2)];
   HEAP32[((((10196)|0))>>2)]=$923;
   label = 341; break;
  case 212: 
   var $sp_075_i;
   var $924=(($sp_075_i)|0);
   var $925=HEAP32[(($924)>>2)];
   var $926=(($sp_075_i+4)|0);
   var $927=HEAP32[(($926)>>2)];
   var $928=(($925+$927)|0);
   var $929=(($tbase_247_i)|(0))==(($928)|(0));
   if ($929) { label = 214; break; } else { label = 213; break; }
  case 213: 
   var $931=(($sp_075_i+8)|0);
   var $932=HEAP32[(($931)>>2)];
   var $933=(($932)|(0))==0;
   if ($933) { label = 219; break; } else { var $sp_075_i = $932;label = 212; break; }
  case 214: 
   var $934=(($sp_075_i+12)|0);
   var $935=HEAP32[(($934)>>2)];
   var $936=$935 & 8;
   var $937=(($936)|(0))==0;
   if ($937) { label = 215; break; } else { label = 219; break; }
  case 215: 
   var $939=$890;
   var $940=(($939)>>>(0)) >= (($925)>>>(0));
   var $941=(($939)>>>(0)) < (($tbase_247_i)>>>(0));
   var $or_cond49_i=$940 & $941;
   if ($or_cond49_i) { label = 216; break; } else { label = 219; break; }
  case 216: 
   var $943=((($927)+($tsize_246_i))|0);
   HEAP32[(($926)>>2)]=$943;
   var $944=HEAP32[((((10192)|0))>>2)];
   var $945=HEAP32[((((10180)|0))>>2)];
   var $946=((($945)+($tsize_246_i))|0);
   var $947=$944;
   var $948=(($944+8)|0);
   var $949=$948;
   var $950=$949 & 7;
   var $951=(($950)|(0))==0;
   if ($951) { var $955 = 0;label = 218; break; } else { label = 217; break; }
  case 217: 
   var $953=(((-$949))|0);
   var $954=$953 & 7;
   var $955 = $954;label = 218; break;
  case 218: 
   var $955;
   var $956=(($947+$955)|0);
   var $957=$956;
   var $958=((($946)-($955))|0);
   HEAP32[((((10192)|0))>>2)]=$957;
   HEAP32[((((10180)|0))>>2)]=$958;
   var $959=$958 | 1;
   var $_sum_i18_i=((($955)+(4))|0);
   var $960=(($947+$_sum_i18_i)|0);
   var $961=$960;
   HEAP32[(($961)>>2)]=$959;
   var $_sum2_i19_i=((($946)+(4))|0);
   var $962=(($947+$_sum2_i19_i)|0);
   var $963=$962;
   HEAP32[(($963)>>2)]=40;
   var $964=HEAP32[((((10144)|0))>>2)];
   HEAP32[((((10196)|0))>>2)]=$964;
   label = 341; break;
  case 219: 
   var $965=HEAP32[((((10184)|0))>>2)];
   var $966=(($tbase_247_i)>>>(0)) < (($965)>>>(0));
   if ($966) { label = 220; break; } else { label = 221; break; }
  case 220: 
   HEAP32[((((10184)|0))>>2)]=$tbase_247_i;
   label = 221; break;
  case 221: 
   var $968=(($tbase_247_i+$tsize_246_i)|0);
   var $sp_168_i = ((10616)|0);label = 222; break;
  case 222: 
   var $sp_168_i;
   var $970=(($sp_168_i)|0);
   var $971=HEAP32[(($970)>>2)];
   var $972=(($971)|(0))==(($968)|(0));
   if ($972) { label = 224; break; } else { label = 223; break; }
  case 223: 
   var $974=(($sp_168_i+8)|0);
   var $975=HEAP32[(($974)>>2)];
   var $976=(($975)|(0))==0;
   if ($976) { label = 306; break; } else { var $sp_168_i = $975;label = 222; break; }
  case 224: 
   var $977=(($sp_168_i+12)|0);
   var $978=HEAP32[(($977)>>2)];
   var $979=$978 & 8;
   var $980=(($979)|(0))==0;
   if ($980) { label = 225; break; } else { label = 306; break; }
  case 225: 
   HEAP32[(($970)>>2)]=$tbase_247_i;
   var $982=(($sp_168_i+4)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=((($983)+($tsize_246_i))|0);
   HEAP32[(($982)>>2)]=$984;
   var $985=(($tbase_247_i+8)|0);
   var $986=$985;
   var $987=$986 & 7;
   var $988=(($987)|(0))==0;
   if ($988) { var $993 = 0;label = 227; break; } else { label = 226; break; }
  case 226: 
   var $990=(((-$986))|0);
   var $991=$990 & 7;
   var $993 = $991;label = 227; break;
  case 227: 
   var $993;
   var $994=(($tbase_247_i+$993)|0);
   var $_sum107_i=((($tsize_246_i)+(8))|0);
   var $995=(($tbase_247_i+$_sum107_i)|0);
   var $996=$995;
   var $997=$996 & 7;
   var $998=(($997)|(0))==0;
   if ($998) { var $1003 = 0;label = 229; break; } else { label = 228; break; }
  case 228: 
   var $1000=(((-$996))|0);
   var $1001=$1000 & 7;
   var $1003 = $1001;label = 229; break;
  case 229: 
   var $1003;
   var $_sum108_i=((($1003)+($tsize_246_i))|0);
   var $1004=(($tbase_247_i+$_sum108_i)|0);
   var $1005=$1004;
   var $1006=$1004;
   var $1007=$994;
   var $1008=((($1006)-($1007))|0);
   var $_sum_i21_i=((($993)+($nb_0))|0);
   var $1009=(($tbase_247_i+$_sum_i21_i)|0);
   var $1010=$1009;
   var $1011=((($1008)-($nb_0))|0);
   var $1012=$nb_0 | 3;
   var $_sum1_i22_i=((($993)+(4))|0);
   var $1013=(($tbase_247_i+$_sum1_i22_i)|0);
   var $1014=$1013;
   HEAP32[(($1014)>>2)]=$1012;
   var $1015=HEAP32[((((10192)|0))>>2)];
   var $1016=(($1005)|(0))==(($1015)|(0));
   if ($1016) { label = 230; break; } else { label = 231; break; }
  case 230: 
   var $1018=HEAP32[((((10180)|0))>>2)];
   var $1019=((($1018)+($1011))|0);
   HEAP32[((((10180)|0))>>2)]=$1019;
   HEAP32[((((10192)|0))>>2)]=$1010;
   var $1020=$1019 | 1;
   var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
   var $1021=(($tbase_247_i+$_sum46_i_i)|0);
   var $1022=$1021;
   HEAP32[(($1022)>>2)]=$1020;
   label = 305; break;
  case 231: 
   var $1024=HEAP32[((((10188)|0))>>2)];
   var $1025=(($1005)|(0))==(($1024)|(0));
   if ($1025) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $1027=HEAP32[((((10176)|0))>>2)];
   var $1028=((($1027)+($1011))|0);
   HEAP32[((((10176)|0))>>2)]=$1028;
   HEAP32[((((10188)|0))>>2)]=$1010;
   var $1029=$1028 | 1;
   var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
   var $1030=(($tbase_247_i+$_sum44_i_i)|0);
   var $1031=$1030;
   HEAP32[(($1031)>>2)]=$1029;
   var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
   var $1032=(($tbase_247_i+$_sum45_i_i)|0);
   var $1033=$1032;
   HEAP32[(($1033)>>2)]=$1028;
   label = 305; break;
  case 233: 
   var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
   var $_sum109_i=((($_sum2_i23_i)+($1003))|0);
   var $1035=(($tbase_247_i+$_sum109_i)|0);
   var $1036=$1035;
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=$1037 & 3;
   var $1039=(($1038)|(0))==1;
   if ($1039) { label = 234; break; } else { var $oldfirst_0_i_i = $1005;var $qsize_0_i_i = $1011;label = 281; break; }
  case 234: 
   var $1041=$1037 & -8;
   var $1042=$1037 >>> 3;
   var $1043=(($1037)>>>(0)) < 256;
   if ($1043) { label = 235; break; } else { label = 247; break; }
  case 235: 
   var $_sum3940_i_i=$1003 | 8;
   var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
   var $1045=(($tbase_247_i+$_sum119_i)|0);
   var $1046=$1045;
   var $1047=HEAP32[(($1046)>>2)];
   var $_sum41_i_i=((($tsize_246_i)+(12))|0);
   var $_sum120_i=((($_sum41_i_i)+($1003))|0);
   var $1048=(($tbase_247_i+$_sum120_i)|0);
   var $1049=$1048;
   var $1050=HEAP32[(($1049)>>2)];
   var $1051=$1042 << 1;
   var $1052=((10208+($1051<<2))|0);
   var $1053=$1052;
   var $1054=(($1047)|(0))==(($1053)|(0));
   if ($1054) { label = 238; break; } else { label = 236; break; }
  case 236: 
   var $1056=$1047;
   var $1057=HEAP32[((((10184)|0))>>2)];
   var $1058=(($1056)>>>(0)) < (($1057)>>>(0));
   if ($1058) { label = 246; break; } else { label = 237; break; }
  case 237: 
   var $1060=(($1047+12)|0);
   var $1061=HEAP32[(($1060)>>2)];
   var $1062=(($1061)|(0))==(($1005)|(0));
   if ($1062) { label = 238; break; } else { label = 246; break; }
  case 238: 
   var $1063=(($1050)|(0))==(($1047)|(0));
   if ($1063) { label = 239; break; } else { label = 240; break; }
  case 239: 
   var $1065=1 << $1042;
   var $1066=$1065 ^ -1;
   var $1067=HEAP32[((((10168)|0))>>2)];
   var $1068=$1067 & $1066;
   HEAP32[((((10168)|0))>>2)]=$1068;
   label = 280; break;
  case 240: 
   var $1070=(($1050)|(0))==(($1053)|(0));
   if ($1070) { label = 241; break; } else { label = 242; break; }
  case 241: 
   var $_pre61_i_i=(($1050+8)|0);
   var $_pre_phi62_i_i = $_pre61_i_i;label = 244; break;
  case 242: 
   var $1072=$1050;
   var $1073=HEAP32[((((10184)|0))>>2)];
   var $1074=(($1072)>>>(0)) < (($1073)>>>(0));
   if ($1074) { label = 245; break; } else { label = 243; break; }
  case 243: 
   var $1076=(($1050+8)|0);
   var $1077=HEAP32[(($1076)>>2)];
   var $1078=(($1077)|(0))==(($1005)|(0));
   if ($1078) { var $_pre_phi62_i_i = $1076;label = 244; break; } else { label = 245; break; }
  case 244: 
   var $_pre_phi62_i_i;
   var $1079=(($1047+12)|0);
   HEAP32[(($1079)>>2)]=$1050;
   HEAP32[(($_pre_phi62_i_i)>>2)]=$1047;
   label = 280; break;
  case 245: 
   _abort();
   throw "Reached an unreachable!";
  case 246: 
   _abort();
   throw "Reached an unreachable!";
  case 247: 
   var $1081=$1004;
   var $_sum34_i_i=$1003 | 24;
   var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
   var $1082=(($tbase_247_i+$_sum110_i)|0);
   var $1083=$1082;
   var $1084=HEAP32[(($1083)>>2)];
   var $_sum5_i_i=((($tsize_246_i)+(12))|0);
   var $_sum111_i=((($_sum5_i_i)+($1003))|0);
   var $1085=(($tbase_247_i+$_sum111_i)|0);
   var $1086=$1085;
   var $1087=HEAP32[(($1086)>>2)];
   var $1088=(($1087)|(0))==(($1081)|(0));
   if ($1088) { label = 253; break; } else { label = 248; break; }
  case 248: 
   var $_sum3637_i_i=$1003 | 8;
   var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
   var $1090=(($tbase_247_i+$_sum112_i)|0);
   var $1091=$1090;
   var $1092=HEAP32[(($1091)>>2)];
   var $1093=$1092;
   var $1094=HEAP32[((((10184)|0))>>2)];
   var $1095=(($1093)>>>(0)) < (($1094)>>>(0));
   if ($1095) { label = 252; break; } else { label = 249; break; }
  case 249: 
   var $1097=(($1092+12)|0);
   var $1098=HEAP32[(($1097)>>2)];
   var $1099=(($1098)|(0))==(($1081)|(0));
   if ($1099) { label = 250; break; } else { label = 252; break; }
  case 250: 
   var $1101=(($1087+8)|0);
   var $1102=HEAP32[(($1101)>>2)];
   var $1103=(($1102)|(0))==(($1081)|(0));
   if ($1103) { label = 251; break; } else { label = 252; break; }
  case 251: 
   HEAP32[(($1097)>>2)]=$1087;
   HEAP32[(($1101)>>2)]=$1092;
   var $R_1_i_i = $1087;label = 260; break;
  case 252: 
   _abort();
   throw "Reached an unreachable!";
  case 253: 
   var $_sum67_i_i=$1003 | 16;
   var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
   var $1106=(($tbase_247_i+$_sum117_i)|0);
   var $1107=$1106;
   var $1108=HEAP32[(($1107)>>2)];
   var $1109=(($1108)|(0))==0;
   if ($1109) { label = 254; break; } else { var $R_0_i_i = $1108;var $RP_0_i_i = $1107;label = 255; break; }
  case 254: 
   var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
   var $1111=(($tbase_247_i+$_sum118_i)|0);
   var $1112=$1111;
   var $1113=HEAP32[(($1112)>>2)];
   var $1114=(($1113)|(0))==0;
   if ($1114) { var $R_1_i_i = 0;label = 260; break; } else { var $R_0_i_i = $1113;var $RP_0_i_i = $1112;label = 255; break; }
  case 255: 
   var $RP_0_i_i;
   var $R_0_i_i;
   var $1115=(($R_0_i_i+20)|0);
   var $1116=HEAP32[(($1115)>>2)];
   var $1117=(($1116)|(0))==0;
   if ($1117) { label = 256; break; } else { var $R_0_i_i = $1116;var $RP_0_i_i = $1115;label = 255; break; }
  case 256: 
   var $1119=(($R_0_i_i+16)|0);
   var $1120=HEAP32[(($1119)>>2)];
   var $1121=(($1120)|(0))==0;
   if ($1121) { label = 257; break; } else { var $R_0_i_i = $1120;var $RP_0_i_i = $1119;label = 255; break; }
  case 257: 
   var $1123=$RP_0_i_i;
   var $1124=HEAP32[((((10184)|0))>>2)];
   var $1125=(($1123)>>>(0)) < (($1124)>>>(0));
   if ($1125) { label = 259; break; } else { label = 258; break; }
  case 258: 
   HEAP32[(($RP_0_i_i)>>2)]=0;
   var $R_1_i_i = $R_0_i_i;label = 260; break;
  case 259: 
   _abort();
   throw "Reached an unreachable!";
  case 260: 
   var $R_1_i_i;
   var $1129=(($1084)|(0))==0;
   if ($1129) { label = 280; break; } else { label = 261; break; }
  case 261: 
   var $_sum31_i_i=((($tsize_246_i)+(28))|0);
   var $_sum113_i=((($_sum31_i_i)+($1003))|0);
   var $1131=(($tbase_247_i+$_sum113_i)|0);
   var $1132=$1131;
   var $1133=HEAP32[(($1132)>>2)];
   var $1134=((10472+($1133<<2))|0);
   var $1135=HEAP32[(($1134)>>2)];
   var $1136=(($1081)|(0))==(($1135)|(0));
   if ($1136) { label = 262; break; } else { label = 264; break; }
  case 262: 
   HEAP32[(($1134)>>2)]=$R_1_i_i;
   var $cond_i_i=(($R_1_i_i)|(0))==0;
   if ($cond_i_i) { label = 263; break; } else { label = 270; break; }
  case 263: 
   var $1138=HEAP32[(($1132)>>2)];
   var $1139=1 << $1138;
   var $1140=$1139 ^ -1;
   var $1141=HEAP32[((((10172)|0))>>2)];
   var $1142=$1141 & $1140;
   HEAP32[((((10172)|0))>>2)]=$1142;
   label = 280; break;
  case 264: 
   var $1144=$1084;
   var $1145=HEAP32[((((10184)|0))>>2)];
   var $1146=(($1144)>>>(0)) < (($1145)>>>(0));
   if ($1146) { label = 268; break; } else { label = 265; break; }
  case 265: 
   var $1148=(($1084+16)|0);
   var $1149=HEAP32[(($1148)>>2)];
   var $1150=(($1149)|(0))==(($1081)|(0));
   if ($1150) { label = 266; break; } else { label = 267; break; }
  case 266: 
   HEAP32[(($1148)>>2)]=$R_1_i_i;
   label = 269; break;
  case 267: 
   var $1153=(($1084+20)|0);
   HEAP32[(($1153)>>2)]=$R_1_i_i;
   label = 269; break;
  case 268: 
   _abort();
   throw "Reached an unreachable!";
  case 269: 
   var $1156=(($R_1_i_i)|(0))==0;
   if ($1156) { label = 280; break; } else { label = 270; break; }
  case 270: 
   var $1158=$R_1_i_i;
   var $1159=HEAP32[((((10184)|0))>>2)];
   var $1160=(($1158)>>>(0)) < (($1159)>>>(0));
   if ($1160) { label = 279; break; } else { label = 271; break; }
  case 271: 
   var $1162=(($R_1_i_i+24)|0);
   HEAP32[(($1162)>>2)]=$1084;
   var $_sum3233_i_i=$1003 | 16;
   var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
   var $1163=(($tbase_247_i+$_sum114_i)|0);
   var $1164=$1163;
   var $1165=HEAP32[(($1164)>>2)];
   var $1166=(($1165)|(0))==0;
   if ($1166) { label = 275; break; } else { label = 272; break; }
  case 272: 
   var $1168=$1165;
   var $1169=HEAP32[((((10184)|0))>>2)];
   var $1170=(($1168)>>>(0)) < (($1169)>>>(0));
   if ($1170) { label = 274; break; } else { label = 273; break; }
  case 273: 
   var $1172=(($R_1_i_i+16)|0);
   HEAP32[(($1172)>>2)]=$1165;
   var $1173=(($1165+24)|0);
   HEAP32[(($1173)>>2)]=$R_1_i_i;
   label = 275; break;
  case 274: 
   _abort();
   throw "Reached an unreachable!";
  case 275: 
   var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
   var $1176=(($tbase_247_i+$_sum115_i)|0);
   var $1177=$1176;
   var $1178=HEAP32[(($1177)>>2)];
   var $1179=(($1178)|(0))==0;
   if ($1179) { label = 280; break; } else { label = 276; break; }
  case 276: 
   var $1181=$1178;
   var $1182=HEAP32[((((10184)|0))>>2)];
   var $1183=(($1181)>>>(0)) < (($1182)>>>(0));
   if ($1183) { label = 278; break; } else { label = 277; break; }
  case 277: 
   var $1185=(($R_1_i_i+20)|0);
   HEAP32[(($1185)>>2)]=$1178;
   var $1186=(($1178+24)|0);
   HEAP32[(($1186)>>2)]=$R_1_i_i;
   label = 280; break;
  case 278: 
   _abort();
   throw "Reached an unreachable!";
  case 279: 
   _abort();
   throw "Reached an unreachable!";
  case 280: 
   var $_sum9_i_i=$1041 | $1003;
   var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
   var $1190=(($tbase_247_i+$_sum116_i)|0);
   var $1191=$1190;
   var $1192=((($1041)+($1011))|0);
   var $oldfirst_0_i_i = $1191;var $qsize_0_i_i = $1192;label = 281; break;
  case 281: 
   var $qsize_0_i_i;
   var $oldfirst_0_i_i;
   var $1194=(($oldfirst_0_i_i+4)|0);
   var $1195=HEAP32[(($1194)>>2)];
   var $1196=$1195 & -2;
   HEAP32[(($1194)>>2)]=$1196;
   var $1197=$qsize_0_i_i | 1;
   var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
   var $1198=(($tbase_247_i+$_sum10_i_i)|0);
   var $1199=$1198;
   HEAP32[(($1199)>>2)]=$1197;
   var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
   var $1200=(($tbase_247_i+$_sum11_i_i)|0);
   var $1201=$1200;
   HEAP32[(($1201)>>2)]=$qsize_0_i_i;
   var $1202=$qsize_0_i_i >>> 3;
   var $1203=(($qsize_0_i_i)>>>(0)) < 256;
   if ($1203) { label = 282; break; } else { label = 287; break; }
  case 282: 
   var $1205=$1202 << 1;
   var $1206=((10208+($1205<<2))|0);
   var $1207=$1206;
   var $1208=HEAP32[((((10168)|0))>>2)];
   var $1209=1 << $1202;
   var $1210=$1208 & $1209;
   var $1211=(($1210)|(0))==0;
   if ($1211) { label = 283; break; } else { label = 284; break; }
  case 283: 
   var $1213=$1208 | $1209;
   HEAP32[((((10168)|0))>>2)]=$1213;
   var $_sum27_pre_i_i=((($1205)+(2))|0);
   var $_pre_i24_i=((10208+($_sum27_pre_i_i<<2))|0);
   var $F4_0_i_i = $1207;var $_pre_phi_i25_i = $_pre_i24_i;label = 286; break;
  case 284: 
   var $_sum30_i_i=((($1205)+(2))|0);
   var $1215=((10208+($_sum30_i_i<<2))|0);
   var $1216=HEAP32[(($1215)>>2)];
   var $1217=$1216;
   var $1218=HEAP32[((((10184)|0))>>2)];
   var $1219=(($1217)>>>(0)) < (($1218)>>>(0));
   if ($1219) { label = 285; break; } else { var $F4_0_i_i = $1216;var $_pre_phi_i25_i = $1215;label = 286; break; }
  case 285: 
   _abort();
   throw "Reached an unreachable!";
  case 286: 
   var $_pre_phi_i25_i;
   var $F4_0_i_i;
   HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
   var $1222=(($F4_0_i_i+12)|0);
   HEAP32[(($1222)>>2)]=$1010;
   var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
   var $1223=(($tbase_247_i+$_sum28_i_i)|0);
   var $1224=$1223;
   HEAP32[(($1224)>>2)]=$F4_0_i_i;
   var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
   var $1225=(($tbase_247_i+$_sum29_i_i)|0);
   var $1226=$1225;
   HEAP32[(($1226)>>2)]=$1207;
   label = 305; break;
  case 287: 
   var $1228=$1009;
   var $1229=$qsize_0_i_i >>> 8;
   var $1230=(($1229)|(0))==0;
   if ($1230) { var $I7_0_i_i = 0;label = 290; break; } else { label = 288; break; }
  case 288: 
   var $1232=(($qsize_0_i_i)>>>(0)) > 16777215;
   if ($1232) { var $I7_0_i_i = 31;label = 290; break; } else { label = 289; break; }
  case 289: 
   var $1234=((($1229)+(1048320))|0);
   var $1235=$1234 >>> 16;
   var $1236=$1235 & 8;
   var $1237=$1229 << $1236;
   var $1238=((($1237)+(520192))|0);
   var $1239=$1238 >>> 16;
   var $1240=$1239 & 4;
   var $1241=$1240 | $1236;
   var $1242=$1237 << $1240;
   var $1243=((($1242)+(245760))|0);
   var $1244=$1243 >>> 16;
   var $1245=$1244 & 2;
   var $1246=$1241 | $1245;
   var $1247=(((14)-($1246))|0);
   var $1248=$1242 << $1245;
   var $1249=$1248 >>> 15;
   var $1250=((($1247)+($1249))|0);
   var $1251=$1250 << 1;
   var $1252=((($1250)+(7))|0);
   var $1253=$qsize_0_i_i >>> (($1252)>>>(0));
   var $1254=$1253 & 1;
   var $1255=$1254 | $1251;
   var $I7_0_i_i = $1255;label = 290; break;
  case 290: 
   var $I7_0_i_i;
   var $1257=((10472+($I7_0_i_i<<2))|0);
   var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
   var $1258=(($tbase_247_i+$_sum12_i26_i)|0);
   var $1259=$1258;
   HEAP32[(($1259)>>2)]=$I7_0_i_i;
   var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
   var $1260=(($tbase_247_i+$_sum13_i_i)|0);
   var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
   var $1261=(($tbase_247_i+$_sum14_i_i)|0);
   var $1262=$1261;
   HEAP32[(($1262)>>2)]=0;
   var $1263=$1260;
   HEAP32[(($1263)>>2)]=0;
   var $1264=HEAP32[((((10172)|0))>>2)];
   var $1265=1 << $I7_0_i_i;
   var $1266=$1264 & $1265;
   var $1267=(($1266)|(0))==0;
   if ($1267) { label = 291; break; } else { label = 292; break; }
  case 291: 
   var $1269=$1264 | $1265;
   HEAP32[((((10172)|0))>>2)]=$1269;
   HEAP32[(($1257)>>2)]=$1228;
   var $1270=$1257;
   var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
   var $1271=(($tbase_247_i+$_sum15_i_i)|0);
   var $1272=$1271;
   HEAP32[(($1272)>>2)]=$1270;
   var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
   var $1273=(($tbase_247_i+$_sum16_i_i)|0);
   var $1274=$1273;
   HEAP32[(($1274)>>2)]=$1228;
   var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
   var $1275=(($tbase_247_i+$_sum17_i_i)|0);
   var $1276=$1275;
   HEAP32[(($1276)>>2)]=$1228;
   label = 305; break;
  case 292: 
   var $1278=HEAP32[(($1257)>>2)];
   var $1279=(($I7_0_i_i)|(0))==31;
   if ($1279) { var $1284 = 0;label = 294; break; } else { label = 293; break; }
  case 293: 
   var $1281=$I7_0_i_i >>> 1;
   var $1282=(((25)-($1281))|0);
   var $1284 = $1282;label = 294; break;
  case 294: 
   var $1284;
   var $1285=(($1278+4)|0);
   var $1286=HEAP32[(($1285)>>2)];
   var $1287=$1286 & -8;
   var $1288=(($1287)|(0))==(($qsize_0_i_i)|(0));
   if ($1288) { var $T_0_lcssa_i28_i = $1278;label = 301; break; } else { label = 295; break; }
  case 295: 
   var $1289=$qsize_0_i_i << $1284;
   var $T_055_i_i = $1278;var $K8_056_i_i = $1289;label = 297; break;
  case 296: 
   var $1291=$K8_056_i_i << 1;
   var $1292=(($1299+4)|0);
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=$1293 & -8;
   var $1295=(($1294)|(0))==(($qsize_0_i_i)|(0));
   if ($1295) { var $T_0_lcssa_i28_i = $1299;label = 301; break; } else { var $T_055_i_i = $1299;var $K8_056_i_i = $1291;label = 297; break; }
  case 297: 
   var $K8_056_i_i;
   var $T_055_i_i;
   var $1297=$K8_056_i_i >>> 31;
   var $1298=(($T_055_i_i+16+($1297<<2))|0);
   var $1299=HEAP32[(($1298)>>2)];
   var $1300=(($1299)|(0))==0;
   if ($1300) { label = 298; break; } else { label = 296; break; }
  case 298: 
   var $1302=$1298;
   var $1303=HEAP32[((((10184)|0))>>2)];
   var $1304=(($1302)>>>(0)) < (($1303)>>>(0));
   if ($1304) { label = 300; break; } else { label = 299; break; }
  case 299: 
   HEAP32[(($1298)>>2)]=$1228;
   var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
   var $1306=(($tbase_247_i+$_sum24_i_i)|0);
   var $1307=$1306;
   HEAP32[(($1307)>>2)]=$T_055_i_i;
   var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
   var $1308=(($tbase_247_i+$_sum25_i_i)|0);
   var $1309=$1308;
   HEAP32[(($1309)>>2)]=$1228;
   var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
   var $1310=(($tbase_247_i+$_sum26_i_i)|0);
   var $1311=$1310;
   HEAP32[(($1311)>>2)]=$1228;
   label = 305; break;
  case 300: 
   _abort();
   throw "Reached an unreachable!";
  case 301: 
   var $T_0_lcssa_i28_i;
   var $1313=(($T_0_lcssa_i28_i+8)|0);
   var $1314=HEAP32[(($1313)>>2)];
   var $1315=$T_0_lcssa_i28_i;
   var $1316=HEAP32[((((10184)|0))>>2)];
   var $1317=(($1315)>>>(0)) < (($1316)>>>(0));
   if ($1317) { label = 304; break; } else { label = 302; break; }
  case 302: 
   var $1319=$1314;
   var $1320=(($1319)>>>(0)) < (($1316)>>>(0));
   if ($1320) { label = 304; break; } else { label = 303; break; }
  case 303: 
   var $1322=(($1314+12)|0);
   HEAP32[(($1322)>>2)]=$1228;
   HEAP32[(($1313)>>2)]=$1228;
   var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
   var $1323=(($tbase_247_i+$_sum21_i_i)|0);
   var $1324=$1323;
   HEAP32[(($1324)>>2)]=$1314;
   var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
   var $1325=(($tbase_247_i+$_sum22_i_i)|0);
   var $1326=$1325;
   HEAP32[(($1326)>>2)]=$T_0_lcssa_i28_i;
   var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
   var $1327=(($tbase_247_i+$_sum23_i_i)|0);
   var $1328=$1327;
   HEAP32[(($1328)>>2)]=0;
   label = 305; break;
  case 304: 
   _abort();
   throw "Reached an unreachable!";
  case 305: 
   var $_sum1819_i_i=$993 | 8;
   var $1329=(($tbase_247_i+$_sum1819_i_i)|0);
   var $mem_0 = $1329;label = 344; break;
  case 306: 
   var $1330=$890;
   var $sp_0_i_i_i = ((10616)|0);label = 307; break;
  case 307: 
   var $sp_0_i_i_i;
   var $1332=(($sp_0_i_i_i)|0);
   var $1333=HEAP32[(($1332)>>2)];
   var $1334=(($1333)>>>(0)) > (($1330)>>>(0));
   if ($1334) { label = 309; break; } else { label = 308; break; }
  case 308: 
   var $1336=(($sp_0_i_i_i+4)|0);
   var $1337=HEAP32[(($1336)>>2)];
   var $1338=(($1333+$1337)|0);
   var $1339=(($1338)>>>(0)) > (($1330)>>>(0));
   if ($1339) { label = 310; break; } else { label = 309; break; }
  case 309: 
   var $1341=(($sp_0_i_i_i+8)|0);
   var $1342=HEAP32[(($1341)>>2)];
   var $sp_0_i_i_i = $1342;label = 307; break;
  case 310: 
   var $_sum_i15_i=((($1337)-(47))|0);
   var $_sum1_i16_i=((($1337)-(39))|0);
   var $1343=(($1333+$_sum1_i16_i)|0);
   var $1344=$1343;
   var $1345=$1344 & 7;
   var $1346=(($1345)|(0))==0;
   if ($1346) { var $1351 = 0;label = 312; break; } else { label = 311; break; }
  case 311: 
   var $1348=(((-$1344))|0);
   var $1349=$1348 & 7;
   var $1351 = $1349;label = 312; break;
  case 312: 
   var $1351;
   var $_sum2_i17_i=((($_sum_i15_i)+($1351))|0);
   var $1352=(($1333+$_sum2_i17_i)|0);
   var $1353=(($890+16)|0);
   var $1354=$1353;
   var $1355=(($1352)>>>(0)) < (($1354)>>>(0));
   var $1356=$1355 ? $1330 : $1352;
   var $1357=(($1356+8)|0);
   var $1358=$1357;
   var $1359=((($tsize_246_i)-(40))|0);
   var $1360=(($tbase_247_i+8)|0);
   var $1361=$1360;
   var $1362=$1361 & 7;
   var $1363=(($1362)|(0))==0;
   if ($1363) { var $1367 = 0;label = 314; break; } else { label = 313; break; }
  case 313: 
   var $1365=(((-$1361))|0);
   var $1366=$1365 & 7;
   var $1367 = $1366;label = 314; break;
  case 314: 
   var $1367;
   var $1368=(($tbase_247_i+$1367)|0);
   var $1369=$1368;
   var $1370=((($1359)-($1367))|0);
   HEAP32[((((10192)|0))>>2)]=$1369;
   HEAP32[((((10180)|0))>>2)]=$1370;
   var $1371=$1370 | 1;
   var $_sum_i_i_i=((($1367)+(4))|0);
   var $1372=(($tbase_247_i+$_sum_i_i_i)|0);
   var $1373=$1372;
   HEAP32[(($1373)>>2)]=$1371;
   var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
   var $1374=(($tbase_247_i+$_sum2_i_i_i)|0);
   var $1375=$1374;
   HEAP32[(($1375)>>2)]=40;
   var $1376=HEAP32[((((10144)|0))>>2)];
   HEAP32[((((10196)|0))>>2)]=$1376;
   var $1377=(($1356+4)|0);
   var $1378=$1377;
   HEAP32[(($1378)>>2)]=27;
   assert(16 % 1 === 0);HEAP32[(($1357)>>2)]=HEAP32[(((((10616)|0)))>>2)];HEAP32[((($1357)+(4))>>2)]=HEAP32[((((((10616)|0)))+(4))>>2)];HEAP32[((($1357)+(8))>>2)]=HEAP32[((((((10616)|0)))+(8))>>2)];HEAP32[((($1357)+(12))>>2)]=HEAP32[((((((10616)|0)))+(12))>>2)];
   HEAP32[((((10616)|0))>>2)]=$tbase_247_i;
   HEAP32[((((10620)|0))>>2)]=$tsize_246_i;
   HEAP32[((((10628)|0))>>2)]=0;
   HEAP32[((((10624)|0))>>2)]=$1358;
   var $1379=(($1356+28)|0);
   var $1380=$1379;
   HEAP32[(($1380)>>2)]=7;
   var $1381=(($1356+32)|0);
   var $1382=(($1381)>>>(0)) < (($1338)>>>(0));
   if ($1382) { var $1383 = $1380;label = 315; break; } else { label = 316; break; }
  case 315: 
   var $1383;
   var $1384=(($1383+4)|0);
   HEAP32[(($1384)>>2)]=7;
   var $1385=(($1383+8)|0);
   var $1386=$1385;
   var $1387=(($1386)>>>(0)) < (($1338)>>>(0));
   if ($1387) { var $1383 = $1384;label = 315; break; } else { label = 316; break; }
  case 316: 
   var $1388=(($1356)|(0))==(($1330)|(0));
   if ($1388) { label = 341; break; } else { label = 317; break; }
  case 317: 
   var $1390=$1356;
   var $1391=$890;
   var $1392=((($1390)-($1391))|0);
   var $1393=(($1330+$1392)|0);
   var $_sum3_i_i=((($1392)+(4))|0);
   var $1394=(($1330+$_sum3_i_i)|0);
   var $1395=$1394;
   var $1396=HEAP32[(($1395)>>2)];
   var $1397=$1396 & -2;
   HEAP32[(($1395)>>2)]=$1397;
   var $1398=$1392 | 1;
   var $1399=(($890+4)|0);
   HEAP32[(($1399)>>2)]=$1398;
   var $1400=$1393;
   HEAP32[(($1400)>>2)]=$1392;
   var $1401=$1392 >>> 3;
   var $1402=(($1392)>>>(0)) < 256;
   if ($1402) { label = 318; break; } else { label = 323; break; }
  case 318: 
   var $1404=$1401 << 1;
   var $1405=((10208+($1404<<2))|0);
   var $1406=$1405;
   var $1407=HEAP32[((((10168)|0))>>2)];
   var $1408=1 << $1401;
   var $1409=$1407 & $1408;
   var $1410=(($1409)|(0))==0;
   if ($1410) { label = 319; break; } else { label = 320; break; }
  case 319: 
   var $1412=$1407 | $1408;
   HEAP32[((((10168)|0))>>2)]=$1412;
   var $_sum11_pre_i_i=((($1404)+(2))|0);
   var $_pre_i_i=((10208+($_sum11_pre_i_i<<2))|0);
   var $F_0_i_i = $1406;var $_pre_phi_i_i = $_pre_i_i;label = 322; break;
  case 320: 
   var $_sum12_i_i=((($1404)+(2))|0);
   var $1414=((10208+($_sum12_i_i<<2))|0);
   var $1415=HEAP32[(($1414)>>2)];
   var $1416=$1415;
   var $1417=HEAP32[((((10184)|0))>>2)];
   var $1418=(($1416)>>>(0)) < (($1417)>>>(0));
   if ($1418) { label = 321; break; } else { var $F_0_i_i = $1415;var $_pre_phi_i_i = $1414;label = 322; break; }
  case 321: 
   _abort();
   throw "Reached an unreachable!";
  case 322: 
   var $_pre_phi_i_i;
   var $F_0_i_i;
   HEAP32[(($_pre_phi_i_i)>>2)]=$890;
   var $1421=(($F_0_i_i+12)|0);
   HEAP32[(($1421)>>2)]=$890;
   var $1422=(($890+8)|0);
   HEAP32[(($1422)>>2)]=$F_0_i_i;
   var $1423=(($890+12)|0);
   HEAP32[(($1423)>>2)]=$1406;
   label = 341; break;
  case 323: 
   var $1425=$890;
   var $1426=$1392 >>> 8;
   var $1427=(($1426)|(0))==0;
   if ($1427) { var $I1_0_i_i = 0;label = 326; break; } else { label = 324; break; }
  case 324: 
   var $1429=(($1392)>>>(0)) > 16777215;
   if ($1429) { var $I1_0_i_i = 31;label = 326; break; } else { label = 325; break; }
  case 325: 
   var $1431=((($1426)+(1048320))|0);
   var $1432=$1431 >>> 16;
   var $1433=$1432 & 8;
   var $1434=$1426 << $1433;
   var $1435=((($1434)+(520192))|0);
   var $1436=$1435 >>> 16;
   var $1437=$1436 & 4;
   var $1438=$1437 | $1433;
   var $1439=$1434 << $1437;
   var $1440=((($1439)+(245760))|0);
   var $1441=$1440 >>> 16;
   var $1442=$1441 & 2;
   var $1443=$1438 | $1442;
   var $1444=(((14)-($1443))|0);
   var $1445=$1439 << $1442;
   var $1446=$1445 >>> 15;
   var $1447=((($1444)+($1446))|0);
   var $1448=$1447 << 1;
   var $1449=((($1447)+(7))|0);
   var $1450=$1392 >>> (($1449)>>>(0));
   var $1451=$1450 & 1;
   var $1452=$1451 | $1448;
   var $I1_0_i_i = $1452;label = 326; break;
  case 326: 
   var $I1_0_i_i;
   var $1454=((10472+($I1_0_i_i<<2))|0);
   var $1455=(($890+28)|0);
   var $I1_0_c_i_i=$I1_0_i_i;
   HEAP32[(($1455)>>2)]=$I1_0_c_i_i;
   var $1456=(($890+20)|0);
   HEAP32[(($1456)>>2)]=0;
   var $1457=(($890+16)|0);
   HEAP32[(($1457)>>2)]=0;
   var $1458=HEAP32[((((10172)|0))>>2)];
   var $1459=1 << $I1_0_i_i;
   var $1460=$1458 & $1459;
   var $1461=(($1460)|(0))==0;
   if ($1461) { label = 327; break; } else { label = 328; break; }
  case 327: 
   var $1463=$1458 | $1459;
   HEAP32[((((10172)|0))>>2)]=$1463;
   HEAP32[(($1454)>>2)]=$1425;
   var $1464=(($890+24)|0);
   var $_c_i_i=$1454;
   HEAP32[(($1464)>>2)]=$_c_i_i;
   var $1465=(($890+12)|0);
   HEAP32[(($1465)>>2)]=$890;
   var $1466=(($890+8)|0);
   HEAP32[(($1466)>>2)]=$890;
   label = 341; break;
  case 328: 
   var $1468=HEAP32[(($1454)>>2)];
   var $1469=(($I1_0_i_i)|(0))==31;
   if ($1469) { var $1474 = 0;label = 330; break; } else { label = 329; break; }
  case 329: 
   var $1471=$I1_0_i_i >>> 1;
   var $1472=(((25)-($1471))|0);
   var $1474 = $1472;label = 330; break;
  case 330: 
   var $1474;
   var $1475=(($1468+4)|0);
   var $1476=HEAP32[(($1475)>>2)];
   var $1477=$1476 & -8;
   var $1478=(($1477)|(0))==(($1392)|(0));
   if ($1478) { var $T_0_lcssa_i_i = $1468;label = 337; break; } else { label = 331; break; }
  case 331: 
   var $1479=$1392 << $1474;
   var $T_014_i_i = $1468;var $K2_015_i_i = $1479;label = 333; break;
  case 332: 
   var $1481=$K2_015_i_i << 1;
   var $1482=(($1489+4)|0);
   var $1483=HEAP32[(($1482)>>2)];
   var $1484=$1483 & -8;
   var $1485=(($1484)|(0))==(($1392)|(0));
   if ($1485) { var $T_0_lcssa_i_i = $1489;label = 337; break; } else { var $T_014_i_i = $1489;var $K2_015_i_i = $1481;label = 333; break; }
  case 333: 
   var $K2_015_i_i;
   var $T_014_i_i;
   var $1487=$K2_015_i_i >>> 31;
   var $1488=(($T_014_i_i+16+($1487<<2))|0);
   var $1489=HEAP32[(($1488)>>2)];
   var $1490=(($1489)|(0))==0;
   if ($1490) { label = 334; break; } else { label = 332; break; }
  case 334: 
   var $1492=$1488;
   var $1493=HEAP32[((((10184)|0))>>2)];
   var $1494=(($1492)>>>(0)) < (($1493)>>>(0));
   if ($1494) { label = 336; break; } else { label = 335; break; }
  case 335: 
   HEAP32[(($1488)>>2)]=$1425;
   var $1496=(($890+24)|0);
   var $T_0_c8_i_i=$T_014_i_i;
   HEAP32[(($1496)>>2)]=$T_0_c8_i_i;
   var $1497=(($890+12)|0);
   HEAP32[(($1497)>>2)]=$890;
   var $1498=(($890+8)|0);
   HEAP32[(($1498)>>2)]=$890;
   label = 341; break;
  case 336: 
   _abort();
   throw "Reached an unreachable!";
  case 337: 
   var $T_0_lcssa_i_i;
   var $1500=(($T_0_lcssa_i_i+8)|0);
   var $1501=HEAP32[(($1500)>>2)];
   var $1502=$T_0_lcssa_i_i;
   var $1503=HEAP32[((((10184)|0))>>2)];
   var $1504=(($1502)>>>(0)) < (($1503)>>>(0));
   if ($1504) { label = 340; break; } else { label = 338; break; }
  case 338: 
   var $1506=$1501;
   var $1507=(($1506)>>>(0)) < (($1503)>>>(0));
   if ($1507) { label = 340; break; } else { label = 339; break; }
  case 339: 
   var $1509=(($1501+12)|0);
   HEAP32[(($1509)>>2)]=$1425;
   HEAP32[(($1500)>>2)]=$1425;
   var $1510=(($890+8)|0);
   var $_c7_i_i=$1501;
   HEAP32[(($1510)>>2)]=$_c7_i_i;
   var $1511=(($890+12)|0);
   var $T_0_c_i_i=$T_0_lcssa_i_i;
   HEAP32[(($1511)>>2)]=$T_0_c_i_i;
   var $1512=(($890+24)|0);
   HEAP32[(($1512)>>2)]=0;
   label = 341; break;
  case 340: 
   _abort();
   throw "Reached an unreachable!";
  case 341: 
   var $1513=HEAP32[((((10180)|0))>>2)];
   var $1514=(($1513)>>>(0)) > (($nb_0)>>>(0));
   if ($1514) { label = 342; break; } else { label = 343; break; }
  case 342: 
   var $1516=((($1513)-($nb_0))|0);
   HEAP32[((((10180)|0))>>2)]=$1516;
   var $1517=HEAP32[((((10192)|0))>>2)];
   var $1518=$1517;
   var $1519=(($1518+$nb_0)|0);
   var $1520=$1519;
   HEAP32[((((10192)|0))>>2)]=$1520;
   var $1521=$1516 | 1;
   var $_sum_i34=((($nb_0)+(4))|0);
   var $1522=(($1518+$_sum_i34)|0);
   var $1523=$1522;
   HEAP32[(($1523)>>2)]=$1521;
   var $1524=$nb_0 | 3;
   var $1525=(($1517+4)|0);
   HEAP32[(($1525)>>2)]=$1524;
   var $1526=(($1517+8)|0);
   var $1527=$1526;
   var $mem_0 = $1527;label = 344; break;
  case 343: 
   var $1528=___errno_location();
   HEAP32[(($1528)>>2)]=12;
   var $mem_0 = 0;label = 344; break;
  case 344: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mem)|(0))==0;
   if ($1) { label = 141; break; } else { label = 2; break; }
  case 2: 
   var $3=((($mem)-(8))|0);
   var $4=$3;
   var $5=HEAP32[((((10184)|0))>>2)];
   var $6=(($3)>>>(0)) < (($5)>>>(0));
   if ($6) { label = 140; break; } else { label = 3; break; }
  case 3: 
   var $8=((($mem)-(4))|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 3;
   var $12=(($11)|(0))==1;
   if ($12) { label = 140; break; } else { label = 4; break; }
  case 4: 
   var $14=$10 & -8;
   var $_sum=((($14)-(8))|0);
   var $15=(($mem+$_sum)|0);
   var $16=$15;
   var $17=$10 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 5; break; } else { var $p_0 = $4;var $psize_0 = $14;label = 56; break; }
  case 5: 
   var $20=$3;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($11)|(0))==0;
   if ($22) { label = 141; break; } else { label = 6; break; }
  case 6: 
   var $_sum3=(((-8)-($21))|0);
   var $24=(($mem+$_sum3)|0);
   var $25=$24;
   var $26=((($21)+($14))|0);
   var $27=(($24)>>>(0)) < (($5)>>>(0));
   if ($27) { label = 140; break; } else { label = 7; break; }
  case 7: 
   var $29=HEAP32[((((10188)|0))>>2)];
   var $30=(($25)|(0))==(($29)|(0));
   if ($30) { label = 54; break; } else { label = 8; break; }
  case 8: 
   var $32=$21 >>> 3;
   var $33=(($21)>>>(0)) < 256;
   if ($33) { label = 9; break; } else { label = 21; break; }
  case 9: 
   var $_sum47=((($_sum3)+(8))|0);
   var $35=(($mem+$_sum47)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $_sum48=((($_sum3)+(12))|0);
   var $38=(($mem+$_sum48)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$32 << 1;
   var $42=((10208+($41<<2))|0);
   var $43=$42;
   var $44=(($37)|(0))==(($43)|(0));
   if ($44) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $46=$37;
   var $47=(($46)>>>(0)) < (($5)>>>(0));
   if ($47) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $49=(($37+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==(($25)|(0));
   if ($51) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $52=(($40)|(0))==(($37)|(0));
   if ($52) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $54=1 << $32;
   var $55=$54 ^ -1;
   var $56=HEAP32[((((10168)|0))>>2)];
   var $57=$56 & $55;
   HEAP32[((((10168)|0))>>2)]=$57;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 14: 
   var $59=(($40)|(0))==(($43)|(0));
   if ($59) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre81=(($40+8)|0);
   var $_pre_phi82 = $_pre81;label = 18; break;
  case 16: 
   var $61=$40;
   var $62=(($61)>>>(0)) < (($5)>>>(0));
   if ($62) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $64=(($40+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))==(($25)|(0));
   if ($66) { var $_pre_phi82 = $64;label = 18; break; } else { label = 19; break; }
  case 18: 
   var $_pre_phi82;
   var $67=(($37+12)|0);
   HEAP32[(($67)>>2)]=$40;
   HEAP32[(($_pre_phi82)>>2)]=$37;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   _abort();
   throw "Reached an unreachable!";
  case 21: 
   var $69=$24;
   var $_sum37=((($_sum3)+(24))|0);
   var $70=(($mem+$_sum37)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum38=((($_sum3)+(12))|0);
   var $73=(($mem+$_sum38)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0))==(($69)|(0));
   if ($76) { label = 27; break; } else { label = 22; break; }
  case 22: 
   var $_sum44=((($_sum3)+(8))|0);
   var $78=(($mem+$_sum44)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   var $82=(($81)>>>(0)) < (($5)>>>(0));
   if ($82) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $84=(($80+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==(($69)|(0));
   if ($86) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $88=(($75+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==(($69)|(0));
   if ($90) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[(($84)>>2)]=$75;
   HEAP32[(($88)>>2)]=$80;
   var $R_1 = $75;label = 34; break;
  case 26: 
   _abort();
   throw "Reached an unreachable!";
  case 27: 
   var $_sum40=((($_sum3)+(20))|0);
   var $93=(($mem+$_sum40)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 28; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 29; break; }
  case 28: 
   var $_sum39=((($_sum3)+(16))|0);
   var $98=(($mem+$_sum39)|0);
   var $99=$98;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   if ($101) { var $R_1 = 0;label = 34; break; } else { var $R_0 = $100;var $RP_0 = $99;label = 29; break; }
  case 29: 
   var $RP_0;
   var $R_0;
   var $102=(($R_0+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { var $R_0 = $103;var $RP_0 = $102;label = 29; break; }
  case 30: 
   var $106=(($R_0+16)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==0;
   if ($108) { label = 31; break; } else { var $R_0 = $107;var $RP_0 = $106;label = 29; break; }
  case 31: 
   var $110=$RP_0;
   var $111=(($110)>>>(0)) < (($5)>>>(0));
   if ($111) { label = 33; break; } else { label = 32; break; }
  case 32: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 34; break;
  case 33: 
   _abort();
   throw "Reached an unreachable!";
  case 34: 
   var $R_1;
   var $115=(($72)|(0))==0;
   if ($115) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 35; break; }
  case 35: 
   var $_sum41=((($_sum3)+(28))|0);
   var $117=(($mem+$_sum41)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=((10472+($119<<2))|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($69)|(0))==(($121)|(0));
   if ($122) { label = 36; break; } else { label = 38; break; }
  case 36: 
   HEAP32[(($120)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 37; break; } else { label = 44; break; }
  case 37: 
   var $124=HEAP32[(($118)>>2)];
   var $125=1 << $124;
   var $126=$125 ^ -1;
   var $127=HEAP32[((((10172)|0))>>2)];
   var $128=$127 & $126;
   HEAP32[((((10172)|0))>>2)]=$128;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 38: 
   var $130=$72;
   var $131=HEAP32[((((10184)|0))>>2)];
   var $132=(($130)>>>(0)) < (($131)>>>(0));
   if ($132) { label = 42; break; } else { label = 39; break; }
  case 39: 
   var $134=(($72+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|(0))==(($69)|(0));
   if ($136) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($134)>>2)]=$R_1;
   label = 43; break;
  case 41: 
   var $139=(($72+20)|0);
   HEAP32[(($139)>>2)]=$R_1;
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   var $142=(($R_1)|(0))==0;
   if ($142) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 44; break; }
  case 44: 
   var $144=$R_1;
   var $145=HEAP32[((((10184)|0))>>2)];
   var $146=(($144)>>>(0)) < (($145)>>>(0));
   if ($146) { label = 53; break; } else { label = 45; break; }
  case 45: 
   var $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   var $_sum42=((($_sum3)+(16))|0);
   var $149=(($mem+$_sum42)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==0;
   if ($152) { label = 49; break; } else { label = 46; break; }
  case 46: 
   var $154=$151;
   var $155=HEAP32[((((10184)|0))>>2)];
   var $156=(($154)>>>(0)) < (($155)>>>(0));
   if ($156) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $158=(($R_1+16)|0);
   HEAP32[(($158)>>2)]=$151;
   var $159=(($151+24)|0);
   HEAP32[(($159)>>2)]=$R_1;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $_sum43=((($_sum3)+(20))|0);
   var $162=(($mem+$_sum43)|0);
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==0;
   if ($165) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 50; break; }
  case 50: 
   var $167=$164;
   var $168=HEAP32[((((10184)|0))>>2)];
   var $169=(($167)>>>(0)) < (($168)>>>(0));
   if ($169) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $171=(($R_1+20)|0);
   HEAP32[(($171)>>2)]=$164;
   var $172=(($164+24)|0);
   HEAP32[(($172)>>2)]=$R_1;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 52: 
   _abort();
   throw "Reached an unreachable!";
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_sum4=((($14)-(4))|0);
   var $176=(($mem+$_sum4)|0);
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=$178 & 3;
   var $180=(($179)|(0))==3;
   if ($180) { label = 55; break; } else { var $p_0 = $25;var $psize_0 = $26;label = 56; break; }
  case 55: 
   HEAP32[((((10176)|0))>>2)]=$26;
   var $182=HEAP32[(($177)>>2)];
   var $183=$182 & -2;
   HEAP32[(($177)>>2)]=$183;
   var $184=$26 | 1;
   var $_sum35=((($_sum3)+(4))|0);
   var $185=(($mem+$_sum35)|0);
   var $186=$185;
   HEAP32[(($186)>>2)]=$184;
   var $187=$15;
   HEAP32[(($187)>>2)]=$26;
   label = 141; break;
  case 56: 
   var $psize_0;
   var $p_0;
   var $189=$p_0;
   var $190=(($189)>>>(0)) < (($15)>>>(0));
   if ($190) { label = 57; break; } else { label = 140; break; }
  case 57: 
   var $_sum34=((($14)-(4))|0);
   var $192=(($mem+$_sum34)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=$194 & 1;
   var $phitmp=(($195)|(0))==0;
   if ($phitmp) { label = 140; break; } else { label = 58; break; }
  case 58: 
   var $197=$194 & 2;
   var $198=(($197)|(0))==0;
   if ($198) { label = 59; break; } else { label = 112; break; }
  case 59: 
   var $200=HEAP32[((((10192)|0))>>2)];
   var $201=(($16)|(0))==(($200)|(0));
   if ($201) { label = 60; break; } else { label = 62; break; }
  case 60: 
   var $203=HEAP32[((((10180)|0))>>2)];
   var $204=((($203)+($psize_0))|0);
   HEAP32[((((10180)|0))>>2)]=$204;
   HEAP32[((((10192)|0))>>2)]=$p_0;
   var $205=$204 | 1;
   var $206=(($p_0+4)|0);
   HEAP32[(($206)>>2)]=$205;
   var $207=HEAP32[((((10188)|0))>>2)];
   var $208=(($p_0)|(0))==(($207)|(0));
   if ($208) { label = 61; break; } else { label = 141; break; }
  case 61: 
   HEAP32[((((10188)|0))>>2)]=0;
   HEAP32[((((10176)|0))>>2)]=0;
   label = 141; break;
  case 62: 
   var $211=HEAP32[((((10188)|0))>>2)];
   var $212=(($16)|(0))==(($211)|(0));
   if ($212) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $214=HEAP32[((((10176)|0))>>2)];
   var $215=((($214)+($psize_0))|0);
   HEAP32[((((10176)|0))>>2)]=$215;
   HEAP32[((((10188)|0))>>2)]=$p_0;
   var $216=$215 | 1;
   var $217=(($p_0+4)|0);
   HEAP32[(($217)>>2)]=$216;
   var $218=(($189+$215)|0);
   var $219=$218;
   HEAP32[(($219)>>2)]=$215;
   label = 141; break;
  case 64: 
   var $221=$194 & -8;
   var $222=((($221)+($psize_0))|0);
   var $223=$194 >>> 3;
   var $224=(($194)>>>(0)) < 256;
   if ($224) { label = 65; break; } else { label = 77; break; }
  case 65: 
   var $226=(($mem+$14)|0);
   var $227=$226;
   var $228=HEAP32[(($227)>>2)];
   var $_sum2829=$14 | 4;
   var $229=(($mem+$_sum2829)|0);
   var $230=$229;
   var $231=HEAP32[(($230)>>2)];
   var $232=$223 << 1;
   var $233=((10208+($232<<2))|0);
   var $234=$233;
   var $235=(($228)|(0))==(($234)|(0));
   if ($235) { label = 68; break; } else { label = 66; break; }
  case 66: 
   var $237=$228;
   var $238=HEAP32[((((10184)|0))>>2)];
   var $239=(($237)>>>(0)) < (($238)>>>(0));
   if ($239) { label = 76; break; } else { label = 67; break; }
  case 67: 
   var $241=(($228+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242)|(0))==(($16)|(0));
   if ($243) { label = 68; break; } else { label = 76; break; }
  case 68: 
   var $244=(($231)|(0))==(($228)|(0));
   if ($244) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $246=1 << $223;
   var $247=$246 ^ -1;
   var $248=HEAP32[((((10168)|0))>>2)];
   var $249=$248 & $247;
   HEAP32[((((10168)|0))>>2)]=$249;
   label = 110; break;
  case 70: 
   var $251=(($231)|(0))==(($234)|(0));
   if ($251) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $_pre79=(($231+8)|0);
   var $_pre_phi80 = $_pre79;label = 74; break;
  case 72: 
   var $253=$231;
   var $254=HEAP32[((((10184)|0))>>2)];
   var $255=(($253)>>>(0)) < (($254)>>>(0));
   if ($255) { label = 75; break; } else { label = 73; break; }
  case 73: 
   var $257=(($231+8)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258)|(0))==(($16)|(0));
   if ($259) { var $_pre_phi80 = $257;label = 74; break; } else { label = 75; break; }
  case 74: 
   var $_pre_phi80;
   var $260=(($228+12)|0);
   HEAP32[(($260)>>2)]=$231;
   HEAP32[(($_pre_phi80)>>2)]=$228;
   label = 110; break;
  case 75: 
   _abort();
   throw "Reached an unreachable!";
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   var $262=$15;
   var $_sum6=((($14)+(16))|0);
   var $263=(($mem+$_sum6)|0);
   var $264=$263;
   var $265=HEAP32[(($264)>>2)];
   var $_sum78=$14 | 4;
   var $266=(($mem+$_sum78)|0);
   var $267=$266;
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268)|(0))==(($262)|(0));
   if ($269) { label = 83; break; } else { label = 78; break; }
  case 78: 
   var $271=(($mem+$14)|0);
   var $272=$271;
   var $273=HEAP32[(($272)>>2)];
   var $274=$273;
   var $275=HEAP32[((((10184)|0))>>2)];
   var $276=(($274)>>>(0)) < (($275)>>>(0));
   if ($276) { label = 82; break; } else { label = 79; break; }
  case 79: 
   var $278=(($273+12)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($279)|(0))==(($262)|(0));
   if ($280) { label = 80; break; } else { label = 82; break; }
  case 80: 
   var $282=(($268+8)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=(($283)|(0))==(($262)|(0));
   if ($284) { label = 81; break; } else { label = 82; break; }
  case 81: 
   HEAP32[(($278)>>2)]=$268;
   HEAP32[(($282)>>2)]=$273;
   var $R7_1 = $268;label = 90; break;
  case 82: 
   _abort();
   throw "Reached an unreachable!";
  case 83: 
   var $_sum10=((($14)+(12))|0);
   var $287=(($mem+$_sum10)|0);
   var $288=$287;
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==0;
   if ($290) { label = 84; break; } else { var $R7_0 = $289;var $RP9_0 = $288;label = 85; break; }
  case 84: 
   var $_sum9=((($14)+(8))|0);
   var $292=(($mem+$_sum9)|0);
   var $293=$292;
   var $294=HEAP32[(($293)>>2)];
   var $295=(($294)|(0))==0;
   if ($295) { var $R7_1 = 0;label = 90; break; } else { var $R7_0 = $294;var $RP9_0 = $293;label = 85; break; }
  case 85: 
   var $RP9_0;
   var $R7_0;
   var $296=(($R7_0+20)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=(($297)|(0))==0;
   if ($298) { label = 86; break; } else { var $R7_0 = $297;var $RP9_0 = $296;label = 85; break; }
  case 86: 
   var $300=(($R7_0+16)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=(($301)|(0))==0;
   if ($302) { label = 87; break; } else { var $R7_0 = $301;var $RP9_0 = $300;label = 85; break; }
  case 87: 
   var $304=$RP9_0;
   var $305=HEAP32[((((10184)|0))>>2)];
   var $306=(($304)>>>(0)) < (($305)>>>(0));
   if ($306) { label = 89; break; } else { label = 88; break; }
  case 88: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 90; break;
  case 89: 
   _abort();
   throw "Reached an unreachable!";
  case 90: 
   var $R7_1;
   var $310=(($265)|(0))==0;
   if ($310) { label = 110; break; } else { label = 91; break; }
  case 91: 
   var $_sum21=((($14)+(20))|0);
   var $312=(($mem+$_sum21)|0);
   var $313=$312;
   var $314=HEAP32[(($313)>>2)];
   var $315=((10472+($314<<2))|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($262)|(0))==(($316)|(0));
   if ($317) { label = 92; break; } else { label = 94; break; }
  case 92: 
   HEAP32[(($315)>>2)]=$R7_1;
   var $cond69=(($R7_1)|(0))==0;
   if ($cond69) { label = 93; break; } else { label = 100; break; }
  case 93: 
   var $319=HEAP32[(($313)>>2)];
   var $320=1 << $319;
   var $321=$320 ^ -1;
   var $322=HEAP32[((((10172)|0))>>2)];
   var $323=$322 & $321;
   HEAP32[((((10172)|0))>>2)]=$323;
   label = 110; break;
  case 94: 
   var $325=$265;
   var $326=HEAP32[((((10184)|0))>>2)];
   var $327=(($325)>>>(0)) < (($326)>>>(0));
   if ($327) { label = 98; break; } else { label = 95; break; }
  case 95: 
   var $329=(($265+16)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($330)|(0))==(($262)|(0));
   if ($331) { label = 96; break; } else { label = 97; break; }
  case 96: 
   HEAP32[(($329)>>2)]=$R7_1;
   label = 99; break;
  case 97: 
   var $334=(($265+20)|0);
   HEAP32[(($334)>>2)]=$R7_1;
   label = 99; break;
  case 98: 
   _abort();
   throw "Reached an unreachable!";
  case 99: 
   var $337=(($R7_1)|(0))==0;
   if ($337) { label = 110; break; } else { label = 100; break; }
  case 100: 
   var $339=$R7_1;
   var $340=HEAP32[((((10184)|0))>>2)];
   var $341=(($339)>>>(0)) < (($340)>>>(0));
   if ($341) { label = 109; break; } else { label = 101; break; }
  case 101: 
   var $343=(($R7_1+24)|0);
   HEAP32[(($343)>>2)]=$265;
   var $_sum22=((($14)+(8))|0);
   var $344=(($mem+$_sum22)|0);
   var $345=$344;
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   if ($347) { label = 105; break; } else { label = 102; break; }
  case 102: 
   var $349=$346;
   var $350=HEAP32[((((10184)|0))>>2)];
   var $351=(($349)>>>(0)) < (($350)>>>(0));
   if ($351) { label = 104; break; } else { label = 103; break; }
  case 103: 
   var $353=(($R7_1+16)|0);
   HEAP32[(($353)>>2)]=$346;
   var $354=(($346+24)|0);
   HEAP32[(($354)>>2)]=$R7_1;
   label = 105; break;
  case 104: 
   _abort();
   throw "Reached an unreachable!";
  case 105: 
   var $_sum23=((($14)+(12))|0);
   var $357=(($mem+$_sum23)|0);
   var $358=$357;
   var $359=HEAP32[(($358)>>2)];
   var $360=(($359)|(0))==0;
   if ($360) { label = 110; break; } else { label = 106; break; }
  case 106: 
   var $362=$359;
   var $363=HEAP32[((((10184)|0))>>2)];
   var $364=(($362)>>>(0)) < (($363)>>>(0));
   if ($364) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $366=(($R7_1+20)|0);
   HEAP32[(($366)>>2)]=$359;
   var $367=(($359+24)|0);
   HEAP32[(($367)>>2)]=$R7_1;
   label = 110; break;
  case 108: 
   _abort();
   throw "Reached an unreachable!";
  case 109: 
   _abort();
   throw "Reached an unreachable!";
  case 110: 
   var $371=$222 | 1;
   var $372=(($p_0+4)|0);
   HEAP32[(($372)>>2)]=$371;
   var $373=(($189+$222)|0);
   var $374=$373;
   HEAP32[(($374)>>2)]=$222;
   var $375=HEAP32[((((10188)|0))>>2)];
   var $376=(($p_0)|(0))==(($375)|(0));
   if ($376) { label = 111; break; } else { var $psize_1 = $222;label = 113; break; }
  case 111: 
   HEAP32[((((10176)|0))>>2)]=$222;
   label = 141; break;
  case 112: 
   var $379=$194 & -2;
   HEAP32[(($193)>>2)]=$379;
   var $380=$psize_0 | 1;
   var $381=(($p_0+4)|0);
   HEAP32[(($381)>>2)]=$380;
   var $382=(($189+$psize_0)|0);
   var $383=$382;
   HEAP32[(($383)>>2)]=$psize_0;
   var $psize_1 = $psize_0;label = 113; break;
  case 113: 
   var $psize_1;
   var $385=$psize_1 >>> 3;
   var $386=(($psize_1)>>>(0)) < 256;
   if ($386) { label = 114; break; } else { label = 119; break; }
  case 114: 
   var $388=$385 << 1;
   var $389=((10208+($388<<2))|0);
   var $390=$389;
   var $391=HEAP32[((((10168)|0))>>2)];
   var $392=1 << $385;
   var $393=$391 & $392;
   var $394=(($393)|(0))==0;
   if ($394) { label = 115; break; } else { label = 116; break; }
  case 115: 
   var $396=$391 | $392;
   HEAP32[((((10168)|0))>>2)]=$396;
   var $_sum19_pre=((($388)+(2))|0);
   var $_pre=((10208+($_sum19_pre<<2))|0);
   var $F16_0 = $390;var $_pre_phi = $_pre;label = 118; break;
  case 116: 
   var $_sum20=((($388)+(2))|0);
   var $398=((10208+($_sum20<<2))|0);
   var $399=HEAP32[(($398)>>2)];
   var $400=$399;
   var $401=HEAP32[((((10184)|0))>>2)];
   var $402=(($400)>>>(0)) < (($401)>>>(0));
   if ($402) { label = 117; break; } else { var $F16_0 = $399;var $_pre_phi = $398;label = 118; break; }
  case 117: 
   _abort();
   throw "Reached an unreachable!";
  case 118: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$p_0;
   var $405=(($F16_0+12)|0);
   HEAP32[(($405)>>2)]=$p_0;
   var $406=(($p_0+8)|0);
   HEAP32[(($406)>>2)]=$F16_0;
   var $407=(($p_0+12)|0);
   HEAP32[(($407)>>2)]=$390;
   label = 141; break;
  case 119: 
   var $409=$p_0;
   var $410=$psize_1 >>> 8;
   var $411=(($410)|(0))==0;
   if ($411) { var $I18_0 = 0;label = 122; break; } else { label = 120; break; }
  case 120: 
   var $413=(($psize_1)>>>(0)) > 16777215;
   if ($413) { var $I18_0 = 31;label = 122; break; } else { label = 121; break; }
  case 121: 
   var $415=((($410)+(1048320))|0);
   var $416=$415 >>> 16;
   var $417=$416 & 8;
   var $418=$410 << $417;
   var $419=((($418)+(520192))|0);
   var $420=$419 >>> 16;
   var $421=$420 & 4;
   var $422=$421 | $417;
   var $423=$418 << $421;
   var $424=((($423)+(245760))|0);
   var $425=$424 >>> 16;
   var $426=$425 & 2;
   var $427=$422 | $426;
   var $428=(((14)-($427))|0);
   var $429=$423 << $426;
   var $430=$429 >>> 15;
   var $431=((($428)+($430))|0);
   var $432=$431 << 1;
   var $433=((($431)+(7))|0);
   var $434=$psize_1 >>> (($433)>>>(0));
   var $435=$434 & 1;
   var $436=$435 | $432;
   var $I18_0 = $436;label = 122; break;
  case 122: 
   var $I18_0;
   var $438=((10472+($I18_0<<2))|0);
   var $439=(($p_0+28)|0);
   var $I18_0_c=$I18_0;
   HEAP32[(($439)>>2)]=$I18_0_c;
   var $440=(($p_0+20)|0);
   HEAP32[(($440)>>2)]=0;
   var $441=(($p_0+16)|0);
   HEAP32[(($441)>>2)]=0;
   var $442=HEAP32[((((10172)|0))>>2)];
   var $443=1 << $I18_0;
   var $444=$442 & $443;
   var $445=(($444)|(0))==0;
   if ($445) { label = 123; break; } else { label = 124; break; }
  case 123: 
   var $447=$442 | $443;
   HEAP32[((((10172)|0))>>2)]=$447;
   HEAP32[(($438)>>2)]=$409;
   var $448=(($p_0+24)|0);
   var $_c=$438;
   HEAP32[(($448)>>2)]=$_c;
   var $449=(($p_0+12)|0);
   HEAP32[(($449)>>2)]=$p_0;
   var $450=(($p_0+8)|0);
   HEAP32[(($450)>>2)]=$p_0;
   label = 137; break;
  case 124: 
   var $452=HEAP32[(($438)>>2)];
   var $453=(($I18_0)|(0))==31;
   if ($453) { var $458 = 0;label = 126; break; } else { label = 125; break; }
  case 125: 
   var $455=$I18_0 >>> 1;
   var $456=(((25)-($455))|0);
   var $458 = $456;label = 126; break;
  case 126: 
   var $458;
   var $459=(($452+4)|0);
   var $460=HEAP32[(($459)>>2)];
   var $461=$460 & -8;
   var $462=(($461)|(0))==(($psize_1)|(0));
   if ($462) { var $T_0_lcssa = $452;label = 133; break; } else { label = 127; break; }
  case 127: 
   var $463=$psize_1 << $458;
   var $T_071 = $452;var $K19_072 = $463;label = 129; break;
  case 128: 
   var $465=$K19_072 << 1;
   var $466=(($473+4)|0);
   var $467=HEAP32[(($466)>>2)];
   var $468=$467 & -8;
   var $469=(($468)|(0))==(($psize_1)|(0));
   if ($469) { var $T_0_lcssa = $473;label = 133; break; } else { var $T_071 = $473;var $K19_072 = $465;label = 129; break; }
  case 129: 
   var $K19_072;
   var $T_071;
   var $471=$K19_072 >>> 31;
   var $472=(($T_071+16+($471<<2))|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($473)|(0))==0;
   if ($474) { label = 130; break; } else { label = 128; break; }
  case 130: 
   var $476=$472;
   var $477=HEAP32[((((10184)|0))>>2)];
   var $478=(($476)>>>(0)) < (($477)>>>(0));
   if ($478) { label = 132; break; } else { label = 131; break; }
  case 131: 
   HEAP32[(($472)>>2)]=$409;
   var $480=(($p_0+24)|0);
   var $T_0_c16=$T_071;
   HEAP32[(($480)>>2)]=$T_0_c16;
   var $481=(($p_0+12)|0);
   HEAP32[(($481)>>2)]=$p_0;
   var $482=(($p_0+8)|0);
   HEAP32[(($482)>>2)]=$p_0;
   label = 137; break;
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   var $T_0_lcssa;
   var $484=(($T_0_lcssa+8)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=$T_0_lcssa;
   var $487=HEAP32[((((10184)|0))>>2)];
   var $488=(($486)>>>(0)) < (($487)>>>(0));
   if ($488) { label = 136; break; } else { label = 134; break; }
  case 134: 
   var $490=$485;
   var $491=(($490)>>>(0)) < (($487)>>>(0));
   if ($491) { label = 136; break; } else { label = 135; break; }
  case 135: 
   var $493=(($485+12)|0);
   HEAP32[(($493)>>2)]=$409;
   HEAP32[(($484)>>2)]=$409;
   var $494=(($p_0+8)|0);
   var $_c15=$485;
   HEAP32[(($494)>>2)]=$_c15;
   var $495=(($p_0+12)|0);
   var $T_0_c=$T_0_lcssa;
   HEAP32[(($495)>>2)]=$T_0_c;
   var $496=(($p_0+24)|0);
   HEAP32[(($496)>>2)]=0;
   label = 137; break;
  case 136: 
   _abort();
   throw "Reached an unreachable!";
  case 137: 
   var $498=HEAP32[((((10200)|0))>>2)];
   var $499=((($498)-(1))|0);
   HEAP32[((((10200)|0))>>2)]=$499;
   var $500=(($499)|(0))==0;
   if ($500) { var $sp_0_in_i = ((10624)|0);label = 138; break; } else { label = 141; break; }
  case 138: 
   var $sp_0_in_i;
   var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
   var $501=(($sp_0_i)|(0))==0;
   var $502=(($sp_0_i+8)|0);
   if ($501) { label = 139; break; } else { var $sp_0_in_i = $502;label = 138; break; }
  case 139: 
   HEAP32[((((10200)|0))>>2)]=-1;
   label = 141; break;
  case 140: 
   _abort();
   throw "Reached an unreachable!";
  case 141: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($oldmem)|(0))==0;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=_malloc($bytes);
   var $mem_0 = $3;label = 11; break;
  case 3: 
   var $5=(($bytes)>>>(0)) > 4294967231;
   if ($5) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $7=___errno_location();
   HEAP32[(($7)>>2)]=12;
   var $mem_0 = 0;label = 11; break;
  case 5: 
   var $9=(($bytes)>>>(0)) < 11;
   if ($9) { var $14 = 16;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $11=((($bytes)+(11))|0);
   var $12=$11 & -8;
   var $14 = $12;label = 7; break;
  case 7: 
   var $14;
   var $15=((($oldmem)-(8))|0);
   var $16=$15;
   var $17=_try_realloc_chunk($16, $14);
   var $18=(($17)|(0))==0;
   if ($18) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $20=(($17+8)|0);
   var $21=$20;
   var $mem_0 = $21;label = 11; break;
  case 9: 
   var $23=_malloc($bytes);
   var $24=(($23)|(0))==0;
   if ($24) { var $mem_0 = 0;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $26=((($oldmem)-(4))|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 & -8;
   var $30=$28 & 3;
   var $31=(($30)|(0))==0;
   var $32=$31 ? 8 : 4;
   var $33=((($29)-($32))|0);
   var $34=(($33)>>>(0)) < (($bytes)>>>(0));
   var $35=$34 ? $33 : $bytes;
   assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
   _free($oldmem);
   var $mem_0 = $23;label = 11; break;
  case 11: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($p+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2 & -8;
   var $4=$p;
   var $5=(($4+$3)|0);
   var $6=$5;
   var $7=HEAP32[((((10184)|0))>>2)];
   var $8=(($4)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 72; break; } else { label = 2; break; }
  case 2: 
   var $10=$2 & 3;
   var $11=(($10)|(0))!=1;
   var $12=(($4)>>>(0)) < (($5)>>>(0));
   var $or_cond=$11 & $12;
   if ($or_cond) { label = 3; break; } else { label = 72; break; }
  case 3: 
   var $_sum3334=$3 | 4;
   var $14=(($4+$_sum3334)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 1;
   var $phitmp=(($17)|(0))==0;
   if ($phitmp) { label = 72; break; } else { label = 4; break; }
  case 4: 
   var $19=(($10)|(0))==0;
   if ($19) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $21=(($nb)>>>(0)) < 256;
   if ($21) { var $newp_0 = 0;label = 73; break; } else { label = 6; break; }
  case 6: 
   var $23=((($nb)+(4))|0);
   var $24=(($3)>>>(0)) < (($23)>>>(0));
   if ($24) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $26=((($3)-($nb))|0);
   var $27=HEAP32[((((10136)|0))>>2)];
   var $28=$27 << 1;
   var $29=(($26)>>>(0)) > (($28)>>>(0));
   if ($29) { label = 8; break; } else { var $newp_0 = $p;label = 73; break; }
  case 8: 
   var $newp_0 = 0;label = 73; break;
  case 9: 
   var $32=(($3)>>>(0)) < (($nb)>>>(0));
   if ($32) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $34=((($3)-($nb))|0);
   var $35=(($34)>>>(0)) > 15;
   if ($35) { label = 11; break; } else { var $newp_0 = $p;label = 73; break; }
  case 11: 
   var $37=(($4+$nb)|0);
   var $38=$37;
   var $39=$2 & 1;
   var $40=$39 | $nb;
   var $41=$40 | 2;
   HEAP32[(($1)>>2)]=$41;
   var $_sum29=((($nb)+(4))|0);
   var $42=(($4+$_sum29)|0);
   var $43=$42;
   var $44=$34 | 3;
   HEAP32[(($43)>>2)]=$44;
   var $45=HEAP32[(($15)>>2)];
   var $46=$45 | 1;
   HEAP32[(($15)>>2)]=$46;
   _dispose_chunk($38, $34);
   var $newp_0 = $p;label = 73; break;
  case 12: 
   var $48=HEAP32[((((10192)|0))>>2)];
   var $49=(($6)|(0))==(($48)|(0));
   if ($49) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $51=HEAP32[((((10180)|0))>>2)];
   var $52=((($51)+($3))|0);
   var $53=(($52)>>>(0)) > (($nb)>>>(0));
   if ($53) { label = 14; break; } else { var $newp_0 = 0;label = 73; break; }
  case 14: 
   var $55=((($52)-($nb))|0);
   var $56=(($4+$nb)|0);
   var $57=$56;
   var $58=$2 & 1;
   var $59=$58 | $nb;
   var $60=$59 | 2;
   HEAP32[(($1)>>2)]=$60;
   var $_sum28=((($nb)+(4))|0);
   var $61=(($4+$_sum28)|0);
   var $62=$61;
   var $63=$55 | 1;
   HEAP32[(($62)>>2)]=$63;
   HEAP32[((((10192)|0))>>2)]=$57;
   HEAP32[((((10180)|0))>>2)]=$55;
   var $newp_0 = $p;label = 73; break;
  case 15: 
   var $65=HEAP32[((((10188)|0))>>2)];
   var $66=(($6)|(0))==(($65)|(0));
   if ($66) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $68=HEAP32[((((10176)|0))>>2)];
   var $69=((($68)+($3))|0);
   var $70=(($69)>>>(0)) < (($nb)>>>(0));
   if ($70) { var $newp_0 = 0;label = 73; break; } else { label = 17; break; }
  case 17: 
   var $72=((($69)-($nb))|0);
   var $73=(($72)>>>(0)) > 15;
   if ($73) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $75=(($4+$nb)|0);
   var $76=$75;
   var $77=(($4+$69)|0);
   var $78=$2 & 1;
   var $79=$78 | $nb;
   var $80=$79 | 2;
   HEAP32[(($1)>>2)]=$80;
   var $_sum25=((($nb)+(4))|0);
   var $81=(($4+$_sum25)|0);
   var $82=$81;
   var $83=$72 | 1;
   HEAP32[(($82)>>2)]=$83;
   var $84=$77;
   HEAP32[(($84)>>2)]=$72;
   var $_sum26=((($69)+(4))|0);
   var $85=(($4+$_sum26)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=$87 & -2;
   HEAP32[(($86)>>2)]=$88;
   var $storemerge = $76;var $storemerge27 = $72;label = 20; break;
  case 19: 
   var $90=$2 & 1;
   var $91=$90 | $69;
   var $92=$91 | 2;
   HEAP32[(($1)>>2)]=$92;
   var $_sum23=((($69)+(4))|0);
   var $93=(($4+$_sum23)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$95 | 1;
   HEAP32[(($94)>>2)]=$96;
   var $storemerge = 0;var $storemerge27 = 0;label = 20; break;
  case 20: 
   var $storemerge27;
   var $storemerge;
   HEAP32[((((10176)|0))>>2)]=$storemerge27;
   HEAP32[((((10188)|0))>>2)]=$storemerge;
   var $newp_0 = $p;label = 73; break;
  case 21: 
   var $99=$16 & 2;
   var $100=(($99)|(0))==0;
   if ($100) { label = 22; break; } else { var $newp_0 = 0;label = 73; break; }
  case 22: 
   var $102=$16 & -8;
   var $103=((($102)+($3))|0);
   var $104=(($103)>>>(0)) < (($nb)>>>(0));
   if ($104) { var $newp_0 = 0;label = 73; break; } else { label = 23; break; }
  case 23: 
   var $106=((($103)-($nb))|0);
   var $107=$16 >>> 3;
   var $108=(($16)>>>(0)) < 256;
   if ($108) { label = 24; break; } else { label = 36; break; }
  case 24: 
   var $_sum17=((($3)+(8))|0);
   var $110=(($4+$_sum17)|0);
   var $111=$110;
   var $112=HEAP32[(($111)>>2)];
   var $_sum18=((($3)+(12))|0);
   var $113=(($4+$_sum18)|0);
   var $114=$113;
   var $115=HEAP32[(($114)>>2)];
   var $116=$107 << 1;
   var $117=((10208+($116<<2))|0);
   var $118=$117;
   var $119=(($112)|(0))==(($118)|(0));
   if ($119) { label = 27; break; } else { label = 25; break; }
  case 25: 
   var $121=$112;
   var $122=(($121)>>>(0)) < (($7)>>>(0));
   if ($122) { label = 35; break; } else { label = 26; break; }
  case 26: 
   var $124=(($112+12)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125)|(0))==(($6)|(0));
   if ($126) { label = 27; break; } else { label = 35; break; }
  case 27: 
   var $127=(($115)|(0))==(($112)|(0));
   if ($127) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $129=1 << $107;
   var $130=$129 ^ -1;
   var $131=HEAP32[((((10168)|0))>>2)];
   var $132=$131 & $130;
   HEAP32[((((10168)|0))>>2)]=$132;
   label = 69; break;
  case 29: 
   var $134=(($115)|(0))==(($118)|(0));
   if ($134) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $_pre=(($115+8)|0);
   var $_pre_phi = $_pre;label = 33; break;
  case 31: 
   var $136=$115;
   var $137=(($136)>>>(0)) < (($7)>>>(0));
   if ($137) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $139=(($115+8)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140)|(0))==(($6)|(0));
   if ($141) { var $_pre_phi = $139;label = 33; break; } else { label = 34; break; }
  case 33: 
   var $_pre_phi;
   var $142=(($112+12)|0);
   HEAP32[(($142)>>2)]=$115;
   HEAP32[(($_pre_phi)>>2)]=$112;
   label = 69; break;
  case 34: 
   _abort();
   throw "Reached an unreachable!";
  case 35: 
   _abort();
   throw "Reached an unreachable!";
  case 36: 
   var $144=$5;
   var $_sum=((($3)+(24))|0);
   var $145=(($4+$_sum)|0);
   var $146=$145;
   var $147=HEAP32[(($146)>>2)];
   var $_sum2=((($3)+(12))|0);
   var $148=(($4+$_sum2)|0);
   var $149=$148;
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150)|(0))==(($144)|(0));
   if ($151) { label = 42; break; } else { label = 37; break; }
  case 37: 
   var $_sum14=((($3)+(8))|0);
   var $153=(($4+$_sum14)|0);
   var $154=$153;
   var $155=HEAP32[(($154)>>2)];
   var $156=$155;
   var $157=(($156)>>>(0)) < (($7)>>>(0));
   if ($157) { label = 41; break; } else { label = 38; break; }
  case 38: 
   var $159=(($155+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=(($160)|(0))==(($144)|(0));
   if ($161) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $163=(($150+8)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==(($144)|(0));
   if ($165) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($159)>>2)]=$150;
   HEAP32[(($163)>>2)]=$155;
   var $R_1 = $150;label = 49; break;
  case 41: 
   _abort();
   throw "Reached an unreachable!";
  case 42: 
   var $_sum4=((($3)+(20))|0);
   var $168=(($4+$_sum4)|0);
   var $169=$168;
   var $170=HEAP32[(($169)>>2)];
   var $171=(($170)|(0))==0;
   if ($171) { label = 43; break; } else { var $R_0 = $170;var $RP_0 = $169;label = 44; break; }
  case 43: 
   var $_sum3=((($3)+(16))|0);
   var $173=(($4+$_sum3)|0);
   var $174=$173;
   var $175=HEAP32[(($174)>>2)];
   var $176=(($175)|(0))==0;
   if ($176) { var $R_1 = 0;label = 49; break; } else { var $R_0 = $175;var $RP_0 = $174;label = 44; break; }
  case 44: 
   var $RP_0;
   var $R_0;
   var $177=(($R_0+20)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178)|(0))==0;
   if ($179) { label = 45; break; } else { var $R_0 = $178;var $RP_0 = $177;label = 44; break; }
  case 45: 
   var $181=(($R_0+16)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182)|(0))==0;
   if ($183) { label = 46; break; } else { var $R_0 = $182;var $RP_0 = $181;label = 44; break; }
  case 46: 
   var $185=$RP_0;
   var $186=(($185)>>>(0)) < (($7)>>>(0));
   if ($186) { label = 48; break; } else { label = 47; break; }
  case 47: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $R_1;
   var $190=(($147)|(0))==0;
   if ($190) { label = 69; break; } else { label = 50; break; }
  case 50: 
   var $_sum11=((($3)+(28))|0);
   var $192=(($4+$_sum11)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=((10472+($194<<2))|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($144)|(0))==(($196)|(0));
   if ($197) { label = 51; break; } else { label = 53; break; }
  case 51: 
   HEAP32[(($195)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 52; break; } else { label = 59; break; }
  case 52: 
   var $199=HEAP32[(($193)>>2)];
   var $200=1 << $199;
   var $201=$200 ^ -1;
   var $202=HEAP32[((((10172)|0))>>2)];
   var $203=$202 & $201;
   HEAP32[((((10172)|0))>>2)]=$203;
   label = 69; break;
  case 53: 
   var $205=$147;
   var $206=HEAP32[((((10184)|0))>>2)];
   var $207=(($205)>>>(0)) < (($206)>>>(0));
   if ($207) { label = 57; break; } else { label = 54; break; }
  case 54: 
   var $209=(($147+16)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=(($210)|(0))==(($144)|(0));
   if ($211) { label = 55; break; } else { label = 56; break; }
  case 55: 
   HEAP32[(($209)>>2)]=$R_1;
   label = 58; break;
  case 56: 
   var $214=(($147+20)|0);
   HEAP32[(($214)>>2)]=$R_1;
   label = 58; break;
  case 57: 
   _abort();
   throw "Reached an unreachable!";
  case 58: 
   var $217=(($R_1)|(0))==0;
   if ($217) { label = 69; break; } else { label = 59; break; }
  case 59: 
   var $219=$R_1;
   var $220=HEAP32[((((10184)|0))>>2)];
   var $221=(($219)>>>(0)) < (($220)>>>(0));
   if ($221) { label = 68; break; } else { label = 60; break; }
  case 60: 
   var $223=(($R_1+24)|0);
   HEAP32[(($223)>>2)]=$147;
   var $_sum12=((($3)+(16))|0);
   var $224=(($4+$_sum12)|0);
   var $225=$224;
   var $226=HEAP32[(($225)>>2)];
   var $227=(($226)|(0))==0;
   if ($227) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $229=$226;
   var $230=HEAP32[((((10184)|0))>>2)];
   var $231=(($229)>>>(0)) < (($230)>>>(0));
   if ($231) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $233=(($R_1+16)|0);
   HEAP32[(($233)>>2)]=$226;
   var $234=(($226+24)|0);
   HEAP32[(($234)>>2)]=$R_1;
   label = 64; break;
  case 63: 
   _abort();
   throw "Reached an unreachable!";
  case 64: 
   var $_sum13=((($3)+(20))|0);
   var $237=(($4+$_sum13)|0);
   var $238=$237;
   var $239=HEAP32[(($238)>>2)];
   var $240=(($239)|(0))==0;
   if ($240) { label = 69; break; } else { label = 65; break; }
  case 65: 
   var $242=$239;
   var $243=HEAP32[((((10184)|0))>>2)];
   var $244=(($242)>>>(0)) < (($243)>>>(0));
   if ($244) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $246=(($R_1+20)|0);
   HEAP32[(($246)>>2)]=$239;
   var $247=(($239+24)|0);
   HEAP32[(($247)>>2)]=$R_1;
   label = 69; break;
  case 67: 
   _abort();
   throw "Reached an unreachable!";
  case 68: 
   _abort();
   throw "Reached an unreachable!";
  case 69: 
   var $251=(($106)>>>(0)) < 16;
   if ($251) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $253=HEAP32[(($1)>>2)];
   var $254=$253 & 1;
   var $255=$103 | $254;
   var $256=$255 | 2;
   HEAP32[(($1)>>2)]=$256;
   var $_sum910=$103 | 4;
   var $257=(($4+$_sum910)|0);
   var $258=$257;
   var $259=HEAP32[(($258)>>2)];
   var $260=$259 | 1;
   HEAP32[(($258)>>2)]=$260;
   var $newp_0 = $p;label = 73; break;
  case 71: 
   var $262=(($4+$nb)|0);
   var $263=$262;
   var $264=HEAP32[(($1)>>2)];
   var $265=$264 & 1;
   var $266=$265 | $nb;
   var $267=$266 | 2;
   HEAP32[(($1)>>2)]=$267;
   var $_sum5=((($nb)+(4))|0);
   var $268=(($4+$_sum5)|0);
   var $269=$268;
   var $270=$106 | 3;
   HEAP32[(($269)>>2)]=$270;
   var $_sum78=$103 | 4;
   var $271=(($4+$_sum78)|0);
   var $272=$271;
   var $273=HEAP32[(($272)>>2)];
   var $274=$273 | 1;
   HEAP32[(($272)>>2)]=$274;
   _dispose_chunk($263, $106);
   var $newp_0 = $p;label = 73; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   var $newp_0;
   return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p, $psize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$p;
   var $2=(($1+$psize)|0);
   var $3=$2;
   var $4=(($p+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { var $_0 = $p;var $_02 = $psize;label = 54; break; }
  case 2: 
   var $9=(($p)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$5 & 3;
   var $12=(($11)|(0))==0;
   if ($12) { label = 135; break; } else { label = 3; break; }
  case 3: 
   var $14=(((-$10))|0);
   var $15=(($1+$14)|0);
   var $16=$15;
   var $17=((($10)+($psize))|0);
   var $18=HEAP32[((((10184)|0))>>2)];
   var $19=(($15)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 53; break; } else { label = 4; break; }
  case 4: 
   var $21=HEAP32[((((10188)|0))>>2)];
   var $22=(($16)|(0))==(($21)|(0));
   if ($22) { label = 51; break; } else { label = 5; break; }
  case 5: 
   var $24=$10 >>> 3;
   var $25=(($10)>>>(0)) < 256;
   if ($25) { label = 6; break; } else { label = 18; break; }
  case 6: 
   var $_sum35=(((8)-($10))|0);
   var $27=(($1+$_sum35)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $_sum36=(((12)-($10))|0);
   var $30=(($1+$_sum36)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$24 << 1;
   var $34=((10208+($33<<2))|0);
   var $35=$34;
   var $36=(($29)|(0))==(($35)|(0));
   if ($36) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $38=$29;
   var $39=(($38)>>>(0)) < (($18)>>>(0));
   if ($39) { label = 17; break; } else { label = 8; break; }
  case 8: 
   var $41=(($29+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==(($16)|(0));
   if ($43) { label = 9; break; } else { label = 17; break; }
  case 9: 
   var $44=(($32)|(0))==(($29)|(0));
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $46=1 << $24;
   var $47=$46 ^ -1;
   var $48=HEAP32[((((10168)|0))>>2)];
   var $49=$48 & $47;
   HEAP32[((((10168)|0))>>2)]=$49;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 11: 
   var $51=(($32)|(0))==(($35)|(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $_pre68=(($32+8)|0);
   var $_pre_phi69 = $_pre68;label = 15; break;
  case 13: 
   var $53=$32;
   var $54=(($53)>>>(0)) < (($18)>>>(0));
   if ($54) { label = 16; break; } else { label = 14; break; }
  case 14: 
   var $56=(($32+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==(($16)|(0));
   if ($58) { var $_pre_phi69 = $56;label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre_phi69;
   var $59=(($29+12)|0);
   HEAP32[(($59)>>2)]=$32;
   HEAP32[(($_pre_phi69)>>2)]=$29;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 16: 
   _abort();
   throw "Reached an unreachable!";
  case 17: 
   _abort();
   throw "Reached an unreachable!";
  case 18: 
   var $61=$15;
   var $_sum26=(((24)-($10))|0);
   var $62=(($1+$_sum26)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $_sum27=(((12)-($10))|0);
   var $65=(($1+$_sum27)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==(($61)|(0));
   if ($68) { label = 24; break; } else { label = 19; break; }
  case 19: 
   var $_sum33=(((8)-($10))|0);
   var $70=(($1+$_sum33)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $73=$72;
   var $74=(($73)>>>(0)) < (($18)>>>(0));
   if ($74) { label = 23; break; } else { label = 20; break; }
  case 20: 
   var $76=(($72+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))==(($61)|(0));
   if ($78) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $80=(($67+8)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))==(($61)|(0));
   if ($82) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[(($76)>>2)]=$67;
   HEAP32[(($80)>>2)]=$72;
   var $R_1 = $67;label = 31; break;
  case 23: 
   _abort();
   throw "Reached an unreachable!";
  case 24: 
   var $_sum28=(((16)-($10))|0);
   var $_sum29=((($_sum28)+(4))|0);
   var $85=(($1+$_sum29)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))==0;
   if ($88) { label = 25; break; } else { var $R_0 = $87;var $RP_0 = $86;label = 26; break; }
  case 25: 
   var $90=(($1+$_sum28)|0);
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))==0;
   if ($93) { var $R_1 = 0;label = 31; break; } else { var $R_0 = $92;var $RP_0 = $91;label = 26; break; }
  case 26: 
   var $RP_0;
   var $R_0;
   var $94=(($R_0+20)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 27; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 26; break; }
  case 27: 
   var $98=(($R_0+16)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   if ($100) { label = 28; break; } else { var $R_0 = $99;var $RP_0 = $98;label = 26; break; }
  case 28: 
   var $102=$RP_0;
   var $103=(($102)>>>(0)) < (($18)>>>(0));
   if ($103) { label = 30; break; } else { label = 29; break; }
  case 29: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 31; break;
  case 30: 
   _abort();
   throw "Reached an unreachable!";
  case 31: 
   var $R_1;
   var $107=(($64)|(0))==0;
   if ($107) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 32; break; }
  case 32: 
   var $_sum30=(((28)-($10))|0);
   var $109=(($1+$_sum30)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=((10472+($111<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($61)|(0))==(($113)|(0));
   if ($114) { label = 33; break; } else { label = 35; break; }
  case 33: 
   HEAP32[(($112)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 34; break; } else { label = 41; break; }
  case 34: 
   var $116=HEAP32[(($110)>>2)];
   var $117=1 << $116;
   var $118=$117 ^ -1;
   var $119=HEAP32[((((10172)|0))>>2)];
   var $120=$119 & $118;
   HEAP32[((((10172)|0))>>2)]=$120;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 35: 
   var $122=$64;
   var $123=HEAP32[((((10184)|0))>>2)];
   var $124=(($122)>>>(0)) < (($123)>>>(0));
   if ($124) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $126=(($64+16)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127)|(0))==(($61)|(0));
   if ($128) { label = 37; break; } else { label = 38; break; }
  case 37: 
   HEAP32[(($126)>>2)]=$R_1;
   label = 40; break;
  case 38: 
   var $131=(($64+20)|0);
   HEAP32[(($131)>>2)]=$R_1;
   label = 40; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $134=(($R_1)|(0))==0;
   if ($134) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 41; break; }
  case 41: 
   var $136=$R_1;
   var $137=HEAP32[((((10184)|0))>>2)];
   var $138=(($136)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 50; break; } else { label = 42; break; }
  case 42: 
   var $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   var $_sum31=(((16)-($10))|0);
   var $141=(($1+$_sum31)|0);
   var $142=$141;
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143)|(0))==0;
   if ($144) { label = 46; break; } else { label = 43; break; }
  case 43: 
   var $146=$143;
   var $147=HEAP32[((((10184)|0))>>2)];
   var $148=(($146)>>>(0)) < (($147)>>>(0));
   if ($148) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $150=(($R_1+16)|0);
   HEAP32[(($150)>>2)]=$143;
   var $151=(($143+24)|0);
   HEAP32[(($151)>>2)]=$R_1;
   label = 46; break;
  case 45: 
   _abort();
   throw "Reached an unreachable!";
  case 46: 
   var $_sum32=((($_sum31)+(4))|0);
   var $154=(($1+$_sum32)|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|(0))==0;
   if ($157) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 47; break; }
  case 47: 
   var $159=$156;
   var $160=HEAP32[((((10184)|0))>>2)];
   var $161=(($159)>>>(0)) < (($160)>>>(0));
   if ($161) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $163=(($R_1+20)|0);
   HEAP32[(($163)>>2)]=$156;
   var $164=(($156+24)|0);
   HEAP32[(($164)>>2)]=$R_1;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 49: 
   _abort();
   throw "Reached an unreachable!";
  case 50: 
   _abort();
   throw "Reached an unreachable!";
  case 51: 
   var $_sum=((($psize)+(4))|0);
   var $168=(($1+$_sum)|0);
   var $169=$168;
   var $170=HEAP32[(($169)>>2)];
   var $171=$170 & 3;
   var $172=(($171)|(0))==3;
   if ($172) { label = 52; break; } else { var $_0 = $16;var $_02 = $17;label = 54; break; }
  case 52: 
   HEAP32[((((10176)|0))>>2)]=$17;
   var $174=HEAP32[(($169)>>2)];
   var $175=$174 & -2;
   HEAP32[(($169)>>2)]=$175;
   var $176=$17 | 1;
   var $_sum24=(((4)-($10))|0);
   var $177=(($1+$_sum24)|0);
   var $178=$177;
   HEAP32[(($178)>>2)]=$176;
   var $179=$2;
   HEAP32[(($179)>>2)]=$17;
   label = 135; break;
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_02;
   var $_0;
   var $181=HEAP32[((((10184)|0))>>2)];
   var $182=(($2)>>>(0)) < (($181)>>>(0));
   if ($182) { label = 134; break; } else { label = 55; break; }
  case 55: 
   var $_sum1=((($psize)+(4))|0);
   var $184=(($1+$_sum1)|0);
   var $185=$184;
   var $186=HEAP32[(($185)>>2)];
   var $187=$186 & 2;
   var $188=(($187)|(0))==0;
   if ($188) { label = 56; break; } else { label = 109; break; }
  case 56: 
   var $190=HEAP32[((((10192)|0))>>2)];
   var $191=(($3)|(0))==(($190)|(0));
   if ($191) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $193=HEAP32[((((10180)|0))>>2)];
   var $194=((($193)+($_02))|0);
   HEAP32[((((10180)|0))>>2)]=$194;
   HEAP32[((((10192)|0))>>2)]=$_0;
   var $195=$194 | 1;
   var $196=(($_0+4)|0);
   HEAP32[(($196)>>2)]=$195;
   var $197=HEAP32[((((10188)|0))>>2)];
   var $198=(($_0)|(0))==(($197)|(0));
   if ($198) { label = 58; break; } else { label = 135; break; }
  case 58: 
   HEAP32[((((10188)|0))>>2)]=0;
   HEAP32[((((10176)|0))>>2)]=0;
   label = 135; break;
  case 59: 
   var $201=HEAP32[((((10188)|0))>>2)];
   var $202=(($3)|(0))==(($201)|(0));
   if ($202) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $204=HEAP32[((((10176)|0))>>2)];
   var $205=((($204)+($_02))|0);
   HEAP32[((((10176)|0))>>2)]=$205;
   HEAP32[((((10188)|0))>>2)]=$_0;
   var $206=$205 | 1;
   var $207=(($_0+4)|0);
   HEAP32[(($207)>>2)]=$206;
   var $208=$_0;
   var $209=(($208+$205)|0);
   var $210=$209;
   HEAP32[(($210)>>2)]=$205;
   label = 135; break;
  case 61: 
   var $212=$186 & -8;
   var $213=((($212)+($_02))|0);
   var $214=$186 >>> 3;
   var $215=(($186)>>>(0)) < 256;
   if ($215) { label = 62; break; } else { label = 74; break; }
  case 62: 
   var $_sum20=((($psize)+(8))|0);
   var $217=(($1+$_sum20)|0);
   var $218=$217;
   var $219=HEAP32[(($218)>>2)];
   var $_sum21=((($psize)+(12))|0);
   var $220=(($1+$_sum21)|0);
   var $221=$220;
   var $222=HEAP32[(($221)>>2)];
   var $223=$214 << 1;
   var $224=((10208+($223<<2))|0);
   var $225=$224;
   var $226=(($219)|(0))==(($225)|(0));
   if ($226) { label = 65; break; } else { label = 63; break; }
  case 63: 
   var $228=$219;
   var $229=(($228)>>>(0)) < (($181)>>>(0));
   if ($229) { label = 73; break; } else { label = 64; break; }
  case 64: 
   var $231=(($219+12)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==(($3)|(0));
   if ($233) { label = 65; break; } else { label = 73; break; }
  case 65: 
   var $234=(($222)|(0))==(($219)|(0));
   if ($234) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $236=1 << $214;
   var $237=$236 ^ -1;
   var $238=HEAP32[((((10168)|0))>>2)];
   var $239=$238 & $237;
   HEAP32[((((10168)|0))>>2)]=$239;
   label = 107; break;
  case 67: 
   var $241=(($222)|(0))==(($225)|(0));
   if ($241) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $_pre66=(($222+8)|0);
   var $_pre_phi67 = $_pre66;label = 71; break;
  case 69: 
   var $243=$222;
   var $244=(($243)>>>(0)) < (($181)>>>(0));
   if ($244) { label = 72; break; } else { label = 70; break; }
  case 70: 
   var $246=(($222+8)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247)|(0))==(($3)|(0));
   if ($248) { var $_pre_phi67 = $246;label = 71; break; } else { label = 72; break; }
  case 71: 
   var $_pre_phi67;
   var $249=(($219+12)|0);
   HEAP32[(($249)>>2)]=$222;
   HEAP32[(($_pre_phi67)>>2)]=$219;
   label = 107; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $251=$2;
   var $_sum2=((($psize)+(24))|0);
   var $252=(($1+$_sum2)|0);
   var $253=$252;
   var $254=HEAP32[(($253)>>2)];
   var $_sum3=((($psize)+(12))|0);
   var $255=(($1+$_sum3)|0);
   var $256=$255;
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257)|(0))==(($251)|(0));
   if ($258) { label = 80; break; } else { label = 75; break; }
  case 75: 
   var $_sum18=((($psize)+(8))|0);
   var $260=(($1+$_sum18)|0);
   var $261=$260;
   var $262=HEAP32[(($261)>>2)];
   var $263=$262;
   var $264=(($263)>>>(0)) < (($181)>>>(0));
   if ($264) { label = 79; break; } else { label = 76; break; }
  case 76: 
   var $266=(($262+12)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267)|(0))==(($251)|(0));
   if ($268) { label = 77; break; } else { label = 79; break; }
  case 77: 
   var $270=(($257+8)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))==(($251)|(0));
   if ($272) { label = 78; break; } else { label = 79; break; }
  case 78: 
   HEAP32[(($266)>>2)]=$257;
   HEAP32[(($270)>>2)]=$262;
   var $R7_1 = $257;label = 87; break;
  case 79: 
   _abort();
   throw "Reached an unreachable!";
  case 80: 
   var $_sum5=((($psize)+(20))|0);
   var $275=(($1+$_sum5)|0);
   var $276=$275;
   var $277=HEAP32[(($276)>>2)];
   var $278=(($277)|(0))==0;
   if ($278) { label = 81; break; } else { var $R7_0 = $277;var $RP9_0 = $276;label = 82; break; }
  case 81: 
   var $_sum4=((($psize)+(16))|0);
   var $280=(($1+$_sum4)|0);
   var $281=$280;
   var $282=HEAP32[(($281)>>2)];
   var $283=(($282)|(0))==0;
   if ($283) { var $R7_1 = 0;label = 87; break; } else { var $R7_0 = $282;var $RP9_0 = $281;label = 82; break; }
  case 82: 
   var $RP9_0;
   var $R7_0;
   var $284=(($R7_0+20)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($285)|(0))==0;
   if ($286) { label = 83; break; } else { var $R7_0 = $285;var $RP9_0 = $284;label = 82; break; }
  case 83: 
   var $288=(($R7_0+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==0;
   if ($290) { label = 84; break; } else { var $R7_0 = $289;var $RP9_0 = $288;label = 82; break; }
  case 84: 
   var $292=$RP9_0;
   var $293=(($292)>>>(0)) < (($181)>>>(0));
   if ($293) { label = 86; break; } else { label = 85; break; }
  case 85: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 87; break;
  case 86: 
   _abort();
   throw "Reached an unreachable!";
  case 87: 
   var $R7_1;
   var $297=(($254)|(0))==0;
   if ($297) { label = 107; break; } else { label = 88; break; }
  case 88: 
   var $_sum15=((($psize)+(28))|0);
   var $299=(($1+$_sum15)|0);
   var $300=$299;
   var $301=HEAP32[(($300)>>2)];
   var $302=((10472+($301<<2))|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(($251)|(0))==(($303)|(0));
   if ($304) { label = 89; break; } else { label = 91; break; }
  case 89: 
   HEAP32[(($302)>>2)]=$R7_1;
   var $cond53=(($R7_1)|(0))==0;
   if ($cond53) { label = 90; break; } else { label = 97; break; }
  case 90: 
   var $306=HEAP32[(($300)>>2)];
   var $307=1 << $306;
   var $308=$307 ^ -1;
   var $309=HEAP32[((((10172)|0))>>2)];
   var $310=$309 & $308;
   HEAP32[((((10172)|0))>>2)]=$310;
   label = 107; break;
  case 91: 
   var $312=$254;
   var $313=HEAP32[((((10184)|0))>>2)];
   var $314=(($312)>>>(0)) < (($313)>>>(0));
   if ($314) { label = 95; break; } else { label = 92; break; }
  case 92: 
   var $316=(($254+16)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317)|(0))==(($251)|(0));
   if ($318) { label = 93; break; } else { label = 94; break; }
  case 93: 
   HEAP32[(($316)>>2)]=$R7_1;
   label = 96; break;
  case 94: 
   var $321=(($254+20)|0);
   HEAP32[(($321)>>2)]=$R7_1;
   label = 96; break;
  case 95: 
   _abort();
   throw "Reached an unreachable!";
  case 96: 
   var $324=(($R7_1)|(0))==0;
   if ($324) { label = 107; break; } else { label = 97; break; }
  case 97: 
   var $326=$R7_1;
   var $327=HEAP32[((((10184)|0))>>2)];
   var $328=(($326)>>>(0)) < (($327)>>>(0));
   if ($328) { label = 106; break; } else { label = 98; break; }
  case 98: 
   var $330=(($R7_1+24)|0);
   HEAP32[(($330)>>2)]=$254;
   var $_sum16=((($psize)+(16))|0);
   var $331=(($1+$_sum16)|0);
   var $332=$331;
   var $333=HEAP32[(($332)>>2)];
   var $334=(($333)|(0))==0;
   if ($334) { label = 102; break; } else { label = 99; break; }
  case 99: 
   var $336=$333;
   var $337=HEAP32[((((10184)|0))>>2)];
   var $338=(($336)>>>(0)) < (($337)>>>(0));
   if ($338) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $340=(($R7_1+16)|0);
   HEAP32[(($340)>>2)]=$333;
   var $341=(($333+24)|0);
   HEAP32[(($341)>>2)]=$R7_1;
   label = 102; break;
  case 101: 
   _abort();
   throw "Reached an unreachable!";
  case 102: 
   var $_sum17=((($psize)+(20))|0);
   var $344=(($1+$_sum17)|0);
   var $345=$344;
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   if ($347) { label = 107; break; } else { label = 103; break; }
  case 103: 
   var $349=$346;
   var $350=HEAP32[((((10184)|0))>>2)];
   var $351=(($349)>>>(0)) < (($350)>>>(0));
   if ($351) { label = 105; break; } else { label = 104; break; }
  case 104: 
   var $353=(($R7_1+20)|0);
   HEAP32[(($353)>>2)]=$346;
   var $354=(($346+24)|0);
   HEAP32[(($354)>>2)]=$R7_1;
   label = 107; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $358=$213 | 1;
   var $359=(($_0+4)|0);
   HEAP32[(($359)>>2)]=$358;
   var $360=$_0;
   var $361=(($360+$213)|0);
   var $362=$361;
   HEAP32[(($362)>>2)]=$213;
   var $363=HEAP32[((((10188)|0))>>2)];
   var $364=(($_0)|(0))==(($363)|(0));
   if ($364) { label = 108; break; } else { var $_1 = $213;label = 110; break; }
  case 108: 
   HEAP32[((((10176)|0))>>2)]=$213;
   label = 135; break;
  case 109: 
   var $367=$186 & -2;
   HEAP32[(($185)>>2)]=$367;
   var $368=$_02 | 1;
   var $369=(($_0+4)|0);
   HEAP32[(($369)>>2)]=$368;
   var $370=$_0;
   var $371=(($370+$_02)|0);
   var $372=$371;
   HEAP32[(($372)>>2)]=$_02;
   var $_1 = $_02;label = 110; break;
  case 110: 
   var $_1;
   var $374=$_1 >>> 3;
   var $375=(($_1)>>>(0)) < 256;
   if ($375) { label = 111; break; } else { label = 116; break; }
  case 111: 
   var $377=$374 << 1;
   var $378=((10208+($377<<2))|0);
   var $379=$378;
   var $380=HEAP32[((((10168)|0))>>2)];
   var $381=1 << $374;
   var $382=$380 & $381;
   var $383=(($382)|(0))==0;
   if ($383) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $385=$380 | $381;
   HEAP32[((((10168)|0))>>2)]=$385;
   var $_sum13_pre=((($377)+(2))|0);
   var $_pre=((10208+($_sum13_pre<<2))|0);
   var $F16_0 = $379;var $_pre_phi = $_pre;label = 115; break;
  case 113: 
   var $_sum14=((($377)+(2))|0);
   var $387=((10208+($_sum14<<2))|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=$388;
   var $390=HEAP32[((((10184)|0))>>2)];
   var $391=(($389)>>>(0)) < (($390)>>>(0));
   if ($391) { label = 114; break; } else { var $F16_0 = $388;var $_pre_phi = $387;label = 115; break; }
  case 114: 
   _abort();
   throw "Reached an unreachable!";
  case 115: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$_0;
   var $394=(($F16_0+12)|0);
   HEAP32[(($394)>>2)]=$_0;
   var $395=(($_0+8)|0);
   HEAP32[(($395)>>2)]=$F16_0;
   var $396=(($_0+12)|0);
   HEAP32[(($396)>>2)]=$379;
   label = 135; break;
  case 116: 
   var $398=$_0;
   var $399=$_1 >>> 8;
   var $400=(($399)|(0))==0;
   if ($400) { var $I19_0 = 0;label = 119; break; } else { label = 117; break; }
  case 117: 
   var $402=(($_1)>>>(0)) > 16777215;
   if ($402) { var $I19_0 = 31;label = 119; break; } else { label = 118; break; }
  case 118: 
   var $404=((($399)+(1048320))|0);
   var $405=$404 >>> 16;
   var $406=$405 & 8;
   var $407=$399 << $406;
   var $408=((($407)+(520192))|0);
   var $409=$408 >>> 16;
   var $410=$409 & 4;
   var $411=$410 | $406;
   var $412=$407 << $410;
   var $413=((($412)+(245760))|0);
   var $414=$413 >>> 16;
   var $415=$414 & 2;
   var $416=$411 | $415;
   var $417=(((14)-($416))|0);
   var $418=$412 << $415;
   var $419=$418 >>> 15;
   var $420=((($417)+($419))|0);
   var $421=$420 << 1;
   var $422=((($420)+(7))|0);
   var $423=$_1 >>> (($422)>>>(0));
   var $424=$423 & 1;
   var $425=$424 | $421;
   var $I19_0 = $425;label = 119; break;
  case 119: 
   var $I19_0;
   var $427=((10472+($I19_0<<2))|0);
   var $428=(($_0+28)|0);
   var $I19_0_c=$I19_0;
   HEAP32[(($428)>>2)]=$I19_0_c;
   var $429=(($_0+20)|0);
   HEAP32[(($429)>>2)]=0;
   var $430=(($_0+16)|0);
   HEAP32[(($430)>>2)]=0;
   var $431=HEAP32[((((10172)|0))>>2)];
   var $432=1 << $I19_0;
   var $433=$431 & $432;
   var $434=(($433)|(0))==0;
   if ($434) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $436=$431 | $432;
   HEAP32[((((10172)|0))>>2)]=$436;
   HEAP32[(($427)>>2)]=$398;
   var $437=(($_0+24)|0);
   var $_c=$427;
   HEAP32[(($437)>>2)]=$_c;
   var $438=(($_0+12)|0);
   HEAP32[(($438)>>2)]=$_0;
   var $439=(($_0+8)|0);
   HEAP32[(($439)>>2)]=$_0;
   label = 135; break;
  case 121: 
   var $441=HEAP32[(($427)>>2)];
   var $442=(($I19_0)|(0))==31;
   if ($442) { var $447 = 0;label = 123; break; } else { label = 122; break; }
  case 122: 
   var $444=$I19_0 >>> 1;
   var $445=(((25)-($444))|0);
   var $447 = $445;label = 123; break;
  case 123: 
   var $447;
   var $448=(($441+4)|0);
   var $449=HEAP32[(($448)>>2)];
   var $450=$449 & -8;
   var $451=(($450)|(0))==(($_1)|(0));
   if ($451) { var $T_0_lcssa = $441;label = 130; break; } else { label = 124; break; }
  case 124: 
   var $452=$_1 << $447;
   var $T_055 = $441;var $K20_056 = $452;label = 126; break;
  case 125: 
   var $454=$K20_056 << 1;
   var $455=(($462+4)|0);
   var $456=HEAP32[(($455)>>2)];
   var $457=$456 & -8;
   var $458=(($457)|(0))==(($_1)|(0));
   if ($458) { var $T_0_lcssa = $462;label = 130; break; } else { var $T_055 = $462;var $K20_056 = $454;label = 126; break; }
  case 126: 
   var $K20_056;
   var $T_055;
   var $460=$K20_056 >>> 31;
   var $461=(($T_055+16+($460<<2))|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=(($462)|(0))==0;
   if ($463) { label = 127; break; } else { label = 125; break; }
  case 127: 
   var $465=$461;
   var $466=HEAP32[((((10184)|0))>>2)];
   var $467=(($465)>>>(0)) < (($466)>>>(0));
   if ($467) { label = 129; break; } else { label = 128; break; }
  case 128: 
   HEAP32[(($461)>>2)]=$398;
   var $469=(($_0+24)|0);
   var $T_0_c10=$T_055;
   HEAP32[(($469)>>2)]=$T_0_c10;
   var $470=(($_0+12)|0);
   HEAP32[(($470)>>2)]=$_0;
   var $471=(($_0+8)|0);
   HEAP32[(($471)>>2)]=$_0;
   label = 135; break;
  case 129: 
   _abort();
   throw "Reached an unreachable!";
  case 130: 
   var $T_0_lcssa;
   var $473=(($T_0_lcssa+8)|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=$T_0_lcssa;
   var $476=HEAP32[((((10184)|0))>>2)];
   var $477=(($475)>>>(0)) < (($476)>>>(0));
   if ($477) { label = 133; break; } else { label = 131; break; }
  case 131: 
   var $479=$474;
   var $480=(($479)>>>(0)) < (($476)>>>(0));
   if ($480) { label = 133; break; } else { label = 132; break; }
  case 132: 
   var $482=(($474+12)|0);
   HEAP32[(($482)>>2)]=$398;
   HEAP32[(($473)>>2)]=$398;
   var $483=(($_0+8)|0);
   var $_c9=$474;
   HEAP32[(($483)>>2)]=$_c9;
   var $484=(($_0+12)|0);
   var $T_0_c=$T_0_lcssa;
   HEAP32[(($484)>>2)]=$T_0_c;
   var $485=(($_0+24)|0);
   HEAP32[(($485)>>2)]=0;
   label = 135; break;
  case 133: 
   _abort();
   throw "Reached an unreachable!";
  case 134: 
   _abort();
   throw "Reached an unreachable!";
  case 135: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($size)|(0))==0;
   var $_size=$1 ? 1 : $size;
   label = 2; break;
  case 2: 
   var $3=_malloc($_size);
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $6=(tempValue=HEAP32[((14192)>>2)],HEAP32[((14192)>>2)]=tempValue+0,tempValue);
   var $7=(($6)|(0))==0;
   if ($7) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $9=$6;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 5: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 7; break;
  case 6: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 7; break;
  case 7: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $11=$lpad_phi$1;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $14=$lpad_phi$0;
   ___cxa_call_unexpected($14);
   throw "Reached an unreachable!";
  case 9: 
   var $16=___cxa_allocate_exception(4);
   var $17=$16;
   HEAP32[(($17)>>2)]=(((2352)|0));
   (function() { try { __THREW__ = 0; return ___cxa_throw($16, 8424, (70)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 6; break; }
  case 10: 
   return $3;
  case 11: 
   ___resumeException($lpad_phi$0)
  case 12: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return $1;
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1); $4$1 = tempRet0;
   var $5=$4$1;
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $8=$4$0;
   ___cxa_call_unexpected($8);
   throw "Reached an unreachable!";
  case 5: 
   ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZdlPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($ptr)|(0))==0;
   if ($1) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _free($ptr);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr) {
 var label = 0;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 var label = 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 var label = 0;
 return ((1160)|0);
}
function __ZSt17__throw_bad_allocv() {
 var label = 0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=(((2352)|0));
 ___cxa_throw($1, 8424, (70));
 throw "Reached an unreachable!";
}
function _strtod($string, $endPtr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $p_0 = $string;label = 2; break;
  case 2: 
   var $p_0;
   var $2=HEAP8[($p_0)];
   var $3=(($2 << 24) >> 24);
   var $4=_isspace($3);
   var $5=(($4)|(0))==0;
   var $6=(($p_0+1)|0);
   if ($5) { label = 3; break; } else { var $p_0 = $6;label = 2; break; }
  case 3: 
   var $8=HEAP8[($p_0)];
   if ((($8 << 24) >> 24)==45) {
    label = 4; break;
   }
   else if ((($8 << 24) >> 24)==43) {
    label = 5; break;
   }
   else {
   var $p_2 = $p_0;var $sign_0 = 0;label = 6; break;
   }
  case 4: 
   var $p_2 = $6;var $sign_0 = 1;label = 6; break;
  case 5: 
   var $p_2 = $6;var $sign_0 = 0;label = 6; break;
  case 6: 
   var $sign_0;
   var $p_2;
   var $decPt_0 = -1;var $mantSize_0 = 0;var $p_3 = $p_2;label = 7; break;
  case 7: 
   var $p_3;
   var $mantSize_0;
   var $decPt_0;
   var $13=HEAP8[($p_3)];
   var $14=(($13 << 24) >> 24);
   var $15=((($14)-(48))|0);
   var $16=(($15)>>>(0)) < 10;
   if ($16) { var $decPt_1 = $decPt_0;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $18=(($13 << 24) >> 24)!=46;
   var $19=(($decPt_0)|(0)) > -1;
   var $or_cond=$18 | $19;
   if ($or_cond) { label = 10; break; } else { var $decPt_1 = $mantSize_0;label = 9; break; }
  case 9: 
   var $decPt_1;
   var $21=(($p_3+1)|0);
   var $22=((($mantSize_0)+(1))|0);
   var $decPt_0 = $decPt_1;var $mantSize_0 = $22;var $p_3 = $21;label = 7; break;
  case 10: 
   var $24=(((-$mantSize_0))|0);
   var $25=(($p_3+$24)|0);
   var $26=(($decPt_0)|(0)) < 0;
   var $not_=$26 ^ 1;
   var $27=(($not_ << 31) >> 31);
   var $mantSize_1=((($27)+($mantSize_0))|0);
   var $decPt_2=$26 ? $mantSize_0 : $decPt_0;
   var $28=(($mantSize_1)|(0)) > 18;
   var $29=(((-$mantSize_1))|0);
   var $fracExp_0_p=$28 ? -18 : $29;
   var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
   var $mantSize_2=$28 ? 18 : $mantSize_1;
   var $30=(($mantSize_2)|(0))==0;
   if ($30) { var $p_11 = $string;var $fraction_0 = 0;label = 37; break; } else { label = 11; break; }
  case 11: 
   var $31=(($mantSize_2)|(0)) > 9;
   if ($31) { var $p_418 = $25;var $mantSize_319 = $mantSize_2;var $frac1_020 = 0;label = 15; break; } else { label = 13; break; }
  case 12: 
   var $phitmp=(($42)|(0));
   var $phitmp25=($phitmp)*(1000000000);
   var $frac1_0_lcssa32 = $phitmp25;var $mantSize_3_lcssa33 = 9;var $p_4_lcssa34 = $p_5;label = 14; break;
  case 13: 
   var $32=(($mantSize_2)|(0)) > 0;
   if ($32) { var $frac1_0_lcssa32 = 0;var $mantSize_3_lcssa33 = $mantSize_2;var $p_4_lcssa34 = $25;label = 14; break; } else { var $frac2_0_lcssa = 0;var $frac1_0_lcssa31 = 0;label = 22; break; }
  case 14: 
   var $p_4_lcssa34;
   var $mantSize_3_lcssa33;
   var $frac1_0_lcssa32;
   var $p_611 = $p_4_lcssa34;var $mantSize_412 = $mantSize_3_lcssa33;var $frac2_013 = 0;label = 18; break;
  case 15: 
   var $frac1_020;
   var $mantSize_319;
   var $p_418;
   var $33=HEAP8[($p_418)];
   var $34=(($p_418+1)|0);
   var $35=(($33 << 24) >> 24)==46;
   if ($35) { label = 16; break; } else { var $c_0_in = $33;var $p_5 = $34;label = 17; break; }
  case 16: 
   var $37=HEAP8[($34)];
   var $38=(($p_418+2)|0);
   var $c_0_in = $37;var $p_5 = $38;label = 17; break;
  case 17: 
   var $p_5;
   var $c_0_in;
   var $c_0=(($c_0_in << 24) >> 24);
   var $40=((($frac1_020)*(10))&-1);
   var $41=((($40)-(48))|0);
   var $42=((($41)+($c_0))|0);
   var $43=((($mantSize_319)-(1))|0);
   var $44=(($43)|(0)) > 9;
   if ($44) { var $p_418 = $p_5;var $mantSize_319 = $43;var $frac1_020 = $42;label = 15; break; } else { label = 12; break; }
  case 18: 
   var $frac2_013;
   var $mantSize_412;
   var $p_611;
   var $46=HEAP8[($p_611)];
   var $47=(($p_611+1)|0);
   var $48=(($46 << 24) >> 24)==46;
   if ($48) { label = 19; break; } else { var $c_1_in = $46;var $p_7 = $47;label = 20; break; }
  case 19: 
   var $50=HEAP8[($47)];
   var $51=(($p_611+2)|0);
   var $c_1_in = $50;var $p_7 = $51;label = 20; break;
  case 20: 
   var $p_7;
   var $c_1_in;
   var $c_1=(($c_1_in << 24) >> 24);
   var $53=((($frac2_013)*(10))&-1);
   var $54=((($53)-(48))|0);
   var $55=((($54)+($c_1))|0);
   var $56=((($mantSize_412)-(1))|0);
   var $57=(($56)|(0)) > 0;
   if ($57) { var $p_611 = $p_7;var $mantSize_412 = $56;var $frac2_013 = $55;label = 18; break; } else { label = 21; break; }
  case 21: 
   var $phitmp26=(($55)|(0));
   var $frac2_0_lcssa = $phitmp26;var $frac1_0_lcssa31 = $frac1_0_lcssa32;label = 22; break;
  case 22: 
   var $frac1_0_lcssa31;
   var $frac2_0_lcssa;
   var $59=($frac1_0_lcssa31)+($frac2_0_lcssa);
   if ((($13 << 24) >> 24)==69 | (($13 << 24) >> 24)==101) {
    label = 23; break;
   }
   else {
   var $exp_1 = 0;var $p_10 = $p_3;var $expSign_1 = 0;label = 28; break;
   }
  case 23: 
   var $61=(($p_3+1)|0);
   var $62=HEAP8[($61)];
   if ((($62 << 24) >> 24)==45) {
    label = 24; break;
   }
   else if ((($62 << 24) >> 24)==43) {
    label = 25; break;
   }
   else {
   var $p_9_ph = $61;var $expSign_0_ph = 0;label = 26; break;
   }
  case 24: 
   var $64=(($p_3+2)|0);
   var $p_9_ph = $64;var $expSign_0_ph = 1;label = 26; break;
  case 25: 
   var $66=(($p_3+2)|0);
   var $p_9_ph = $66;var $expSign_0_ph = 0;label = 26; break;
  case 26: 
   var $expSign_0_ph;
   var $p_9_ph;
   var $67=HEAP8[($p_9_ph)];
   var $68=(($67 << 24) >> 24);
   var $69=((($68)-(48))|0);
   var $70=(($69)>>>(0)) < 10;
   if ($70) { var $p_95 = $p_9_ph;var $exp_06 = 0;var $71 = $68;label = 27; break; } else { var $exp_1 = 0;var $p_10 = $p_9_ph;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 27: 
   var $71;
   var $exp_06;
   var $p_95;
   var $72=((($exp_06)*(10))&-1);
   var $73=((($72)-(48))|0);
   var $74=((($73)+($71))|0);
   var $75=(($p_95+1)|0);
   var $76=HEAP8[($75)];
   var $77=(($76 << 24) >> 24);
   var $78=((($77)-(48))|0);
   var $79=(($78)>>>(0)) < 10;
   if ($79) { var $p_95 = $75;var $exp_06 = $74;var $71 = $77;label = 27; break; } else { var $exp_1 = $74;var $p_10 = $75;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 28: 
   var $expSign_1;
   var $p_10;
   var $exp_1;
   var $80=(($expSign_1)|(0))==0;
   var $81=(((-$exp_1))|0);
   var $exp_2_p=$80 ? $exp_1 : $81;
   var $exp_2=((($fracExp_0)+($exp_2_p))|0);
   var $82=(($exp_2)|(0)) < 0;
   var $83=(((-$exp_2))|0);
   var $exp_3=$82 ? $83 : $exp_2;
   var $84=(($exp_3)|(0)) > 511;
   if ($84) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $85=___errno_location();
   HEAP32[(($85)>>2)]=34;
   var $dblExp_01 = 1;var $d_02 = ((8)|0);var $exp_53 = 511;label = 31; break;
  case 30: 
   var $86=(($exp_3)|(0))==0;
   if ($86) { var $dblExp_0_lcssa = 1;label = 34; break; } else { var $dblExp_01 = 1;var $d_02 = ((8)|0);var $exp_53 = $exp_3;label = 31; break; }
  case 31: 
   var $exp_53;
   var $d_02;
   var $dblExp_01;
   var $87=$exp_53 & 1;
   var $88=(($87)|(0))==0;
   if ($88) { var $dblExp_1 = $dblExp_01;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $90=HEAPF64[(($d_02)>>3)];
   var $91=($dblExp_01)*($90);
   var $dblExp_1 = $91;label = 33; break;
  case 33: 
   var $dblExp_1;
   var $93=$exp_53 >> 1;
   var $94=(($d_02+8)|0);
   var $95=(($93)|(0))==0;
   if ($95) { var $dblExp_0_lcssa = $dblExp_1;label = 34; break; } else { var $dblExp_01 = $dblExp_1;var $d_02 = $94;var $exp_53 = $93;label = 31; break; }
  case 34: 
   var $dblExp_0_lcssa;
   var $96=(($exp_2)|(0)) > -1;
   if ($96) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $98=($59)/($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $98;label = 37; break;
  case 36: 
   var $100=($59)*($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $100;label = 37; break;
  case 37: 
   var $fraction_0;
   var $p_11;
   var $102=(($endPtr)|(0))==0;
   if ($102) { label = 39; break; } else { label = 38; break; }
  case 38: 
   HEAP32[(($endPtr)>>2)]=$p_11;
   label = 39; break;
  case 39: 
   var $105=(($sign_0)|(0))==0;
   if ($105) { var $_0 = $fraction_0;label = 41; break; } else { label = 40; break; }
  case 40: 
   var $107=(-$fraction_0);
   var $_0 = $107;label = 41; break;
  case 41: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold_l($nptr, $endptr, $loc) {
 var label = 0;
 var $1=_strtod($nptr, $endptr);
 return $1;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math.imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math.imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math.imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math.imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math.imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math.imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
var calledRun = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun && shouldRunNow) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + (new Error().stack);
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=test-ems.js.map